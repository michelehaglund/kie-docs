<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE book [
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">
<!ENTITY % DOCBOOK_ENTS PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/dbcentx.mod">
%DOCBOOK_ENTS;
]>
<?asciidoc-toc?><?asciidoc-numbered?><book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
<info>
<title>Integrating Red Hat Process Automation Manager with other products and components</title><subtitle>
</subtitle>

<date>2021-01-26</date>
<productname>Red Hat Process Automation Manager</productname>
<productnumber>7.10</productnumber>
<abstract>
	<para>This document describes how to integrate Red Hat Process Automation Manager with other products and components, such as Spring Boot, Red Hat Fuse, Red Hat Single Sign-On, and other supported products.</para>
</abstract>
<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Common_Content/Legal_Notice.xml"/>
</info>
<preface>
<title>Preface</title>
<simpara>As a developer or system administrator, you can integrate Red Hat Process Automation Manager with other products and components, such as Spring Boot, Red Hat Fuse, Red Hat Single Sign-On, and other supported products.</simpara>
</preface>
<preface xml:id="snip-conscious-language_integrating">
<title>Making open source more inclusive</title>
<simpara>Red Hat is committed to replacing problematic language in our code, documentation, and web properties. We are beginning with these four terms: master, slave, blacklist, and whitelist. Because of the enormity of this endeavor, these changes will be implemented gradually over several upcoming releases. For more details, see <link xlink:href="https://www.redhat.com/en/blog/making-open-source-more-inclusive-eradicating-problematic-language"><emphasis>our CTO Chris Wrightâ€™s message</emphasis></link>.</simpara>
</preface>
<part xml:id="assembly-springboot-business-apps">
<title>Creating Red Hat Process Automation Manager business applications with Spring Boot</title>
<partintro>
<simpara>As a developer, you can use Spring Boot starters through the <link xlink:href="https://start.jbpm.org">business applications</link> website to quickly create Red Hat Process Automation Manager business applications, configure those applications, and deploy them to an existing service or in the cloud.</simpara>
</partintro>
<chapter xml:id="bus_app_business-applications">
<title>Red Hat Process Automation Manager Spring Boot business applications</title>
<simpara>Spring Framework is a Java platform that provides comprehensive infrastructure support for developing Java applications. Spring Boot is a lightweight framework based on Spring Boot starters. Spring Boot starters are <literal>pom.xml</literal> files that contain a set of dependency descriptors that you can include in your Spring Boot project.</simpara>
<simpara>Red Hat Process Automation Manager Spring Boot business applications are flexible, UI-agnostic logical groupings of individual services that provide certain business capabilities. Business applications are based on Spring Boot starters. They are usually deployed separately and can be versioned individually. A complete business application enables a domain to achieve specific business goals, for example order management or accommodation management.</simpara>
<simpara>On the <link xlink:href="https://start.jbpm.org">business application</link> website you can create a Process Automation Manager, Decision Manager, or Business Optimizer business application. After you create and configure your business application, you can deploy it to an existing service or to the cloud, through OpenShift.</simpara>
<simpara>Business applications can contain one or more of the following projects and more than one project of the same type:</simpara>
<itemizedlist>
<listitem>
<simpara>Business assets (KJAR): Contains business processes, rules, and forms and are easily imported into Business Central.</simpara>
</listitem>
<listitem>
<simpara>Data model: Data model projects provide common data structures that are shared between the service projects and business assets projects. This enables proper encapsulation, promotes reuse, and reduces shortcuts. Each service project can expose its own public data model.</simpara>
</listitem>
<listitem>
<simpara>Service: A deployable project that provides the actual service with various capabilities. It includes the business logic that operates your business. In most cases, a service  project includes business assets and data model projects. A business application can split services into smaller component service projects for better manageability.</simpara>
</listitem>
</itemizedlist>
</chapter>
<chapter xml:id="bus-app-create_business-applications">
<title>Creating a business application</title>
<simpara>You can use the <link xlink:href="https://start.jbpm.org">business application</link> website to quickly and easily create business applications using the Spring Boot framework. Doing this by-passes the need to install and configure Red Hat Process Automation Manager.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Enter the following URL in a web browser:</simpara>
<screen>https://start.jbpm.org</screen>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Configure your business application</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Business Automation</emphasis> and click <emphasis role="strong">Next</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Enter a package and application name.</simpara>
</listitem>
<listitem>
<simpara>Select <emphasis role="strong">Enterprise 7.10</emphasis> from the <emphasis role="strong">Version</emphasis> menu and click <emphasis role="strong">Next</emphasis>.</simpara>
<note>
<simpara>You must select <emphasis role="strong">Enterprise 7.10</emphasis> to create a Red Hat Process Automation Manager business application.</simpara>
</note>
</listitem>
<listitem>
<simpara>Select the project types that you want to include in your project. You can include more than one project type.</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Business Assets</emphasis>: Contains business processes, rules, and forms and are easily imported into Business Central.  Select <emphasis role="strong">Dynamic Assets</emphasis> instead if you want to add adaptive and dynamic assets such as cases.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Data Model</emphasis>: Provides common data structures that are shared between the service projects and business assets projects. This enables proper encapsulation, promotes reuse, and reduces shortcuts. Each service project can expose its own public data model.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Service</emphasis>: Includes business logic that operates your business.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Generate business application</emphasis>.</simpara>
<simpara>The <literal>&lt;BUSINESS-APPLICATION&gt;.zip</literal> file downloads, where <literal>&lt;BUSINESS-APPLICATION&gt;</literal> is the name that you entered in the <emphasis role="strong">Application Name</emphasis> box.</simpara>
</listitem>
<listitem>
<simpara>Extract the <literal>&lt;BUSINESS-APPLICATION&gt;.zip</literal> file.</simpara>
</listitem>
</orderedlist>
</chapter>
<chapter xml:id="maven-con_business-applications">
<title>Apache Maven and Red Hat Process Automation Manager Spring Boot applications</title>
<simpara>Apache Maven is a distributed build automation tool used in Java application development to create, manage, and build software projects. Maven uses standard configuration files called Project Object Model (POM) files to define projects and manage the build process. POM files describe the module and component dependencies, build order, and targets for the resulting project packaging and output using an XML file. This ensures that the project is built in a correct and uniform manner.</simpara>
<simpara>A Maven repository stores Java libraries, plug-ins, and other build artifacts. The default public repository is the Maven 2 Central Repository, but repositories can be private and internal within a company to share common artifacts among development teams. Repositories are also available from third-parties.</simpara>
<simpara>You can use the online Maven repository with your Spring Boot projects or you can download the Red Hat Process Automation Manager Maven repository. The recommended approach is to use the online Maven repository with your Spring Boot projects. Maven settings used with a repository manager or repository on a shared server provide better control and manageability of projects.</simpara>
<section xml:id="online-maven-configure-proc_business-applications">
<title>Configuring a Red Hat Process Automation Manager Spring Boot project for the online Maven repository</title>
<simpara>After you create your Red Hat Process Automation Manager Spring Boot project, configure it with the online Maven Repository to store your application data.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have created a Red Hat Process Automation Manager Spring Boot project.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>In the directory that contains your Red Hat Process Automation Manager Spring Boot application, open the <literal>&lt;BUSINESS-APPLICATION&gt;-service/pom.xml</literal> file in a text editor or IDE, where <literal>&lt;BUSINESS-APPLICATION&gt;</literal> is the name of your Spring Boot project.</simpara>
</listitem>
<listitem>
<simpara>Add the following repository to the <literal>repositories</literal> element:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;repository&gt;
  &lt;id&gt;jboss-enterprise-repository-group&lt;/id&gt;
  &lt;name&gt;Red Hat JBoss Enterprise Maven Repository&lt;/name&gt;
  &lt;url&gt;https://maven.repository.redhat.com/ga/&lt;/url&gt;
  &lt;layout&gt;default&lt;/layout&gt;
  &lt;releases&gt;
    &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;
  &lt;/releases&gt;
  &lt;snapshots&gt;
    &lt;updatePolicy&gt;daily&lt;/updatePolicy&gt;
  &lt;/snapshots&gt;
&lt;/repository&gt;</programlisting>
</listitem>
<listitem>
<simpara>Add the following plug-in repository to the <literal>pluginRepositories</literal> element:</simpara>
<note>
<simpara>If your <literal>pom.xml</literal> file does not have the <literal>pluginRepositories</literal> element, add it as well.</simpara>
</note>
<programlisting language="xml" linenumbering="unnumbered">&lt;pluginRepository&gt;
  &lt;id&gt;jboss-enterprise-repository-group&lt;/id&gt;
  &lt;name&gt;Red Hat JBoss Enterprise Maven Repository&lt;/name&gt;
  &lt;url&gt;https://maven.repository.redhat.com/ga/&lt;/url&gt;
  &lt;layout&gt;default&lt;/layout&gt;
  &lt;releases&gt;
    &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;
  &lt;/releases&gt;
  &lt;snapshots&gt;
    &lt;updatePolicy&gt;daily&lt;/updatePolicy&gt;
  &lt;/snapshots&gt;
&lt;/pluginRepository&gt;</programlisting>
<simpara>Doing this adds the productized Maven repository to your business application.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="download-maven-proc_business-applications">
<title>Downloading and configuring the Red Hat Process Automation Manager Maven repository</title>
<simpara>If you do not want to use the online Maven repository, you can download and configure the Red Hat Process Automation Manager Maven repository. The Red Hat Process Automation Manager Maven repository contains many of the requirements that Java developers typically use to build their applications. This procedure describes how to edit the Maven <literal>settings.xml</literal> file to configure the Red Hat Process Automation Manager Maven repository.</simpara>
<note>
<simpara>When you configure the repository by modifying the Maven <literal>settings.xml</literal> file, the changes apply to all of your Maven projects.</simpara>
</note>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have created a Red Hat Process Automation Manager Spring Boot project.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html">Software Downloads</link> page in the Red Hat Customer Portal (login required), and select the following product and version from the drop-down options:</simpara>
<itemizedlist>
<listitem>
<simpara>Product: Red Hat Process Automation Manager</simpara>
</listitem>
<listitem>
<simpara>Version: 7.10</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Download <emphasis role="strong">Red Hat Process Automation Manager 7.10 Maven Repository</emphasis> (<literal>rhpam-7.10.0-maven-repository.zip</literal>).</simpara>
</listitem>
<listitem>
<simpara>Extract the downloaded archive.</simpara>
</listitem>
<listitem>
<simpara>Change to the <literal>~/.m2/</literal> directory and open the Maven <literal>settings.xml</literal> file in a text editor or integrated development environment (IDE).</simpara>
</listitem>
<listitem>
<simpara>Add the following lines to the <literal>&lt;profiles&gt;</literal> element of the Maven <literal>settings.xml</literal> file, where <literal><emphasis>&lt;MAVEN_REPOSITORY&gt;</emphasis></literal> is the path of the Maven repository that you downloaded. The format of <literal><emphasis>&lt;MAVEN_REPOSITORY&gt;</emphasis></literal> must be <literal>file://$PATH</literal>, for example <literal>file:///home/userX/rhpam-7.10.0.GA-maven-repository/maven-repository</literal>.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;profile&gt;
  &lt;id&gt;red-hat-enterprise-maven-repository&lt;/id&gt;
  &lt;repositories&gt;
    &lt;repository&gt;
      &lt;id&gt;red-hat-enterprise-maven-repository&lt;/id&gt;
      &lt;url&gt;MAVEN_REPOSITORY&lt;/url&gt;
      &lt;releases&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;
      &lt;/releases&gt;
      &lt;snapshots&gt;
        &lt;enabled&gt;false&lt;/enabled&gt;
      &lt;/snapshots&gt;
    &lt;/repository&gt;
  &lt;/repositories&gt;
  &lt;pluginRepositories&gt;
    &lt;pluginRepository&gt;
      &lt;id&gt;red-hat-enterprise-maven-repository&lt;/id&gt;
      &lt;url&gt;&lt;MAVEN_REPOSITORY&gt;&lt;/url&gt;
      &lt;releases&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;
      &lt;/releases&gt;
      &lt;snapshots&gt;
        &lt;enabled&gt;false&lt;/enabled&gt;
      &lt;/snapshots&gt;
    &lt;/pluginRepository&gt;
  &lt;/pluginRepositories&gt;
&lt;/profile&gt;</programlisting>
</listitem>
<listitem>
<simpara>Add the following lines to the <literal>&lt;activeProfiles&gt;</literal> element of the Maven <literal>settings.xml</literal> file and save the file.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;activeProfile&gt;red-hat-enterprise-maven-repository&lt;/activeProfile&gt;</programlisting>
</listitem>
</orderedlist>
<important>
<simpara>If your Maven repository contains outdated artifacts, you might encounter one of the following Maven error messages when you build or deploy your project, where <literal><emphasis>&lt;ARTIFACT_NAME&gt;</emphasis></literal> is the name of a missing artifact and <literal><emphasis>&lt;PROJECT_NAME&gt;</emphasis></literal> is the name of the project you are trying to build:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>Missing artifact <emphasis>&lt;PROJECT_NAME&gt;</emphasis></literal></simpara>
</listitem>
<listitem>
<simpara><literal>[ERROR] Failed to execute goal on project <emphasis>&lt;ARTIFACT_NAME&gt;</emphasis>; Could not resolve dependencies for <emphasis>&lt;PROJECT_NAME&gt;</emphasis></literal></simpara>
</listitem>
</itemizedlist>
<simpara>To resolve the issue, delete the cached version of your local repository located in the  <literal>~/.m2/repository</literal> directory to force a download of the latest Maven artifacts.</simpara>
</important>
</section>
</chapter>
<chapter xml:id="bus-app-security-con_business-applications">
<title>Spring Security with Red Hat Process Automation Manager</title>
<simpara>Spring Security is provided by a collection of servlet filters that make up the <link xlink:href="https://spring.io/projects/spring-security">Spring Security library</link>. These filters provide authentication through user names and passwords and authorization through roles. The default Spring Security implementation generated in a Red Hat Process Automation Manager Spring Boot application provides authorization without authentication. This means that anyone with a user name and password valid for the application can access the application without a role.</simpara>
<simpara>The servlet filters protect your Spring Boot application against common exploits such as cross-site request forgery (CSRF) and cross-origin resource sharing (CORS). Spring Web relies on the <link xlink:href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-servlet"><literal>DispatcherServlet</literal></link> to redirect incoming HTTP requests to your underlying java REST resources annotated with the <literal>@Controller</literal> annotation. The <literal>DispatchServlet</literal> is agnostic of elements such as security. It is good practice and more efficient to handle implementation details such a security outside of the business application logic. Therefore, Spring uses filters to intercept HTTP requests before routing them to the <literal>DispatchServlet</literal>.</simpara>
<simpara>A typical Spring Security implementation consists of the following steps that use multiple servlet filters:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Extract and decode or decrypt user credentials from the HTTP request.</simpara>
</listitem>
<listitem>
<simpara>Complete authentication by validating the credentials against the corporate identity provider, for example a database, a web service, or Red Hat Single Sign-On.</simpara>
</listitem>
<listitem>
<simpara>Complete authorization by determining whether the authorized user has access rights to perform the request.</simpara>
</listitem>
<listitem>
<simpara>If the user is authenticated and authorized, propagate the request to the <literal>DispatchServlet</literal>.</simpara>
</listitem>
</orderedlist>
<simpara>Spring breaks these steps down into individual filters and chains them together in a FilterChain. This chaining method provides the flexibility required to work with almost any identity provider and security framework. With Spring Security, you can define a FilterChain for your application programmatically. The following section is from the <literal>business-application-service/src/main/java/com/company/service/DefaultWebSecurityConfig.java</literal> file generated as part of a business application created on the <literal><link xlink:href="https://start.jbpm.org">https://start.jbpm.org</link></literal> web site.</simpara>
<programlisting language="java" linenumbering="unnumbered">@Configuration("kieServerSecurity")
@EnableWebSecurity
public class DefaultWebSecurityConfig extends WebSecurityConfigurerAdapter {

    @Override (1)
    protected void configure(HttpSecurity http) throws Exception {
        http
                .cors().and()
                .csrf().disable()       (2)
                .authorizeRequests()    (3)
                .antMatchers("/rest/*").authenticated().and()
                .httpBasic().and()      (4)
                .headers().frameOptions().disable();    (5)
    }</programlisting>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">(1)</emphasis> Overrides the default <literal>configure(HttpSecurity  http)</literal> method and defines a custom FilterChain using the Spring HttpClient fluent API/DSL</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">(2)</emphasis> Disables common exploit filters for CORS and CSRF tokens for local testing</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">(3)</emphasis> Requires authentication for any requests made to the pattern 'rest/*' but no roles are defined</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">(4)</emphasis> Allows basic authentication through the authorization header, for example header 'Authorization: Basic dGVzdF91c2VyOnBhc3N3b3Jk'</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">(5)</emphasis> Removes the 'X-Frame-Options' header from request/response</simpara>
</listitem>
</itemizedlist>
<simpara>This configuration allows any authenticated user to execute the KIE API.</simpara>
<simpara>Because the default implementation is not integrated into any external identity provider, users are defined in memory, in the same <literal>DefaultWebSecurityConfg</literal> class. The following section shows the users that are provided when you create a Red Hat Process Automation Manager Spring Boot business application:</simpara>
<programlisting language="java" linenumbering="unnumbered">    @Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication().withUser("user").password("user").roles("kie-server");
        auth.inMemoryAuthentication().withUser("wbadmin").password("wbadmin").roles("admin");
        auth.inMemoryAuthentication().withUser("kieserver").password("kieserver1!").roles("kie-server");
    }</programlisting>
<section xml:id="bus-app-security-authorization-proc_business-applications">
<title>Using Spring Security to authenticate with authorization</title>
<simpara>By default, anyone with a user name and password valid for the Red Hat Process Automation Manager Spring Boot application can access the application without requiring a role. Spring Security authentication and authorization are derived from the <literal>HTTPSecurity</literal> filter chain configuration. To protect the REST API from users that do not have a specific role mapping, use the Spring Security  <literal>.authorizeRequests()</literal> method to match the URLs that you want to authorize.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have a Red Hat Process Automation Manager Spring Boot application.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>In the directory that contains your Red Hat Process Automation Manager Spring Boot application, open the <literal>business-application-service/src/main/java/com/company/service/DefaultWebSecurityConfig.java</literal> file in a text editor or IDE.</simpara>
</listitem>
<listitem>
<simpara>To authorize requests for access by an authenticated user only if they have a specific role, edit the <literal>.antMatchers("/rest/*").authenticated().and()</literal> line in one of the following ways:</simpara>
<itemizedlist>
<listitem>
<simpara>To authorize for a single role, edit the <literal>antMatchers</literal> method as shown in the following example, where <literal>&lt;role&gt;</literal> is the role that that the user must have for access:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Configuration("kieServerSecurity")
@EnableWebSecurity
public class DefaultWebSecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .cors().and().csrf().disable()
            .authorizeRequests()
                .antMatchers("/**").hasRole("&lt;role&gt;")
                .anyRequest().authenticated()
            .and().httpBasic()
            .and().headers().frameOptions().disable();
    }
    ...</programlisting>
</listitem>
<listitem>
<simpara>To authorize a user that has one of a range of roles, edit the <literal>antMatchers</literal> method as shown in the following example, where <literal>&lt;role&gt;</literal> and <literal>&lt;role1&gt;</literal> are each roles the user can have for access:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Configuration("kieServerSecurity")
@EnableWebSecurity
public class DefaultWebSecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .cors().and().csrf().disable()
            .authorizeRequests()
                .antMatchers("/**").hasAnyRole("&lt;role&gt;", "&lt;role1")
                .anyRequest().authenticated()
            .and().httpBasic()
            .and().headers().frameOptions().disable();
    }
    ...</programlisting>
</listitem>
</itemizedlist>
</listitem>
</orderedlist>
<simpara>The <literal>authorizeRequests</literal> method requires authorization of requests for a specific expression. All requests must be successfully authenticated. Authentication is performed using HTTP basic authentication. If an authenticated user tries to access a resource that is protected for a role that they do not have, the user receives an <literal>HTTP 403 (Forbidden)</literal> error.</simpara>
</section>
<section xml:id="bus-app-security-disabling-proc_business-applications">
<title>Disabling Spring Security in a Red Hat Process Automation Manager business application</title>
<simpara>You can configure Spring Security in a Red Hat Process Automation Manager business application to provide the security context without authentication.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have a Red Hat Process Automation Manager Spring Boot application.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>In the directory that contains your Red Hat Process Automation Manager Spring Boot application, open the <literal>business-application-service/src/main/java/com/company/service/DefaultWebSecurityConfig.java</literal> file in a text editor or integrated development environment (IDE).</simpara>
</listitem>
<listitem>
<simpara>Edit the <literal>.antMatchers</literal> method as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">    @Override
    protected void configure(HttpSecurity http) throws Exception {

                http
                    .cors().and().csrf().disable()
                    .authorizeRequests()
                    .antMatchers("/*")
                        .permitAll()
                    .and().headers().frameOptions().disable();

    }</programlisting>
<simpara>The <literal>PermitAll</literal> method allows any and all requests for the specified URL pattern.</simpara>
</listitem>
</orderedlist>
<note>
<simpara>Because no security context is passed in the <literal>HttpServletRequest</literal>, Spring  creates an <literal>AnonymousAuthenticationToken</literal>
and populates the <literal>SecurityContext</literal> with the <literal>anonymousUser</literal> user with no designated roles other than the <literal>ROLE_ANONYMOUS</literal> role. The user will not have access to many of the features of the application, for example they will be unable to assign actions to group assigned tasks.</simpara>
</note>
</section>
<section xml:id="bus-app-security-preauthenticate-proc_business-applications">
<title>Using Spring Security with preauthenication</title>
<simpara>If you disable Spring Security authentication by using the <literal>PermitAll</literal> method, any user can log in to the application, but users will have limited access and functionality. However, you can preauthenticate a user, for example a designated service account, so a group of users can use the same login but have all of the permissions that they require. That way, you do not need to create credentials for each user.</simpara>
<simpara>The easiest way to implement preauthentication is to create a custom filter servlet and add it before the security FilterChain in the <literal>DefaultWebSecurityConfig</literal> class. This way, you can inject a customized, profile-based security context, control its contents, and keep it simple.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have a Red Hat Process Automation Manager Spring Boot application and you have disabled Spring Security as <xref linkend="bus-app-security-disabling-proc_business-applications"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create the following class that extends the <literal>AnonymousAuthenticationFilter</literal> class:</simpara>
<programlisting language="java" linenumbering="unnumbered">import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.AnonymousAuthenticationFilter;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class &lt;CLASS_NAME&gt; extends AnonymousAuthenticationFilter {
    private static final Logger log = LoggerFactory.getLogger(&lt;CLASS_NAME&gt;.class);

    public AnonymousAuthFilter() {
        super("PROXY_AUTH_FILTER");
    }

    @Override
    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)
            throws IOException, ServletException {

        SecurityContextHolder.getContext().setAuthentication(createAuthentication((HttpServletRequest) req));
        log.info("SecurityContextHolder pre-auth user: {}",  SecurityContextHolder.getContext());

        if (log.isDebugEnabled()) {
            log.debug("Populated SecurityContextHolder with authenticated user: {}",
                    SecurityContextHolder.getContext().getAuthentication());
        }

        chain.doFilter(req, res);
    }

    @Override
    protected Authentication createAuthentication(final HttpServletRequest request)
            throws AuthenticationException {

        log.info("&lt;ANONYMOUS_USER&gt;");


        List&lt;? extends GrantedAuthority&gt; authorities = Collections
                .unmodifiableList(Arrays.asList(new SimpleGrantedAuthority("&lt;ROLE&gt;")
                ));
        return new AnonymousAuthenticationToken("ANONYMOUS", "&lt;ANONYMOUS_USER&gt;", authorities);
    }

}</programlisting>
</listitem>
<listitem>
<simpara>Replace the following variables:</simpara>
<itemizedlist>
<listitem>
<simpara>Replace <literal>&lt;CLASS_NAME&gt;</literal> with a name for this class, for example <literal>AnonymousAuthFilter</literal>.</simpara>
</listitem>
<listitem>
<simpara>Replace <literal>&lt;ANONYMOUS_USER&gt;</literal> with a user ID, for example <literal>Service_Group</literal>.</simpara>
</listitem>
<listitem>
<simpara>Replace <literal>&lt;ROLE&gt;</literal> with the role that has the privileges that you want to give to <literal>&lt;ANONYMOUS_USER&gt;</literal>.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>If you want to give <literal>&lt;ANONYMOUS_USER&gt;</literal> more than one role, add additional roles as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">.unmodifiableList(Arrays.asList(new SimpleGrantedAuthority("&lt;ROLE&gt;")
, new SimpleGrantedAuthority("&lt;ROLE2&gt;")</programlisting>
</listitem>
<listitem>
<simpara>Add <literal>.anonymous().authenticationFilter(new &lt;CLASS_NAME&gt;()).and()</literal>  to the <literal>business-application-service/src/main/java/com/company/service/DefaultWebSecurityConfig.java</literal> file, where <literal>&lt;CLASS_NAME&gt;</literal> is the name of the class that you created:</simpara>
<programlisting language="java" linenumbering="unnumbered">    @Override
    protected void configure(HttpSecurity http) throws Exception {

                http
                    .anonymous().authenticationFilter(new &lt;CLASS_NAME&gt;()).and() // Override anonymousUser
                    .cors().and().csrf().disable()
                    .authorizeRequests()
                    .antMatchers("/*").permitAll()
                    .and().headers().frameOptions().disable();

    }</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="bus-app-rh-sso_business-applications">
<title>Configuring the business application with Red Hat Single Sign-On</title>
<simpara>Most organizations provide user and group details through single sign-on (SSO) tokens. You can use Red Hat Single Sign-On (RHSSO) to enable single sign-on between your services and to have a central place to configure and manage your users and roles.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have a Spring Boot application ZIP file that you created using the <link xlink:href="http://start.jbpm.org">business applications</link> website.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Download and install RHSSO. For instructions, see the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.4/html/getting_started_guide/"><emphasis>Red Hat Single Sign-On Getting Started Guide</emphasis></link>.</simpara>
</listitem>
<listitem>
<simpara>Configure RHSSO:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Either use the default master realm or create a new realm.</simpara>
<simpara>A realm manages a set of users, credentials, roles, and groups. A user belongs to and logs into a realm. Realms are isolated from one another and can only manage and authenticate the users that they control.</simpara>
</listitem>
<listitem>
<simpara>Create the <literal>springboot-app</literal> client and set the <literal>AccessType</literal> to public.</simpara>
</listitem>
<listitem>
<simpara>Set a valid redirect URI and web origin according to your local setup, as shown in the following example:</simpara>
<itemizedlist>
<listitem>
<simpara>Valid redirect URIs: <literal>http://localhost:8090/*</literal></simpara>
</listitem>
<listitem>
<simpara>Web origin: <literal>http://localhost:8090</literal></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Create realm roles that are used in the application.</simpara>
</listitem>
<listitem>
<simpara>Create users that are used in the application and assign roles to them.</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>Add the following element and property to the Spring Boot project <literal>pom.xml</literal> file, where <literal>&lt;KEYCLOAK_VERSION&gt;</literal> is the version of Keycloak that you are using:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;properties&gt;
  &lt;version.org.keycloak&gt;&lt;KEYCLOAK_VERSION&gt;&lt;/version.org.keycloak&gt;
&lt;/properties&gt;</programlisting>
</listitem>
<listitem>
<simpara>Add the following dependencies to the Spring Boot project <literal>pom.xml</literal> file:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependencyManagement&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.keycloak.bom&lt;/groupId&gt;
      &lt;artifactId&gt;keycloak-adapter-bom&lt;/artifactId&gt;
      &lt;version&gt;${version.org.keycloak}&lt;/version&gt;
      &lt;type&gt;pom&lt;/type&gt;
      &lt;scope&gt;import&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;

  ....

&lt;dependency&gt;
  &lt;groupId&gt;org.keycloak&lt;/groupId&gt;
  &lt;artifactId&gt;keycloak-spring-boot-starter&lt;/artifactId&gt;
&lt;/dependency&gt;</programlisting>
</listitem>
<listitem>
<simpara>In your Spring Boot project directory, open the <literal>business-application-service/src/main/resources/application.properties</literal> file and add the following lines:</simpara>
<screen># keycloak security setup
keycloak.auth-server-url=http://localhost:8100/auth
keycloak.realm=master
keycloak.resource=springboot-app
keycloak.public-client=true
keycloak.principal-attribute=preferred_username
keycloak.enable-basic-auth=true</screen>
</listitem>
<listitem>
<simpara>Modify the <literal>business-application-service/src/main/java/com/company/service/DefaultWebSecurityConfig.java</literal> file to ensure that Spring Security works correctly with RHSSO:</simpara>
<programlisting language="java" linenumbering="unnumbered">import org.keycloak.adapters.KeycloakConfigResolver;
import org.keycloak.adapters.springboot.KeycloakSpringBootConfigResolver;
import org.keycloak.adapters.springsecurity.authentication.KeycloakAuthenticationProvider;
import org.keycloak.adapters.springsecurity.config.KeycloakWebSecurityConfigurerAdapter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.authority.mapping.SimpleAuthorityMapper;
import org.springframework.security.core.session.SessionRegistryImpl;
import org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy;
import org.springframework.security.web.authentication.session.SessionAuthenticationStrategy;

@Configuration("kieServerSecurity")
@EnableWebSecurity
public class DefaultWebSecurityConfig extends KeycloakWebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        super.configure(http);
        http
        .csrf().disable()
        .authorizeRequests()
            .anyRequest().authenticated()
            .and()
        .httpBasic();
    }

    @Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
        KeycloakAuthenticationProvider keycloakAuthenticationProvider = keycloakAuthenticationProvider();
        SimpleAuthorityMapper mapper = new SimpleAuthorityMapper();
        mapper.setPrefix("");
        keycloakAuthenticationProvider.setGrantedAuthoritiesMapper(mapper);
        auth.authenticationProvider(keycloakAuthenticationProvider);
    }

    @Bean
    public KeycloakConfigResolver KeycloakConfigResolver() {
       return new KeycloakSpringBootConfigResolver();
    }

    @Override
    protected SessionAuthenticationStrategy sessionAuthenticationStrategy() {
        return new RegisterSessionAuthenticationStrategy(new SessionRegistryImpl());
    }
}</programlisting>
</listitem>
</orderedlist>
</section>
</chapter>
<chapter xml:id="bus-app-configure-con_business-applications">
<title>Red Hat Process Automation Manager Spring Boot configuration</title>
<simpara>After you create your Spring Boot project, you can configure several components to customize your application.</simpara>
<section xml:id="bus-app-con-rest-proc_business-applications">
<title>Configuring REST endpoints for Spring Boot applications</title>
<simpara>After you create your Spring Boot project, you can configure  the host, port, and path for the REST endpoint for your Spring Boot application.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have a ZIP file that you created using the <link xlink:href="http://start.jbpm.org">business application</link>  website.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Extract the Spring Boot project ZIP file and navigate to the <literal>&lt;BUSINESS-APPLICATION&gt;/&lt;BUSINESS-APPLICATION&gt;-service/src/main/resources</literal> folder, where <literal>&lt;BUSINESS-APPLICATION&gt;</literal> is the name of your Spring Boot project.</simpara>
</listitem>
<listitem>
<simpara>Open the <literal>application.properties</literal> file in a text editor.</simpara>
</listitem>
<listitem>
<simpara>Configure the host, port, and path for the REST endpoints, where <literal>&lt;ADDRESS&gt;</literal> is the server address and <literal>&lt;PORT&gt;</literal> is the server port:</simpara>
<programlisting language="bash" linenumbering="unnumbered">server.address=&lt;ADDRESS&gt;
server.port=&lt;PORT&gt;
cxf.path=/rest</programlisting>
<simpara>The following example adds the REST endpoint to the address <literal>localhost</literal> on port <literal>8090</literal>.</simpara>
<programlisting language="bash" linenumbering="unnumbered">server.address=localhost
server.port=8090
cxf.path=/rest</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="bus-app-config-kie-server-proc_business-applications">
<title>Configuring the KIE Server identity</title>
<simpara>After you create your Spring Boot project, you can configure KIE Server so that it can be easily identified.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have a Spring Boot business application ZIP file that you created using the <link xlink:href="http://start.jbpm.org">business application</link>  website.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Extract the Spring Boot project ZIP file and navigate to the <literal>&lt;BUSINESS-APPLICATION&gt;/&lt;BUSINESS-APPLICATION&gt;-service/src/main/resources</literal> folder, where <literal>&lt;BUSINESS-APPLICATION&gt;</literal> is the name of your Spring Boot project.</simpara>
</listitem>
<listitem>
<simpara>Open the <literal>application.properties</literal> file in a text editor.</simpara>
</listitem>
<listitem>
<simpara>Configure the KIE Server parameters as shown in the following example:</simpara>
<programlisting language="bash" linenumbering="unnumbered">kieserver.serverId=&lt;BUSINESS-APPLICATION&gt;-service
kieserver.serverName=&lt;BUSINESS-APPLICATION&gt;-service
kieserver.location=http://localhost:8090/rest/server
kieserver.controllers=http://localhost:8080/business-central/rest/controller</programlisting>
<simpara>The following table describes the KIE Server parameters that you can configure in your business project:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>kieserver parameters</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="30*"/>
<colspec colname="col_2" colwidth="15*"/>
<colspec colname="col_3" colwidth="55*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Values</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>kieserver.serverId</literal></simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>The ID used to identify the business application when connecting to the Process Automation Manager controller.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>kieserver.serverName</literal></simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>The name used to identify the business application when it connects to the Process Automation Manager controller. Can be the same string used for the <literal>kieserver.serverId</literal> parameter.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>kieserver.location</literal></simpara></entry>
<entry align="left" valign="top"><simpara>URL</simpara></entry>
<entry align="left" valign="top"><simpara>Used by other components that use the REST API to identify the location of this server. Do not use the location as defined by <literal>server.address</literal> and <literal>server.port</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>kieserver.controllers</literal></simpara></entry>
<entry align="left" valign="top"><simpara>URLs</simpara></entry>
<entry align="left" valign="top"><simpara>A comma-separated list of controller URLs.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</listitem>
</orderedlist>
</section>
<section xml:id="spring-boot-kafka-proc_business-applications">
<title>Integrating Apache Kafka with your Red Hat Process Automation Manager Spring Boot project</title>
<simpara>Apache Kafka is a distributed data streaming platform that can publish, subscribe to, store, and process streams of records in real time. It is designed to handle data streams from multiple sources and deliver them to multiple consumers. Apache Kafka is an alternative to a traditional enterprise messaging system.</simpara>
<simpara>You can integrate Apache Kafka with your Red Hat Process Automation Manager Spring Boot project.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have an existing Red Hat Process Automation Manager Spring Boot project.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>In your Spring Boot project directory, open the <literal>business-application-service/src/main/resources/application.properties</literal> file.</simpara>
</listitem>
<listitem>
<simpara>Add the <literal>kieserver.kafka.enabled</literal> system property with value <literal>true</literal>:</simpara>
<programlisting language="bash" linenumbering="unnumbered">kieserver.kafka.enabled=true</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="bus-app-configure-central-proc_business-applications">
<title>Configuring Business Central components to start at runtime</title>
<simpara>If you selected <emphasis role="strong">Business Automation</emphasis> when you created your Spring Boot business application, you can specify which Business Central components will start at runtime.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have a Spring Boot business application ZIP file that you created using the <link xlink:href="http://start.jbpm.org">business application</link>  website.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Extract the Spring Boot project ZIP file and navigate to the <literal>&lt;BUSINESS-APPLICATION&gt;/&lt;BUSINESS-APPLICATION&gt;-service/src/main/resources</literal> folder, where <literal>&lt;BUSINESS-APPLICATION&gt;</literal> is the name of your Spring Boot project.</simpara>
</listitem>
<listitem>
<simpara>Open the <literal>application.properties</literal> file in a text editor.</simpara>
</listitem>
<listitem>
<simpara>To set a component to start at runtime, set the value of the component to <literal>true.</literal></simpara>
<simpara>The following table lists the components that you can set to start at runtime:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title><literal>kieserver</literal> capabilities parameters</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="30*"/>
<colspec colname="col_2" colwidth="15*"/>
<colspec colname="col_3" colwidth="55*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Values</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>kieserver.drools.enabled</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true, false</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Enables or disables the Decision Manager component.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>kieserver.dmn.enabled</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true, false</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Enables or disables the Decision Model and Notation (DMN) component.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>kieserver.jbpm.enabled</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true, false</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Enables or disables the Red Hat Process Automation Manager component.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>kieserver.jbpmui.enabled</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true, false</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Enables or disables the Red Hat Process Automation Manager UI component.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>kieserver.casemgmt.enabled</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true, false</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Enables or disables the case management component.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</listitem>
</orderedlist>
</section>
<section xml:id="bus-app-async-execution-proc_business-applications">
<title>Configuring your Spring Boot application for asynchronous execution</title>
<simpara>After you create your Spring Boot project, you can use the <literal>jbpm.executor</literal> parameters to enable asynchronous execution.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have a Spring Boot business application ZIP file that you created using the <link xlink:href="http://start.jbpm.org">business application</link>  website.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Extract the Spring Boot project ZIP file and navigate to the <literal>&lt;BUSINESS-APPLICATION&gt;/&lt;BUSINESS-APPLICATION&gt;-service/src/main/resources</literal> folder, where <literal>&lt;BUSINESS-APPLICATION&gt;</literal> is the name of your Spring Boot project.</simpara>
</listitem>
<listitem>
<simpara>Open the <literal>application.properties</literal> file in a text editor.</simpara>
</listitem>
<listitem>
<simpara>To enable asynchronous execution, set the value of the <literal>jbpm.executor.enabled</literal> parameter to <literal>true</literal>, uncomment the other <literal>jbpm.executor</literal> parameters, and change the values as required, as shown in the following example:</simpara>
<programlisting language="bash" linenumbering="unnumbered">jbpm.executor.enabled=true
jbpm.executor.retries=5
jbpm.executor.interval=0
jbpm.executor.threadPoolSize=1
jbpm.executor.timeUnit=SECONDS</programlisting>
<simpara>The following table describes the executor parameters that you can configure in your business project:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Executor parameters</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="30*"/>
<colspec colname="col_2" colwidth="15*"/>
<colspec colname="col_3" colwidth="55*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Values</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>jbpm.executor.enabled</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true, false</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Disables or enables the executor component.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>jbpm.executor.retries</literal></simpara></entry>
<entry align="left" valign="top"><simpara>integer</simpara></entry>
<entry align="left" valign="top"><simpara>Specifies the number of retries if errors occur while a job is running.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>jbpm.executor.interval</literal></simpara></entry>
<entry align="left" valign="top"><simpara>integer</simpara></entry>
<entry align="left" valign="top"><simpara>Specifies the length of time that the executor uses to synchronize with the database. The unit of time is specified by the <literal>jbpm.executor.timeUnit</literal> parameter. Disabled by default (value <literal>0</literal>).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>jbpm.executor.threadPoolSize</literal></simpara></entry>
<entry align="left" valign="top"><simpara>integer</simpara></entry>
<entry align="left" valign="top"><simpara>Specifies the thread pool size.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>jbpm.executor.timeUnit</literal></simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>Specifies the time unit used to calculate the interval that the executor uses to synchronize with the database. The value must be a valid constant of <literal>java.util.concurrent.TimeUnit</literal>. The default value is <literal>SECONDS</literal>.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</listitem>
</orderedlist>
</section>
<section xml:id="bus-app-quartz_business-applications">
<title>Configuring the business application for a cluster using Quartz</title>
<simpara>If you plan to run your application in a cluster, you must configure the Quartz timer service.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have a ZIP file that you created using the <link xlink:href="http://start.jbpm.org">business application</link> website, that you want to use in a cluster.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create the <literal>quartz.properties</literal> fileÂ and add the following content:</simpara>
<programlisting language="bash" linenumbering="unnumbered">#============================================================================
# Configure Main Scheduler Properties
#============================================================================
org.quartz.scheduler.instanceName = SpringBootScheduler
org.quartz.scheduler.instanceId = AUTO
org.quartz.scheduler.skipUpdateCheck=true
org.quartz.scheduler.idleWaitTime=1000
#============================================================================
# Configure ThreadPool
#============================================================================
org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool
org.quartz.threadPool.threadCount = 5
org.quartz.threadPool.threadPriority = 5
#============================================================================
# Configure JobStore
#============================================================================
org.quartz.jobStore.misfireThreshold = 60000
org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreCMT
org.quartz.jobStore.driverDelegateClass=org.jbpm.process.core.timer.impl.quartz.DeploymentsAwareStdJDBCDelegate
org.quartz.jobStore.useProperties=false
org.quartz.jobStore.dataSource=myDS
org.quartz.jobStore.nonManagedTXDataSource=notManagedDS
org.quartz.jobStore.tablePrefix=QRTZ_
org.quartz.jobStore.isClustered=true
org.quartz.jobStore.clusterCheckinInterval = 5000
#============================================================================
# Configure Datasources
#============================================================================
org.quartz.dataSource.myDS.connectionProvider.class=org.jbpm.springboot.quartz.SpringConnectionProvider
org.quartz.dataSource.myDS.dataSourceName=quartzDataSource
org.quartz.dataSource.notManagedDS.connectionProvider.class=org.jbpm.springboot.quartz.SpringConnectionProvider
org.quartz.dataSource.notManagedDS.dataSourceName=quartzNotManagedDataSource</programlisting>
<note>
<simpara>Data source names in the Quartz configuration file refer to Spring beans. The connection provider must be set to <literal>org.jbpm.springboot.quartz.SpringConnectionProvider</literal>
to enable integration with Spring-based data sources.</simpara>
</note>
</listitem>
<listitem>
<simpara>To enable the Quartz clustered timers and set the path of the <literal>quartz.properties</literal> file that you created in the previous step, include the following properties in the <literal>&lt;BUSINESS-APPLICATION&gt;/&lt;BUSINESS-APPLICATION&gt;-service/src/main/resourcesapplication.properties</literal> file, where <literal>&lt;BUSINESS-APPLICATION&gt;</literal> is the name of your Spring Boot project.</simpara>
<programlisting language="bash" linenumbering="unnumbered">jbpm.quartz.enabled=true
jbpm.quartz.configuration=quartz.properties</programlisting>
</listitem>
<listitem>
<simpara>Create a managed and an unmanaged data source by adding the following content to the <literal>&lt;BUSINESS-APPLICATION&gt;/&lt;BUSINESS-APPLICATION&gt;-service/src/main/resources/application.properties</literal> file:</simpara>
<programlisting language="bash" linenumbering="unnumbered"># enable to use database as storage
jbpm.quartz.db=true

quartz.datasource.name=quartz
quartz.datasource.username=sa
quartz.datasource.password=sa
quartz.datasource.url=jdbc:h2:./target/spring-boot-jbpm;MVCC=true
quartz.datasource.driver-class-name=org.h2.Driver

# used to configure connection pool
quartz.datasource.dbcp2.maxTotal=15

# used to initialize quartz schema
quartz.datasource.initialization=true
spring.datasource.schema=classpath*:&lt;QUARTZ_TABLES_H2&gt;.sql
spring.datasource.initialization-mode=always</programlisting>
<simpara>In the preceding example, replace <literal>&lt;QUARTZ_TABLES_H2&gt;</literal> with the name of a Quartz H2 database schema script. The last three lines of the preceding configuration initialize the
database schema.</simpara>
</listitem>
</orderedlist>
<simpara>By default, Quartz requires two data sources:</simpara>
<itemizedlist>
<listitem>
<simpara>Managed data source to participate in the transaction of the decision engine
or process engine</simpara>
</listitem>
<listitem>
<simpara>Unmanaged data source to look up timers to trigger without any transaction handling</simpara>
</listitem>
</itemizedlist>
<simpara>Red Hat Process Automation Manager business applications assume that the Quartz database (schema) will be co-located with Red Hat Process Automation Manager tables and therefore produce data sources used for transactional operations for Quartz.</simpara>
<simpara>The other (non transactional) data source must be configured but it should point
to the same database as the main data source.</simpara>
</section>
<section xml:id="bus-app-user-group_business-applications">
<title>Configuring business application user group providers</title>
<simpara>With Red Hat Process Automation Manager, you can manage human-centric activities. To provide integration with user and group repositories, you can use two KIE API entry points:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>UserGroupCallback</literal>: Responsible for verifying whether a user or group exists and for collecting groups for a specific user</simpara>
</listitem>
<listitem>
<simpara><literal>UserInfo</literal>: Responsible for collecting additional information about users and groups, for example email addresses and preferred language</simpara>
</listitem>
</itemizedlist>
<simpara>You can configure both of these components by providing alternative code, either code provided out of the box or custom developed code.</simpara>
<simpara>For the <literal>UserGroupCallback</literal> component, retain the default implementation because it is based on the security context of the application. For this reason, it does not matter which backend store is used for authentication and authorisation (for example, RH-SSO). It will be automatically used as a source of information for collecting user and group information.</simpara>
<simpara>The <literal>UserInfo</literal> component is a separate component because it collects more advanced information.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have a ZIP file that you created using the <link xlink:href="http://start.jbpm.org">business application</link> website and that contains a business automation project.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>To provide an alternative implementation of <literal>UserGroupCallback</literal>, add the following code to the Application class or a separate class annotated with <literal>@Configuration</literal>:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Bean(name = "userGroupCallback")
public UserGroupCallback userGroupCallback(IdentityProvider identityProvider) throws IOException {
    return new MyCustomUserGroupCallback(identityProvider);
}</programlisting>
</listitem>
<listitem>
<simpara>To provide an alternative implementation of <literal>UserInfo</literal>, add the following code to the Application class or a separate class annotated with <literal>@Configuration</literal>:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Bean(name = "userInfo")
public UserInfo userInfo() throws IOException {
    return new MyCustomUserInfo();
}</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="bus-app-config-data-source_business-applications">
<title>Configuring a Spring Boot project with a MySQL or PostgreSQL database</title>
<simpara>Red Hat Process Automation Manager business applications are generated with the default H2 database. You can change the database type to MySQL or PostgreSQL.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have a Spring Boot application  file that you created using the <link xlink:href="http://start.jbpm.org">business applications</link> website.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Extract the Spring Boot project ZIP file and navigate to the <literal>&lt;BUSINESS-APPLICATION&gt;/&lt;BUSINESS-APPLICATION&gt;-service/src/main/resources</literal> folder, where <literal>&lt;BUSINESS-APPLICATION&gt;</literal> is the name of your Spring Boot project.</simpara>
</listitem>
<listitem>
<simpara>Open the <literal>application.properties</literal> file in a text editor.</simpara>
</listitem>
<listitem>
<simpara>Configure your Spring Boot project to use a MySQL or PostgreSQL, complete one of the following set of steps:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>To configure your business application to use a MySQL database, locate the following parameters in the <literal>application.properties</literal> file and change the values as shown:</simpara>
<programlisting language="bash" linenumbering="unnumbered">spring.datasource.username=jbpm
spring.datasource.password=jbpm
spring.datasource.url=jdbc:mysql://localhost:3306/jbpm
spring.datasource.driver-class-name=com.mysql.jdbc.jdbc2.optional.MysqlXADataSource

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect</programlisting>
</listitem>
<listitem>
<simpara>To configure your business application to use a PostgreSQL database, locate the following parameters in the <literal>application.properties</literal> file and change the values as shown:</simpara>
<programlisting language="bash" linenumbering="unnumbered">spring.datasource.username=jbpm
spring.datasource.password=jbpm
spring.datasource.url=jdbc:postgresql://localhost:5432/jbpm
spring.datasource.driver-class-name=org.postgresql.xa.PGXADataSource

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect</programlisting>
<note>
<simpara>To create a PostgreSQL schema that uses the <literal>bytea</literal> column type instead of the <literal>oid</literal> column type, set the value of the <literal>org.kie.persistence.postgresql.useBytea</literal> property to <literal>true</literal>:</simpara>
<screen>org.kie.persistence.postgresql.useBytea=true</screen>
</note>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>Save the <literal>application.properties</literal> file.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="bus-app-config-jpa_business-applications">
<title>Configuring business applications for JPA</title>
<simpara>The Java Persistence API (JPA) is a standard technology that enables you to map objects to relational databases. You must configure JPA for your Red Hat Process Automation Manager business application.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have a ZIP file that you created using the <link xlink:href="http://start.jbpm.org">business applications</link> website.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Extract the <literal>&lt;BUSINESS-APPLICATION&gt;.zip</literal> file and navigate to the <literal>&lt;BUSINESS-APPLICATION&gt;/&lt;BUSINESS-APPLICATION&gt;-service/src/main/resources</literal> folder, where <literal>&lt;BUSINESS-APPLICATION&gt;</literal> is the name of your Spring Boot project.</simpara>
</listitem>
<listitem>
<simpara>Open the <literal>application.properties</literal> file in a text editor.</simpara>
</listitem>
<listitem>
<simpara>Locate the following parameters in the <literal>application.properties</literal> file and verify that they have the values shown:</simpara>
<programlisting language="bash" linenumbering="unnumbered">spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
spring.jpa.properties.hibernate.show_sql=false
spring.jpa.properties.hibernate.hbm2ddl.auto=update
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl</programlisting>
</listitem>
<listitem>
<simpara>If your business application has business automation capabilities, you can add entities to the entity manager factory by adding a comma-separated list of packages:</simpara>
<programlisting language="bash" linenumbering="unnumbered">spring.jpa.properties.entity-scan-packages=org.jbpm.springboot.samples.entities</programlisting>
<simpara>Business applications with business automation capabilities create an entity manager factory based on the <literal>persistence.xml</literal> file that comes with Red Hat Process Automation Manager. All entities found in the <literal>org.jbpm.springboot.samples.entities</literal> package are automatically added to the entity manager factory and used the same as any other JPA entity in the application.</simpara>
</listitem>
</orderedlist>
<formalpara>
<title>Additional resources</title>
<para>For more information about configuring JPA, see the  <link xlink:href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle"><emphasis>Spring Boot Reference Guide</emphasis></link>.</para>
</formalpara>
</section>
<section xml:id="bus-app-swagger_business-applications">
<title>Enabling Swagger documentation</title>
<simpara>You can enable Swagger-based documentation for all endpoints
available in the service project of your Red Hat Process Automation Manager business application.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have a Spring Boot application ZIP file that you created using the <link xlink:href="http://start.jbpm.org">business applications</link> website.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Extract the <literal>&lt;BUSINESS-APPLICATION&gt;.zip</literal> file and navigate to the <literal>&lt;BUSINESS-APPLICATION&gt;/&lt;BUSINESS-APPLICATION&gt;-service</literal> folder, where <literal>&lt;BUSINESS-APPLICATION&gt;</literal> is the name of your Spring Boot project.</simpara>
</listitem>
<listitem>
<simpara>Open the service project <literal>pom.xml</literal> file in a text editor.</simpara>
</listitem>
<listitem>
<simpara>Add the following dependencies to the service project <literal>pom.xml</literal> file and save the file.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
  &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;
  &lt;artifactId&gt;cxf-rt-rs-service-description-swagger&lt;/artifactId&gt;
  &lt;version&gt;3.2.6&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;io.swagger&lt;/groupId&gt;
  &lt;artifactId&gt;swagger-jaxrs&lt;/artifactId&gt;
  &lt;version&gt;1.5.15&lt;/version&gt;
  &lt;exclusions&gt;
    &lt;exclusion&gt;
      &lt;groupId&gt;javax.ws.rs&lt;/groupId&gt;
      &lt;artifactId&gt;jsr311-api&lt;/artifactId&gt;
    &lt;/exclusion&gt;
  &lt;/exclusions&gt;
&lt;/dependency&gt;</programlisting>
</listitem>
<listitem>
<simpara>To enable the Swagger UI (optional), add the following dependency to the <literal>pom.xml</literal> file and save the file.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
  &lt;groupId&gt;org.webjars&lt;/groupId&gt;
  &lt;artifactId&gt;swagger-ui&lt;/artifactId&gt;
  &lt;version&gt;2.2.10&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
</listitem>
<listitem>
<simpara>Open the <literal>&lt;BUSINESS-APPLICATION&gt;/&lt;BUSINESS-APPLICATION&gt;-service/src/main/resources/application.properties</literal> file in a text editor.</simpara>
</listitem>
<listitem>
<simpara>Add the following line to the <literal>application.properties</literal> file to enable Swagger support:</simpara>
<programlisting language="bash" linenumbering="unnumbered">kieserver.swagger.enabled=true</programlisting>
</listitem>
</orderedlist>
<simpara>After you start the business application, you can view the Swagger document at <literal>http://localhost:8090/rest/swagger.json</literal>. The complete set of endpoints is available at <literal>http://localhost:8090/rest/api-docs?url=http://localhost:8090/rest/swagger.json</literal>.</simpara>
</section>
</chapter>
<chapter xml:id="creating-self-contained-image-proc_business-applications">
<title>Creating a self-contained Red Hat Process Automation Manager Spring Boot JAR file</title>
<simpara>You can create a self-contained Red Hat Process Automation Manager Spring Boot JAR file that contains multiple versions of the same KJAR file, including modules. These are files that have the same <literal>artifactID</literal> and <literal>groupID</literal> attribute values, but have different <literal>version</literal> values. The KJAR files are separated from the <literal>BOOT-INF/lib</literal> JAR files to avoid class loader collisions. Each KJAR classpath container file is isolated from other KJAR classpath container files and does not rely on the Spring Boot class loader.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have an existing Red Hat Process Automation Manager Spring Boot project.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Add the following properties to your Spring Boot application  <literal>application.properties</literal> file:</simpara>
<programlisting language="xml" linenumbering="unnumbered">kieserver.classPathContainer=true
kieserver.autoScanDeployments=true</programlisting>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="30*"/>
<colspec colname="col_2" colwidth="15*"/>
<colspec colname="col_3" colwidth="55*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Values</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>kieserver.classPathContainer</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true, false</literal></simpara></entry>
<entry align="left" valign="top"><simpara>When set to <literal>true</literal>, KIE Server uses the class loader used by the container to load KJAR files and their dependencies.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>kieserver.autoScanDeployments</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true, false</literal></simpara></entry>
<entry align="left" valign="top"><simpara>When set to <literal>true</literal>, KIE Server scans and deploys all KJAR files available in the Spring Boot application, whether they are declared programmatically or through the Maven plug-in.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>When both of these properties are set to <literal>true</literal>, the Spring Boot KIE Server automatically scans for deployable artifacts that are packaged within the Spring Boot application using the <literal>package-dependencies-kjar</literal> Maven goal of the <literal>kie-maven-plugin</literal> plug-in.</simpara>
</listitem>
<listitem>
<simpara>Add the following Maven plug-in in the Spring Boot <literal>service/pom.xml</literal> file where <literal>&lt;GROUP_ID&gt;</literal>, <literal>&lt;ARTIFACT_ID&gt;</literal>, and <literal>&lt;VERSION&gt;</literal> are the group, artifact, and version (GAV) of an artifact that your project uses. These artifacts are located in the Spring Boot project  <literal>kjar/pom.xml</literal> file.</simpara>
<note>
<simpara>You can add more than one version of an artifact.</simpara>
</note>
<programlisting language="xml" linenumbering="unnumbered">  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.kie&lt;/groupId&gt;
        &lt;artifactId&gt;kie-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${version.org.kie}&lt;/version&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;id&gt;copy&lt;/id&gt;
            &lt;phase&gt;prepare-package&lt;/phase&gt;
            &lt;goals&gt;
              &lt;goal&gt;package-dependencies-kjar&lt;/goal&gt;
            &lt;/goals&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
        &lt;configuration&gt;
          &lt;artifactItems&gt;
            &lt;artifactItem&gt;
              &lt;groupId&gt;&lt;GROUP_ID&gt;&lt;/groupId&gt;
              &lt;artifactId&gt;&lt;ARTIFACT_ID&gt;/artifactId&gt;
              &lt;version&gt;&lt;VERSION&gt;&lt;/version&gt;
            &lt;/artifactItem&gt;
          &lt;/artifactItems&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;plugins&gt;
  &lt;build&gt;</programlisting>
<simpara>The artifacts required to run the KJAR will be resolved at build time.</simpara>
<simpara>The following example adds two version of the <literal>Evaluation</literal> artifact:</simpara>
<programlisting language="xml" linenumbering="unnumbered">  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.kie&lt;/groupId&gt;
        &lt;artifactId&gt;kie-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${version.org.kie}&lt;/version&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;id&gt;copy&lt;/id&gt;
            &lt;phase&gt;prepare-package&lt;/phase&gt;
            &lt;goals&gt;
              &lt;goal&gt;package-dependencies-kjar&lt;/goal&gt;
            &lt;/goals&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
        &lt;configuration&gt;
          &lt;artifactItems&gt;
            &lt;artifactItem&gt;
              &lt;groupId&gt;com.myspace&lt;/groupId&gt;
              &lt;artifactId&gt;Evaluation&lt;/artifactId&gt;
              &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
            &lt;/artifactItem&gt;
            &lt;artifactItem&gt;
              &lt;groupId&gt;com.myspace&lt;/groupId&gt;
              &lt;artifactId&gt;Evaluation&lt;/artifactId&gt;
              &lt;version&gt;2.0.0-SNAPSHOT&lt;/version&gt;
            &lt;/artifactItem&gt;
          &lt;/artifactItems&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;plugins&gt;
  &lt;build&gt;</programlisting>
</listitem>
<listitem>
<simpara>To build the self-contained Spring Boot image, enter the following command in the <literal>service</literal> directory:</simpara>
<screen>maven install</screen>
</listitem>
</orderedlist>
</chapter>
<chapter xml:id="bus-app-run_business-applications">
<title>Business application execution</title>
<simpara>By default, business applications contain a single executable project, the service project. You can execute the service project on Windows or Linux, in standalone (unmanaged) or development (managed) mode. Standalone mode enables you to start your application without additional requirements. Applications started in development mode require Business Central to be available as the Process Automation Manager controller.</simpara>
<section xml:id="bus-apps-run-standard_business-applications">
<title>Running business applications in standalone mode</title>
<simpara>Standalone (unmanaged) mode enables you to start your business application without additional requirements.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have a <literal>&lt;BUSINESS-APPLICATION&gt;.zip</literal> file that you created using the <link xlink:href="http://start.jbpm.org">business applications</link>  website, where <literal>&lt;BUSINESS-APPLICATION&gt;</literal> is the name of your Spring Boot project.</simpara>
</listitem>
<listitem>
<simpara>The business application is configured.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the <literal>&lt;BUSINESS-APPLICATION&gt;/&lt;BUSINESS-APPLICATION&gt;-service</literal> folder.</simpara>
</listitem>
<listitem>
<simpara>Enter one of the following commands:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Standalone launch options</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Command</simpara></entry>
<entry align="left" valign="top"><simpara>Description</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>./launch.sh clean install</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Launches in standalone mode on Linux or UNIX.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>./launch.bat clean install</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Launches in standalone mode on Windows.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>./launch.sh clean install -Pmysql</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Launches in standalone mode on Linux or UNIX if you have configured the application with a MySQL database.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>./launch.bat clean install -Pmysql</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Launches in standalone mode on Windows if you have configured the application with a MySQL database.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>./launch.sh clean install -Ppostgres</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Launches in standalone mode on Linux or UNIX if you have configured the application with a postgreSQL database.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>./launch.bat clean install -Ppostgres</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Launches in standalone mode on Windows if you have configured the application with a PostgreSQL database.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>The <literal>clean install</literal> argument directs Maven to build a fresh installation. The projects are then built in the following order:</simpara>
<itemizedlist>
<listitem>
<simpara>Data model</simpara>
</listitem>
<listitem>
<simpara>Business assets</simpara>
</listitem>
<listitem>
<simpara>Service</simpara>
<simpara>The first time that you run the script, it might take a while to build the project because all dependencies of the project are downloaded. At the end of the build, the application starts.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Enter the following command to access your business application:</simpara>
<screen>http://localhost:8090/</screen>
</listitem>
<listitem>
<simpara>Enter the credentials <literal>user</literal>/<literal>user</literal>  or <literal>kieserver</literal>/<literal>kieserver1!</literal>.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="bus-apps-run-managed_business-applications">
<title>Running business applications in development mode</title>
<simpara>Development (managed) mode enables developers to work on a Red Hat Process Automation Manager business application business assets project and dynamically deploy changes to the business application without the need to restart it. In addition, development mode provides a complete monitoring environment for business automation capabilities, for example process instances, tasks, and jobs.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have a Spring Boot application ZIP file that you created using the <link xlink:href="http://start.jbpm.org">business applications</link> website.</simpara>
</listitem>
<listitem>
<simpara>You configured the business application.</simpara>
</listitem>
<listitem>
<simpara>Business Central is installed and running.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the <literal>&lt;BUSINESS-APPLICATION&gt;/&lt;BUSINESS-APPLICATION&gt;-service</literal> folder, where <literal>&lt;BUSINESS-APPLICATION&gt;</literal> is the name of your Spring Boot project.</simpara>
</listitem>
<listitem>
<simpara>Enter one of the following commands:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Managed launch options</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Command</simpara></entry>
<entry align="left" valign="top"><simpara>Description</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>./launch-dev.sh clean install</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Launches in development mode on Linux or UNIX.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>./launch-dev.bat clean install</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Launches in development mode on Windows.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>./launch-dev.sh clean install -Pmysql</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Launches in development mode on Linux or UNIX if you have configured the application with a MySQL database.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>./launch-dev.bat clean install -Pmysql</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Launches in development mode on Windows if you have configured the application with a MySQL database.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>./launch-dev.sh clean install -Ppostgres</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Launches in development mode on Linux or UNIX if you have configured the application with a postgreSQL database.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>./launch-dev.bat clean install -Ppostgres</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Launches in development mode on Windows if you have configured the application with a PostgreSQL database.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>The <literal>clean install</literal> argument directs Maven to build a fresh installation. The projects are then built in the following order:</simpara>
<itemizedlist>
<listitem>
<simpara>Data model</simpara>
</listitem>
<listitem>
<simpara>Business assets</simpara>
</listitem>
<listitem>
<simpara>Service</simpara>
<simpara>The first time that you run the script, it might take a while to build the project because all dependencies of the project are downloaded. At the end of the build, the application starts.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Enter the following command to access your business application:</simpara>
<screen>http://localhost:8090/</screen>
</listitem>
<listitem>
<simpara>Enter the credentials <literal>user</literal>/<literal>user</literal>  or <literal>kieserver</literal>/<literal>kieserver1!</literal>. After the business application starts, it connects to the Process Automation Manager controller and is visible in <emphasis role="strong">Menu</emphasis> â†’ <emphasis role="strong">Deploy</emphasis> â†’ <emphasis role="strong">Execution Servers</emphasis> in Business Central.</simpara>
</listitem>
</orderedlist>
</section>
</chapter>
<chapter xml:id="bus-apps-import_business-applications">
<title>Importing and deploying business assets projects in Business Central</title>
<simpara>You can import a business assets project that is part of a Red Hat Process Automation Manager business application into Business Central and then deploy that project to a business application.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have a business application project running in development mode.</simpara>
</listitem>
<listitem>
<simpara>Red Hat Process Automation Manager Business Central is installed.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the <literal>&lt;BUSINESS-APPLICATION&gt;/&lt;BUSINESS-APPLICATION&gt;-kjar</literal> folder, where <literal>&lt;BUSINESS-APPLICATION&gt;</literal> is the name of your Spring Boot project.</simpara>
</listitem>
<listitem>
<simpara>Execute the following following commands to initialize the Git repository for your project:</simpara>
<screen>$ git init
$ git add -A
$ git commit -m "Initial project structure"</screen>
</listitem>
<listitem>
<simpara>Log in to Business Central and go to <emphasis role="strong">Menu</emphasis> â†’ <emphasis role="strong">Design</emphasis> â†’ <emphasis role="strong">Projects</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Select <emphasis role="strong">Import Project</emphasis> and enter the following URL:</simpara>
<screen> file:///&lt;business-application-path&gt;/&lt;business-application-name&gt;-kjar</screen>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Import</emphasis> and confirm the project to be imported.</simpara>
</listitem>
<listitem>
<simpara>After the business assets project is imported into Business Central, open the project and click <emphasis role="strong">Add Assets</emphasis> to add assets such as
business processes to your business assets project.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Deploy</emphasis> on your project page to deploy your project to a running business application.</simpara>
<note>
<simpara>You can also select the <emphasis role="strong">Build &amp; Install</emphasis> option to build the project and publish the KJAR file to the configured Maven repository without deploying to a KIE Server. In a development environment, you can click <emphasis role="strong">Deploy</emphasis> to deploy the built KJAR file to a KIE Server without stopping any running instances (if applicable), or click <emphasis role="strong">Redeploy</emphasis> to deploy the built KJAR file and replace all instances. The next time you deploy or redeploy the built KJAR, the previous deployment unit (KIE container) is automatically updated in the same target KIE Server. In a production environment, the <emphasis role="strong">Redeploy</emphasis> option is disabled and you can click <emphasis role="strong">Deploy</emphasis> only to deploy the built KJAR file to a new deployment unit (KIE container) on a KIE Server.</simpara>
<simpara>To configure the KIE Server environment mode, set the <literal>org.kie.server.mode</literal> system property to <literal>org.kie.server.mode=development</literal> or <literal>org.kie.server.mode=production</literal>. To configure the deployment behavior for a corresponding project in Business Central, go to project <emphasis role="strong">Settings</emphasis> â†’ <emphasis role="strong">General Settings</emphasis> â†’ <emphasis role="strong">Version</emphasis> and toggle the <emphasis role="strong">Development Mode</emphasis> option. By default, KIE Server and all new projects in Business Central are in development mode. You cannot deploy a project with <emphasis role="strong">Development Mode</emphasis> turned on or with a manually added <literal>SNAPSHOT</literal> version suffix to a KIE Server that is in production mode.</simpara>
</note>
</listitem>
<listitem>
<simpara>To review project deployment details, click <emphasis role="strong">View deployment details</emphasis> in the deployment banner at the top of the screen or in the <emphasis role="strong">Deploy</emphasis> drop-down menu. This option directs you to the <emphasis role="strong">Menu</emphasis> â†’ <emphasis role="strong">Deploy</emphasis> â†’ <emphasis role="strong">Execution Servers</emphasis> page.</simpara>
</listitem>
<listitem>
<simpara>To interact with your newly deployed business assets, go to <emphasis role="strong">Menu</emphasis> â†’ <emphasis role="strong">Manage</emphasis> â†’ <emphasis role="strong">Process Definitions</emphasis> and <emphasis role="strong">Process Instances</emphasis>.</simpara>
</listitem>
</orderedlist>
</chapter>
<chapter xml:id="spring-boot-jms-audit-proc_business-applications">
<title>Replicating audit data in a JMS message broker</title>
<simpara>You can replicate KIE Server audit data to a Java Message Service (JMS) message broker, for example ActiveMQ or Artemis, and then dump the data in an external database schema so that you can improve the performance of your Spring Boot application by deleting the audit data from your application schema.</simpara>
<simpara>If you configure your application to replicate data in a message broker, when an event occurs in KIE Server the record of that event is stored in the KIE Server database schema and it is sent to the message broker. You can then configure an external service to consume the message broker data into an exact replica of the applicationâ€™s database schema. The data is appended in the message broker and the external database every time an event is produce by KIE Server.</simpara>
<note>
<simpara>Only audit data is stored in the message broker. No other data is replicated.</simpara>
</note>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have an existing Red Hat Process Automation Manager Spring Boot project.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Open the Spring Boot applicationâ€™s <literal>pom.xml</literal> file in a text editor.</simpara>
</listitem>
<listitem>
<simpara>Add the KIE Server Spring Boot audit dependency to the <literal>pom.xml</literal> file:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
  &lt;groupId&gt;org.kie&lt;/groupId&gt;
  &lt;artifactId&gt;kie-server-spring-boot-autoconfiguration-audit-replication&lt;/artifactId&gt;
  &lt;version&gt;${version.org.kie}&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
</listitem>
<listitem>
<simpara>Add the dependency for your JMS client. The following example adds the Advanced Message Queuing Protocol (AMQP) dependency:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
  &lt;groupId&gt;org.amqphub.spring&lt;/groupId&gt;
  &lt;artifactId&gt;amqp-10-jms-spring-boot-starter&lt;/artifactId&gt;
  &lt;version&gt;2.2.6&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
</listitem>
<listitem>
<simpara>Add the JMS pool dependency:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
  &lt;groupId&gt;org.messaginghub&lt;/groupId&gt;
  &lt;artifactId&gt;pooled-jms&lt;/artifactId&gt;
&lt;/dependency&gt;</programlisting>
</listitem>
<listitem>
<simpara>To configure KIE Server audit replication to use queues, complete the following tasks:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Add the following lines to your Spring Boot applicationâ€™s <literal>application.properties</literal> file:</simpara>
<screen>kieserver.audit-replication.producer=true
kieserver.audit-replication.queue=audit-queue</screen>
</listitem>
<listitem>
<simpara>Add the properties required for your message broker client. The following example shows how to configure KIE Server for AMPQ, where <literal>&lt;JMS_HOST_PORT&gt;</literal> is the port that the broker listens on and <literal>&lt;USERNAME&gt;</literal> and <literal>&lt;PASSWORD</literal> are the login credentials for the broker:</simpara>
<screen>amqphub.amqp10jms.remote-url=amqp://&lt;JMS_HOST_PORT&gt;
amqphub.amqp10jms.username=&lt;USERNAME&gt;
amqphub.amqp10jms.password=&lt;PASSWORD&gt;
amqphub.amqp10jms.pool.enabled=true</screen>
</listitem>
<listitem>
<simpara>Add the following lines to the <literal>application.properties</literal> file of the service that will consume the message broker data:</simpara>
<screen>kieserver.audit-replication.consumer=true
kieserver.audit-replication.queue=audit-queue</screen>
</listitem>
<listitem>
<simpara>Add the properties required for your message broker client to the <literal>application.properties</literal> file of the service that will consume the message broker data. The following example shows how to configure KIE Server for AMPQ, where  <literal>&lt;JMS_HOST_PORT&gt;</literal> is the port that your message broker listens on and <literal>&lt;USERNAME&gt;</literal> and <literal>&lt;PASSWORD&gt;</literal> are the login credentials for the message broker:</simpara>
<screen>amqphub.amqp10jms.remote-url=amqp://&lt;JMS_HOST_PORT&gt;
amqphub.amqp10jms.username=&lt;USERNAME&gt;
amqphub.amqp10jms.password=&lt;PASSWORD&gt;
amqphub.amqp10jms.pool.enabled=true</screen>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>To configure KIE Server audit replication to use topics, complete the following tasks:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Add the following lines to your Spring Boot applicationâ€™s <literal>application.properties</literal> file:</simpara>
<screen>kieserver.audit-replication.producer=true
kieserver.audit-replication.topic=audit-topic</screen>
</listitem>
<listitem>
<simpara>Add the properties required for your message broker client to the <literal>application.properties</literal> file of the service that will consume the message broker data. The following example shows how to configure KIE Server for AMPQ, where <literal>&lt;JMS_HOST_PORT&gt;</literal> is the port that your message broker listens on and <literal>&lt;USERNAME&gt;</literal> and <literal>&lt;PASSWORD</literal> are the login credentials for the message broker:</simpara>
<screen>spring.jms.pub-sub-domain=true
amqphub.amqp10jms.remote-url=amqp://&lt;JMS_HOST_PORT&gt;
amqphub.amqp10jms.username=&lt;USERNAME&gt;
amqphub.amqp10jms.password=&lt;PASSWORD&gt;
amqphub.amqp10jms.pool.enabled=true</screen>
</listitem>
<listitem>
<simpara>Add the following lines to the <literal>application.properties</literal> file of the service that will consume the message broker data:</simpara>
<screen>kieserver.audit-replication.consumer=true
kieserver.audit-replication.topic=audit-topic::jbpm
kieserver.audit-replication.topic.subscriber=jbpm
spring.jms.pub-sub-domain=true</screen>
</listitem>
<listitem>
<simpara>Add the properties required for your message broker client to the <literal>application.properties</literal> file of the service that will consume the message broker data. The following example shows how to configure KIE Server for AMPQ, where <literal>&lt;JMS_HOST_PORT&gt;</literal> is the port that your message broker listens on and <literal>&lt;USERNAME&gt;</literal> and <literal>&lt;PASSWORD&gt;</literal> are the login credentials for the message broker:</simpara>
<screen>amqphub.amqp10jms.remote-url=amqp://&lt;JMS_HOST_PORT&gt;
amqphub.amqp10jms.username=&lt;USERNAME&gt;
amqphub.amqp10jms.password=&lt;PASSWORD&gt;
amqphub.amqp10jms.pool.enabled=true
amqphub.amqp10jms.clientId=jbpm</screen>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>Optional: To configure the KIE Server that contains the replicated data to be read only, set the <literal>org.kie.server.rest.mode.readonly</literal> property in the <literal>application.properties</literal> file to <literal>true</literal>:</simpara>
<screen>org.kie.server.rest.mode.readonly=true</screen>
</listitem>
</orderedlist>
<itemizedlist>
<title>Additional resources</title>
<listitem>
<simpara><xref linkend="audit-replication-parameters-ref_business-applications"/></simpara>
</listitem>
</itemizedlist>
<section xml:id="audit-replication-parameters-ref_business-applications">
<title>Spring Boot JMS audit replication parameters</title>
<simpara>The following table describes the parameters used to configure JMS audit replication for Red Hat Process Automation Manager applications on Spring Boot.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Spring Boot JMS audit replication parameters</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="30*"/>
<colspec colname="col_2" colwidth="15*"/>
<colspec colname="col_3" colwidth="55*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Values</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>kieserver.audit-replication.producer</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true, false</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Specifies whether the business application will act as a producer to replicate and send the JMS messages to either a queue or a topic.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>kieserver.audit-replication.consumer</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true, false</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Specifies whether the business application will act as a consumer to receive the JMS messages from either a queue or a topic.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>kieserver.audit-replication.queue</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>string</literal></simpara></entry>
<entry align="left" valign="top"><simpara>The name of the JMS queue to either send or consume messages.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>kieserver.audit-replication.topic</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>string</literal></simpara></entry>
<entry align="left" valign="top"><simpara>The name of the JMS topic to either send or consume messages.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>kieserver.audit-replication.topic.subscriber</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>string</literal></simpara></entry>
<entry align="left" valign="top"><simpara>The name of the topic subscriber.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>org.kie.server.rest.mode.readonly</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true, false</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Specifies read only mode for the business application.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
</chapter>
</part>
<part xml:id="assembly-integrating-fuse">
<title>Integrating Red Hat Fuse with Red Hat Process Automation Manager</title>
<partintro>
<simpara>As a system administrator, you can integrate Red Hat Process Automation Manager with Red Hat Fuse on Apache Karaf and Red Hat JBoss Enterprise Application Platform to facilitate communication between integrated services.</simpara>
</partintro>
<chapter xml:id="fuse-con">
<title>Red Hat Fuse and Red Hat Process Automation Manager</title>
<simpara>Red Hat Fuse is a distributed, cloud-native integration platform that is part of an agile integration solution. Its distributed approach enables teams to deploy integrated services where required. Fuse has the flexibility to service diverse users, including integration experts, application developers, and business users, each with their own choice of deployment, architecture, and tooling. The API-centric, container-based architecture decouples services so they can be created, extended, and deployed independently. The result is an integration solution that supports collaboration across the enterprise.</simpara>
<simpara>Red Hat Process Automation Manager is the Red Hat platform for creating business automation applications and microservices. It enables enterprise business and IT users to document, simulate, manage, automate, and monitor business processes and policies. Red Hat Process Automation Manager is designed to empower business and IT users to collaborate more effectively, so business applications can be changed easily and quickly.</simpara>
<simpara>You can install Red Hat Fuse on the Apache Karaf container platform or Red Hat JBoss Enterprise Application Platform and then install and configure Red Hat Process Automation Manager in that container.</simpara>
<important>
<simpara>For the version of Red Hat Fuse that Red Hat Process Automation Manager 7.10 supports, see <link xlink:href="https://access.redhat.com/articles/3405381">Red Hat Process Automation Manager 7 Supported Configurations</link>.</simpara>
</important>
<section xml:id="fuse-karaf-ref_fuse">
<title>Red Hat Process Automation Manager Karaf features</title>
<simpara>The following table lists Red Hat Process Automation Manager Karaf features.</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Feature</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>drools-module</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Contains the core and compiler of Drools, used to create KIE bases and KIE sessions from plain DRL. It also contains the implementation of the executable model. Uses Drools for rules evaluation, without requiring persistence, processes, or decision tables.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>drools-template</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Contains the Drools templates.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>drools-jpa</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Uses Drools for rules evaluation with persistence and transactions, but without requiring processes or decision tables. The <literal>drools-jpa</literal> feature includes the <literal>drools-module</literal>, however you might also need to install the <literal>droolsjbpm-hibernate</literal> feature, or ensure that a compatible hibernate bundle is installed.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>drools-decisiontable</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Uses Drools with decision tables.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>jbpm</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Uses jBPM. The <literal>jbpm</literal> feature includes the <literal>drools-module</literal> and <literal>drools-jpa</literal>. You might need to install the <literal>droolsjbpm-hibernate</literal> feature, or ensure that a compatible hibernate bundle is installed.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>jbpm</literal> and <literal>jbpm-human-task</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Uses jBPM with human tasks.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>jbpm-workitems-camel</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Provides the <literal>jbpm-workitems-camel</literal> component.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Core engine JARs and <literal>kie-ci</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Uses Red Hat Process Automation Manager with the KIE scanner (<literal>kie-ci</literal>) to download kJARs from a Maven repository.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>kie-camel</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Provides the <literal>kie-camel</literal> component, an Apache Camel endpoint that integrates Fuse with Red Hat Process Automation Manager.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>kie-spring</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Installs the <literal>kie-spring</literal> component that enables you to configure listeners to KIE sessions using XML tags.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
</chapter>
<chapter xml:id="ba-engines-karaf-con">
<title>Red Hat Process Automation Manager decision and process engines with Fuse on Apache Karaf</title>
<simpara>Apache Karaf is a standalone open-source runtime environment. It is based on the OSGi standard from the OSGi Alliance. Karaf provides support for modularisation through OSGi bundles with sophisticated class-loading support. You can deploy multiple versions of a dependency side by side in a Karaf container. You can use hot code swapping to upgrade or replace a module without shutting down the container.</simpara>
<simpara>Red Hat Process Automation Manager integration with Fuse on Karaf is provided through Karaf features. You can install individual components of Red Hat Process Automation Manager for Fuse on Karaf using these features.</simpara>
<simpara>Features files are XML files that specify which OSGI bundles are installed for a particular feature. The following features XML files facilitate Red Hat Process Automation Manager and Fuse on Karaf integration:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>rhba-features-&lt;FUSE-VERSION&gt;-features.xml</literal></simpara>
<simpara>This file is part of Fuse installed in Karaf where <literal>&lt;FUSE-VERSION&gt;</literal> is the version of Fuse. This file is stored in the Karaf system repository, in the <literal>system/org/jboss/fuse/features/rhba-features</literal> directory. This file contains prerequisites for installing Red Hat Process Automation Manager features.</simpara>
</listitem>
<listitem>
<simpara><literal>kie-karaf-features-7.48.0.Final-redhat-00002-features-fuse.xml</literal></simpara>
<simpara>This file is part of Red Hat Process Automation Manager and provides Red Hat Process Automation Manager features, which define the OSGi features that can be deployed into Red Hat Fuse. OSGi users can install features from this file to install Red Hat Process Automation Manager into Fuse and use it in their applications. You can find this features file in the online and offline Maven repository that is distributed with Red Hat Process Automation Manager. The group ID, artifact ID, and version (GAV) identifier of this file is <literal>org.kie:kie-karaf-features:7.48.0.Final-redhat-00002</literal>.</simpara>
</listitem>
</itemizedlist>
<section xml:id="ba-karaf-xml-uninstall-proc">
<title>Uninstalling obsolete Red Hat Process Automation Manager features XML files on Karaf</title>
<simpara>If your installation contains older versions of the Red Hat Process Automation Manager features XML files (for example, <literal>kie-karaf-features-&lt;VERSION&gt;-features.xml</literal>), you must remove these files and all associated files before installing the most recent features XML files.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Obsolete features XML files exist in your Apache Karaf installation.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Enter the following commands to determine whether your installation contains obsolete Red Hat Process Automation Manager features XML files:</simpara>
<screen>$ JBossFuse:karaf@root&gt; feature:repo-list
$ JBossFuse:karaf@root&gt; feature:list</screen>
</listitem>
<listitem>
<simpara>Enter the following command, where <literal>&lt;FUSE_HOME&gt;</literal> is the Fuse installation directory, to start the Red Hat Fuse console:</simpara>
<screen>$ ./&lt;FUSE_HOME&gt;/bin/fuse</screen>
</listitem>
<listitem>
<simpara>Enter the following command, where <literal>&lt;FEATURE_NAME&gt;</literal> is the name of the feature that you want to uninstall, to uninstall features or applications that use obsolete features XML files:</simpara>
<screen>JBossFuse:karaf@root&gt; features:uninstall &lt;FEATURE_NAME&gt;</screen>
<simpara>The following example shows how to remove features:</simpara>
<screen>JBossFuse:karaf@root&gt; features:uninstall drools-module
JBossFuse:karaf@root&gt; features:uninstall jbpm
JBossFuse:karaf@root&gt; features:uninstall kie-ci</screen>
</listitem>
<listitem>
<simpara>Search Karaf home for references to bundles that use <literal>drools</literal>, <literal>kie</literal>, or <literal>jbpm</literal>. The following example shows how to use <literal>grep</literal> to search for these components:</simpara>
<screen>karaf@root&gt; list -t 0 -s | grep drools
karaf@root&gt; list -t 0 -s | grep kie
karaf@root&gt; list -t 0 -s | grep jbpm</screen>
<simpara>The example shows output from these commands:</simpara>
<screen>250 â”‚ Active   â”‚  80 â”‚ 7.19.0.201902201522          â”‚ org.drools.canonical-model
251 â”‚ Active   â”‚  80 â”‚ 7.19.0.201902201522          â”‚ org.drools.cdi
252 â”‚ Active   â”‚  80 â”‚ 7.19.0.201902201522          â”‚ org.drools.compiler</screen>
</listitem>
<listitem>
<simpara>Enter the following command, where <literal>BUNDLE_ID</literal> is a bundle ID returned in the search, to remove the bundles found in the previous step:</simpara>
<screen>karaf@root&gt; osgi:uninstall BUNDLE_ID</screen>
</listitem>
<listitem>
<simpara>Enter the following command to remove the obsolete <literal>drools-karaf-features</literal> URL:</simpara>
<screen>karaf@root&gt; features:removeurl
 mvn:org.kie/kie-karaf-features/VERSION.Final-redhat-VERSION/xml/features</screen>
</listitem>
<listitem>
<simpara>Restart Fuse.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="ba-karaf-xml-install-proc">
<title>Installing Red Hat Process Automation Manager features on Karaf using XML files</title>
<simpara>Install Red Hat Process Automation Manager features on Karaf to create a dynamic runtime environment for your Red Hat Process Automation Manager processes.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>A Red Hat Fuse installation in an Apache Karaf container is available. For information about installing Fuse in Apache Karaf, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_fuse/7.7/html/installing_on_apache_karaf/index"><emphasis>Installing Red Hat Fuse on the Apache Karaf container</emphasis></link>.</simpara>
</listitem>
<listitem>
<simpara>You have removed any obsolete Red Hat Process Automation Manager features XML files as described in <xref linkend="ba-karaf-xml-uninstall-proc"/>.</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Procedure</title>
<para>To install Red Hat Process Automation Manager features, enter the following command:</para>
</formalpara>
<screen>$ JBossFuse:karaf@root&gt; feature:install &lt;FEATURE_NAME&gt;</screen>
<note>
<simpara>Use <literal>org.drools.osgi.spring.OsgiKModuleBeanFactoryPostProcessor</literal> instead of <literal>org.kie.spring.KModuleBeanFactoryPostProcessor</literal> to postprocess KIE elements in an OSGi environment.</simpara>
<simpara>Do not install the <literal>drools-module</literal> feature before the <literal>kie-spring</literal> feature. If you do, the <literal>drools-compiler</literal> bundle will not detect packages exported by <literal>kie-spring</literal>.</simpara>
<simpara>If you install the features in the incorrect order, run <literal>osgi:refresh drools-compiler_bundle_ID</literal>  to force the <literal>drools-compiler</literal> to rebuild its <literal>Import-Package</literal> metadata.</simpara>
</note>
<simpara>In this command, <literal>&lt;FEATURE_NAME&gt;</literal> is one of the features listed in  <xref linkend="fuse-karaf-ref_fuse"/>.</simpara>
</section>
<section xml:id="installing-ba-fuse-karaf-maven-proc">
<title>Installing Red Hat Process Automation Manager features on Karaf through maven</title>
<simpara>Install Red Hat Process Automation Manager with Fuse on Apache Karaf to deploy integrated services where required.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>A Red Hat Fuse 7.7 on Apache Karaf installation exists. For installation instructions, see  <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_fuse/7.7/html-single/installing_on_apache_karaf/"><emphasis>Installing Red Hat Fuse on the Apache Karaf container</emphasis></link> .</simpara>
</listitem>
<listitem>
<simpara>Any obsolete features XML files have been removed, as described in <xref linkend="ba-karaf-xml-uninstall-proc"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>To configure the Maven repository, open the <literal>FUSE_HOME/etc/org.ops4j.pax.url.mvn.cfg</literal> file in a text editor.</simpara>
</listitem>
<listitem>
<simpara>Make sure that the <literal>https://maven.repository.redhat.com/ga/</literal> repository is present in the <literal>org.ops4j.pax.url.mvn.repositories</literal> variable and add it if necessary.</simpara>
<note>
<simpara>Entries are separated by a comma, space, and backslash (, \). The backslash forces a new line.</simpara>
</note>
</listitem>
<listitem>
<simpara>To start Fuse, enter the following command, where <literal>FUSE_HOME</literal> is the Fuse installation directory:</simpara>
<screen>$ ./FUSE_HOME/bin/fuse</screen>
</listitem>
<listitem>
<simpara>To add a reference to the features file that contains installation prerequisites, enter the following command, where <literal>&lt;FUSE_VERSION</literal> is the version of Fuse that you are installing:</simpara>
<screen>$ feature:repo-add mvn:org.jboss.fuse.features/rhba-features/&lt;FUSE-VERSION&gt;/xml/features</screen>
</listitem>
<listitem>
<simpara>Enter the following command to add a reference to the Red Hat Process Automation Manager features XML file:</simpara>
<screen>$ JBossFuse:karaf@root&gt; features:addurl mvn:org.kie/kie-karaf-features/VERSION/xml/features-fuse</screen>
<simpara>To see the current <literal>drools-karaf-features</literal> version, see the <link xlink:href="https://access.redhat.com/articles/3405381#supported_comps">Red Hat Process Automation Manager 7 Supported Configurations</link> page.</simpara>
</listitem>
<listitem>
<simpara>Enter the following command to install a feature provided by Red Hat Process Automation Manager features XML file. In this command, <literal>&lt;FEATURE_NAME&gt;</literal> is one of the features listed in  <xref linkend="fuse-karaf-ref_fuse"/>.</simpara>
<screen>JBossFuse:karaf@root&gt; features:install &lt;FEATURE_NAME&gt;</screen>
</listitem>
<listitem>
<simpara>Enter the following command to verify the installation:</simpara>
<screen>$ JBossFuse:karaf@root&gt;feature:list</screen>
<simpara>Successfully installed features have the status <literal>started</literal>.</simpara>
</listitem>
</orderedlist>
</section>
</chapter>
<chapter xml:id="installing-on-fuse-eap-proc">
<title>Installing Fuse on Red Hat JBoss Enterprise Application Platform</title>
<simpara>Install Red Hat Fuse 7.7 on Red Hat JBoss EAP 7.2.7 to use with Red Hat Process Automation Manager to deploy integrated services where required.</simpara>
<note>
<simpara>Red Hat Fuse 7.7 is supported on Red Hat JBoss EAP 7.2, whereas Red Hat Process Automation Manager 7.8.x and newer is supported on Red Hat Red Hat JBoss EAP 7.3. To ensure a stable deployment environment, install Fuse and Red Hat Process Automation Manager on different instances of Red Hat JBoss EAP according to the supported Red Hat JBoss EAP versions.</simpara>
<simpara>Red Hat Process Automation Manager 7.8.x and newer components on Red Hat JBoss EAP 7.2 are not officially supported. However, Red Hat provides guidance on a commercially reasonable basis until Fuse is available on Red Hat JBoss EAP 7.3. <literal>MarshallingFormat.JSON</literal> is not supported on Fuse integration with Red Hat JBoss EAP 7.2 using <literal>kie-camel</literal>. The default is JAXB.</simpara>
</note>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>A Red Hat Process Automation Manager installation on Red Hat JBoss Enterprise Application Platform 7.3 is available. For installation instructions, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/installing_and_configuring_red_hat_process_automation_manager#assembly-install-on-eap"><emphasis>Installing and configuring Red Hat Process Automation Manager on Red Hat JBoss EAP 7.3</emphasis></link>.</simpara>
</listitem>
<listitem>
<simpara>A separate instance of Red Hat JBoss Enterprise Application Platform 7.2.7 is available.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Install Red Hat Fuse 7.7 on Red Hat JBoss Enterprise Application Platform 7.2.7. For installation instructions, see the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_fuse/7.7/html-single/installing_on_jboss_eap/index"><emphasis>Installing on JBoss EAP</emphasis></link>.</simpara>
</listitem>
<listitem>
<simpara>Open the <literal>pom.xml</literal> file in the Fuse home directory in a text editor.</simpara>
</listitem>
<listitem>
<simpara>Create the integration project with a dependency on the <literal>kie-camel</literal> component by editing the <literal>pom.xml</literal> file as shown in the following example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
  	&lt;groupId&gt;org.apache.camel&lt;/groupId&gt;
  	&lt;artifactId&gt;camel-core&lt;/artifactId&gt;
  	&lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  	&lt;groupId&gt;org.kie&lt;/groupId&gt;
  	&lt;artifactId&gt;kie-api&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  	&lt;groupId&gt;org.kie&lt;/groupId&gt;
  	&lt;artifactId&gt;kie-ci&lt;/artifactId&gt;
  	&lt;exclusions&gt;
    	&lt;exclusion&gt;
      	&lt;groupId&gt;aopalliance&lt;/groupId&gt;
      	&lt;artifactId&gt;aopalliance&lt;/artifactId&gt;
    	&lt;/exclusion&gt;
  	&lt;/exclusions&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  	&lt;groupId&gt;org.kie.server&lt;/groupId&gt;
  	&lt;artifactId&gt;kie-server-api&lt;/artifactId&gt;
  	&lt;exclusions&gt;
    	&lt;exclusion&gt;
      	&lt;groupId&gt;org.jboss.spec.javax.xml.bind&lt;/groupId&gt;
      	&lt;artifactId&gt;jboss-jaxb-api_2.3_spec&lt;/artifactId&gt;
    	&lt;/exclusion&gt;
    	&lt;exclusion&gt;
      	&lt;groupId&gt;javax.activation&lt;/groupId&gt;
      	&lt;artifactId&gt;activation&lt;/artifactId&gt;
    	&lt;/exclusion&gt;
  	&lt;/exclusions&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  	&lt;groupId&gt;org.jbpm&lt;/groupId&gt;
  	&lt;artifactId&gt;jbpm-bpmn2&lt;/artifactId&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
  	&lt;groupId&gt;org.kie&lt;/groupId&gt;
  	&lt;artifactId&gt;kie-camel&lt;/artifactId&gt;
  	&lt;exclusions&gt;
    	&lt;exclusion&gt;
      	&lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;
      	&lt;artifactId&gt;cxf-core&lt;/artifactId&gt;
    	&lt;/exclusion&gt;
    	&lt;exclusion&gt;
      	&lt;groupId&gt;org.apache.camel&lt;/groupId&gt;
      	&lt;artifactId&gt;camel-cxf&lt;/artifactId&gt;
    	&lt;/exclusion&gt;
    	&lt;exclusion&gt;
      	&lt;groupId&gt;org.apache.camel&lt;/groupId&gt;
      	&lt;artifactId&gt;camel-cxf-transport&lt;/artifactId&gt;
    	&lt;/exclusion&gt;
    	&lt;exclusion&gt;
      	&lt;groupId&gt;com.thoughtworks.xstream&lt;/groupId&gt;
      	&lt;artifactId&gt;xstream&lt;/artifactId&gt;
    	&lt;/exclusion&gt;
  	&lt;/exclusions&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   	&lt;groupId&gt;org.kie.server&lt;/groupId&gt;
   	&lt;artifactId&gt;kie-server-client&lt;/artifactId&gt;
   	&lt;exclusions&gt;
     	&lt;exclusion&gt;
       	&lt;groupId&gt;org.jboss.spec.javax.ws.rs&lt;/groupId&gt;
       	&lt;artifactId&gt;jboss-jaxrs-api_2.0_spec&lt;/artifactId&gt;
     	&lt;/exclusion&gt;
   	&lt;/exclusions&gt;
&lt;/dependency&gt;</programlisting>
</listitem>
</orderedlist>
</chapter>
<chapter xml:id="kie-camel-con_fuse">
<title>The <literal>kie-camel</literal> component</title>
<simpara>The <literal>kie-camel</literal> component is an Apache Camel endpoint provided by Red Hat Fuse that integrates Fuse with Red Hat Process Automation Manager.  It enables you to specify a Red Hat Process Automation Manager module by using a Maven group ID, artifact ID, and version (GAV) identifier which you can pull into the route and execute. It also enables you to specify portions of the message body as facts.You can use the <literal>kie-camel</literal> component with embedded engines or with KIE Server.</simpara>
<formalpara>
<title>Embedded engines</title>
<para>In this scenario, KIE engines run in the same container as the Fuse integration project and you can communicate with engines using KIE commands. To create the Camel producer, use the following URI:</para>
</formalpara>
<screen>kie-local:kie-session-name?action=execute</screen>
<simpara>For example, enter the following command to initialize a Camel route in Spring:</simpara>
<screen>&lt;from uri="direct:runCommand" /&gt;
  	&lt;to uri="kie-local:kie-session1?action=execute"/&gt;</screen>
<formalpara>
<title>KIE Server</title>
<para>In this scenario, the <literal>kie-camel</literal> component connects to KIE Server using the KIE Server REST API. This enables users to communicate with the KIE Server using the KIE Server API. To create a producer, use the following URI:</para>
</formalpara>
<screen>kie:http://username:password@kie-server-url`</screen>
<simpara>For example, enter the following command to initialize a Camel route in Spring:</simpara>
<screen>&lt;from uri="direct:runCommand" /&gt;
  	&lt;to uri="kie:http://user:psswd@localhost:8080/kie-server-services/services/rest/server"/&gt;</screen>
<simpara>The message has the following headers:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Message headers and descriptions</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Header</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>CamelKieClient</literal></simpara></entry>
<entry align="left" valign="top"><simpara>KIE Server client (mandatory)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>CamelKieOperation</literal></simpara></entry>
<entry align="left" valign="top"><simpara>KIE Server client (mandatory)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>CamelKieParameterName</literal></simpara></entry>
<entry align="left" valign="top"><simpara>The value of the client method parameter (optional)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>CamelKieBodyParam</literal></simpara></entry>
<entry align="left" valign="top"><simpara>The method parameter where the message body is stored (optional)</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</chapter>
</part>
<part xml:id="assembly-integrating-sso">
<title>Integrating Red Hat Process Automation Manager with Red Hat Single Sign-On</title>
<partintro>
<simpara>As a system administrator, you can integrate Red Hat Single Sign-On with Red Hat Process Automation Manager to secure your Red Hat Process Automation Manager browser applications with a single authentication method.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Red Hat Process Automation Manager is installed on Red Hat JBoss EAP 7.3. For information, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/installing_and_configuring_red_hat_process_automation_manager#assembly-install-on-eap"><emphasis>Installing and configuring Red Hat Process Automation Manager on Red Hat JBoss EAP 7.3</emphasis></link>.</simpara>
</listitem>
</itemizedlist>
</partintro>
<chapter xml:id="sso-int-con">
<title>Integration Options</title>
<simpara>Red Hat Single Sign-On (RH-SSO) is a single sign-on solution that you can use to secure your browser applications with your REST web services and Git access.</simpara>
<simpara>When you integrate Red Hat Process Automation Manager with RH-SSO, you create an SSO and identity management (IDM) environment for Red Hat Process Automation Manager. The session management feature of RH-SSO enables you to use a single authentication for different Red Hat Process Automation Manager environments on the internet.</simpara>
<simpara>The following chapters describe how you can integrate RH-SSO with Red Hat Process Automation Manager:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong"><xref linkend="sso-central-proc_integrate-sso"/></emphasis></simpara>
<simpara>To authenticate Red Hat Process Automation Manager through an RH-SSO server, you must secure both the Red Hat Process Automation Manager web client (Business Central) and remote services through RH-SSO.This integration enables you to connect to Red Hat Process Automation Manager through RH-SSO using either Business Central or a remote service consumer.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong"><xref linkend="sso-kie-server-con_integrate-sso"/></emphasis></simpara>
<simpara>To authenticate KIE Server through an RH-SSO server, you must secure the remote services provided by KIE Server. Doing this enables any remote Red Hat Process Automation Manager service consumer (user or a service) to authenticate through RH-SSO. Note that KIE Server does not have a web interface.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong"><xref linkend="sso-third-party-proc_integrate-sso"/></emphasis></simpara>
<simpara>If Business Central or KIE Server are using RH-SSO, third-party clients must authenticate themselves using RH-SSO. After authentication, they can consume the remote service endpoints provided by Business Central and KIE Server, such as the REST API or remote file system services.</simpara>
</listitem>
</itemizedlist>
<simpara>To facilitate LDAP integration with Red Hat Process Automation Manager, consider using RH-SSO with LDAP. For information, see the "LDAP and Active Directory" chapter of the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.4/html-single/server_administration_guide"><emphasis>Red Hat Single Sign-On Server Administration Guide</emphasis></link>.</simpara>
</chapter>
<chapter xml:id="sso-realm-proc">
<title>Installing and configuring RH-SSO</title>
<simpara>A realm is a security policy domain defined for a web or application server. Security realms are used to restrict access for different application resources. You should create a new realm whether your RH-SSO instance is private or shared with other products. You can keep the master realm as a place for super administrators to create and manage the realms in your system. If you are integrating with an RH-SSO instance that is shared with other product installations to achieve single sign-on with those applications, all of those applications must use the same realm. To create an RH-SSO realm, download, install, and configure RH-SSO 7.4.</simpara>
<note>
<simpara>If Business Central and KIE Server are installed on different servers, complete this procedure on both servers.</simpara>
</note>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html">Software Downloads</link> page in the Red Hat Customer Portal (login required), and select the product and version from the drop-down options:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Product:</emphasis> Red Hat Single Sign-On</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Version:</emphasis> 7.4</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Download <emphasis role="strong">Red Hat Single Sign-on 7.4.3 Server</emphasis> (<literal>rh-sso-7.4.3.zip</literal>) and apply the latest patches.</simpara>
</listitem>
<listitem>
<simpara>To install and configure a basic RH-SSO standalone server, follow the instructions in the "Installing and Booting" chapter of the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.4/html-single/getting_started_guide/#install-boot"><emphasis>Red Hat Single Sign On Getting Started Guide</emphasis></link>. For advanced settings for production environments, see the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.4/html-single/server_administration_guide/"><emphasis>Red Hat Single Sign On Server Administration Guide</emphasis></link>.</simpara>
<note>
<simpara>If you want to run both RH-SSO and Red Hat Process Automation Manager servers on the same system, ensure that you avoid port conflicts. by doing one of the following:</simpara>
<itemizedlist>
<listitem>
<simpara>Update the <literal><emphasis>RHSSO_HOME</emphasis>/standalone/configuration/standalone-full.xml</literal> file and set a port offset to 100. For example:</simpara>
<screen>&lt;socket-binding-group name="standard-sockets" default-interface="public" port-offset="${jboss.socket.binding.port-offset:100}"&gt;</screen>
</listitem>
<listitem>
<simpara>Use an environment variable to run the server:</simpara>
<screen>bin/standalone.sh -Djboss.socket.binding.port-offset=100</screen>
</listitem>
</itemizedlist>
</note>
</listitem>
</orderedlist>
</chapter>
<chapter xml:id="roles-users-con_integrate-sso">
<title>Red Hat Process Automation Manager roles and users</title>
<simpara>To access Business Central or KIE Server, you must create users and assign them appropriate roles before the servers are started. You can create users and roles when you install Business Central or KIE Server.</simpara>
<simpara>Business Central and KIE Server use the Java Authentication and Authorization Service (JAAS) login module to authenticate users. If both Business Central and KIE Server are running on a single instance, then they share the same JAAS subject and security domain. Therefore, a user who is authenticated for Business Central can also access KIE Server.</simpara>
<simpara>However, if Business Central and KIE Server are running on different instances, then the JAAS login module is triggered for both individually. Therefore, a user who is authenticated for Business Central must be authenticated separately to access KIE Server.  For example, if a user who is authenticated on Business Central but not authenticated on KIE Server tries to view or manage process definitions in Business Central, a 401 error is logged in the log file and the <literal>Invalid credentials to load data from remote server. Contact your system administrator.</literal> message appears in Business Central.</simpara>
<simpara>This section describes Red Hat Process Automation Manager user roles.</simpara>
<note>
<simpara>The <literal>admin</literal>,  <literal>analyst</literal>,
<literal>developer</literal>, <literal>manager</literal>, <literal>process-admin</literal>, <literal>user</literal>,
 and <literal>rest-all</literal> roles are reserved for Business Central. The <literal>kie-server</literal> role is reserved for KIE Server. For this reason, the available roles can differ depending on whether Business Central, KIE Server, or both are installed.</simpara>
</note>
<itemizedlist>
<listitem>
<simpara><literal>admin</literal>: Users with the <literal>admin</literal> role are the Business Central administrators. They can manage users and create, clone, and manage repositories. They have full access to make required changes in the application. Users with the <literal>admin</literal> role have access to all areas within Red Hat Process Automation Manager.</simpara>
</listitem>
<listitem>
<simpara><literal>analyst</literal>: Users with the <literal>analyst</literal> role have access to all high-level features. They can model
and execute their
projects. However, these users cannot add contributors to spaces or delete spaces in the <emphasis role="strong">Design â†’ Projects</emphasis> view. Access to the <emphasis role="strong">Deploy â†’ Execution Servers</emphasis> view, which is intended for administrators, is not available to users with the <literal>analyst</literal> role. However, the <emphasis role="strong">Deploy</emphasis> button is available to these users when they access the Library perspective.</simpara>
</listitem>
<listitem>
<simpara><literal>developer</literal>: Users with the <literal>developer</literal> role have access to almost all features and can manage rules, models, process flows, forms, and dashboards. They can manage the asset repository, they can create, build, and deploy projects, and they can use Red Hat CodeReady Studio to view processes. Only certain administrative functions such as creating and cloning a new repository are hidden from users with the <literal>developer</literal> role.</simpara>
</listitem>
<listitem>
<simpara><literal>manager</literal>: Users with the <literal>manager</literal> role can view reports. These users are usually interested in statistics about the business processes and their performance, business indicators, and other business-related reporting. A user with this role has access only to process and task reports.</simpara>
</listitem>
<listitem>
<simpara><literal>process-admin</literal>: Users with the <literal>process-admin</literal> role are business process administrators. They have full access to business processes, business tasks, and execution errors. These users can also view business reports and have access to the Task Inbox list.</simpara>
</listitem>
<listitem>
<simpara><literal>user</literal>: Users with the <literal>user</literal> role can work on the Task Inbox list, which contains business tasks that are part of currently running processes. Users with this role can view process and task reports and manage processes.</simpara>
</listitem>
<listitem>
<simpara><literal>rest-all</literal>: Users with the <literal>rest-all</literal> role can access Business Central REST capabilities.</simpara>
</listitem>
<listitem>
<simpara><literal>kie-server</literal>: Users with the <literal>kie-server</literal> role can access KIE Server REST capabilities.
This role is mandatory for users to have access to <emphasis role="strong">Manage</emphasis> and <emphasis role="strong">Track</emphasis> views in Business Central.</simpara>
</listitem>
</itemizedlist>
<section xml:id="sso-user-add-proc">
<title>Adding Red Hat Process Automation Manager users</title>
<simpara>Before you can use RH-SSO to authenticate Business Central or KIE Server, you must add users to the realm that you created. To add new users and assign them a role to access Red Hat Process Automation Manager, complete the following steps:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Log in to the RH-SSO Admin Console and open the realm that you want to add a user to.</simpara>
</listitem>
<listitem>
<simpara>Click the <emphasis role="strong">Users</emphasis> menu item under the <emphasis role="strong">Manage</emphasis> section.</simpara>
<simpara>An empty user list appears on the <emphasis role="strong">Users</emphasis> page.</simpara>
</listitem>
<listitem>
<simpara>Click the <emphasis role="strong">Add User</emphasis> button on the empty user list to start creating your new user.</simpara>
<simpara>The <emphasis role="strong">Add User</emphasis> page opens.</simpara>
</listitem>
<listitem>
<simpara>On the <emphasis role="strong">Add User</emphasis> page, enter the user information and click <emphasis role="strong">Save</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Click the <emphasis role="strong">Credentials</emphasis> tab and create a password.</simpara>
</listitem>
<listitem>
<simpara>Assign the new user one of the roles that allows access to Red Hat Process Automation Manager. For example, assign the <literal>admin</literal> role to access Business Central or assign the <literal>kie-server</literal> role to access KIE Server.</simpara>
<note>
<simpara>For projects that deploy from Business Central on OpenShift, create an RH-SSO user called <literal>mavenuser</literal> without any role assigned, then add this user to the <literal>BUSINESS_CENTRAL_MAVEN_USERNAME</literal> and <literal>BUSINESS_CENTRAL_MAVEN_PASSWORD</literal> in your OpenShift template.</simpara>
</note>
</listitem>
<listitem>
<simpara>Define the roles as realm roles in the <emphasis role="strong">Realm Roles</emphasis> tab under the <emphasis role="strong">Roles</emphasis> section.</simpara>
</listitem>
<listitem>
<simpara>Click the <emphasis role="strong">Role Mappings</emphasis> tab on the <emphasis role="strong">Users</emphasis> page to assign roles.</simpara>
</listitem>
</orderedlist>
</section>
</chapter>
<chapter xml:id="sso-central-proc_integrate-sso">
<title>Authenticating Business Central through RH-SSO</title>
<simpara>This chapter describes how to authenticate Business Central through RH-SSO. It includes the following sections:</simpara>
<itemizedlist>
<listitem>
<simpara><xref linkend="sso-central-client-create-proc"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="sso-client-adapter-proc"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="sso-remote-services-securing-proc"/></simpara>
</listitem>
</itemizedlist>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Business Central is installed in a Red Hat JBoss EAP 7.3 server, as described in <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/installing_and_configuring_red_hat_process_automation_manager#assembly-install-on-eap"><emphasis>Installing and configuring Red Hat Process Automation Manager on Red Hat JBoss EAP 7.3</emphasis></link>.</simpara>
</listitem>
<listitem>
<simpara>RH-SSO is installed as described in <xref linkend="sso-realm-proc"/>.</simpara>
</listitem>
<listitem>
<simpara>Business Central users have been added to RH-SSO as described in <xref linkend="sso-user-add-proc"/>.</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>Except for <xref linkend="sso-central-client-create-proc"/>, this section is intended for standalone installations. If you are integrating RH-SSO and Red Hat Process Automation Manager on Red Hat OpenShift Container Platform, complete only the steps in <xref linkend="sso-central-client-create-proc"/> and then deploy the Red Hat Process Automation Manager environment on Red Hat OpenShift Container Platform. For information about deploying Red Hat Process Automation Manager on Red Hat OpenShift Container Platform, see the relevant document on the
<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/">Red Hat Customer Portal</link>.</simpara>
</note>
<section xml:id="sso-central-client-create-proc">
<title>Creating the Business Central client for RH-SSO</title>
<simpara>After the RH-SSO server starts, use the  RH-SSO Admin Console to create the Business Central client for RH-SSO.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Enter <literal>http://localhost:8180/auth/admin</literal> in a web browser to open the RH-SSO Admin Console  and log in using the admin credentials that you created while installing RH-SSO.</simpara>
<note>
<simpara>If you are configuring RH-SSO with Red Hat OpenShift Container Platform, enter the URL that is exposed by the RH-SSO routes. Your OpenShift administrator can provide this URL if necessary.</simpara>
</note>
<simpara>When you login for the first time, you can set up the initial user on the new user registration form.</simpara>
</listitem>
<listitem>
<simpara>In the RH-SSO Admin Console, click the <emphasis role="strong">Realm Settings</emphasis> menu item.</simpara>
</listitem>
<listitem>
<simpara>On the <emphasis role="strong">Realm Settings</emphasis> page, click <emphasis role="strong">Add Realm</emphasis>.</simpara>
<simpara>The <emphasis role="strong">Add realm</emphasis> page opens.</simpara>
</listitem>
<listitem>
<simpara>On the <emphasis role="strong">Add realm</emphasis> page, provide a name for the realm and click <emphasis role="strong">Create</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Click the <emphasis role="strong">Clients</emphasis> menu item and click <emphasis role="strong">Create</emphasis>.</simpara>
<simpara>The <emphasis role="strong">Add Client</emphasis> page opens.</simpara>
</listitem>
<listitem>
<simpara>On the <emphasis role="strong">Add Client</emphasis> page, provide the required information to create a new client for your realm. For example:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Client ID</emphasis>: kie</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Client protocol</emphasis>: openid-connect</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Root URL</emphasis>: <literal>http://<emphasis>localhost</emphasis>:8080/business-central</literal></simpara>
<note>
<simpara>If you are configuring RH-SSO with Red Hat OpenShift Container Platform, enter the URL that is exposed by the KIE Server routes. Your OpenShift administrator can provide this URL if necessary.</simpara>
</note>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Save</emphasis> to save your changes.</simpara>
<simpara>After you create a new client, its <emphasis role="strong">Access Type</emphasis> is set to <literal>public</literal> by default. Change it to <literal>confidential</literal>.</simpara>
<simpara>The RH-SSO server is now configured with a realm with a client for Business Central applications and running and listening for HTTP connections at <literal role="parameter">localhost:8180</literal>. This realm provides different users, roles, and sessions for Business Central applications.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="sso-client-adapter-proc">
<title>Installing the RH-SSO client adapter for Business Central</title>
<simpara>After you install RH-SSO, you must install the RH-SSO client adapter for Red Hat JBoss EAP and configure it for Business Central.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Business Central is installed in a Red Hat JBoss EAP 7.3 instance, as described in as described in <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/installing_and_configuring_red_hat_process_automation_manager#assembly-install-on-eap"><emphasis>Installing and configuring Red Hat Process Automation Manager on Red Hat JBoss EAP 7.3</emphasis></link>.</simpara>
</listitem>
<listitem>
<simpara>RH-SSO is installed as described in <xref linkend="sso-realm-proc"/>.</simpara>
</listitem>
<listitem>
<simpara>A user with the <literal>admin</literal> role has been added to RH-SSO as described in <xref linkend="sso-user-add-proc"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html">Software Downloads</link> page in the Red Hat Customer Portal (login required), and select the product and version from the drop-down options:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Product:</emphasis> Red Hat Single Sign-On</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Version:</emphasis> 7.4</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Download <emphasis role="strong">Red Hat Single Sign-on 7.4 Client Adapter for JBoss EAP 7</emphasis> (<literal>rh-sso-7.4.3-eap7-adapter.zip</literal> or the latest version).</simpara>
</listitem>
<listitem>
<simpara>Extract and install the adapter zip file. For installation instructions, see the "JBoss EAP Adapter" section of the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.4/html-single/securing_applications_and_services_guide"><emphasis>Red Hat Single Sign On Securing Applications and Services Guide</emphasis></link>.</simpara>
<note>
<simpara>Install the adapter with the <literal>-Dserver.config=standalone-full.xml</literal> property.</simpara>
</note>
</listitem>
<listitem>
<simpara>Navigate to the <literal><emphasis>EAP_HOME</emphasis>/standalone/configuration</literal> directory in your Red Hat JBoss EAP installation and open the <literal>standalone-full.xml</literal> file in a text editor.</simpara>
</listitem>
<listitem>
<simpara>Add the system properties listed in the following example to <literal>&lt;system-properties&gt;</literal>:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;system-properties&gt;
  &lt;property name="org.jbpm.workbench.kie_server.keycloak" value="true"/&gt;
  &lt;property name="org.uberfire.ext.security.management.api.userManagementServices" value="KCAdapterUserManagementService"/&gt;
  &lt;property name="org.uberfire.ext.security.management.keycloak.authServer" value="http://localhost:8180/auth"/&gt;
&lt;/system-properties&gt;</programlisting>
</listitem>
<listitem>
<simpara>Add the RH-SSO subsystem configuration. For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;subsystem xmlns="urn:jboss:domain:keycloak:1.1"&gt;
 &lt;secure-deployment name="business-central.war"&gt;
   &lt;realm&gt;demo&lt;/realm&gt;
   &lt;realm-public-key&gt;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCrVrCuTtArbgaZzL1hvh0xtL5mc7o0NqPVnYXkLvgcwiC3BjLGw1tGEGoJaXDuSaRllobm53JBhjx33UNv+5z/UMG4kytBWxheNVKnL6GgqlNabMaFfPLPCF8kAgKnsi79NMo+n6KnSY8YeUmec/p2vjO2NjsSAVcWEQMVhJ31LwIDAQAB&lt;/realm-public-key&gt;
   &lt;auth-server-url&gt;http://localhost:8180/auth&lt;/auth-server-url&gt;
   &lt;ssl-required&gt;external&lt;/ssl-required&gt;
   &lt;enable-basic-auth&gt;true&lt;/enable-basic-auth&gt;
   &lt;resource&gt;kie&lt;/resource&gt;
   &lt;credential name="secret"&gt;759514d0-dbb1-46ba-b7e7-ff76e63c6891&lt;/credential&gt;
   &lt;principal-attribute&gt;preferred_username&lt;/principal-attribute&gt;
 &lt;/secure-deployment&gt;
&lt;/subsystem&gt;</programlisting>
<simpara>In this example:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>secure-deployment name</literal> is the name of your applicationâ€™s WAR file.</simpara>
</listitem>
<listitem>
<simpara><literal>realm</literal> is the name of the realm that you created for the applications to use.</simpara>
</listitem>
<listitem>
<simpara><literal>realm-public-key</literal> is the public key of the realm you created. You can find the key in the <emphasis role="strong">Keys</emphasis> tab in the <emphasis role="strong">Realm settings</emphasis> page of the realm you created in the RH-SSO Admin Console. If you do not provide a value for <literal>realm-public-key</literal>, the server retrieves it automatically.</simpara>
</listitem>
<listitem>
<simpara><literal>auth-server-url</literal> is the  URL for the RH-SSO authentication server.</simpara>
</listitem>
<listitem>
<simpara><literal>enable-basic-auth</literal> is the  setting to enable basic authentication mechanism, so that the clients can use both token-based and basic authentication approaches to perform the requests.</simpara>
</listitem>
<listitem>
<simpara><literal>resource</literal> is the  name for the client that you created.</simpara>
</listitem>
<listitem>
<simpara><literal>credential name</literal> is the  secret key for the client you created. You can find the key in the <emphasis role="strong">Credentials</emphasis> tab on the <emphasis role="strong">Clients</emphasis> page of the RH-SSO Admin Console.</simpara>
</listitem>
<listitem>
<simpara><literal>principal-attribute</literal> is the login name of the user. If you do not provide this value, your User Id is displayed in the application instead of your user name.</simpara>
<note>
<simpara>The RH-SSO server converts the user names to lower case. Therefore, after integration with RH-SSO, your user name will appear in lower case in Red Hat Process Automation Manager. If you have user names in upper case hard coded in business processes, the application might not be able to identify the upper case user.</simpara>
</note>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>The Elytron subsystem provides a built-in policy provider based on JACC specification. To enable the JACC manually in the <literal>standalone.xml</literal> or in the file where Elytron is installed, do any of the following tasks:</simpara>
<itemizedlist>
<listitem>
<simpara>To create the policy provider, enter the following commands in the management command-line interface (CLI) of Red Hat JBoss EAP:</simpara>
<screen>/subsystem=elytron/policy=jacc:add(jacc-policy={})
/subsystem=undertow/application-security-domain=other:remove
/subsystem=undertow/application-security-domain=other:add(http-authentication-factory=keycloak-http-authentication,enable-jacc=true)</screen>
<simpara>For more information about management CLI of Red Hat JBoss EAP, see the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/management_cli_guide/index"><emphasis>Management CLI Guide</emphasis></link>.</simpara>
</listitem>
<listitem>
<simpara>Navigate to the <literal><emphasis>EAP_HOME</emphasis>/standalone/configuration</literal> directory in your Red Hat JBoss EAP installation.
Locate the Elytron and undertow subsystem configurations in the <literal>standalone.xml</literal> and <literal>standalone-full.xml</literal> files and enable JACC. For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;subsystem xmlns="urn:wildfly:elytron:4.0" ...&gt;
......
 &lt;policy name="jacc"&gt;&lt;jacc-policy/&gt;&lt;/policy&gt;
&lt;/subsystem&gt;</programlisting>
<programlisting language="xml" linenumbering="unnumbered">&lt;subsystem xmlns="urn:jboss:domain:undertow:7.0" ...&gt;
......
 &lt;application-security-domains&gt;
    &lt;application-security-domain name="other" http-authentication-factory="keycloak-http-authentication" enable-jacc="true"/&gt;
 &lt;/application-security-domains&gt;
&lt;/subsystem&gt;</programlisting>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Navigate to <literal><emphasis>EAP_HOME</emphasis>/bin/</literal> and enter the following command to start the Red Hat JBoss EAP server:</simpara>
<screen>./standalone.sh -c standalone-full.xml</screen>
</listitem>
</orderedlist>
<note>
<simpara>You can also configure the RH-SSO adapter for Business Central by updating your applicationâ€™s WAR file to use the RH-SSO security subsystem. However, Red Hat recommends that you configure the adapter through the RH-SSO subsystem. Doing this updates the Red Hat JBoss EAP configuration instead of applying the configuration on each WAR file.</simpara>
</note>
</section>
<section xml:id="sso-remote-services-securing-proc">
<title>Securing Business Central file system services using RH-SSO</title>
<simpara>To consume other remote services such as file systems (for example, a remote GIT service), you must specify the correct RH-SSO login module.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Generate a JSON configuration file:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Navigate to the <emphasis role="strong">RH-SSO Admin Console</emphasis> located at http://localhost:8180/auth/admin.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Clients</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Create a new client with the following settings:</simpara>
<itemizedlist>
<listitem>
<simpara>Set <emphasis role="strong">Client ID</emphasis> as <literal>kie-git</literal>.</simpara>
</listitem>
<listitem>
<simpara>Set <emphasis role="strong">Access Type</emphasis> as <literal>confidential</literal>.</simpara>
</listitem>
<listitem>
<simpara>Disable the <emphasis role="strong">Standard Flow Enabled</emphasis> option.</simpara>
</listitem>
<listitem>
<simpara>Enable the <emphasis role="strong">Direct Access Grants Enabled</emphasis> option.</simpara>
</listitem>
</itemizedlist>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/integration/kie_git_client_settings.png"/>
</imageobject>
<textobject><phrase>kie git client settings</phrase></textobject>
</mediaobject>
</informalfigure>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Save</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Click the <emphasis role="strong">Installation</emphasis> tab at the top of the client configuration screen and choose <emphasis role="strong">Keycloak OIDC JSON</emphasis> as a <emphasis role="strong">Format Option</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Download</emphasis>.</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>Move the downloaded JSON file to an accessible directory in the serverâ€™s file system or add it to the application class path.</simpara>
</listitem>
<listitem>
<simpara>Specify the correct RH-SSO login module in the <literal><emphasis>EAP_HOME</emphasis>/standalone/configuration/standalone-full.xml</literal> file. By default, the security domain in Red Hat Process Automation Manager is set to <literal>other</literal>. Replace the default values of the <literal>login-module</literal> in this security domain with the values in the following example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;security-domain name="other" cache-type="default"&gt;
  &lt;authentication&gt;
    &lt;login-module code="org.keycloak.adapters.jaas.DirectAccessGrantsLoginModule" flag="required"&gt;
      &lt;module-option name="keycloak-config-file" value="$EAP_HOME/kie-git.json"/&gt;
    &lt;/login-module&gt;
  &lt;/authentication&gt;
&lt;/security-domain&gt;</programlisting>
</listitem>
<listitem>
<simpara>The JSON file specified in the <literal>module-option</literal> element contains a client used for securing the remote services. Replace the <literal>$<emphasis>EAP_HOME</emphasis>/kie-git.json</literal> value of the <literal>module-option</literal> element with the absolute path or the class path (<literal>classpath:/<emphasis>EXAMPLE_PATH</emphasis>/kie-git.json</literal>) to this JSON configuration file.</simpara>
<simpara>At this point, all users authenticated through the RH-SSO server can clone internal GIT repositories. In the following command, change <literal>USER_NAME</literal> to a RH-SSO user, for example <literal>admin</literal>:</simpara>
<screen>git clone ssh://USER_NAME@localhost:8001/system</screen>
</listitem>
</orderedlist>
</section>
</chapter>
<chapter xml:id="sso-kie-server-con_integrate-sso">
<title>Authenticating KIE Server through RH-SSO</title>
<simpara>KIE Server provides a REST API for third-party clients. If you integrate KIE Server with RH-SSO, you can delegate third-party client identity management to the RH-SSO server.</simpara>
<simpara>After you create a realm client for Red Hat Process Automation Manager and set up the RH-SSO client adapter for Red Hat JBoss EAP, you can set up RH-SSO authentication for KIE Server.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>RH-SSO is installed as described in <xref linkend="sso-realm-proc"/>.</simpara>
</listitem>
<listitem>
<simpara>At least one user with the <literal>kie-server</literal> role has been added to RH-SSO as described in <xref linkend="sso-user-add-proc"/>.</simpara>
</listitem>
<listitem>
<simpara>KIE Server is installed in a Red Hat JBoss EAP 7.3 instance, as described in <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/installing_and_configuring_red_hat_process_automation_manager#assembly-install-on-eap"><emphasis>Installing and configuring Red Hat Process Automation Manager on Red Hat JBoss EAP 7.3</emphasis></link>.</simpara>
</listitem>
</itemizedlist>
<simpara>This chapter contains the following sections:</simpara>
<itemizedlist>
<listitem>
<simpara><xref linkend="sso-kie-server-client-proc"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="sso-kie-server-client-adapter-proc"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="sso-kie-server-token-proc"/></simpara>
</listitem>
</itemizedlist>
<note>
<simpara>Except for <xref linkend="sso-kie-server-client-proc"/>, this section is intended for standalone installations. If you are integrating RH-SSO and Red Hat Process Automation Manager on Red Hat OpenShift Container Platform, complete the steps in <xref linkend="sso-kie-server-client-proc"/> and then deploy the Red Hat Process Automation Manager environment on Red Hat OpenShift Container Platform. For information about deploying Red Hat Process Automation Manager on Red Hat OpenShift Container Platform, see the relevant document on the
<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/">Red Hat Customer Portal</link>.</simpara>
</note>
<section xml:id="sso-kie-server-client-proc">
<title>Creating the KIE Server client on RH-SSO</title>
<simpara>Use the RH-SSO Admin Console to create a KIE Server client in an existing realm.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>KIE Server is installed in a Red Hat JBoss EAP 7.3 server, as described in <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/installing_and_configuring_red_hat_process_automation_manager#assembly-install-on-eap"><emphasis>Installing and configuring Red Hat Process Automation Manager on Red Hat JBoss EAP 7.3</emphasis></link>.</simpara>
</listitem>
<listitem>
<simpara>RH-SSO is installed as described in <xref linkend="sso-realm-proc"/>.</simpara>
</listitem>
<listitem>
<simpara>At least one user with the <literal>kie-server</literal> role has been added to RH-SSO as described in <xref linkend="sso-user-add-proc"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>In the RH-SSO Admin Console, open the security realm that you created in <xref linkend="sso-realm-proc"/>.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Clients</emphasis> and click <emphasis role="strong">Create</emphasis>.</simpara>
<simpara>The <emphasis role="strong">Add Client</emphasis> page opens.</simpara>
</listitem>
<listitem>
<simpara>On the <emphasis role="strong">Add Client</emphasis> page, provide the required information to create a KIE Server client for your realm, then click <emphasis role="strong">Save</emphasis>. For example:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Client ID</emphasis>: <literal>kie-execution-server</literal></simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Root URL</emphasis>: <literal>http://<emphasis>localhost</emphasis>:8080/kie-server</literal></simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Client protocol</emphasis>: <literal>openid-connect</literal></simpara>
<note>
<simpara>If you are configuring RH-SSO with Red Hat OpenShift Container Platform, enter the URL that is exposed by the KIE Server routes. Your OpenShift administrator can provide this URL if necessary.</simpara>
</note>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>The new client <emphasis role="strong">Access Type</emphasis> is set to <literal>public</literal> by default. Change it to <literal>confidential</literal> and click <emphasis role="strong">Save</emphasis> again.</simpara>
</listitem>
<listitem>
<simpara>Navigate to the <emphasis role="strong">Credentials</emphasis> tab and copy the secret key. The secret key is required to configure the <literal>kie-execution-server</literal> client.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="sso-kie-server-client-adapter-proc">
<title>Installing and configuring KIE Server with the client adapter</title>
<simpara>After you install RH-SSO, you must install the RH-SSO client adapter for Red Hat JBoss EAP and configure it for KIE Server.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>KIE Server is installed in a Red Hat JBoss EAP 7.3 server, as described in <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/installing_and_configuring_red_hat_process_automation_manager#assembly-install-on-eap"><emphasis>Installing and configuring Red Hat Process Automation Manager on Red Hat JBoss EAP 7.3</emphasis></link>.</simpara>
</listitem>
<listitem>
<simpara>RH-SSO is installed as described in <xref linkend="sso-realm-proc"/>.</simpara>
</listitem>
<listitem>
<simpara>At least one user with the <literal>kie-server</literal> role has been added to RH-SSO as described in <xref linkend="sso-user-add-proc"/>.</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>If you deployed KIE Server to a different application server than Business Central, install and configure RH-SSO on your second server as well.</simpara>
</note>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html">Software Downloads</link> page in the Red Hat Customer Portal (login required), and select the product and version from the drop-down options:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Product:</emphasis> Red Hat Single Sign-On</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Version:</emphasis> 7.4</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Download <emphasis role="strong">Red Hat Single Sign-on 7.4 Client Adapter for JBoss EAP 7</emphasis> (<literal>rh-sso-7.4.3-eap7-adapter.zip</literal> or the latest version).</simpara>
</listitem>
<listitem>
<simpara>Extract and install the adapter zip file. For installation instructions, see the "JBoss EAP Adapter" section of the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.4/html-single/securing_applications_and_services_guide/#jboss_adapter"><emphasis>Red Hat Single Sign On Securing Applications and Services Guide</emphasis></link>.</simpara>
</listitem>
<listitem>
<simpara>Go to <literal><emphasis>EAP_HOME</emphasis>/standalone/configuration</literal> and open the <literal>standalone-full.xml</literal> file.</simpara>
</listitem>
<listitem>
<simpara>Delete the <literal>&lt;single-sign-on/&gt;</literal> element from both of the files.</simpara>
</listitem>
<listitem>
<simpara>Navigate to <literal><emphasis>EAP_HOME</emphasis>/standalone/configuration</literal> directory in your Red Hat JBoss EAP installation and edit the <literal>standalone-full.xml</literal> file to add the RH-SSO subsystem configuration. For example:</simpara>
</listitem>
<listitem>
<simpara>Navigate to <literal><emphasis>EAP_HOME</emphasis>/standalone/configuration</literal> in your Red Hat JBoss EAP installation and edit the <literal>standalone-full.xml</literal> file to add the RH-SSO subsystem configuration. For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;subsystem xmlns="urn:jboss:domain:keycloak:1.1"&gt;
  &lt;secure-deployment name="kie-server.war"&gt;
     &lt;realm&gt;demo&lt;/realm&gt;
     &lt;realm-public-key&gt;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCrVrCuTtArbgaZzL1hvh0xtL5mc7o0NqPVnYXkLvgcwiC3BjLGw1tGEGoJaXDuSaRllobm53JBhjx33UNv+5z/UMG4kytBWxheNVKnL6GgqlNabMaFfPLPCF8kAgKnsi79NMo+n6KnSY8YeUmec/p2vjO2NjsSAVcWEQMVhJ31LwIDAQAB&lt;/realm-public-key&gt;
     &lt;auth-server-url&gt;http://localhost:8180/auth&lt;/auth-server-url&gt;
     &lt;ssl-required&gt;external&lt;/ssl-required&gt;
     &lt;resource&gt;kie-execution-server&lt;/resource&gt;
     &lt;enable-basic-auth&gt;true&lt;/enable-basic-auth&gt;
     &lt;credential name="secret"&gt;03c2b267-7f64-4647-8566-572be673f5fa&lt;/credential&gt;
     &lt;principal-attribute&gt;preferred_username&lt;/principal-attribute&gt;
  &lt;/secure-deployment&gt;
&lt;/subsystem&gt;

&lt;system-properties&gt;
  &lt;property name="org.kie.server.sync.deploy" value="false"/&gt;
&lt;/system-properties&gt;</programlisting>
<simpara>In this example:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>secure-deployment name</literal> is the name of your application WAR file.</simpara>
</listitem>
<listitem>
<simpara><literal>realm</literal> is the name of the realm that you created for the applications to use.</simpara>
</listitem>
<listitem>
<simpara><literal>realm-public-key</literal> is the  public key of the realm you created. You can find the key in the <emphasis role="strong">Keys</emphasis> tab in the <emphasis role="strong">Realm settings</emphasis> page of the realm you created in the RH-SSO Admin Console. If you do not provide a value for this public key, the server retrieves it automatically.</simpara>
</listitem>
<listitem>
<simpara><literal>auth-server-url</literal> is the  URL for the RH-SSO authentication server.</simpara>
</listitem>
<listitem>
<simpara><literal>resource</literal> is the name for the server client that you created.</simpara>
</listitem>
<listitem>
<simpara><literal>enable-basic-auth</literal> is the setting to enable basic authentication mechanism, so that the clients can use both token-based and basic authentication approaches to perform the requests.</simpara>
</listitem>
<listitem>
<simpara><literal>credential name</literal> is the secret key of the server client you created. You can find the key in the <emphasis role="strong">Credentials</emphasis> tab on the <emphasis role="strong">Clients</emphasis> page of the RH-SSO Admin Console.</simpara>
</listitem>
<listitem>
<simpara><literal>principal-attribute</literal> is the login name of the user. If you do not provide this value, your User Id is displayed in the application instead of your user name.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Save your configuration changes.</simpara>
</listitem>
<listitem>
<simpara>Use the following command to restart the Red Hat JBoss EAP server and run KIE Server.</simpara>
<screen>EXEC_SERVER_HOME/bin/standalone.sh -c standalone-full.xml -Dorg.kie.server.id=&lt;ID&gt; -Dorg.kie.server.user=&lt;USER&gt; -Dorg.kie.server.pwd=&lt;PWD&gt; -Dorg.kie.server.location=&lt;LOCATION_URL&gt; -Dorg.kie.server.controller=&lt;CONTROLLER_URL&gt; -Dorg.kie.server.controller.user=&lt;CONTROLLER_USER&gt; -Dorg.kie.server.controller.pwd=&lt;CONTOLLER_PASSWORD&gt;</screen>
<simpara>For example:</simpara>
<screen>EXEC_SERVER_HOME/bin/standalone.sh -c standalone-full.xml -Dorg.kie.server.id=kieserver1 -Dorg.kie.server.user=kieserver -Dorg.kie.server.pwd=password -Dorg.kie.server.location=http://localhost:8080/kie-server/services/rest/server -Dorg.kie.server.controller=http://localhost:8080/business-central/rest/controller -Dorg.kie.server.controller.user=kiecontroller -Dorg.kie.server.controller.pwd=password</screen>
</listitem>
<listitem>
<simpara>When KIE Server is running, enter the following command to check the server status, where <literal>&lt;KIE_SERVER_USER&gt;</literal> is a user with the <literal>kie-server</literal> role and <literal>&lt;PASSWORD&gt;</literal> is the password for that user:</simpara>
<screen>curl http://&lt;KIE_SERVER_USER&gt;:&lt;PASSWORD&gt;@localhost:8080/kie-server/services/rest/server/</screen>
</listitem>
</orderedlist>
</section>
<section xml:id="sso-kie-server-token-proc">
<title>KIE Server token-based authentication</title>
<simpara>You can also use token-based authentication for communication between Red Hat Process Automation Manager and KIE Server. You can use the complete token as a system property of your application server, instead of the user name and password, for your applications. However, you must ensure that the token will not expire while the applications are interacting because the token is not automatically refreshed. To get the token, see <xref linkend="sso-token-auth-proc"/>.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>To configure Business Central to manage KIE Server using tokens:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Set the <literal>org.kie.server.token</literal> property.</simpara>
</listitem>
<listitem>
<simpara>Make sure that the <literal>org.kie.server.user</literal> and <literal>org.kie.server.pwd</literal> properties are not set.</simpara>
<simpara>Red Hat Process Automation Manager will then use the <literal>Authorization: Bearer $TOKEN</literal> authentication method.</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>To use the REST API using the token-based authentication:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Set the <literal>org.kie.server.controller.token</literal> property.</simpara>
</listitem>
<listitem>
<simpara>Make sure that the <literal>org.kie.server.controller.user</literal> and <literal>org.kie.server.controller.pwd</literal> properties are not set.</simpara>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
<note>
<simpara>Because KIE Server is unable to refresh the token, use a high-lifespan token. A tokenâ€™s lifespan must not exceed January 19 2038. Check with your security best practices to see whether this is a suitable solution for your environment.</simpara>
</note>
</section>
</chapter>
<chapter xml:id="sso-third-party-proc_integrate-sso">
<title>Authenticating third-party clients through RH-SSO</title>
<simpara>To use the different remote services provided by Business Central or by KIE Server, your client, such as curl, wget, web browser, or a custom REST client, must authenticate through the RH-SSO server and have a valid token to perform the requests. To use the remote services, the authenticated user must have the following roles:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>rest-all</literal> for using Business Central remote services.</simpara>
</listitem>
<listitem>
<simpara><literal>kie-server</literal> for using the KIE Server remote services.</simpara>
</listitem>
</itemizedlist>
<simpara>Use the RH-SSO Admin Console to create these roles and assign them to the users that will consume the remote services.</simpara>
<simpara>Your client can authenticate through RH-SSO using one of these options:</simpara>
<itemizedlist>
<listitem>
<simpara>Basic authentication, if it is supported by the client</simpara>
</listitem>
<listitem>
<simpara>Token-based authentication</simpara>
</listitem>
</itemizedlist>
<section xml:id="sso-basic-auth-proc_integrate-sso">
<title>Basic authentication</title>
<simpara>If you enabled basic authentication in the RH-SSO client adapter configuration for both Business Central and KIE Server, you can avoid the token grant and refresh calls and call the services as shown in the following examples:</simpara>
<itemizedlist>
<listitem>
<simpara>For web based remote repositories endpoint:</simpara>
<screen>curl http://admin:password@localhost:8080/business-central/rest/repositories</screen>
</listitem>
<listitem>
<simpara>For KIE Server:</simpara>
<screen>curl http://admin:password@localhost:8080/kie-server/services/rest/server/</screen>
</listitem>
</itemizedlist>
</section>
<section xml:id="sso-token-auth-proc">
<title>Token-based authentication</title>
<simpara>If you want a more secure option of authentication, you can consume the remote services from both Business Central and KIE Server by using a granted token provided by RH-SSO.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>In the RH-SSO Admin Console, click the <emphasis role="strong">Clients</emphasis> menu item and click <emphasis role="strong">Create</emphasis> to create a new client.</simpara>
<simpara>The <emphasis role="strong">Add Client</emphasis> page opens.</simpara>
</listitem>
<listitem>
<simpara>On the <emphasis role="strong">Add Client</emphasis> page, provide the required information to create a new client for your realm. For example:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Client ID</emphasis>: kie-remote</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Client protocol</emphasis>: openid-connect</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Save</emphasis> to save your changes.</simpara>
</listitem>
<listitem>
<simpara>Change the token settings in <emphasis role="strong">Realm Settings</emphasis>:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>In the RH-SSO Admin Console, click the <emphasis role="strong">Realm Settings</emphasis> menu item.</simpara>
</listitem>
<listitem>
<simpara>Click the <emphasis role="strong">Tokens</emphasis> tab.</simpara>
</listitem>
<listitem>
<simpara>Change the value for <emphasis role="strong">Access Token Lifespan</emphasis> to <literal role="parameter">15</literal> minutes.</simpara>
<simpara>This gives you enough time to get a token and invoke the service before it expires.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Save</emphasis> to save your changes.</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>After a public client for your remote clients is created, you can now obtain the token by making an HTTP request to the RH-SSO serverâ€™s token endpoint using:</simpara>
<screen>RESULT=`curl --data "grant_type=password&amp;client_id=kie-remote&amp;username=admin&amp;password=password" http://localhost:8180/auth/realms/demo/protocol/openid-connect/token`</screen>
<simpara>The user in this command is a Business Central RH-SSO user. For more information, see <xref linkend="sso-user-add-proc"/>.</simpara>
</listitem>
<listitem>
<simpara>To view the token obtained from the RH-SSO server, use the following command:</simpara>
<screen>TOKEN=`echo $RESULT | sed 's/.*access_token":"//g' | sed 's/".*//g'`</screen>
</listitem>
</orderedlist>
<simpara>You can now use this token to authorize the remote calls.
For example, if you want to check the internal Red Hat Process Automation Manager repositories, use the token as shown below:</simpara>
<screen>curl -H "Authorization: bearer $TOKEN" http://localhost:8080/business-central/rest/repositories</screen>
</section>
</chapter>
</part>
<part xml:id="assembly-integrating-codeready-studio">
<title>Integrating Red Hat CodeReady Studio with Red Hat Process Automation Manager</title>
<partintro>
<simpara>As a developer, you can integrate Red Hat CodeReady Studio with Red Hat Process Automation Manager to write complex applications and leverage code auto-completion.</simpara>
</partintro>
<chapter xml:id="codeready-studio-install-proc">
<title>Installing Red Hat CodeReady Studio</title>
<simpara>Red Hat CodeReady Studio is an integrated development environment (IDE) based on Eclipse. It integrates tooling and runtime components by combining Eclipse, Eclipse Tooling, and Red Hat JBoss Enterprise Application Platform. Red Hat CodeReady Studio provides plug-ins with tools and interfaces for Red Hat Process Automation Manager.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Download Red Hat CodeReady Studio:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Log in to the <link xlink:href="https://access.redhat.com">Red Hat Customer Portal</link>.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">DOWNLOADS</emphasis> at the top of the page.</simpara>
</listitem>
<listitem>
<simpara>On the <emphasis role="strong">Product Downloads</emphasis> page, navigate to the <emphasis role="strong">RUNTIMES</emphasis> section, and click <emphasis role="strong">Red Hat Developer Studio</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>On the <emphasis role="strong">Software Downloads</emphasis> page, download <emphasis role="strong">Red Hat CodeReady Studio 12.17.0 Stand-alone Installer</emphasis> (<literal>codereadystudio-12.17.0.GA-installer-standalone.jar</literal>).</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>In a terminal window, navigate to the directory where you downloaded the installer JAR file and enter the following command:</simpara>
<screen>java -jar codereadystudio-12.17.0.GA-installer-standalone.jar</screen>
</listitem>
<listitem>
<simpara>Follow the instructions in the installer to complete the installation.</simpara>
<simpara>For more information, see the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_codeready_studio/12.17/html/installation_guide/"><emphasis>Red Hat CodeReady Studio Installation Guide</emphasis></link>.</simpara>
</listitem>
</orderedlist>
<important>
<simpara>Because of an issue in the way multi-byte rule names are handled, you must ensure that the instance of Red Hat CodeReady Studio is started with the file encoding set to <literal>UTF-8</literal>. You can do this by editing the <literal>$<emphasis>DS_HOME</emphasis>/studio/codereadystudio.ini</literal> file and adding the following property: <literal>"-Dfile.encoding=UTF-8"</literal>.</simpara>
</important>
</chapter>
<chapter xml:id="codeready-studio-plug-in-install-proc">
<title>Installing Red Hat CodeReady Studio plug-ins</title>
<simpara>The Red Hat CodeReady Studio plug-ins for Red Hat Process Automation Manager are based on the community version of the plug-ins.
For this reason, the Red Hat Process Automation Manager plug-in is called the Drools plug-in.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Download the Red Hat Process Automation Manager plug-ins for Red Hat CodeReady Studio:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Log in to the <link xlink:href="https://access.redhat.com">Red Hat Customer Portal</link>.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">DOWNLOADS</emphasis> at the top of the page.</simpara>
</listitem>
<listitem>
<simpara>On the <emphasis role="strong">Product Downloads</emphasis> page that opens, navigate to the <emphasis role="strong">RUNTIMES</emphasis> section, and click <emphasis role="strong">Red Hat Developer Studio</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>On the <emphasis role="strong">Software Downloads</emphasis> page, from the <emphasis role="strong">Version</emphasis> list select <emphasis role="strong">12.11.0</emphasis>, and then download <emphasis role="strong">Red Hat CodeReady Studio Integration Stack 12.11.0 Update Site Zip</emphasis> (<literal>devstudio-integration-stack-12.11.0.GA-updatesite.zip</literal>).</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>To start Red Hat CodeReady Studio, select Red Hat CodeReady Studio from the <emphasis role="strong">Start</emphasis> menu.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Help</emphasis> â†’ <emphasis role="strong">Install New Software</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Add</emphasis> to display the <emphasis role="strong">Add Repository</emphasis> window.</simpara>
</listitem>
<listitem>
<simpara>Enter a name in the <emphasis role="strong">Name</emphasis> field, for example, <literal>devstudio-12.11.0.GA</literal>.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Archive</emphasis>, navigate to the <literal>devstudio-integration-stack-12.11.0.GA-updatesite.zip</literal> file, select the file, and then click <emphasis role="strong">OK</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Add</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>In the <emphasis role="strong">Install</emphasis> window, select <emphasis role="strong">JBoss Business Process and Rule Development</emphasis> from the <emphasis role="strong">Available Software</emphasis> list, click <emphasis role="strong">Next</emphasis>, and click <emphasis role="strong">Next</emphasis> again.</simpara>
</listitem>
<listitem>
<simpara>Read the license agreements, click <emphasis role="strong">I accept the terms of the license agreements</emphasis> to accept the license agreements, and then click <emphasis role="strong">Finish</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>After the installation process has been completed, click <emphasis role="strong">Restart Now</emphasis> in the <emphasis role="strong">Software Updates</emphasis> window to restart Red Hat CodeReady Studio.</simpara>
</listitem>
</orderedlist>
</chapter>
<chapter xml:id="dm-server-configure-proc">
<title>Configuring the Red Hat Process Automation Manager server</title>
<simpara>You can configure Red Hat CodeReady Studio to run the Red Hat Process Automation Manager server.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Red Hat CodeReady Studio is installed with the Red Hat Process Automation Manager plug-ins.</simpara>
</listitem>
<listitem>
<simpara>Red Hat Process Automation Manager is installed in a Red Hat JBoss EAP 7.3 server instance.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Start Red Hat CodeReady Studio.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Window</emphasis> â†’ <emphasis role="strong">Show View</emphasis> â†’ <emphasis role="strong">Other</emphasis>, select <emphasis role="strong">Server</emphasis> â†’ <emphasis role="strong">Servers</emphasis>, and then click <emphasis role="strong">Open</emphasis> to add the server view.</simpara>
</listitem>
<listitem>
<simpara>Right-click on the <emphasis role="strong">Servers</emphasis> pane and select <emphasis role="strong">New</emphasis> â†’ <emphasis role="strong">Server</emphasis> to open the server menu.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Red Hat JBoss Middleware</emphasis> â†’ <emphasis role="strong">JBoss Enterprise Application Platform 7.x</emphasis> and then click <emphasis role="strong">Next</emphasis> to define the server.</simpara>
</listitem>
<listitem>
<simpara>In the <emphasis role="strong">Create a new Server Adapter</emphasis> window, select <emphasis role="strong">Create new runtime (next page)</emphasis> from the list, and then click <emphasis role="strong">Next</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>To set the home directory in the <emphasis role="strong">JBoss Runtime</emphasis> window, click the <emphasis role="strong">Browse</emphasis> button under <emphasis role="strong">Home Directory</emphasis> and navigate to the Red Hat JBoss EAP directory where Red Hat Process Automation Manager is installed.</simpara>
</listitem>
<listitem>
<simpara>Enter a name for the server in the <emphasis role="strong">Name</emphasis> field, ensure that the configuration file is set, and then click <emphasis role="strong">Finish</emphasis>.</simpara>
</listitem>
</orderedlist>
</chapter>
<chapter xml:id="codeready-studio-installing-runtime-environments-proc">
<title>Installing Red Hat Process Automation Manager runtime environments</title>
<simpara>In order to create Red Hat Process Automation Manager projects in Red Hat CodeReady Studio, it is necessary to install the Red Hat Process Automation Manager runtime environment.</simpara>
<simpara>A runtime environment is a collection of JAR files that represent a specific release of the software and includes the required libraries for compiling and running your business asset.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Red Hat CodeReady Studio is installed.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Download the process engine:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Log in to the <link xlink:href="https://access.redhat.com">Red Hat Customer Portal</link>.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">DOWNLOADS</emphasis> at the top of the page.</simpara>
</listitem>
<listitem>
<simpara>On the <emphasis role="strong">Product Downloads</emphasis> page that opens, navigate to the <emphasis role="strong">INTEGRATION AND AUTOMATION</emphasis> section, and click <emphasis role="strong">Red Hat Process Automation Manager</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>On the <emphasis role="strong">Software Downloads</emphasis> page, download <emphasis role="strong">Red Hat Process Automation Manager 7.10.0 Add-Ons</emphasis> (<literal>rhpam-7.10.0-add-ons.zip</literal>).</simpara>
</listitem>
<listitem>
<simpara>Extract <literal>rhpam-7.10.0-add-ons.zip</literal> and then extract the Drools runtime environment JAR files located in`rhpam-7.10.0-add-ons/rhpam-7.10.0-process-engine.zip`</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>From the Red Hat CodeReady Studio menu, click <emphasis role="strong">Window</emphasis> â†’ <emphasis role="strong">Preferences</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Drools</emphasis> â†’ <emphasis role="strong">Installed Drools Runtimes</emphasis>, and then click <emphasis role="strong">Add</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>In the name field, enter a name for the new runtime environment.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Browse</emphasis> and navigate to the directory where you extracted the runtime environment files.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">OK</emphasis> to register the selected runtime environment in Red Hat CodeReady Studio.</simpara>
</listitem>
<listitem>
<simpara>To set the runtime environment as the default Drools runtime, select the check box beside the runtime environment name.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Apply and Close</emphasis>. If you have existing projects, you are prompted to restart Red Hat CodeReady Studio to update the runtime environment.</simpara>
</listitem>
</orderedlist>
</chapter>
<chapter xml:id="codeready-studio-creating-a-project-proc">
<title>Creating a Red Hat Process Automation Manager project</title>
<simpara>You can create and manage a Red Hat Process Automation Manager project in Red Hat CodeReady Studio.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Red Hat CodeReady Studio is installed with the Red Hat Process Automation Manager plug-ins.</simpara>
</listitem>
<listitem>
<simpara>Red Hat Process Automation Manager runtime environment is installed.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>In Red Hat CodeReady Studio, from the main menu, click <emphasis role="strong">File</emphasis> â†’ <emphasis role="strong">New</emphasis> â†’ <emphasis role="strong">Project</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>In the search field, enter <literal>Drools Project</literal>, select <emphasis role="strong">Drools Project</emphasis>, and then click <emphasis role="strong">Next</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Select the second option to create a project with a Red Hat Process Automation Manager example, and then click <emphasis role="strong">Next</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>In the <emphasis role="strong">Project name</emphasis> field, enter a name for the project.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Finish</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Complete the following steps to test the project:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Navigate to the <literal>src/main/java</literal> directory and expand the <literal>com.sample</literal> package.</simpara>
</listitem>
<listitem>
<simpara>Right click a Java class and select <emphasis role="strong">Run As</emphasis> â†’  <emphasis role="strong">Java Application</emphasis>.</simpara>
<simpara>The output is displayed on the console tab.</simpara>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
</chapter>
<chapter xml:id="codeready-studio-import-projects-from-git-repo">
<title>Importing projects from a Git repository into Red Hat CodeReady Studio</title>
<simpara>You can configure Red Hat CodeReady Studio to connect to a central Git asset repository. The repository stores rules, models, functions, and processes. You can either clone a remote Git repository or import a local Git repository.</simpara>
<section xml:id="codeready-studio-clone-remote-git-repo-proc">
<title>Cloning a remote Git repository</title>
<simpara>You can clone a Git repository to use with Red Hat CodeReady Studio.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Red Hat CodeReady Studio is installed with the Red Hat Process Automation Manager plug-ins.</simpara>
</listitem>
<listitem>
<simpara>You have access permission for the remote Git repository that you want to clone.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>In Red Hat CodeReady Studio, select the server from the <emphasis role="strong">Server</emphasis> tab and click the start icon to start the server.</simpara>
</listitem>
<listitem>
<simpara>Enter the following command in a terminal to start the secure shell server, if it is not running already.</simpara>
<screen>/sbin/service sshd start</screen>
<note>
<simpara>This command is specific to Linux and Apple Macintosh. On these platforms, if <literal>sshd</literal> has already been started, this command fails. If this happens, you may safely ignore this step.</simpara>
</note>
</listitem>
<listitem>
<simpara>In Red Hat CodeReady Studio , select <emphasis role="strong">File</emphasis> â†’ <emphasis role="strong">Importâ€¦â€‹</emphasis> and navigate to the Git folder.</simpara>
</listitem>
<listitem>
<simpara>Open the Git folder, select <emphasis role="strong">Projects from Git</emphasis>, and click <emphasis role="strong">Next</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Select the repository source as <emphasis role="strong">Clone URI</emphasis> and click <emphasis role="strong">Next</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Enter the details of the Git repository and click <emphasis role="strong">Next</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Select the branch you want to import and click <emphasis role="strong">Next</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>To define the local storage for this project, enter or select a non-empty directory, make any configuration changes, and click <emphasis role="strong">Next</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Import the project as a general project in the following window and click <emphasis role="strong">Next</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Name the project and click <emphasis role="strong">Finish</emphasis>.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="codeready-studio-import-local-git-repo-proc">
<title>Importing a local Git repository</title>
<simpara>You can import a local Git repository to use with Red Hat CodeReady Studio.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Red Hat CodeReady Studio is installed.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>In Red Hat CodeReady Studio, select the server from the <emphasis role="strong">Server</emphasis> tab and click the start icon to start the server.</simpara>
</listitem>
<listitem>
<simpara>Select <emphasis role="strong">File</emphasis> â†’ <emphasis role="strong">Import</emphasis> and navigate to the Git folder.</simpara>
</listitem>
<listitem>
<simpara>Open the Git folder to select <emphasis role="strong">Projects from Git</emphasis> and click <emphasis role="strong">Next</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Select <emphasis role="strong">Existing local repository</emphasis> as the repository source and click <emphasis role="strong">Next</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Select the repository that is to be configured from the list of available repositories and click <emphasis role="strong">Next</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>In the window that opens, select <emphasis role="strong">Import as general project</emphasis> and click <emphasis role="strong">Next</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Name the project and click <emphasis role="strong">Finish</emphasis>.</simpara>
</listitem>
</orderedlist>
</section>
</chapter>
<chapter xml:id="additional_resources" remap="_additional_resources">
<title>Additional Resources</title>
<itemizedlist>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_codeready_studio/12.17/html/getting_started_with_container_and_cloud-based_development/"><emphasis>Getting Started with Container and Cloud-based Development</emphasis></link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_codeready_studio/12.17/html/getting_started_with_codeready_studio_tools/"><emphasis>Getting Started with CodeReady Studio Tools</emphasis></link></simpara>
</listitem>
</itemizedlist>
</chapter>
</part>
<part xml:id="assembly-integrating-amq-streams">
<title>Integrating Red Hat Process Automation Manager with Red Hat AMQ Streams</title>
<partintro>
<simpara>As a developer, you can integrate Red Hat Process Automation Manager with Red Hat AMQ Streams or Apache Kafka. A business process can send and receive Kafka messages.</simpara>
</partintro>
<chapter xml:id="integration-kafka-con_integrating-amq-streams">
<title>Kafka messages in a business process</title>
<simpara>Red Hat AMQ Streams, based on Apache Kafka,
is a streaming platform. It passes messages, sorted into topics, between applications in a software environment.</simpara>
<simpara>You can create business processes using Red Hat Process Automation Manager that send and receive Kafka messages in the following ways:</simpara>
<itemizedlist>
<listitem>
<simpara>Create a start event or intermediate catch event of the type <emphasis>message</emphasis> or <emphasis>signal</emphasis>. The KIE Server automatically subsribes to the Kafka topic that is defined in the message or signal. A message triggers the event. The event can pass the content of the message to the subsequent node in the process.</simpara>
</listitem>
<listitem>
<simpara>Create an end event or intermediate throw event of the type <emphasis>message</emphasis> or <emphasis>signal</emphasis>. When the process triggers the event, the KIE Server sends a Kafka message in the topic that is defined in the message or signal. The message contains the data that is configured in the event.</simpara>
</listitem>
<listitem>
<simpara>Add the <literal>KafkaPublishMessages</literal> custom task to the process. This task does not require the KIE Server Kafka capability but is significantly more complicated to configure than signal or message events.</simpara>
</listitem>
<listitem>
<simpara>Configure your service and the KIE Server to emit Kafka messages about every completed process, case, and task when transactions are committed.</simpara>
</listitem>
</itemizedlist>
<section xml:id="message-receive-event-proc_integrating-amq-streams">
<title>Creating an event that receives Kafka messages</title>
<simpara>When designing your business process in Business Central, you can create an event that receives Kafka messages.</simpara>
<simpara>This event is triggered each time a message arrives in the configured topic. The message is expected to contain data that matches a predefined data object. The process engine parses the message and provides it as an output of the event.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Open the project that contains your business process in Business Central.</simpara>
</listitem>
<listitem>
<simpara>Create a data object defining the data that the message will contain. For instructions about creating data objects, see
<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/developing_process_services_in_red_hat_process_automation_manager#assembly-designing-business-processes"><emphasis>Designing business processes using BPMN models</emphasis></link>.</simpara>
</listitem>
<listitem>
<simpara>Select the business process and open the business process designer.</simpara>
</listitem>
<listitem>
<simpara>Add a start event or an intermediate catch event of the type <emphasis>message</emphasis> or <emphasis>signal</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Open the properties of the event.</simpara>
</listitem>
<listitem>
<simpara>In the <emphasis role="strong">Message</emphasis> or <emphasis role="strong">Signal</emphasis> field, select <emphasis role="strong">New</emphasis> and then enter the name of the message or signal. This name must be the same as the name of the topic from which the event is to receive Kafka messages, or else must be defined in an <literal>org.kie.server.jbpm-kafka.ext.topics.*</literal> system property of the KIE Server.</simpara>
</listitem>
<listitem>
<simpara>Add an output data item. Select the data object that you created as its type.</simpara>
</listitem>
<listitem>
<simpara>Save the business process.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="message-send-event-proc_integrating-amq-streams">
<title>Creating an event that sends Kafka messages</title>
<simpara>When designing your business process in Business Central, you can create an event that sends Kafka messages.</simpara>
<simpara>The event can have a data object as an input data item. The process engine sends the content of a data object as a message in the configured topic.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Open the project that contains your business process in Business Central.</simpara>
</listitem>
<listitem>
<simpara>Create a data object defining the data that the message must contain. For instructions about creating data objects, see
<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/developing_process_services_in_red_hat_process_automation_manager#assembly-designing-business-processes"><emphasis>Designing business processes using BPMN models</emphasis></link>.</simpara>
</listitem>
<listitem>
<simpara>Select the business process and open the business process designer.</simpara>
</listitem>
<listitem>
<simpara>Add an intermediate throw event or an end event of the type <emphasis>message</emphasis> or <emphasis>signal</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Open the properties of the event.</simpara>
</listitem>
<listitem>
<simpara>In the <emphasis role="strong">Message</emphasis> or <emphasis role="strong">Signal</emphasis> field, select <emphasis role="strong">New</emphasis> and then enter the name of the message or signal. This name must be the same as the name of the topic to which the event is to send Kafka messages, or else must be defined in an <literal>org.kie.server.jbpm-kafka.ext.topics.*</literal> system property of the KIE Server.</simpara>
</listitem>
<listitem>
<simpara>Add an input data item. Select the data object that you created as its type.</simpara>
</listitem>
<listitem>
<simpara>Save the business process.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="message-customtask-proc_integrating-amq-streams">
<title>Adding a custom task that sends Kafka messages</title>
<simpara>You can add a <literal>KafkaPublishMessages</literal> custom task to your process. This task sends Kafka messages. It does not use the KIE Server Kafka capability, so you can use this task in processes that do not run on a KIE Server. However, this task is more complicated to configure than other Red Hat AMQ Streams integration options.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>In the Business Central administrative settings menu, as the administrative user, select <emphasis role="strong">Custom Tasks Administration</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Ensure that <emphasis role="strong">KafkaPublishMessages</emphasis> is set to <emphasis role="strong">On</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>In Business Central, select <emphasis role="strong">Menu</emphasis> â†’ <emphasis role="strong">Design</emphasis> â†’ <emphasis role="strong">Projects</emphasis> and then click the space name and the project name.</simpara>
</listitem>
<listitem>
<simpara>Select the <emphasis role="strong">Settings</emphasis> â†’ <emphasis role="strong">Custom Tasks</emphasis> tab.</simpara>
</listitem>
<listitem>
<simpara>In the <emphasis role="strong">KafkaPublishMessages</emphasis> line, click <emphasis role="strong">Install</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Enter the following information:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Bootstrap Servers</emphasis>: The host and port of the Kafka broker, for example, <literal>localhost:9092</literal>. You can use a comma-separated list of multiple host:port pairs.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Client ID</emphasis>: An identifier string to pass to the broker when making requests. Red Hat AMQ Streams uses this string for logging.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Key Serializer class</emphasis>: The class that provides the key serializer. Enter the standard serializer class name: <literal>org.apache.kafka.common.serialization.StringSerializer</literal>.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Value Serializer class</emphasis>: The class that provides the value serializer. Enter the standard serializer class name: <literal>org.apache.kafka.common.serialization.StringSerializer</literal>.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Click the <emphasis role="strong">Assets</emphasis> tab.</simpara>
</listitem>
<listitem>
<simpara>Select the business process and open the business process designer.</simpara>
</listitem>
<listitem>
<simpara>Add the <literal>KafkaPublishMessages</literal> custom task, available under <emphasis role="strong">Custom Tasks</emphasis> in the BPMN modeler palette.</simpara>
</listitem>
<listitem>
<simpara>In the properties of the custom task, open the data assignments.</simpara>
</listitem>
<listitem>
<simpara>Assign the <emphasis role="strong">Key</emphasis>, <emphasis role="strong">Topic</emphasis>, and <emphasis role="strong">Value</emphasis> inputs to define the message.</simpara>
</listitem>
</orderedlist>
</section>
</chapter>
<chapter xml:id="kieserver-kafka-proc_integrating-amq-streams">
<title>Configuring a KIE Server to send and receive Kafka messages from the process</title>
<simpara>To run a process that sends or receives Kafka messages (except when using the custom task), you must use a KIE Server. You must configure this KIE Server to integrate with Red Hat AMQ Streams.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>To enable integration with Red Hat AMQ Streams, set the <literal>org.kie.kafka.server.ext.disabled</literal> system property of the KIE Server to <literal>false</literal>.</simpara>
</listitem>
<listitem>
<simpara>To configure the connection to the Kafka broker, set the <literal>org.kie.server.jbpm-kafka.ext.bootstrap.servers</literal> system property to the host and port of the broker. The default value is <literal>localhost:9092</literal>. You can use a comma-separated list of multiple host:port pairs.</simpara>
</listitem>
<listitem>
<simpara>Optional: Set any of the following system properties to configure sending and receiving Kafka messages:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>org.kie.server.jbpm-kafka.ext.client.id</literal>: An identifier string to pass to the broker when making requests. Red Hat AMQ Streams uses this string for logging.</simpara>
</listitem>
<listitem>
<simpara><literal>org.kie.server.jbpm-kafka.ext.topics.*</literal>: Mapping of message or signal names to topic names. For example, if you want to send or receive a message in the <literal>ExampleTopic</literal> topic when <literal>ExampleName</literal> is the name of the message or signal, set the <literal>org.kie.server.jbpm-kafka.ext.topics.ExampleName</literal> system property to <literal>ExampleTopic</literal>. You can set any number of such system properties. If a message or signal name is not mapped using a system property, the process engine uses this name as the topic name.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Optional: Set any of the following system properties to configure receiving Kafka messages:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>org.kie.server.jbpm-kafka.ext.allow.auto.create.topics</literal>: Allow automatic topic creation. Enabled by default.</simpara>
</listitem>
<listitem>
<simpara><literal>org.kie.server.jbpm-kafka.ext.group.id</literal>: A unique string that identifies the group to which this Kafka message consumer belongs. The default value is <literal>jbpm-consumer</literal>.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Optional: Set any of the following system properties to configure sending Kafka messages:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>org.kie.server.jbpm-kafka.ext.acks</literal>: The number of acknowledgements that the Kafka leader must receive before marking the request as complete. The default value is <literal>1</literal>, which means the leader writes the record to its local log and then responds to the process engine, without waiting for full acknowledgement from all followers.</simpara>
</listitem>
<listitem>
<simpara><literal>org.kie.server.jbpm-kafka.ext.max.block.ms</literal>: The number of milliseconds for which the publish method blocks. After this time, the process engine can resume execution of the business process. The default value is <literal>2000</literal> (2 seconds).</simpara>
</listitem>
</itemizedlist>
</listitem>
</orderedlist>
</chapter>
<chapter xml:id="kieserver-kafka-emit-proc_integrating-amq-streams">
<title>Configuring a service and the KIE Server to emit Kafka messages when a transaction is committed</title>
<simpara>You can configure the KIE Server to emit Kafka messages about every event when a process, case, or task is completed. The KIE Server sends the messages when it commits transactions.</simpara>
<simpara>You can use this functionality with any business process or case. You do not need to change anything in the process design.</simpara>
<simpara>This configuration is also available if you run your process service using SpringBoot.</simpara>
<simpara>By default, the KIE Server publishes the messages in the following topics:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>jbpm-processes-events</literal> for messages about completed processes</simpara>
</listitem>
<listitem>
<simpara><literal>jbpm-tasks-events</literal> for messages about completed tasks</simpara>
</listitem>
<listitem>
<simpara><literal>jbpm-cases-events</literal> for messages about completed cases</simpara>
</listitem>
</itemizedlist>
<simpara>You can configure the topic names.</simpara>
<simpara>The published messages comply with the <link xlink:href="https://github.com/cloudevents/spec">CloudEvents specification</link> version 1.0. Each message contains the following fields:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>id</literal>: The unique identifier of the event</simpara>
</listitem>
<listitem>
<simpara><literal>type</literal>: The type of the event (process, task, or case)</simpara>
</listitem>
<listitem>
<simpara><literal>source</literal>: The event source as a URI</simpara>
</listitem>
<listitem>
<simpara><literal>time</literal>: The timestamp of the event, by default in the <link xlink:href="https://tools.ietf.org/html/rfc3339">RFC3339</link> format</simpara>
</listitem>
<listitem>
<simpara><literal>data</literal>: Information about the process, case, or task, presented in a JSON format</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>To enable emitting Kafka messages, complete one of the following steps:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>If you deployed the KIE Server on Red Hat JBoss EAP or another application server:</simpara>
<orderedlist numeration="lowerroman">
<listitem>
<simpara>Download the <literal>rhpam-7.10.0-maven-repository.zip</literal> product deliverable file from the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?downloadType=distributions&amp;product=rhpam&amp;productChanged=yes">Software Downloads</link> page of the Red Hat Customer Portal.</simpara>
</listitem>
<listitem>
<simpara>Extract the contents of the file.</simpara>
</listitem>
<listitem>
<simpara>Copy the <literal>maven-repository/org/jbpm/jbpm-event-emitters-kafka/7.48.0.Final-redhat-00002/jbpm-event-emitters-kafka-7.48.0.Final-redhat-00002.jar</literal> file into the <literal>deployments/kie-server.war/WEB-INF/lib</literal> subdirectory of the application server.</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>If you deployed the application using SpringBoot, add the following lines to the <literal>&lt;dependencies&gt;</literal> list in the <literal>pom.xml</literal> file of your service:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
  &lt;groupId&gt;org.jbpm&lt;/groupId&gt;
  &lt;artifactId&gt;jbpm-event-emitters-kafka&lt;/artifactId&gt;
  &lt;version&gt;${version.org.kie}&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>Configure any of the following system properties for the KIE Server as necessary:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>org.kie.jbpm.event.emitters.kafka.boopstrap.servers</literal>: The host and port of the Kafka broker. The default value is <literal>localhost:9092</literal>. You can use a comma-separated list of multiple host:port pairs.</simpara>
</listitem>
<listitem>
<simpara><literal>org.kie.jbpm.event.emitters.kafka.date_format</literal>: The timestamp format for the <literal>time</literal> field of the messages. The default value is <literal>yyyy-MM-ddâ€™Tâ€™HH:mm:ss.SSSZ</literal> .</simpara>
</listitem>
<listitem>
<simpara><literal>org.kie.jbpm.event.emitters.kafka.topic.processes</literal>: The topic name for process event messages. The default value is <literal>jbpm-processes-events</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>org.kie.jbpm.event.emitters.kafka.topic.cases</literal>: The topic name for process event messages. The default value is <literal>jbpm-cases-events</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>org.kie.jbpm.event.emitters.kafka.topic.tasks</literal>: The topic name for process event messages. The default value is <literal>jbpm-processes-tasks</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>org.kie.jbpm.event.emitters.kafka.client.id</literal>: An identifier string to pass to the server when making requests. The server uses this string for logging.</simpara>
</listitem>
</itemizedlist>
</listitem>
</orderedlist>
</chapter>
<chapter xml:id="additional_resources_2" remap="_additional_resources_2">
<title>Additional Resources</title>
<itemizedlist>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_amq/7.7/html/using_amq_streams_on_openshift/"><emphasis>Using AMQ Streams on OpenShift</emphasis></link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_amq/7.7/html/using_amq_streams_on_rhel/"><emphasis>Using AMQ Streams on RHEL</emphasis></link></simpara>
</listitem>
</itemizedlist>
</chapter>
</part>
<appendix xml:id="versioning-information">
<title>Versioning information</title>
<simpara>Documentation last updated on Monday, January 18, 2021.</simpara>
</appendix>
<appendix xml:id="author-group">
<title>Contact information</title>
<simpara>Red Hat Process Automation Manager documentation team: <link xlink:href="mailto:brms-docs@redhat.com">brms-docs@redhat.com</link></simpara>
</appendix>
</book>