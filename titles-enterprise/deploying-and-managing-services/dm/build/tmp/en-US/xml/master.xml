<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE book [
<!ENTITY % BOOK_ENTITIES SYSTEM "master.ent">
%BOOK_ENTITIES;
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">
<!ENTITY % DOCBOOK_ENTS PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/dbcentx.mod">
%DOCBOOK_ENTS;
]>
<book version="5.0" xml:lang="en-US" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
	<?asciidoc-toc ?><?asciidoc-numbered ?>
	<info>
		<title>Deploying and managing Red Hat Decision Manager services</title>
		<subtitle></subtitle>
		 <date>2021-01-26</date>
		<productname>Red Hat Decision Manager</productname>
		<productnumber>7.10</productnumber>
		<abstract>
			<para>
				This document describes how to deploy and manage your Red Hat Decision Manager projects and assets using the Business Central interface or using KIE APIs.
			</para>
		</abstract>
		<xi:include href="Common_Content/Legal_Notice.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
	</info>
	<preface>
		<title>Preface</title>
		<simpara>
			As a developer of business decisions , you must deploy a developed Red Hat Decision Manager project to a KIE Server in order to begin using the services you have created in Red Hat Decision Manager. You can deploy and manage your Red Hat Decision Manager projects and assets using the Business Central interface or using KIE APIs.
		</simpara>
	</preface>
	<preface xml:id="snip-conscious-language_deploying-and-managing-services">
		<title>Making open source more inclusive</title>
		<simpara>
			Red Hat is committed to replacing problematic language in our code, documentation, and web properties. We are beginning with these four terms: master, slave, blacklist, and whitelist. Because of the enormity of this endeavor, these changes will be implemented gradually over several upcoming releases. For more details, see <link xlink:href="https://www.redhat.com/en/blog/making-open-source-more-inclusive-eradicating-problematic-language"><emphasis>our CTO Chris Wright’s message</emphasis></link>.
		</simpara>
	</preface>
	<part xml:id="assembly-packaging-deploying">
		<title>Packaging and deploying a Red Hat Decision Manager project</title>
		<partintro>
			<simpara>
				As a business rules developer, you must build and deploy a developed Red Hat Decision Manager project to a KIE Server in order to begin using the services you have created in Red Hat Decision Manager. You can develop and deploy a project from Business Central, from an independent Maven project, from a Java application, or using a combination of various platforms. For example, you can develop a project in Business Central and deploy it using the KIE Server REST API, or develop a project in Maven configured with Business Central and deploy it using Business Central.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						The project to be deployed has been developed and tested. For projects in Business Central, consider using test scenarios to test the assets in your project. For example, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/developing_decision_services_in_red_hat_decision_manager#assembly-test-scenarios"><emphasis>Testing a decision service using test scenarios</emphasis></link>.
					</simpara>
				</listitem>
			</itemizedlist>
		</partintro>
		<chapter xml:id="project-packaging-con_packaging-deploying">
			<title>Red Hat Decision Manager project packaging</title>
			<simpara>
				Red Hat Decision Manager projects contain the business assets that you develop in Red Hat Decision Manager. Each project in Red Hat Decision Manager is packaged as a Knowledge JAR (KJAR) file with configuration files such as a Maven project object model file (<literal>pom.xml</literal>), which contains build, environment, and other information about the project, and a KIE module descriptor file (<literal>kmodule.xml</literal>), which contains the KIE base and KIE session configurations for the assets in the project. You deploy the packaged KJAR file to a KIE Server that runs the decision services and other deployable assets (collectively referred to as <emphasis>services</emphasis>) from that KJAR file. These services are consumed at run time through an instantiated KIE container, or <emphasis>deployment unit</emphasis>. Project KJAR files are stored in a Maven repository and identified by three values: <literal>GroupId</literal>, <literal>ArtifactId</literal>, and <literal>Version</literal> (GAV). The <literal>Version</literal> value must be unique for every new version that might need to be deployed. To identify an artifact (including a KJAR file), you need all three GAV values.
			</simpara>
			<simpara>
				Projects in Business Central are packaged automatically when you build and deploy the projects. For projects outside of Business Central, such as independent Maven projects or projects within a Java application, you must configure the KIE module descriptor settings in an appended <literal>kmodule.xml</literal> file or directly in your Java application in order to build and deploy the projects.
			</simpara>
		</chapter>
		<chapter xml:id="project-deployment-central-con_packaging-deploying">
			<title>Project deployment in Business Central</title>
			<simpara>
				You can use Business Central to develop your business assets and services and to manage KIE Servers configured for project deployment. When your project is developed, you can build the project in Business Central and deploy it automatically to the KIE Server. To enable automatic deployment, Business Central includes a built-in Maven repository. From Business Central, you can start, stop, or remove the deployment units (KIE containers) that contain the services and their project versions that you have built and deployed.
			</simpara>
			<simpara>
				You can also connect several KIE Servers to the same Business Central instance and group them into different server configurations (in <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Deploy</emphasis> → <emphasis role="strong">Execution Servers</emphasis>). Servers belonging to the same server configuration run the same services, but you can deploy different projects or different versions of projects on different configurations.
			</simpara>
			<simpara>
				For example, you could have test servers in the <literal>Test</literal> configuration and production servers in a <literal>Production</literal> configuration. As you develop business assets and services in a project, you deploy the project on the <literal>Test</literal> server configuration and then, when a version of the project is sufficiently tested, you can deploy it on the <literal>Production</literal> server configuration. In this case, to keep developing the project, change the version in the project settings. Then the new version and the old version are seen as different artifacts in the built-in Maven repository. You can deploy the new version on the <literal>Test</literal> server configuration and keep running the old version on the <literal>Production</literal> server configuration. This deployment process is simple but has significant limitations. Notably, there is not enough access control: a developer can deploy a project directly into a production environment.
			</simpara>
			<important>
				<simpara>
					You cannot move a KIE Server into a different server configuration using Business Central. You must change the configuration file of the server to change the server configuration name for it.
				</simpara>
			</important>
			<section xml:id="kie-server-configure-central-proc_packaging-deploying">
				<title>Configuring KIE Server to connect to Business Central</title>
				<warning>
					<simpara>
						This section provides a sample setup that you can use for testing purposes. Some of the values are unsuitable for a production environment, and are marked as such.
					</simpara>
				</warning>
				<simpara>
					If a KIE Server is not configured in your Red Hat Decision Manager environment, or if you require additional KIE Servers in your Red Hat Decision Manager environment, you must configure a KIE Server to connect to Business Central.
				</simpara>
				<note>
					<simpara>
						If you are deploying KIE Server on Red Hat OpenShift Container Platform, see the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/deploying_red_hat_decision_manager_on_red_hat_openshift_container_platform#assembly-openshift-operator"><emphasis>Deploying a Red Hat Decision Manager environment on Red Hat OpenShift Container Platform using Operators</emphasis></link> document for instructions about configuring it to connect to Business Central.
					</simpara>
				</note>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							Business Central and KIE Server are installed in the base directory of the Red Hat JBoss EAP installation (<literal><emphasis>EAP_HOME</emphasis></literal>).
						</simpara>
					</listitem>
				</itemizedlist>
				<note>
					<simpara>
						You must install Business Central and KIE Server on different servers in production environments. In this sample situation, we use only one user named <literal>controllerUser</literal>, containing both <literal>rest-all</literal> and the <literal>kie-server</literal> roles. However, if you install KIE Server and Business Central on the same server, for example in a development environment, make the changes in the shared <literal>standalone-full.xml</literal> file as described in this section.
					</simpara>
				</note>
				<itemizedlist>
					<listitem>
						<simpara>
							Users with the following roles exist:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									In Business Central, a user with the role <literal>rest-all</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									On the KIE Server, a user with the role <literal>kie-server</literal>
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In your Red Hat Decision Manager installation directory, navigate to the <literal>standalone-full.xml</literal> file. For example, if you use a Red Hat JBoss EAP installation for Red Hat Decision Manager, go to <literal>$EAP_HOME/standalone/configuration/standalone-full.xml</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Open the <literal>standalone-full.xml</literal> file and under the <literal>&lt;system-properties&gt;</literal> tag, set the following JVM properties:
						</simpara>
						<table colsep="1" frame="all" rowsep="1">
							<title>JVM Properties for the managed KIE Server instance</title>
							<tgroup cols="3">
								<colspec colname="col_1" colwidth="33*"></colspec>
								<colspec colname="col_2" colwidth="33*"></colspec>
								<colspec colname="col_3" colwidth="33*"></colspec>
								<thead>
									<row>
										<entry align="left" valign="top">Property</entry>
										<entry align="left" valign="top">Value</entry>
										<entry align="left" valign="top">Note</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>org.kie.server.id</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>default-kie-server</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											The KIE Server ID.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>org.kie.server.controller</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>http://localhost:8080/decision-central/rest/controller</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											The location of Business Central. The URL for connecting to the API of Business Central.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>org.kie.server.controller.user</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>controllerUser</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											The user name with the role <literal>rest-all</literal> who can log in to the Business Central.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>org.kie.server.controller.pwd</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>controllerUser1234;</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											The password of the user who can log in to the Business Central.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>org.kie.server.location</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>http://localhost:8080/kie-server/services/rest/server</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											The location of the KIE Server. The URL for connecting to the API of KIE Server.
										</simpara>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</table>
						<table colsep="1" frame="all" rowsep="1">
							<title>JVM Properties for the Business Central instance</title>
							<tgroup cols="3">
								<colspec colname="col_1" colwidth="33*"></colspec>
								<colspec colname="col_2" colwidth="33*"></colspec>
								<colspec colname="col_3" colwidth="33*"></colspec>
								<thead>
									<row>
										<entry align="left" valign="top">Property</entry>
										<entry align="left" valign="top">Value</entry>
										<entry align="left" valign="top">Note</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>org.kie.server.user</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>controllerUser</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											The user name with the role <literal>kie-server</literal>.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>org.kie.server.pwd</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>controllerUser1234;</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											The password of the user.
										</simpara>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</table>
						<simpara>
							The following example shows how to configure a KIE Server instance:
						</simpara>
						
<programlisting language="xml" linenumbering="unnumbered">&lt;property name="org.kie.server.id" value="default-kie-server"/&gt;
&lt;property name="org.kie.server.controller" value="http://localhost:8080/decision-central/rest/controller"/&gt;
&lt;property name="org.kie.server.controller.user" value="controllerUser"/&gt;
&lt;property name="org.kie.server.controller.pwd" value="controllerUser1234;"/&gt;
&lt;property name="org.kie.server.location" value="http://localhost:8080/kie-server/services/rest/server"/&gt;</programlisting>
						<simpara>
							The following example shows how to configure a for Business Central instance:
						</simpara>
						
<programlisting language="xml" linenumbering="unnumbered">&lt;property name="org.kie.server.user" value="controllerUser"/&gt;
&lt;property name="org.kie.server.pwd" value="controllerUser1234;"/&gt;</programlisting>
					</listitem>
					<listitem>
						<simpara>
							Send a GET request to <literal>http://<emphasis>SERVER:PORT</emphasis>/kie-server/services/rest/server/</literal> to verify that KIE Server started successfully. After authentication, you receive an XML response similar to the following example:
						</simpara>
						
<programlisting language="xml" linenumbering="unnumbered">&lt;response type="SUCCESS" msg="Kie Server info"&gt;
    &lt;kie-server-info&gt;
        &lt;capabilities&gt;KieServer&lt;/capabilities&gt;
        &lt;capabilities&gt;BRM&lt;/capabilities&gt;
        &lt;capabilities&gt;BPM&lt;/capabilities&gt;
        &lt;capabilities&gt;CaseMgmt&lt;/capabilities&gt;
        &lt;capabilities&gt;BPM-UI&lt;/capabilities&gt;
        &lt;capabilities&gt;BRP&lt;/capabilities&gt;
        &lt;capabilities&gt;DMN&lt;/capabilities&gt;
        &lt;capabilities&gt;Swagger&lt;/capabilities&gt;
        &lt;location&gt;http://localhost:8230/kie-server/services/rest/server&lt;/location&gt;
        &lt;messages&gt;
            &lt;content&gt;Server KieServerInfo{serverId='first-kie-server', version='7.5.1.Final-redhat-1', location='http://localhost:8230/kie-server/services/rest/server', capabilities=[KieServer, BRM, BPM, CaseMgmt, BPM-UI, BRP, DMN, Swagger]}started successfully at Mon Feb 05 15:44:35 AEST 2018&lt;/content&gt;
            &lt;severity&gt;INFO&lt;/severity&gt;
            &lt;timestamp&gt;2018-02-05T15:44:35.355+10:00&lt;/timestamp&gt;
        &lt;/messages&gt;
        &lt;name&gt;first-kie-server&lt;/name&gt;
        &lt;id&gt;first-kie-server&lt;/id&gt;
        &lt;version&gt;7.5.1.Final-redhat-1&lt;/version&gt;
    &lt;/kie-server-info&gt;
&lt;/response&gt;</programlisting>
					</listitem>
					<listitem>
						<simpara>
							Verify successful registration:
						</simpara>
						<orderedlist numeration="loweralpha">
							<listitem>
								<simpara>
									Log in to Business Central.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Deploy</emphasis> → <emphasis role="strong">Execution Servers</emphasis>.
								</simpara>
								<simpara>
									If registration is successful, you will see the registered server ID.
								</simpara>
							</listitem>
						</orderedlist>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="configuring-environment-mode-proc_packaging-deploying">
				<title>Configuring the environment mode in KIE Server and Business Central</title>
				<simpara>
					You can set KIE Server to run in <literal>production</literal> mode or in <literal>development</literal> mode. Development mode provides a flexible deployment policy that enables you to update existing deployment units (KIE containers) while maintaining active process instances for small changes. It also enables you to reset the deployment unit state before updating active process instances for larger changes. Production mode is optimal for production environments, where each deployment creates a new deployment unit.
				</simpara>
				<simpara>
					In a development environment, you can click <emphasis role="strong">Deploy</emphasis> in Business Central to deploy the built KJAR file to a KIE Server without stopping any running instances (if applicable), or click <emphasis role="strong">Redeploy</emphasis> to deploy the built KJAR file and replace all instances. The next time you deploy or redeploy the built KJAR, the previous deployment unit (KIE container) is automatically updated in the same target KIE Server.
				</simpara>
				<simpara>
					In a production environment, the <emphasis role="strong">Redeploy</emphasis> option in Business Central is disabled and you can click only <emphasis role="strong">Deploy</emphasis> to deploy the built KJAR file to a new deployment unit (KIE container) on a KIE Server.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							To configure the KIE Server environment mode, set the <literal>org.kie.server.mode</literal> system property to <literal>org.kie.server.mode=development</literal> or <literal>org.kie.server.mode=production</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							To configure the deployment behavior for a project in Business Central, go to project <emphasis role="strong">Settings</emphasis> → <emphasis role="strong">General Settings</emphasis> → <emphasis role="strong">Version</emphasis> and toggle the <emphasis role="strong">Development Mode</emphasis> option.
						</simpara>
						<note>
							<simpara>
								By default, KIE Server and all new projects in Business Central are in development mode.
							</simpara>
						</note>
						<simpara>
							You cannot deploy a project with <emphasis role="strong">Development Mode</emphasis> turned on or with a manually added <literal>SNAPSHOT</literal> version suffix to a KIE Server that is in production mode.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="maven-external-configure-proc_packaging-deploying">
				<title>Configuring an external Maven repository for Business Central and KIE Server</title>
				<simpara>
					You can configure Business Central and KIE Server to use an external Maven repository, such as Nexus or Artifactory, instead of the built-in repository. This enables Business Central and KIE Server to access and download artifacts that are maintained in the external Maven repository.
				</simpara>
				<important>
					<simpara>
						Artifacts in the repository do not receive automated security patches because Maven requires that artifacts be immutable. As a result, artifacts that are missing patches for known security flaws will remain in the repository to avoid breaking builds that depend on them. The version numbers of patched artifacts are incremented. For more information, see <link xlink:href="https://access.redhat.com/maven-repository">JBoss Enterprise Maven Repository</link>.
					</simpara>
				</important>
				<note>
					<simpara>
						For information about configuring an external Maven repository for an authoring environment on Red Hat OpenShift Container Platform, see the following documents:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/deploying_red_hat_decision_manager_on_red_hat_openshift_container_platform#operator-deploy-central-proc_openshift-operator"><emphasis>Deploying a Red Hat Decision Manager environment on Red Hat OpenShift Container Platform using Operators</emphasis></link>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/deploying_red_hat_decision_manager_on_red_hat_openshift_container_platform#assembly-openshift-templates"><emphasis>Deploying a Red Hat Decision Manager environment on Red Hat OpenShift Container Platform using templates</emphasis></link>
							</simpara>
						</listitem>
					</itemizedlist>
				</note>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							Business Central and KIE Server are installed. For installation options, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/installing_and_configuring_red_hat_decision_manager#assembly-planning"><emphasis>Planning a Red Hat Decision Manager installation</emphasis></link>.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Create a Maven <literal>settings.xml</literal> file with connection and access details for your external repository. For details about the <literal>settings.xml</literal> file, see the Maven <link xlink:href="https://maven.apache.org/settings.html">Settings Reference</link>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Save the file in a known location, for example, <literal>/opt/custom-config/settings.xml</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In your Red Hat Decision Manager installation directory, navigate to the <literal>standalone-full.xml</literal> file. For example, if you use a Red Hat JBoss EAP installation for Red Hat Decision Manager, go to <literal>$EAP_HOME/standalone/configuration/standalone-full.xml</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Open <literal>standalone-full.xml</literal> and under the <literal>&lt;system-properties&gt;</literal> tag, set the <literal>kie.maven.settings.custom</literal> property to the full path name of the <literal>settings.xml</literal> file.
						</simpara>
						<simpara>
							For example:
						</simpara>
						
<programlisting language="xml" linenumbering="unnumbered">&lt;property name="kie.maven.settings.custom" value="/opt/custom-config/settings.xml"/&gt;</programlisting>
					</listitem>
					<listitem>
						<simpara>
							Start or restart Business Central and KIE Server.
						</simpara>
					</listitem>
				</orderedlist>
				<formalpara>
					<title>Next steps</title>
					<para>
						For each Business Central project that you want to export or push as a KJAR artifact to the external Maven repository, you must add the repository information in the project <literal>pom.xml</literal> file. For instructions, see <xref linkend="maven-external-export-proc_packaging-deploying" />.
					</para>
				</formalpara>
			</section>
			<section xml:id="maven-external-export-proc_packaging-deploying">
				<title>Exporting a Business Central project to an external Maven repository</title>
				<simpara>
					If you configured an external Maven repository for Business Central and KIE Server, you must add the repository information in the <literal>pom.xml</literal> file for each Business Central project that you want to export or push as a KJAR artifact to that external repository. You can then progress the project KJAR files through the repository as necessary to implement your integration process, and deploy the KJAR files using Business Central or the KIE Server REST API.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You configured Business Central and KIE Server to use an external Maven repository. If you deployed Business Central on-premise, for more information about configuring an external Maven repository, see <xref linkend="maven-external-configure-proc_packaging-deploying" />. If you deployed your authoring environment on Red Hat OpenShift Container Platform, for more information, see the following documents:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/deploying_red_hat_decision_manager_on_red_hat_openshift_container_platform#operator-deploy-kieserver-proc_openshift-operator"><emphasis>Deploying a Red Hat Decision Manager environment on Red Hat OpenShift Container Platform using Operators</emphasis></link>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/deploying_red_hat_decision_manager_on_red_hat_openshift_container_platform#assembly-openshift-templates"><emphasis>Deploying a Red Hat Decision Manager environment on Red Hat OpenShift Container Platform using templates</emphasis></link>
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis>, click the project name, and select any asset in the project.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Project Explorer</emphasis> menu on the left side of the screen, click the <emphasis role="strong">Customize View</emphasis> gear icon and select <emphasis role="strong">Repository View</emphasis> → <emphasis role="strong">pom.xml</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Add the following settings at the end of the project <literal>pom.xml</literal> file (before the <literal>&lt;/project&gt;</literal> closing tag). The values must correspond to the settings that you defined in your <literal>settings.xml</literal> file.
						</simpara>
						
<programlisting language="xml" linenumbering="unnumbered">&lt;distributionManagement&gt;
&lt;repository&gt;
&lt;id&gt;${maven-repo-id}&lt;/id&gt;
&lt;url&gt;${maven-repo-url}&lt;/url&gt;
&lt;layout&gt;default&lt;/layout&gt;
&lt;/repository&gt;
&lt;/distributionManagement&gt;</programlisting>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Save</emphasis> to save the <literal>pom.xml</literal> file changes.
						</simpara>
					</listitem>
				</orderedlist>
				<simpara>
					Repeat this procedure for each Business Central project that you want to export or push as a KJAR artifact to the external Maven repository.
				</simpara>
			</section>
			<section xml:id="project-build-deploy-central-proc_packaging-deploying">
				<title>Building and deploying a project in Business Central</title>
				<simpara>
					After your project is developed, you can build the project in Business Central and deploy it to the configured KIE Server. Projects in Business Central are packaged automatically as KJARs with all necessary components when you build and deploy the projects.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis> and click the project name.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the upper-right corner, click <emphasis role="strong">Deploy</emphasis> to build the project and deploy it to a KIE Server. To compile the project without deploying it to KIE Server, click <emphasis role="strong">Build</emphasis>.
						</simpara>
						<note>
							<simpara>
								You can also select the <emphasis role="strong">Build &amp; Install</emphasis> option to build the project and publish the KJAR file to the configured Maven repository without deploying to a KIE Server. In a development environment, you can click <emphasis role="strong">Deploy</emphasis> to deploy the built KJAR file to a KIE Server without stopping any running instances (if applicable), or click <emphasis role="strong">Redeploy</emphasis> to deploy the built KJAR file and replace all instances. The next time you deploy or redeploy the built KJAR, the previous deployment unit (KIE container) is automatically updated in the same target KIE Server. In a production environment, the <emphasis role="strong">Redeploy</emphasis> option is disabled and you can click <emphasis role="strong">Deploy</emphasis> only to deploy the built KJAR file to a new deployment unit (KIE container) on a KIE Server.
							</simpara>
							<simpara>
								To configure the KIE Server environment mode, set the <literal>org.kie.server.mode</literal> system property to <literal>org.kie.server.mode=development</literal> or <literal>org.kie.server.mode=production</literal>. To configure the deployment behavior for a corresponding project in Business Central, go to project <emphasis role="strong">Settings</emphasis> → <emphasis role="strong">General Settings</emphasis> → <emphasis role="strong">Version</emphasis> and toggle the <emphasis role="strong">Development Mode</emphasis> option. By default, KIE Server and all new projects in Business Central are in development mode. You cannot deploy a project with <emphasis role="strong">Development Mode</emphasis> turned on or with a manually added <literal>SNAPSHOT</literal> version suffix to a KIE Server that is in production mode.
							</simpara>
						</note>
						<simpara>
							If only one KIE Server is connected to Business Central, or if all connected KIE Servers are in the same server configuration, the services in the project are started automatically in a deployment unit (KIE container).
						</simpara>
						<simpara>
							If multiple server configurations are available, a deployment dialog is displayed in Business Central, prompting you to specify server and deployment details.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							If the deployment dialog appears, verify or set the following values:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">Deployment Unit Id / Deployment Unit Alias:</emphasis> Verify the name and alias of the deployment unit (KIE container) running the service within the KIE Server. You normally do not need to change these settings. For more information about KIE container aliases, see <xref linkend="container-alias-con_packaging-deploying" />.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Server Configuration:</emphasis> Select the server configuration for deploying this project. You can later deploy it to other configured servers without rebuilding the project.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Start Deployment Unit?:</emphasis> Verify that this box is selected to start the deployment unit (KIE container). If you clear this box, the service is deployed onto the server but not started.
								</simpara>
							</listitem>
						</itemizedlist>
						<simpara>
							To review project deployment details, click <emphasis role="strong">View deployment details</emphasis> in the deployment banner at the top of the screen or in the <emphasis role="strong">Deploy</emphasis> drop-down menu. This option directs you to the <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Deploy</emphasis> → <emphasis role="strong">Execution Servers</emphasis> page.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="deployment-units-con_packaging-deploying">
				<title>Deployment units in Business Central</title>
				<simpara>
					The services in a project are consumed at run time through an instantiated KIE container, or <emphasis>deployment unit</emphasis>, on a configured KIE Server. When you build and deploy a project in Business Central, the deployment unit is created automatically in the configured server. You can start, stop, or remove deployment units in Business Central as needed. You can also create additional deployment units from previously built projects and start them on existing or new KIE Servers configured in Business Central.
				</simpara>
				<section xml:id="deployment-unit-create-proc_packaging-deploying">
					<title>Creating a deployment unit in Business Central</title>
					<simpara>
						One or more deployment units should already exist as part of your Red Hat Decision Manager configuration, but if not, you can create a deployment unit from a project that was previously built in Business Central.
					</simpara>
					<itemizedlist>
						<title>Prerequisites</title>
						<listitem>
							<simpara>
								The project for which you are creating the new deployment unit has been built in Business Central.
							</simpara>
						</listitem>
					</itemizedlist>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Deploy</emphasis> → <emphasis role="strong">Execution servers</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Under <emphasis role="strong">Server Configurations</emphasis>, select an existing configuration or click <emphasis role="strong">New Server Configuration</emphasis> to create a configuration.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Under <emphasis role="strong">Deployment Units</emphasis>, click <emphasis role="strong">Add Deployment Unit</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Add an alias in the <emphasis role="strong">Alias</emphasis> field if required.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								In the table within the window, select a GAV and click <emphasis role="strong">Select</emphasis> next to the GAV to populate the deployment unit data fields.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Select the <emphasis role="strong">Start Deployment Unit?</emphasis> box to start the service immediately, or clear the box to start it later.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Finish</emphasis>.
							</simpara>
							<simpara>
								The new deployment unit for the service is created and placed on the KIE Servers that are configured for this server configuration. If you have selected <emphasis role="strong">Start Deployment Unit?</emphasis>, the service is started.
							</simpara>
						</listitem>
					</orderedlist>
				</section>
				<section xml:id="deployment-unit-manage-proc_packaging-deploying">
					<title>Starting, stopping, and removing deployment units in Business Central</title>
					<simpara>
						When a deployment unit is started, the services in the deployment unit are available for use. If only one KIE Server is connected to Business Central, or if all connected KIE Servers are in the same server configuration, services are started in a deployment unit automatically when a project is deployed. If multiple server configurations are available, you are prompted upon deployment to specify server and deployment details and to start the deployment unit. However, at any time you can manually start, stop, or remove deployment units in Business Central to manage your deployed services as needed.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Deploy</emphasis> → <emphasis role="strong">Execution servers</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Under <emphasis role="strong">Server Configurations</emphasis>, select a configuration.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Under <emphasis role="strong">Deployment Units</emphasis>, select a deployment unit.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Start</emphasis>, <emphasis role="strong">Stop</emphasis>, or <emphasis role="strong">Remove</emphasis> in the upper-right corner. To remove a running deployment unit, stop it and then remove it.
							</simpara>
						</listitem>
					</orderedlist>
				</section>
				<section xml:id="container-alias-con_packaging-deploying">
					<title>KIE container aliases</title>
					<simpara>
						An alias for a KIE container (deployment unit) is a proxy in the KIE Server instance that helps in handling different versions of the same container deployment. You can link a single alias to different versions of a container. When a container is upgraded, the linked alias automatically points to the new version of the container. For information about creating a KIE container alias, see <xref linkend="deployment-unit-create-proc_packaging-deploying" />.
					</simpara>
					<simpara>
						For example, if a client application is changing every time a new version of a container is deployed, then the client application can point to the container alias. When a new container version is deployed, the associated alias is updated and all the requests are routed automatically to the new container without changing the client application.
					</simpara>
					<simpara>
						Consider an example project that contains a single process and uses the following properties:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<literal>GroupId</literal>: org.jbpm
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>ArtifactId</literal>: my-project
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>Version</literal>: 1.0
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>containerID</literal>: my-project
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						When you update, build, and deploy the above project, the associated project is updated in the KIE Server with the latest version and contains the following properties:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<literal>GroupId</literal>: org.jbpm
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>ArtifactId</literal>: my-project
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>Version</literal>: 2.0
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						If you want to deploy the latest version of the project, you need to update the <literal>containerID</literal> as <literal>my-project2</literal> because the <literal>my-project</literal> container points to the old version.
					</simpara>
					<note>
						<simpara>
							Every project version contains a different <literal>containerID</literal> name. The associated client applications need to be aware of all versions of the projects they interact with.
						</simpara>
					</note>
					<simpara>
						Container aliases also help you manage KIE containers. You can set the container aliases explicitly when creating a container, or implicitly based on the associated <literal>ArtifactId</literal> name. You can add a single alias to multiple containers if required. If you do not specify a container alias, then the <literal>ArtifactId</literal> of a project is set as the container alias by default.
					</simpara>
					<simpara>
						When you set an alias for multiple containers that contain different <literal>GroupId</literal> and <literal>ArtifactId</literal> names, then you can use the same alias every time to interact with the KIE Server.
					</simpara>
					<simpara>
						You typically use container aliases in the following use cases:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<emphasis role="strong">Starting a new process instance</emphasis> on the client application with the latest version of the process
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Interacting with an existing process</emphasis> of a specific version
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Interacting with an existing task</emphasis> in a process
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Interacting with a process definition</emphasis> image and form
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						For example, after you deploy the 1.0 version of a project, you send a POST request to the following KIE Server REST API endpoint to start the process in the project:
					</simpara>
					<simpara>
						<literal>/http://localhost:8230/kie-server/services/rest/server/containers/my-project/processes/evaluation/instances</literal>
					</simpara>
					<simpara>
						The sent request starts a new process instance from <literal>org.jbpm:my-project:1.0</literal> in which <literal>my-project</literal> is defined as the container alias. Later, when you deploy the 2.0 version of the project and send the same request, a new instance starts from <literal>org.jbpm:my-project:2.0</literal>. You can deploy the latest version of the process without adding the <literal>containerID</literal> name.
					</simpara>
				</section>
			</section>
			<section xml:id="project-gav-setting-proc_packaging-deploying">
				<title>Editing the GAV values for a project in Business Central</title>
				<simpara>
					The <literal>GroupId</literal>, <literal>ArtifactId</literal>, and <literal>Version</literal> (GAV) values identify a project in a Maven repository. When Business Central and KIE Server are on the same file system and use the same Maven repository, the project is automatically updated in the repository each time you build a new version of your project. However, if Business Central and KIE Server are on separate file systems and use separate local Maven repositories, you must update a project GAV value, usually the version, for any new versions of the project to ensure that the project is seen as a different artifact alongside the old version.
				</simpara>
				<note>
					<simpara>
						For development purposes only, you can toggle the <emphasis role="strong">Development Mode</emphasis> option in project <emphasis role="strong">Settings</emphasis> → <emphasis role="strong">General Settings</emphasis> → <emphasis role="strong">Version</emphasis> to add the <literal>SNAPSHOT</literal> suffix in the project version. This suffix instructs Maven to get a new snapshot update according to the Maven policy. Do not use <emphasis role="strong">Development Mode</emphasis> or manually add the <literal>SNAPSHOT</literal> version suffix for a production environment.
					</simpara>
				</note>
				<simpara>
					You can set the GAV values in the project <emphasis role="strong">Settings</emphasis> screen.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis> and click the project name.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the project <emphasis role="strong">Settings</emphasis> tab.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In <emphasis role="strong">General Settings</emphasis>, modify the <emphasis role="strong">Group ID</emphasis>, <emphasis role="strong">Artifact ID</emphasis>, or <emphasis role="strong">Version</emphasis> fields as necessary. If you have deployed the project and are developing a new version, usually you need to increase the version number.
						</simpara>
						<note>
							<simpara>
								For development purposes only, you can toggle the <emphasis role="strong">Development Mode</emphasis> option in project <emphasis role="strong">Settings</emphasis> → <emphasis role="strong">General Settings</emphasis> → <emphasis role="strong">Version</emphasis> to add the <literal>SNAPSHOT</literal> suffix in the project version. This suffix instructs Maven to get a new snapshot update according to the Maven policy. Do not use <emphasis role="strong">Development Mode</emphasis> or manually add the <literal>SNAPSHOT</literal> version suffix for a production environment.
							</simpara>
						</note>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Save</emphasis> to finish.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="project-duplicate-GAV-con_packaging-deploying">
				<title>Duplicate GAV detection in Business Central</title>
				<simpara>
					In Business Central, all Maven repositories are checked for any duplicated <literal>GroupId</literal>, <literal>ArtifactId</literal>, and <literal>Version</literal> (GAV) values in a project. If a GAV duplicate exists, the performed operation is canceled.
				</simpara>
				<note>
					<simpara>
						Duplicate GAV detection is disabled for projects in <emphasis role="strong">Development Mode</emphasis>. To enable duplicate GAV detection in Business Central, go to project <emphasis role="strong">Settings</emphasis> → <emphasis role="strong">General Settings</emphasis> → <emphasis role="strong">Version</emphasis> and toggle the <emphasis role="strong">Development Mode</emphasis> option to <emphasis role="strong">OFF</emphasis> (if applicable).
					</simpara>
				</note>
				<simpara>
					Duplicate GAV detection is executed every time you perform the following operations:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Save a project definition for the project.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Save the <literal>pom.xml</literal> file.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Install, build, or deploy a project.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					The following Maven repositories are checked for duplicate GAVs:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Repositories specified in the <literal>&lt;repositories&gt;</literal> and <literal>&lt;distributionManagement&gt;</literal> elements of the <literal>pom.xml</literal> file.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Repositories specified in the Maven <literal>settings.xml</literal> configuration file.
						</simpara>
					</listitem>
				</itemizedlist>
				<section xml:id="project-duplicate-GAV-manage-proc_packaging-deploying">
					<title>Managing duplicate GAV detection settings in Business Central</title>
					<simpara>
						Business Central users with the <literal>admin</literal> role can modify the list of repositories that are checked for duplicate <literal>GroupId</literal>, <literal>ArtifactId</literal>, and <literal>Version</literal> (GAV) values for a project.
					</simpara>
					<note>
						<simpara>
							Duplicate GAV detection is disabled for projects in <emphasis role="strong">Development Mode</emphasis>. To enable duplicate GAV detection in Business Central, go to project <emphasis role="strong">Settings</emphasis> → <emphasis role="strong">General Settings</emphasis> → <emphasis role="strong">Version</emphasis> and toggle the <emphasis role="strong">Development Mode</emphasis> option to <emphasis role="strong">OFF</emphasis> (if applicable).
						</simpara>
					</note>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis> and click the project name.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click the project <emphasis role="strong">Settings</emphasis> tab and then click <emphasis role="strong">Validation</emphasis> to open the list of repositories.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Select or clear any of the listed repository options to enable or disable duplicate GAV detection.
							</simpara>
							<simpara>
								In the future, duplicate GAVs will be reported for only the repositories you have enabled for validation.
							</simpara>
							<note>
								<simpara>
									To disable this feature, set the <literal>org.guvnor.project.gav.check.disabled</literal> system property to <literal>true</literal> for Business Central at system startup:
								</simpara>
								
<screen>$ ~/EAP_HOME/bin/standalone.sh -c standalone-full.xml
-Dorg.guvnor.project.gav.check.disabled=true</screen>
							</note>
						</listitem>
					</orderedlist>
				</section>
			</section>
		</chapter>
		<chapter xml:id="project-deployment-other-con_packaging-deploying">
			<title>Project deployment without Business Central</title>
			<simpara>
				As an alternative to developing and deploying projects in the Business Central interface, you can use independent Maven projects or your own Java applications to develop Red Hat Decision Manager projects and deploy them in KIE containers (deployment units) to a configured KIE Server. You can then use the KIE Server REST API to start, stop, or remove the KIE containers that contain the services and their project versions that you have built and deployed. This flexibility enables you to continue to use your existing application workflow to develop business assets using Red Hat Decision Manager features.
			</simpara>
			<simpara>
				Projects in Business Central are packaged automatically when you build and deploy the projects. For projects outside of Business Central, such as independent Maven projects or projects within a Java application, you must configure the KIE module descriptor settings in an appended <literal>kmodule.xml</literal> file or directly in your Java application in order to build and deploy the projects.
			</simpara>
			<section xml:id="project-kmodule-configure-proc_packaging-deploying">
				<title>Configuring a KIE module descriptor file</title>
				<simpara>
					A KIE module is a Maven project or module with an additional metadata file <literal>META-INF/kmodule.xml</literal>. All Red Hat Decision Manager projects require a <literal>kmodule.xml</literal> file in order to be properly packaged and deployed. This <literal>kmodule.xml</literal> file is a KIE module descriptor that defines the KIE base and KIE session configurations for the assets in a project. A KIE base is a repository that contains all rules and other business assets in Red Hat Decision Manager but does not contain any runtime data. A KIE session stores and executes runtime data and is created from a KIE base or directly from a KIE container if you have defined the KIE session in the <literal>kmodule.xml</literal> file.
				</simpara>
				<simpara>
					If you create projects outside of Business Central, such as independent Maven projects or projects within a Java application, you must configure the KIE module descriptor settings in an appended <literal>kmodule.xml</literal> file or directly in your Java application in order to build and deploy the projects.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In the <literal>~/resources/META-INF</literal> directory of your project, create a <literal>kmodule.xml</literal> metadata file with at least the following content:
						</simpara>
						
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;kmodule xmlns="http://www.drools.org/xsd/kmodule"&gt;
&lt;/kmodule&gt;</programlisting>
						<simpara>
							This empty <literal>kmodule.xml</literal> file is sufficient to produce a single default KIE base that includes all files found under your project <literal>resources</literal> path. The default KIE base also includes a single default KIE session that is triggered when you create a KIE container in your application at build time.
						</simpara>
						<simpara>
							The following example is a more advanced <literal>kmodule.xml</literal> file:
						</simpara>
						
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;kmodule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.drools.org/xsd/kmodule"&gt;
  &lt;configuration&gt;
      &lt;property key="drools.evaluator.supersetOf" value="org.mycompany.SupersetOfEvaluatorDefinition"/&gt;
  &lt;/configuration&gt;
  &lt;kbase name="KBase1" default="true" eventProcessingMode="cloud" equalsBehavior="equality" declarativeAgenda="enabled" packages="org.domain.pkg1"&gt;
    &lt;ksession name="KSession1_1" type="stateful" default="true" /&gt;
    &lt;ksession name="KSession1_2" type="stateful" default="true" beliefSystem="jtms" /&gt;
  &lt;/kbase&gt;
  &lt;kbase name="KBase2" default="false" eventProcessingMode="stream" equalsBehavior="equality" declarativeAgenda="enabled" packages="org.domain.pkg2, org.domain.pkg3" includes="KBase1"&gt;
    &lt;ksession name="KSession2_1" type="stateless" default="true" clockType="realtime"&gt;
      &lt;fileLogger file="debugInfo" threaded="true" interval="10" /&gt;
      &lt;workItemHandlers&gt;
        &lt;workItemHandler name="name" type="new org.domain.WorkItemHandler()" /&gt;
      &lt;/workItemHandlers&gt;
      &lt;listeners&gt;
        &lt;ruleRuntimeEventListener type="org.domain.RuleRuntimeListener" /&gt;
        &lt;agendaEventListener type="org.domain.FirstAgendaListener" /&gt;
        &lt;agendaEventListener type="org.domain.SecondAgendaListener" /&gt;
        &lt;processEventListener type="org.domain.ProcessListener" /&gt;
      &lt;/listeners&gt;
    &lt;/ksession&gt;
  &lt;/kbase&gt;
&lt;/kmodule&gt;</programlisting>
						<simpara>
							This example defines two KIE bases. Specific <literal>packages</literal> of rule assets are included with both KIE bases. When you specify packages in this way, you must organize your rule files in a folder structure that reflects the specified packages. Two KIE sessions are instantiated from the <literal>KBase1</literal> KIE base, and one KIE session from <literal>KBase2</literal>. The KIE session from <literal>KBase2</literal> is a <literal>stateless</literal> KIE session, which means that data from a previous invocation of the KIE session (the previous session state) is discarded between session invocations. That KIE session also specifies a file (or a console) logger, a <literal>WorkItemHandler</literal>, and listeners of the three supported types shown: <literal>ruleRuntimeEventListener</literal>, <literal>agendaEventListener</literal> and <literal>processEventListener</literal>. The <literal>&lt;configuration&gt;</literal> element defines optional properties that you can use to further customize your <literal>kmodule.xml</literal> file.
						</simpara>
						<simpara>
							As an alternative to manually appending a <literal>kmodule.xml</literal> file to your project, you can use a <literal>KieModuleModel</literal> instance within your Java application to programmatically create a <literal>kmodule.xml</literal> file that defines the KIE base and a KIE session, and then add all resources in your project to the KIE virtual file system <literal>KieFileSystem</literal>.
						</simpara>
						<formalpara>
							<title>Creating <literal>kmodule.xml</literal> programmatically and adding it to <literal>KieFileSystem</literal></title>
							<para>
								
<programlisting language="java" linenumbering="unnumbered">import org.kie.api.KieServices;
import org.kie.api.builder.model.KieModuleModel;
import org.kie.api.builder.model.KieBaseModel;
import org.kie.api.builder.model.KieSessionModel;
import org.kie.api.builder.KieFileSystem;

KieServices kieServices = KieServices.Factory.get();
KieModuleModel kieModuleModel = kieServices.newKieModuleModel();

KieBaseModel kieBaseModel1 = kieModuleModel.newKieBaseModel("KBase1")
  .setDefault(true)
  .setEqualsBehavior(EqualityBehaviorOption.EQUALITY)
  .setEventProcessingMode(EventProcessingOption.STREAM);

KieSessionModel ksessionModel1 = kieBaseModel1.newKieSessionModel("KSession1_1")
  .setDefault(true)
  .setType(KieSessionModel.KieSessionType.STATEFUL)
  .setClockType(ClockTypeOption.get("realtime"));

KieFileSystem kfs = kieServices.newKieFileSystem();
kfs.writeKModuleXML(kieModuleModel.toXML());</programlisting>
							</para>
						</formalpara>
					</listitem>
					<listitem>
						<simpara>
							After you configure the <literal>kmodule.xml</literal> file either manually or programmatically in your project, retrieve the KIE bases and KIE sessions from the KIE container to verify the configurations:
						</simpara>
						
<programlisting language="java" linenumbering="unnumbered">KieServices kieServices = KieServices.Factory.get();
KieContainer kContainer = kieServices.getKieClasspathContainer();

KieBase kBase1 = kContainer.getKieBase("KBase1");
KieSession kieSession1 = kContainer.newKieSession("KSession1_1"),
    kieSession2 = kContainer.newKieSession("KSession1_2");

KieBase kBase2 = kContainer.getKieBase("KBase2");
StatelessKieSession kieSession3 = kContainer.newStatelessKieSession("KSession2_1");</programlisting>
						<simpara>
							If <literal>KieBase</literal> or <literal>KieSession</literal> have been configured as <literal>default="true"</literal> in the <literal>kmodule.xml</literal> file, as in the previous <literal>kmodule.xml</literal> example, you can retrieve them from the KIE container without passing any names:
						</simpara>
						
<programlisting language="java" linenumbering="unnumbered">KieContainer kContainer = ...

KieBase kBase1 = kContainer.getKieBase();
KieSession kieSession1 = kContainer.newKieSession(),
    kieSession2 = kContainer.newKieSession();

KieBase kBase2 = kContainer.getKieBase();
StatelessKieSession kieSession3 = kContainer.newStatelessKieSession();</programlisting>
						<simpara>
							To increase or decrease the maximum number of KIE modules or artifact versions that are cached in the decision engine, you can modify the values of the following system properties in your Red Hat Decision Manager distribution:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>kie.repository.project.cache.size</literal>: Maximum number of KIE modules that are cached in the decision engine. Default value: <literal>100</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>kie.repository.project.versions.cache.size</literal>: Maximum number of versions of the same artifact that are cached in the decision engine. Default value: <literal>10</literal>
								</simpara>
							</listitem>
						</itemizedlist>
						<simpara>
							For the full list of KIE repository configurations, download the <emphasis role="strong">Red Hat Decision Manager 7.10.0 Source Distribution</emphasis> ZIP file from the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html">Red Hat Customer Portal</link> and navigate to <literal>~/rhdm-7.10.0-sources/src/drools-$VERSION/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieRepositoryImpl.java</literal>.
						</simpara>
					</listitem>
				</orderedlist>
				<simpara>
					For more information about the <literal>kmodule.xml</literal> file, download the <emphasis role="strong">Red Hat Decision Manager 7.10.0 Source Distribution</emphasis> ZIP file from the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html">Red Hat Customer Portal</link> (if not downloaded already) and see the <literal>kmodule.xsd</literal> XML schema located at <literal>$FILE_HOME/rhdm-$VERSION-sources/kie-api-parent-$VERSION/kie-api/src/main/resources/org/kie/api/</literal>.
				</simpara>
				<note>
					<simpara>
						<literal>KieBase</literal> or <literal>KiePackage</literal> serialization is not supported in Red Hat Decision Manager 7.10. For more information, see <link xlink:href="https://access.redhat.com/solutions/3216951">Is serialization of kbase/package supported in BRMS 6/BPM Suite 6/RHDM 7?</link>.
					</simpara>
				</note>
				<section xml:id="project-kmodule-properties-ref_packaging-deploying">
					<title>KIE module configuration properties</title>
					<simpara>
						The optional <literal>&lt;configuration&gt;</literal> element in the KIE module descriptor file (<literal>kmodule.xml</literal>) of your project defines property <literal>key</literal> and <literal>value</literal> pairs that you can use to further customize your <literal>kmodule.xml</literal> file.
					</simpara>
					<formalpara>
						<title>Example configuration property in a <literal>kmodule.xml</literal> file</title>
						<para>
							
<programlisting language="xml" linenumbering="unnumbered">&lt;kmodule&gt;
  ...
  &lt;configuration&gt;
    &lt;property key="drools.dialect.default" value="java"/&gt;
    ...
  &lt;/configuration&gt;
  ...
&lt;/kmodule&gt;</programlisting>
						</para>
					</formalpara>
					<simpara>
						The following are the <literal>&lt;configuration&gt;</literal> property keys and values supported in the KIE module descriptor file (<literal>kmodule.xml</literal>) for your project:
					</simpara>
					<variablelist>
						<varlistentry>
							<term>drools.dialect.default</term>
							<listitem>
								<simpara>
									Sets the default Drools dialect.
								</simpara>
								<simpara>
									Supported values: <literal>java</literal>, <literal>mvel</literal>
								</simpara>
								
<programlisting language="xml" linenumbering="unnumbered">&lt;property key="drools.dialect.default"
  value="java"/&gt;</programlisting>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>drools.accumulate.function.$FUNCTION</term>
							<listitem>
								<simpara>
									Links a class that implements an accumulate function to a specified function name, which allows you to add custom accumulate functions into the decision engine.
								</simpara>
								
<programlisting language="xml" linenumbering="unnumbered">&lt;property key="drools.accumulate.function.hyperMax"
  value="org.drools.custom.HyperMaxAccumulate"/&gt;</programlisting>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>drools.evaluator.$EVALUATION</term>
							<listitem>
								<simpara>
									Links a class that implements an evaluator definition to a specified evaluator name so that you can add custom evaluators into the decision engine. An evaluator is similar to a custom operator.
								</simpara>
								
<programlisting language="xml" linenumbering="unnumbered">&lt;property key="drools.evaluator.soundslike"
  value="org.drools.core.base.evaluators.SoundslikeEvaluatorsDefinition"/&gt;</programlisting>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>drools.dump.dir</term>
							<listitem>
								<simpara>
									Sets a path to the Red Hat Decision Manager <literal>dump/log</literal> directory.
								</simpara>
								
<programlisting language="xml" linenumbering="unnumbered">&lt;property key="drools.dump.dir"
  value="$DIR_PATH/dump/log"/&gt;</programlisting>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>drools.defaultPackageName</term>
							<listitem>
								<simpara>
									Sets a default package for the business assets in your project.
								</simpara>
								
<programlisting language="xml" linenumbering="unnumbered">&lt;property key="drools.defaultPackageName"
  value="org.domain.pkg1"/&gt;</programlisting>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>drools.parser.processStringEscapes</term>
							<listitem>
								<simpara>
									Sets the String escape function. If this property is set to <literal>false</literal>, the <literal>\n</literal> character will not be interpreted as the newline character.
								</simpara>
								<simpara>
									Supported values: <literal>true</literal> (default), <literal>false</literal>
								</simpara>
								
<programlisting language="xml" linenumbering="unnumbered">&lt;property key="drools.parser.processStringEscapes"
  value="true"/&gt;</programlisting>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>drools.kbuilder.severity.$DUPLICATE</term>
							<listitem>
								<simpara>
									Sets a severity for instances of duplicate rules, processes, or functions reported when a KIE base is built. For example, if you set <literal>duplicateRule</literal> to <literal>ERROR</literal>, then an error is generated for any duplicated rules detected when the KIE base is built.
								</simpara>
								<simpara>
									Supported key suffixes: <literal>duplicateRule</literal>, <literal>duplicateProcess</literal>, <literal>duplicateFunction</literal>
								</simpara>
								<simpara>
									Supported values: <literal>INFO</literal>, <literal>WARNING</literal>, <literal>ERROR</literal>
								</simpara>
								
<programlisting language="xml" linenumbering="unnumbered">&lt;property key="drools.kbuilder.severity.duplicateRule"
  value="ERROR"/&gt;</programlisting>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>drools.propertySpecific</term>
							<listitem>
								<simpara>
									Sets the property reactivity of the decision engine.
								</simpara>
								<simpara>
									Supported values: <literal>DISABLED</literal>, <literal>ALLOWED</literal>, <literal>ALWAYS</literal>
								</simpara>
								
<programlisting language="xml" linenumbering="unnumbered">&lt;property key="drools.propertySpecific"
  value="ALLOWED"/&gt;</programlisting>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>drools.lang.level</term>
							<listitem>
								<simpara>
									Sets the DRL language level.
								</simpara>
								<simpara>
									Supported values: <literal>DRL5</literal>, <literal>DRL6</literal>, <literal>DRL6_STRICT</literal> (default)
								</simpara>
								
<programlisting language="xml" linenumbering="unnumbered">&lt;property key="drools.lang.level"
  value="DRL_STRICT"/&gt;</programlisting>
							</listitem>
						</varlistentry>
					</variablelist>
				</section>
				<section xml:id="project-kbase-ref_packaging-deploying">
					<title>KIE base attributes supported in KIE modules</title>
					<simpara>
						A KIE base is a repository that you define in the KIE module descriptor file (<literal>kmodule.xml</literal>) for your project and contains all rules and other business assets in Red Hat Decision Manager. When you define KIE bases in the <literal>kmodule.xml</literal> file, you can specify certain attributes and values to further customize your KIE base configuration.
					</simpara>
					<formalpara>
						<title>Example KIE base configuration in a <literal>kmodule.xml</literal> file</title>
						<para>
							
<programlisting language="xml" linenumbering="unnumbered">&lt;kmodule&gt;
  ...
  &lt;kbase name="KBase2" default="false" eventProcessingMode="stream" equalsBehavior="equality" declarativeAgenda="enabled" packages="org.domain.pkg2, org.domain.pkg3" includes="KBase1" sequential="false"&gt;
    ...
  &lt;/kbase&gt;
  ...
&lt;/kmodule&gt;</programlisting>
						</para>
					</formalpara>
					<simpara>
						The following are the <literal>kbase</literal> attributes and values supported in the KIE module descriptor file (<literal>kmodule.xml</literal>) for your project:
					</simpara>
					<table colsep="1" frame="all" rowsep="1">
						<title>KIE base attributes supported in KIE modules</title>
						<tgroup cols="3">
							<colspec colname="col_1" colwidth="30*"></colspec>
							<colspec colname="col_2" colwidth="30*"></colspec>
							<colspec colname="col_3" colwidth="40*"></colspec>
							<thead>
								<row>
									<entry align="left" valign="top">Attribute</entry>
									<entry align="left" valign="top">Supported values</entry>
									<entry align="left" valign="top">Description</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>name</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Any name
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Defines the name that retrieves <literal>KieBase</literal> from <literal>KieContainer</literal>. <emphasis>This attribute is mandatory</emphasis>.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>includes</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Comma-separated list of other KIE base objects in the KIE module
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Defines other KIE base objects and artifacts to be included in this KIE base. A KIE base can be contained in multiple KIE modules if you declare it as a dependency in the <literal>pom.xml</literal> file of the modules.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>packages</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Comma-separated list of packages to include in the KIE base
									</simpara>
									<simpara>
										Default: <literal>all</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Defines packages of artifacts (such as rules and processes) to be included in this KIE base. By default, all artifacts in the <literal>~/resources</literal> directory are included into a KIE base. This attribute enables you to limit the number of compiled artifacts. Only the packages belonging to the list specified in this attribute are compiled.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>default</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<literal>true</literal>, <literal>false</literal>
									</simpara>
									<simpara>
										Default: <literal>false</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Determines whether a KIE base is the default KIE base for a module so that it can be created from the KIE container without passing any name. Each module can have only one default KIE base.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>equalsBehavior</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<literal>identity</literal>, <literal>equality</literal>
									</simpara>
									<simpara>
										Default: <literal>identity</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Defines the behavior of Red Hat Decision Manager when a new fact is inserted into the working memory. If set to <literal>identity</literal>, a new <literal>FactHandle</literal> is always created unless the same object is already present in the working memory. If set to <literal>equality</literal>, a new <literal>FactHandle</literal> is created only if the newly inserted object is not equal to an existing fact, according to the <literal>equals()</literal> method of the inserted fact. Use <literal>equality</literal> mode when you want objects to be assessed based on feature equality instead of explicit identity.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>eventProcessingMode</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<literal>cloud</literal>, <literal>stream</literal>
									</simpara>
									<simpara>
										Default: <literal>cloud</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Determines how events are processed in the KIE base. If this property is set to <literal>cloud</literal>, the KIE base treats events as normal facts. If this property is set to <literal>stream</literal>, temporal reasoning on events is allowed.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>declarativeAgenda</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<literal>disabled</literal>, <literal>enabled</literal>
									</simpara>
									<simpara>
										Default: <literal>disabled</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Determines whether the declarative agenda is enabled or not.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>sequential</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<literal>true</literal>, <literal>false</literal>
									</simpara>
									<simpara>
										Default: <literal>false</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Determines whether sequential mode is enabled or not. In sequential mode, the decision engine evaluates rules one time in the order that they are listed in the decision engine agenda without regard to changes in the working memory. Enable this property if you use stateless KIE sessions and you do not want the execution of rules to influence subsequent rules in the agenda.
									</simpara>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
				</section>
				<section xml:id="project-ksession-ref_packaging-deploying">
					<title>KIE session attributes supported in KIE modules</title>
					<simpara>
						A KIE session stores and executes runtime data and is created from a KIE base or directly from a KIE container if you have defined the KIE session in the KIE module descriptor file (<literal>kmodule.xml</literal>) for your project. When you define KIE bases and KIE sessions in the <literal>kmodule.xml</literal> file, you can specify certain attributes and values to further customize your KIE session configuration.
					</simpara>
					<formalpara>
						<title>Example KIE session configuration in a <literal>kmodule.xml</literal> file</title>
						<para>
							
<programlisting language="xml" linenumbering="unnumbered">&lt;kmodule&gt;
  ...
  &lt;kbase&gt;
    ...
    &lt;ksession name="KSession2_1" type="stateless" default="true" clockType="realtime"&gt;
    ...
  &lt;/kbase&gt;
  ...
&lt;/kmodule&gt;</programlisting>
						</para>
					</formalpara>
					<simpara>
						The following are the <literal>ksession</literal> attributes and values supported in the KIE module descriptor file (<literal>kmodule.xml</literal>) for your project:
					</simpara>
					<table colsep="1" frame="all" rowsep="1">
						<title>KIE session attributes supported in KIE modules</title>
						<tgroup cols="3">
							<colspec colname="col_1" colwidth="30*"></colspec>
							<colspec colname="col_2" colwidth="30*"></colspec>
							<colspec colname="col_3" colwidth="40*"></colspec>
							<thead>
								<row>
									<entry align="left" valign="top">Attribute</entry>
									<entry align="left" valign="top">Supported values</entry>
									<entry align="left" valign="top">Description</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>name</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Any name
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Defines the name that retrieves <literal>KieSession</literal> from <literal>KieContainer</literal>. <emphasis>This attribute is mandatory</emphasis>.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>type</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<literal>stateful</literal>, <literal>stateless</literal>
									</simpara>
									<simpara>
										Default: <literal>stateful</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Determines whether data is retained (<literal>stateful</literal>) or discarded (<literal>stateless</literal>) between invocations of the KIE session. A session set to <literal>stateful</literal> enables you to iteratively work with the working memory, while a session set to <literal>stateless</literal> is typically used for one-off execution of assets. A <literal>stateless</literal> session stores a knowledge state that is changed every time a new fact is added, updated, or deleted, and every time a rule is executed. An execution in a <literal>stateless</literal> session has no information about previous actions, such rule executions.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>default</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<literal>true</literal>, <literal>false</literal>
									</simpara>
									<simpara>
										Default: <literal>false</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Determines whether a KIE session is the default session for a module so that it can be created from the KIE container without passing any name. Each module can have only one default KIE session.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>clockType</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<literal>realtime</literal>, <literal>pseudo</literal>
									</simpara>
									<simpara>
										Default: <literal>realtime</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Determines whether event time stamps are assigned by the system clock or by a pseudo clock controlled by the application. This clock is especially useful for unit testing on temporal rules.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>beliefSystem</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<literal>simple</literal>, <literal>jtms</literal>, <literal>defeasible</literal>
									</simpara>
									<simpara>
										Default: <literal>simple</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Defines the type of belief system used by the KIE session. A belief system deduces the truth from knowledge (facts). For example, if a new fact is inserted based on another fact which is later removed from the decision engine, the system can determine that the newly inserted fact should be removed as well.
									</simpara>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
				</section>
			</section>
			<section xml:id="project-build-deploy-maven-proc_packaging-deploying">
				<title>Packaging and deploying a Red Hat Decision Manager project in Maven</title>
				<simpara>
					If you want to deploy a Maven project outside of Business Central to a configured KIE Server, you can edit the project <literal>pom.xml</literal> file to package your project as a KJAR file and add a <literal>kmodule.xml</literal> file with the KIE base and KIE session configurations for the assets in your project.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have a Maven project that contains Red Hat Decision Manager business assets.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							KIE Server is installed and <literal>kie-server</literal> user access is configured. For installation options, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/installing_and_configuring_red_hat_decision_manager#assembly-planning"><emphasis>Planning a Red Hat Decision Manager installation</emphasis></link>.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In the <literal>pom.xml</literal> file of your Maven project, set the packaging type to <literal>kjar</literal> and add the <literal>kie-maven-plugin</literal> build component:
						</simpara>
						
<programlisting language="xml" linenumbering="unnumbered">&lt;packaging&gt;kjar&lt;/packaging&gt;
...
&lt;build&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.kie&lt;/groupId&gt;
      &lt;artifactId&gt;kie-maven-plugin&lt;/artifactId&gt;
      &lt;version&gt;${rhdm.version}&lt;/version&gt;
      &lt;extensions&gt;true&lt;/extensions&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;</programlisting>
						<simpara>
							The <literal>kjar</literal> packaging type activates the <literal>kie-maven-plugin</literal> component to validate and pre-compile artifact resources. The <literal>&lt;version&gt;</literal> is the Maven artifact version for Red Hat Decision Manager currently used in your project (for example, 7.48.0.Final-redhat-00002). These settings are required to properly package the Maven project for deployment.
						</simpara>
						<note>
							<simpara>
								Instead of specifying a Red Hat Decision Manager <literal>&lt;version&gt;</literal> for individual dependencies, consider adding the Red Hat Business Automation bill of materials (BOM) dependency to your project <literal>pom.xml</literal> file. The Red Hat Business Automation BOM applies to both Red Hat Decision Manager and Red Hat Process Automation Manager. When you add the BOM files, the correct versions of transitive dependencies from the provided Maven repositories are included in the project.
							</simpara>
							<simpara>
								Example BOM dependency:
							</simpara>
							
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
  &lt;groupId&gt;com.redhat.ba&lt;/groupId&gt;
  &lt;artifactId&gt;ba-platform-bom&lt;/artifactId&gt;
  &lt;version&gt;7.10.0.redhat-00002&lt;/version&gt;
  &lt;scope&gt;import&lt;/scope&gt;
  &lt;type&gt;pom&lt;/type&gt;
&lt;/dependency&gt;</programlisting>
							<simpara>
								For more information about the Red Hat Business Automation BOM, see <link xlink:href="https://access.redhat.com/solutions/3363991">What is the mapping between Red Hat Decision Manager and the Maven library version?</link>.
							</simpara>
						</note>
					</listitem>
					<listitem>
						<simpara>
							Optional: If your project contains Decision Model and Notation (DMN) assets, also add the following dependency in the <literal>pom.xml</literal> file to enable DMN executable models. DMN executable models enable DMN decision table logic in DMN projects to be evaluated more efficiently.
						</simpara>
						
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
  &lt;groupId&gt;org.kie&lt;/groupId&gt;
  &lt;artifactId&gt;kie-dmn-core&lt;/artifactId&gt;
  &lt;scope&gt;provided&lt;/scope&gt;
  &lt;version&gt;${rhdm.version}&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
					</listitem>
					<listitem>
						<simpara>
							In the <literal>~/resources</literal> directory of your Maven project, create a <literal>META-INF/kmodule.xml</literal> metadata file with at least the following content:
						</simpara>
						
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;kmodule xmlns="http://www.drools.org/xsd/kmodule"&gt;
&lt;/kmodule&gt;</programlisting>
						<simpara>
							This <literal>kmodule.xml</literal> file is a KIE module descriptor that is required for all Red Hat Decision Manager projects. You can use the KIE module to define one or more KIE bases and one or more KIE sessions from each KIE base.
						</simpara>
						<simpara>
							For more information about <literal>kmodule.xml</literal> configuration, see <xref linkend="project-kmodule-configure-proc_packaging-deploying" />.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the relevant resource in your Maven project, configure a <literal>.java</literal> class to create a KIE container and a KIE session to load the KIE base:
						</simpara>
						
<programlisting language="java" linenumbering="unnumbered">import org.kie.api.KieServices;
import org.kie.api.runtime.KieContainer;
import org.kie.api.runtime.KieSession;

public void testApp() {

  // Load the KIE base:
  KieServices ks = KieServices.Factory.get();
  KieContainer kContainer = ks.getKieClasspathContainer();
  KieSession kSession = kContainer.newKieSession();

}</programlisting>
						<simpara>
							In this example, the KIE container reads the files to be built from the class path for a <literal>testApp</literal> project. The <literal>KieServices</literal> API enables you to access all KIE building and runtime configurations.
						</simpara>
						<simpara>
							You can also create the KIE container by passing the project <literal>ReleaseId</literal> to the <literal>KieServices</literal> API. The <literal>ReleaseId</literal> is generated from the <literal>GroupId</literal>, <literal>ArtifactId</literal>, and <literal>Version</literal> (GAV) values in the project <literal>pom.xml</literal> file.
						</simpara>
						
<programlisting language="java" linenumbering="unnumbered">import org.kie.api.KieServices;
import org.kie.api.builder.ReleaseId;
import org.kie.api.runtime.KieContainer;
import org.kie.api.runtime.KieSession;
import org.drools.compiler.kproject.ReleaseIdImpl;

public void testApp() {

  // Identify the project in the local repository:
  ReleaseId rid = new ReleaseIdImpl("com.sample", "my-app", "1.0.0");

  // Load the KIE base:
  KieServices ks = KieServices.Factory.get();
  KieContainer kContainer = ks.newKieContainer(rid);
  KieSession kSession = kContainer.newKieSession();

}</programlisting>
					</listitem>
					<listitem>
						<simpara>
							In a command terminal, navigate to your Maven project directory and run the following command to build the project:
						</simpara>
						
<screen>mvn clean install</screen>
						<simpara>
							For DMN executable models, run the following command:
						</simpara>
						
<screen>mvn clean install -DgenerateDMNModel=YES</screen>
						<simpara>
							If the build fails, address any problems described in the command line error messages and try again to validate the files until the build is successful.
						</simpara>
						<note>
							<simpara>
								If the rule assets in your Maven project are not built from an executable rule model by default, verify that the following dependency is in the <literal>pom.xml</literal> file of your project and rebuild the project:
							</simpara>
							
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
  &lt;groupId&gt;org.drools&lt;/groupId&gt;
  &lt;artifactId&gt;drools-model-compiler&lt;/artifactId&gt;
  &lt;version&gt;${rhdm.version}&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
							<simpara>
								This dependency is required for rule assets in Red Hat Decision Manager to be built from executable rule models by default. This dependency is included as part of the Red Hat Decision Manager core packaging, but depending on your Red Hat Decision Manager upgrade history, you may need to manually add this dependency to enable the executable rule model behavior.
							</simpara>
							<simpara>
								For more information about executable rule models, see <xref linkend="executable-model-con_packaging-deploying" />.
							</simpara>
						</note>
					</listitem>
					<listitem>
						<simpara>
							After you successfully build and test the project locally, deploy the project to the remote Maven repository:
						</simpara>
						
<screen>mvn deploy</screen>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="project-build-deploy-java-proc_packaging-deploying">
				<title>Packaging and deploying a Red Hat Decision Manager project in a Java application</title>
				<simpara>
					If you want to deploy a project from within your own Java application to a configured KIE Server, you can use a <literal>KieModuleModel</literal> instance to programmatically create a <literal>kmodule.xml</literal> file that defines the KIE base and a KIE session, and then add all resources in your project to the KIE virtual file system <literal>KieFileSystem</literal>.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have a Java application that contains Red Hat Decision Manager business assets.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							KIE Server is installed and <literal>kie-server</literal> user access is configured. For installation options, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/installing_and_configuring_red_hat_decision_manager#assembly-planning"><emphasis>Planning a Red Hat Decision Manager installation</emphasis></link>.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Optional: If your project contains Decision Model and Notation (DMN) assets, add the following dependency to the relevant class path of your Java project to enable DMN executable models. DMN executable models enable DMN decision table logic in DMN projects to be evaluated more efficiently.
						</simpara>
						
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
  &lt;groupId&gt;org.kie&lt;/groupId&gt;
  &lt;artifactId&gt;kie-dmn-core&lt;/artifactId&gt;
  &lt;scope&gt;provided&lt;/scope&gt;
  &lt;version&gt;${rhdm.version}&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
						<simpara>
							The <literal>&lt;version&gt;</literal> is the Maven artifact version for Red Hat Decision Manager currently used in your project (for example, 7.48.0.Final-redhat-00002).
						</simpara>
						<note>
							<simpara>
								Instead of specifying a Red Hat Decision Manager <literal>&lt;version&gt;</literal> for individual dependencies, consider adding the Red Hat Business Automation bill of materials (BOM) dependency to your project <literal>pom.xml</literal> file. The Red Hat Business Automation BOM applies to both Red Hat Decision Manager and Red Hat Process Automation Manager. When you add the BOM files, the correct versions of transitive dependencies from the provided Maven repositories are included in the project.
							</simpara>
							<simpara>
								Example BOM dependency:
							</simpara>
							
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
  &lt;groupId&gt;com.redhat.ba&lt;/groupId&gt;
  &lt;artifactId&gt;ba-platform-bom&lt;/artifactId&gt;
  &lt;version&gt;7.10.0.redhat-00002&lt;/version&gt;
  &lt;scope&gt;import&lt;/scope&gt;
  &lt;type&gt;pom&lt;/type&gt;
&lt;/dependency&gt;</programlisting>
							<simpara>
								For more information about the Red Hat Business Automation BOM, see <link xlink:href="https://access.redhat.com/solutions/3363991">What is the mapping between Red Hat Decision Manager and the Maven library version?</link>.
							</simpara>
						</note>
					</listitem>
					<listitem>
						<simpara>
							Use the <literal>KieServices</literal> API to create a <literal>KieModuleModel</literal> instance with the desired KIE base and KIE session. The <literal>KieServices</literal> API enables you to access all KIE building and runtime configurations. The <literal>KieModuleModel</literal> instance generates the <literal>kmodule.xml</literal> file for your project.
						</simpara>
						<simpara>
							For more information about <literal>kmodule.xml</literal> configuration, see <xref linkend="project-kmodule-configure-proc_packaging-deploying" />.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Convert your <literal>KieModuleModel</literal> instance into XML and add the XML to <literal>KieFileSystem</literal>.
						</simpara>
						<formalpara>
							<title>Creating <literal>kmodule.xml</literal> programmatically and adding it to <literal>KieFileSystem</literal></title>
							<para>
								
<programlisting language="java" linenumbering="unnumbered">import org.kie.api.KieServices;
import org.kie.api.builder.model.KieModuleModel;
import org.kie.api.builder.model.KieBaseModel;
import org.kie.api.builder.model.KieSessionModel;
import org.kie.api.builder.KieFileSystem;

  KieServices kieServices = KieServices.Factory.get();
  KieModuleModel kieModuleModel = kieServices.newKieModuleModel();

  KieBaseModel kieBaseModel1 = kieModuleModel.newKieBaseModel("KBase1")
    .setDefault(true)
    .setEqualsBehavior(EqualityBehaviorOption.EQUALITY)
    .setEventProcessingMode(EventProcessingOption.STREAM);

  KieSessionModel ksessionModel1 = kieBaseModel1.newKieSessionModel("KSession1")
    .setDefault(true)
    .setType(KieSessionModel.KieSessionType.STATEFUL)
    .setClockType(ClockTypeOption.get("realtime"));

  KieFileSystem kfs = kieServices.newKieFileSystem();
  kfs.writeKModuleXML(kieModuleModel.toXML());</programlisting>
							</para>
						</formalpara>
					</listitem>
					<listitem>
						<simpara>
							Add any remaining Red Hat Decision Manager assets that you use in your project to your <literal>KieFileSystem</literal> instance. The artifacts must be in a Maven project file structure.
						</simpara>
						
<programlisting language="java" linenumbering="unnumbered">import org.kie.api.builder.KieFileSystem;

  KieFileSystem kfs = ...
  kfs.write("src/main/resources/KBase1/ruleSet1.drl", stringContainingAValidDRL)
    .write("src/main/resources/dtable.xls",
      kieServices.getResources().newInputStreamResource(dtableFileStream));</programlisting>
						<simpara>
							In this example, the project assets are added both as a <literal>String</literal> variable and as a <literal>Resource</literal> instance. You can create the <literal>Resource</literal> instance using the <literal>KieResources</literal> factory, also provided by the <literal>KieServices</literal> instance. The <literal>KieResources</literal> class provides factory methods to convert <literal>InputStream</literal>, <literal>URL</literal>, and <literal>File</literal> objects, or a <literal>String</literal> representing a path of your file system to a <literal>Resource</literal> instance that the <literal>KieFileSystem</literal> can manage.
						</simpara>
						<simpara>
							You can also explicitly assign a <literal>ResourceType</literal> property to a <literal>Resource</literal> object when you add project artifacts to <literal>KieFileSystem</literal>:
						</simpara>
						
<programlisting language="java" linenumbering="unnumbered">import org.kie.api.builder.KieFileSystem;

  KieFileSystem kfs = ...
  kfs.write("src/main/resources/myDrl.txt",
    kieServices.getResources().newInputStreamResource(drlStream)
      .setResourceType(ResourceType.DRL));</programlisting>
					</listitem>
					<listitem>
						<simpara>
							Use <literal>KieBuilder</literal> with the <literal>buildAll()</literal> method to build the content of <literal>KieFileSystem</literal>, and create a KIE container to deploy it:
						</simpara>
						
<programlisting language="java" linenumbering="unnumbered">import org.kie.api.KieServices;
import org.kie.api.KieServices.Factory;
import org.kie.api.builder.KieFileSystem;
import org.kie.api.builder.KieBuilder;
import org.kie.api.runtime.KieContainer;

  KieServices kieServices = KieServices.Factory.get();
  KieFileSystem kfs = ...

  KieBuilder kieBuilder = ks.newKieBuilder( kfs );
  kieBuilder.buildAll()
  assertEquals(0, kieBuilder.getResults().getMessages(Message.Level.ERROR).size());

  KieContainer kieContainer = kieServices
    .newKieContainer(kieServices.getRepository().getDefaultReleaseId());</programlisting>
						<simpara>
							A build <literal>ERROR</literal> indicates that the project compilation failed, no <literal>KieModule</literal> was produced, and nothing was added to the <literal>KieRepository</literal> singleton. A <literal>WARNING</literal> or an <literal>INFO</literal> result indicates that the compilation of the project was successful, with information about the build process.
						</simpara>
						<note>
							<simpara>
								To build the rule assets in your Java application project from an executable rule model, verify that the following dependency is in the <literal>pom.xml</literal> file of your project:
							</simpara>
							
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
  &lt;groupId&gt;org.drools&lt;/groupId&gt;
  &lt;artifactId&gt;drools-model-compiler&lt;/artifactId&gt;
  &lt;version&gt;${rhdm.version}&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
							<simpara>
								This dependency is required for rule assets in Red Hat Decision Manager to be built from executable rule models. This dependency is included as part of the Red Hat Decision Manager core packaging, but depending on your Red Hat Decision Manager upgrade history, you may need to manually add this dependency to enable the executable rule model behavior.
							</simpara>
							<simpara>
								After you verify the dependency, use the following modified <literal>buildAll()</literal> option to enable the executable model:
							</simpara>
							
<programlisting language="java" linenumbering="unnumbered">kieBuilder.buildAll(ExecutableModelProject.class)</programlisting>
							<simpara>
								For more information about executable rule models, see <xref linkend="executable-model-con_packaging-deploying" />.
							</simpara>
						</note>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="executable-model-con_packaging-deploying">
				<title>Executable rule models</title>
				<simpara>
					Rule assets in Red Hat Decision Manager are built from executable rule models by default with the standard <literal>kie-maven-plugin</literal> plugin. Executable rule models are embedded models that provide a Java-based representation of a rule set for execution at build time. The executable model is a more efficient alternative to the standard asset packaging in previous versions of Red Hat Decision Manager and enables KIE containers and KIE bases to be created more quickly, especially when you have large lists of DRL (Drools Rule Language) files and other Red Hat Decision Manager assets.
				</simpara>
				<simpara>
					If you do not use the <literal>kie-maven-plugin</literal> plugin or if the required <literal>drools-model-compiler</literal> dependency is missing from your project, then rule assets are built without executable models.
				</simpara>
				<simpara>
					Executable rule models provide the following specific advantages for your projects:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<emphasis role="strong">Compile time:</emphasis> Traditionally, a packaged Red Hat Decision Manager project (KJAR) contains a list of DRL files and other Red Hat Decision Manager artifacts that define the rule base together with some pre-generated classes implementing the constraints and the consequences. Those DRL files must be parsed and compiled when the KJAR is downloaded from the Maven repository and installed in a KIE container. This process can be slow, especially for large rule sets. With an executable model, you can package within the project KJAR the Java classes that implement the executable model of the project rule base and re-create the KIE container and its KIE bases out of it in a much faster way. In Maven projects, you use the <literal>kie-maven-plugin</literal> plugin to automatically generate the executable model sources from the DRL files during the compilation process.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Run time:</emphasis> In an executable model, all constraints are defined as Java lambda expressions. The same lambda expressions are also used for constraints evaluation, so you no longer need to use <literal>mvel</literal> expressions for interpreted evaluation nor the just-in-time (JIT) process to transform the <literal>mvel</literal>-based constraints into bytecode. This creates a quicker and more efficient run time.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Development time:</emphasis> An executable model enables you to develop and experiment with new features of the decision engine without needing to encode elements directly in the DRL format or modify the DRL parser to support them.
						</simpara>
					</listitem>
				</itemizedlist>
				<note>
					<simpara>
						For query definitions in executable rule models, you can use up to 10 arguments only.
					</simpara>
					<simpara>
						For variables within rule consequences in executable rule models, you can use up to 24 bound variables only (including the built-in <literal>drools</literal> variable). For example, the following rule consequence uses more than 24 bound variables and creates a compilation error:
					</simpara>
					
<screen>...
then
  $input.setNo25Count(functions.sumOf(new Object[]{$no1Count_1, $no2Count_1, $no3Count_1, ..., $no25Count_1}).intValue());
  $input.getFirings().add("fired");
  update($input);</screen>
				</note>
				<section xml:id="executable-model-modify-proc_packaging-deploying">
					<title>Modifying or disabling executable rule models in a Red Hat Decision Manager project</title>
					<simpara>
						Rule assets in Red Hat Decision Manager are built from executable rule models by default with the standard <literal>kie-maven-plugin</literal> plugin. The executable model is a more efficient alternative to the standard asset packaging in previous versions of Red Hat Decision Manager. However, if needed, you can modify or disable executable rule models to build a Red Hat Decision Manager project as a DRL-based KJAR instead of the default model-based KJAR.
					</simpara>
					<formalpara>
						<title>Procedure</title>
						<para>
							Build your Red Hat Decision Manager project in the usual way, but provide an alternate build option, depending on the type of project:
						</para>
					</formalpara>
					<itemizedlist>
						<listitem>
							<simpara>
								For a Maven project, navigate to your Maven project directory in a command terminal and run the following command:
							</simpara>
							
<screen>mvn clean install -DgenerateModel=&lt;VALUE&gt;</screen>
							<simpara>
								Replace <literal>&lt;VALUE&gt;</literal> with one of three values:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										<literal>YES_WITHDRL</literal>: (Default) Generates the executable model corresponding to the DRL files in the original project and also adds the DRL files to the generated KJAR for documentation purposes (the KIE base is built from the executable model regardless).
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<literal>YES</literal>: Generates the executable model corresponding to the DRL files in the original project and excludes the DRL files from the generated KJAR.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<literal>NO</literal>: Does not generate the executable model.
									</simpara>
								</listitem>
							</itemizedlist>
							<simpara>
								Example build command to disable the default executable model behavior:
							</simpara>
							
<screen>mvn clean install -DgenerateModel=NO</screen>
						</listitem>
						<listitem>
							<simpara>
								For a Java application configured programmatically, the executable model is disabled by default. Add rule assets to the KIE virtual file system <literal>KieFileSystem</literal> and use <literal>KieBuilder</literal> with one of the following <literal>buildAll()</literal> methods:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										<literal>buildAll()</literal> (Default) or <literal>buildAll(DrlProject.class)</literal>: Does not generate the executable model.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<literal>buildAll(ExecutableModelProject.class)</literal>: Generates the executable model corresponding to the DRL files in the original project.
									</simpara>
								</listitem>
							</itemizedlist>
							<simpara>
								Example code to enable executable model behavior:
							</simpara>
							
<programlisting language="java" linenumbering="unnumbered">import org.kie.api.KieServices;
import org.kie.api.builder.KieFileSystem;
import org.kie.api.builder.KieBuilder;

  KieServices ks = KieServices.Factory.get();
  KieFileSystem kfs = ks.newKieFileSystem()
  kfs.write("src/main/resources/KBase1/ruleSet1.drl", stringContainingAValidDRL)
  .write("src/main/resources/dtable.xls",
    kieServices.getResources().newInputStreamResource(dtableFileStream));

  KieBuilder kieBuilder = ks.newKieBuilder( kfs );
  // Enable executable model
  kieBuilder.buildAll(ExecutableModelProject.class)
  assertEquals(0, kieBuilder.getResults().getMessages(Message.Level.ERROR).size());</programlisting>
						</listitem>
					</itemizedlist>
				</section>
			</section>
			<section xml:id="kie-scanner-proc_packaging-deploying">
				<title>Using a KIE scanner to monitor and update KIE containers</title>
				<simpara>
					The KIE scanner in Red Hat Decision Manager monitors your Maven repository for new <literal>SNAPSHOT</literal> versions of your Red Hat Decision Manager project and then deploys the latest version of the project to a specified KIE container. You can use a KIE scanner in a development environment to maintain your Red Hat Decision Manager project deployments more efficiently as new versions become available.
				</simpara>
				<important>
					<simpara>
						For production environments, do not use a KIE scanner with <literal>SNAPSHOT</literal> project versions to avoid accidental or unexpected project updates. The KIE scanner is intended for development environments that use <literal>SNAPSHOT</literal> project versions.
					</simpara>
				</important>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							The <literal>kie-ci.jar</literal> file is available on the class path of your Red Hat Decision Manager project.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In the relevant <literal>.java</literal> class in your project, register and start the KIE scanner as shown in the following example code:
						</simpara>
						<formalpara>
							<title>Registering and starting a KIE scanner for a KIE container</title>
							<para>
								
<programlisting language="java" linenumbering="unnumbered">import org.kie.api.KieServices;
import org.kie.api.builder.ReleaseId;
import org.kie.api.runtime.KieContainer;
import org.kie.api.builder.KieScanner;

...

KieServices kieServices = KieServices.Factory.get();
ReleaseId releaseId = kieServices
  .newReleaseId("com.sample", "my-app", "1.0-SNAPSHOT");
KieContainer kContainer = kieServices.newKieContainer(releaseId);
KieScanner kScanner = kieServices.newKieScanner(kContainer);

// Start KIE scanner for polling the Maven repository every 10 seconds (10000 ms)
kScanner.start(10000L);</programlisting>
							</para>
						</formalpara>
						<simpara>
							In this example, the KIE scanner is configured to run with a fixed time interval. The minimum KIE scanner polling interval is 1 millisecond (ms) and the maximum polling interval is the maximum value of the data type <literal>long</literal>. A polling interval of 0 or less results in a <literal>java.lang.IllegalArgumentException: pollingInterval must be positive</literal> error. You can also configure the KIE scanner to run on demand by invoking the <literal>scanNow()</literal> method.
						</simpara>
						<simpara>
							The project group ID, artifact ID, and version (GAV) settings in the example are defined as <literal>com.sample:my-app:1.0-SNAPSHOT</literal>. The project version must contain the <literal>-SNAPSHOT</literal> suffix to enable the KIE scanner to retrieve the latest build of the specified artifact version. If you change the snapshot project version number, such as increasing to <literal>1.0.1-SNAPSHOT</literal>, then you must also update the version in the GAV definition in your KIE scanner configuration. The KIE scanner does not retrieve updates for projects with static versions, such as <literal>com.sample:my-app:1.0</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <literal>settings.xml</literal> file of your Maven repository, set the <literal>updatePolicy</literal> configuration to <literal>always</literal> to enable the KIE scanner to function properly:
						</simpara>
						
<programlisting language="xml" linenumbering="unnumbered">&lt;profile&gt;
  &lt;id&gt;guvnor-m2-repo&lt;/id&gt;
  &lt;repositories&gt;
    &lt;repository&gt;
      &lt;id&gt;guvnor-m2-repo&lt;/id&gt;
      &lt;name&gt;BA Repository&lt;/name&gt;
      &lt;url&gt;http://localhost:8080/decision-central/maven2/&lt;/url&gt;
      &lt;layout&gt;default&lt;/layout&gt;
      &lt;releases&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;
        &lt;updatePolicy&gt;always&lt;/updatePolicy&gt;
      &lt;/releases&gt;
      &lt;snapshots&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;
        &lt;updatePolicy&gt;always&lt;/updatePolicy&gt;
      &lt;/snapshots&gt;
    &lt;/repository&gt;
  &lt;/repositories&gt;
&lt;/profile&gt;</programlisting>
						<simpara>
							After the KIE scanner starts polling, if the KIE scanner detects an updated version of the <literal>SNAPSHOT</literal> project in the specified KIE container, the KIE scanner automatically downloads the new project version and triggers an incremental build of the new project. From that moment, all of the new <literal>KieBase</literal> and <literal>KieSession</literal> objects that were created from the KIE container use the new project version.
						</simpara>
						<simpara>
							For information about starting or stopping a KIE scanner using KIE Server APIs, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/deploying_and_managing_red_hat_decision_manager_services#kie-server-commands-con_kie-apis"><emphasis>Interacting with Red Hat Decision Manager using KIE APIs</emphasis></link>.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="service-start-proc_packaging-deploying">
				<title>Starting a service in KIE Server</title>
				<simpara>
					If you have deployed Red Hat Decision Manager assets from a Maven or Java project outside of Business Central, you use a KIE Server REST API call to start the KIE container (deployment unit) and the services in it. You can use the KIE Server REST API to start services regardless of your deployment type, including deployment from Business Central, but projects deployed from Business Central either are started automatically or can be started within the Business Central interface.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							KIE Server is installed and <literal>kie-server</literal> user access is configured. For installation options, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/installing_and_configuring_red_hat_decision_manager#assembly-planning"><emphasis>Planning a Red Hat Decision Manager installation</emphasis></link>.
						</simpara>
					</listitem>
				</itemizedlist>
				<formalpara>
					<title>Procedure</title>
					<para>
						In your command terminal, run the following API request to load a service into a KIE container in the KIE Server and to start it:
					</para>
				</formalpara>
				
<screen>$ curl --user "&lt;username&gt;:&lt;password&gt;" -H "Content-Type: application/json" -X PUT -d '{"container-id" : "&lt;containerID&gt;","release-id" : {"group-id" : "&lt;groupID&gt;","artifact-id" : "&lt;artifactID&gt;","version" : "&lt;version&gt;"}}' http://&lt;serverhost&gt;:&lt;serverport&gt;/kie-server/services/rest/server/containers/&lt;containerID&gt;</screen>
				<simpara>
					Replace the following values:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<emphasis role="strong">&lt;username&gt;</emphasis>, <emphasis role="strong">&lt;password&gt;:</emphasis> The user name and password of a user with the <literal>kie-server</literal> role.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">&lt;containerID&gt;:</emphasis> The identifier for the KIE container (deployment unit). You can use any random identifier but it must be the same in both places in the command (the URL and the data).
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">&lt;groupID&gt;</emphasis>, <emphasis role="strong">&lt;artifactID&gt;</emphasis>, <emphasis role="strong">&lt;version&gt;:</emphasis> The project GAV values.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">&lt;serverhost&gt;:</emphasis> The host name for the KIE Server, or <literal>localhost</literal> if you are running the command on the same host as the KIE Server.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">&lt;serverport&gt;:</emphasis> The port number for the KIE Server.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Example:
				</simpara>
				
<screen>curl --user "rhdmAdmin:password@1" -H "Content-Type: application/json" -X PUT -d '{"container-id" : "kie1","release-id" : {"group-id" : "org.kie.server.testing","artifact-id" : "container-crud-tests1","version" : "2.1.0.GA"}}' http://localhost:39043/kie-server/services/rest/server/containers/kie1</screen>
			</section>
			<section xml:id="service-stop-remove-proc_packaging-deploying">
				<title>Stopping and removing a service in KIE Server</title>
				<simpara>
					If you have started Red Hat Decision Manager services from a Maven or Java project outside of Business Central, you use a KIE Server REST API call to stop and remove the KIE container (deployment unit) containing the services. You can use the KIE Server REST API to stop services regardless of your deployment type, including deployment from Business Central, but services from Business Central can also be stopped within the Business Central interface.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							KIE Server is installed and <literal>kie-server</literal> user access is configured. For installation options, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/installing_and_configuring_red_hat_decision_manager#assembly-planning"><emphasis>Planning a Red Hat Decision Manager installation</emphasis></link>.
						</simpara>
					</listitem>
				</itemizedlist>
				<formalpara>
					<title>Procedure</title>
					<para>
						In your command terminal, run the following API request to stop and remove a KIE container with services on KIE Server:
					</para>
				</formalpara>
				
<screen>$ curl --user "&lt;username&gt;:&lt;password&gt;" -X DELETE http://&lt;serverhost&gt;:&lt;serverport&gt;/kie-server/services/rest/server/containers/&lt;containerID&gt;</screen>
				<simpara>
					Replace the following values:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<emphasis role="strong">&lt;username&gt;</emphasis>, <emphasis role="strong">&lt;password&gt;:</emphasis> The user name and password of a user with the <literal>kie-server</literal> role.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">&lt;containerID&gt;:</emphasis> The identifier for the KIE container (deployment unit). You can use any random identifier but it must be the same in both places in the command (the URL and the data).
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">&lt;serverhost&gt;:</emphasis> The host name for the KIE Server, or <literal>localhost</literal> if you are running the command on the same host as the KIE Server.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">&lt;serverport&gt;:</emphasis> The port number for the KIE Server.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Example:
				</simpara>
				
<screen>curl --user "rhdmAdmin:password@1" -X DELETE http://localhost:39043/kie-server/services/rest/server/containers/kie1</screen>
			</section>
		</chapter>
		<chapter remap="_additional_resources" xml:id="additional_resources">
			<title>Additional resources</title>
			<itemizedlist>
				<listitem>
					<simpara>
						<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/developing_decision_services_in_red_hat_decision_manager#assets-executing-proc_drl-rules">"Executing rules" in <emphasis>Designing a decision service using DRL rules</emphasis></link>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/deploying_and_managing_red_hat_decision_manager_services#assembly-kie-apis"><emphasis>Interacting with Red Hat Decision Manager using KIE APIs</emphasis></link>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/deploying_red_hat_decision_manager_on_red_hat_openshift_container_platform#assembly-openshift-operator"><emphasis>Deploying a Red Hat Decision Manager environment on Red Hat OpenShift Container Platform using Operators</emphasis></link>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/deploying_red_hat_decision_manager_on_red_hat_openshift_container_platform#assembly-openshift-templates"><emphasis>Deploying a Red Hat Decision Manager environment on Red Hat OpenShift Container Platform using templates</emphasis></link>
					</simpara>
				</listitem>
			</itemizedlist>
		</chapter>
	</part>
	<part xml:id="assembly-managing-projects">
		<title>Managing projects in Business Central</title>
		<partintro>
			<simpara>
				As a process administrator, you can use Business Central in Red Hat Decision Manager to manage new, sample, and imported projects on a single or multiple branches.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						Red Hat JBoss Enterprise Application Platform 7.3 is installed. For details, see the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.2/html-single/installation_guide/"><emphasis>Red Hat JBoss Enterprise Application Platform 7.3 Installation Guide</emphasis></link>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Red Hat Decision Manager is installed and configured with KIE Server. For more information, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/installing_and_configuring_red_hat_decision_manager#assembly-install-on-eap"><emphasis>Installing and configuring Red Hat Decision Manager on Red Hat JBoss EAP 7.3</emphasis></link>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Red Hat Decision Manager is running and you can log in to Business Central with the <literal>developer</literal> role. For more information, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/installing_and_configuring_red_hat_decision_manager#assembly-planning"><emphasis>Planning a Red Hat Decision Manager installation</emphasis></link>.
					</simpara>
				</listitem>
			</itemizedlist>
		</partintro>
		<chapter xml:id="projects-con_managing-projects">
			<title>Red Hat Decision Manager projects</title>
			<simpara>
				Red Hat Decision Manager projects contain the business assets that you develop in Red Hat Decision Manager and are assigned to a space (for example, <literal>MyProject</literal> within <literal>MySpace</literal>). Projects also contain configuration files such as a Maven project object model file (<literal>pom.xml</literal>), which contains build, environment, and other information about the project, and a KIE module descriptor file (<literal>kmodule.xml</literal>), which contains the KIE Base and KIE Session configurations for the assets in the project.
			</simpara>
		</chapter>
		<chapter xml:id="migrating-from-legacy-designer-proc">
			<title>Migrating business processes to the new process designer</title>
			<simpara>
				The legacy process designer in Business Central is deprecated in Red Hat Decision Manager 7.10.0. It will be removed in a future Red Hat Decision Manager release. The legacy process designer will not receive any new enhancements or features. If you intend to use the new process designer, start migrating your processes to the new designer. Create all new processes in the new process designer.
			</simpara>
			<note>
				<simpara>
					The process engine will continue to support the execution and deployment of business processes generated with the legacy designer in to the KIE Server. If you have a legacy business process that is functioning and that you do not intend to change, it is not mandatory to migrate to the new designer at this time.
				</simpara>
			</note>
			<simpara>
				You can only migrate business processes that contain supported business process nodes in the new designer. More nodes will be added in future versions of Red Hat Decision Manager.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						You have an existing project that contains a business process asset that was created with the legacy process designer.
					</simpara>
				</listitem>
			</itemizedlist>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In Business Central, click <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click the project you want to migrate, for example <emphasis role="strong">Mortgages</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Ok</emphasis> to open the project’s asset list.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click the project’s <emphasis role="strong">Business Process</emphasis> asset to open it in the legacy process designer.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Migrate</emphasis> → <emphasis role="strong">Migrate Diagram</emphasis>.
					</simpara>
					<figure>
						<title>Migration confirmation message</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/project-data/migrate-message.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>Migration confirmation message</phrase>
							</textobject>
						</mediaobject>
					</figure>
				</listitem>
				<listitem>
					<simpara>
						Select <emphasis role="strong">Yes</emphasis> or <emphasis role="strong">No</emphasis> to confirm if you made changes. This option is only available if you have made changes to your legacy business process.
					</simpara>
					<figure>
						<title>Save diagram changes confirmation</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/project-data/save-changes-migration.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>Save diagram changes confirmation</phrase>
							</textobject>
						</mediaobject>
					</figure>
				</listitem>
			</orderedlist>
			<simpara>
				If the migration is successful, the business process opens in the new process designer and the business process name’s extension changes from *.bpmn2 to *.bpmn.
			</simpara>
			<simpara>
				If the migration is unsuccessful due to an unsupported node type, Business Central displays the following error message:
			</simpara>
			<figure>
				<title>Migration failure message</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/_images/project-data/migrate-fail.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>Migration failure message</phrase>
					</textobject>
				</mediaobject>
			</figure>
		</chapter>
		<chapter xml:id="mod-projects-overview-con">
			<title>Modifying existing projects in Business Central</title>
			<simpara>
				Business Central includes a number of sample projects that you can use to get familiar with the product and its features. The sample projects have been designed and created to demonstrate a variety of business scenarios. You can modify the sample projects to meet your specific business needs. For example, Red Hat Decision Manager 7.10 contains the <emphasis role="strong">Mortgages</emphasis> sample project, which consists of predefined data objects, guided decision tables, guided rules, forms, and a business process. You can edit the sample to refine your business process.
			</simpara>
			<simpara>
				If none of the existing Business Central project samples align with your requirements, you can create a new project or import one from a Git repository. For more information, see <xref linkend="git-import-project" />. You can import any other project from Git. For example, a project that was developed in another Business Central instance.
			</simpara>
		</chapter>
		<chapter xml:id="creating_business_project">
			<title>Creating the mortgage-process project</title>
			<simpara>
				A project is a container for assets such as data objects, business processes, guided rules, decision tables, and forms. The project that you are creating is similar to the existing <emphasis role="strong">Mortgage_Process</emphasis> sample project in Business Central.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis>.
					</simpara>
					<simpara>
						Red Hat Decision Manager provides a default space called <emphasis role="strong">MySpace</emphasis>, as shown in the following image. You can use the default space to create and test example projects.
					</simpara>
					<figure>
						<title>Default space</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/getting-started/spaces-teams.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>spaces teams</phrase>
							</textobject>
						</mediaobject>
					</figure>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Add Project</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Enter <literal>mortgage-process</literal> in the <emphasis role="strong">Name</emphasis> field.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Configure Advanced Options</emphasis> and modify the GAV fields with the following values:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<emphasis role="strong">Group ID</emphasis>: <literal>com.myspace</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Artifact ID</emphasis>: <literal>mortgage-process</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Version</emphasis>: <literal>1.0.0</literal>
							</simpara>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Add</emphasis>.
					</simpara>
				</listitem>
			</orderedlist>
			<simpara>
				The <emphasis role="strong">Assets</emphasis> view of the project opens.
			</simpara>
			<section xml:id="mod-sample-project">
				<title>Modifying the Mortgages sample project</title>
				<simpara>
					The <emphasis role="strong">Mortgages</emphasis> sample project consists of predefined data objects, guided decision tables, guided rules, forms, and a business process. Using the sample project provides a quick way to get acclimated with Red Hat Decision Manager. In a real business scenario, you would create all of the assets by providing data that is specific to your business requirements.
				</simpara>
				<simpara>
					Navigate to the <emphasis role="strong">Mortgages</emphasis> sample project to view the predefined assets.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the upper-right corner of the screen, click the arrow next to <emphasis role="strong">Add Project</emphasis> and select <emphasis role="strong">Try Samples</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select <emphasis role="strong">Mortgages</emphasis> and click <emphasis role="strong">Ok</emphasis>. The <emphasis role="strong">Assets</emphasis> view of the project opens.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click an asset that you want to modify. All of the assets can be edited to meet your project requirements.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="create_archetype_project">
				<title>Creating a project using archetypes</title>
				<simpara>
					Archetypes are projects that are installed in Apache Maven repositories and contain a specific template structure. You can also generate parameterized versions of the project templates using archetypes. When you use an archetype to create a project, it is added to the Git repository that is connected to your Red Hat Decision Manager installation.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have created an archetype and added it to the <emphasis role="strong">Archetypes</emphasis> page in the Business Central <emphasis role="strong">Settings</emphasis>. For information about creating archetypes, see the <link xlink:href="https://maven.apache.org/guides/mini/guide-creating-archetypes.html">Guide to Creating Archetypes</link>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							You have set a default archetype in your space in Business Central.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					For more information about archetypes management, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/managing_red_hat_decision_manager_and_kie_server_settings#assembly-configuring-central"><emphasis>Configuring Business Central settings and properties</emphasis></link>.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select or create the space into which you want to add a new project from an archetype template.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Add Project</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Type the project name and description in the <emphasis role="strong">Name</emphasis> and <emphasis role="strong">Description</emphasis> fields.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Configure Advanced Options</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select the <emphasis role="strong">Based on template</emphasis> checkbox.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select the archetype from drop-down options if required. The default archetype is selected that is already set in the space.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Add</emphasis>.
						</simpara>
					</listitem>
				</orderedlist>
				<simpara>
					The Assets view of the project opens based on the selected archetype template.
				</simpara>
			</section>
		</chapter>
		<chapter xml:id="git-import-project">
			<title>Importing projects from Git repositories</title>
			<simpara>
				Git is a distributed version control system. It implements revisions as commit objects. When you save your changes to a repository, a new commit object in the Git repository is created.
			</simpara>
			<simpara>
				Business Central uses Git to store project data, including assets such as rules and processes. When you create a project in Business Central, it is added to a Git repository that is connected to Business Central. If you have projects in Git repositories, you can import the project’s master branch or import the master branch along with other specific branches into the Business Central Git repository through Business Central spaces.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						Red Hat Decision Manager projects exist in an external Git repository.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						You have the credentials required for read access to that external Git repository.
					</simpara>
				</listitem>
			</itemizedlist>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select or create the space into which you want to import the projects. The default space is <emphasis role="strong">MySpace</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In the upper-right corner of the screen, click the arrow next to <emphasis role="strong">Add Project</emphasis> and select <emphasis role="strong">Import Project</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In the <emphasis role="strong">Import Project</emphasis> window, enter the URL and credentials for the Git repository that contains the project that you want to import and click <emphasis role="strong">Import</emphasis>. The <emphasis role="strong">Import Projects</emphasis> page is displayed.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Optional: To import master and specific branches, do the following tasks:
					</simpara>
					<orderedlist numeration="loweralpha">
						<listitem>
							<simpara>
								On the <emphasis role="strong">Import Projects</emphasis> page, click the branches 
								<inlinemediaobject>
									<imageobject>
										<imagedata fileref="images/_images/project-data/branch-icon.png" format="PNG" />
									</imageobject>
									<textobject>
										<phrase>branch icon</phrase>
									</textobject>
								</inlinemediaobject>
								 icon.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								In the <emphasis role="strong">Branches to be imported</emphasis> window, select branches from the list.
							</simpara>
							<note>
								<simpara>
									You must select the master branch as a minimum.
								</simpara>
							</note>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Ok</emphasis>.
							</simpara>
						</listitem>
					</orderedlist>
				</listitem>
				<listitem>
					<simpara>
						On the <emphasis role="strong">Import Projects</emphasis> page, ensure the project is highlighted and click <emphasis role="strong">Ok</emphasis>.
					</simpara>
				</listitem>
			</orderedlist>
		</chapter>
		<chapter xml:id="revise-project-ver">
			<title>Revising project versions</title>
			<simpara>
				You can revise the version number of a project in Red Hat Decision Manager before you build and deploy a new instance of the project. Creating a new version of a project preserves the old version in case there is a problem with the new one and you need to revert back.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						KIE Server is deployed and connected to Business Central.
					</simpara>
				</listitem>
			</itemizedlist>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click the project you want to deploy, for example <emphasis role="strong">Mortgages</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Deploy</emphasis>.
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								If there is no container with the project name, a container with default values is automatically created.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								If an older version of the project is already deployed, go to the project settings and change the project version. When finished, save the change and click <emphasis role="strong">Deploy</emphasis>. This will deploy a new version of the same project with the latest changes in place, alongside the older version(s).
							</simpara>
							<note>
								<simpara>
									You can also select the <emphasis role="strong">Build &amp; Install</emphasis> option to build the project and publish the KJAR file to the configured Maven repository without deploying to a KIE Server. In a development environment, you can click <emphasis role="strong">Deploy</emphasis> to deploy the built KJAR file to a KIE Server without stopping any running instances (if applicable), or click <emphasis role="strong">Redeploy</emphasis> to deploy the built KJAR file and replace all instances. The next time you deploy or redeploy the built KJAR, the previous deployment unit (KIE container) is automatically updated in the same target KIE Server. In a production environment, the <emphasis role="strong">Redeploy</emphasis> option is disabled and you can click <emphasis role="strong">Deploy</emphasis> only to deploy the built KJAR file to a new deployment unit (KIE container) on a KIE Server.
								</simpara>
								<simpara>
									To configure the KIE Server environment mode, set the <literal>org.kie.server.mode</literal> system property to <literal>org.kie.server.mode=development</literal> or <literal>org.kie.server.mode=production</literal>. To configure the deployment behavior for a corresponding project in Business Central, go to project <emphasis role="strong">Settings</emphasis> → <emphasis role="strong">General Settings</emphasis> → <emphasis role="strong">Version</emphasis> and toggle the <emphasis role="strong">Development Mode</emphasis> option. By default, KIE Server and all new projects in Business Central are in development mode. You cannot deploy a project with <emphasis role="strong">Development Mode</emphasis> turned on or with a manually added <literal>SNAPSHOT</literal> version suffix to a KIE Server that is in production mode.
								</simpara>
							</note>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<simpara>
						To review project deployment details, click <emphasis role="strong">View deployment details</emphasis> in the deployment banner at the top of the screen or in the <emphasis role="strong">Deploy</emphasis> drop-down menu. This option directs you to the <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Deploy</emphasis> → <emphasis role="strong">Execution Servers</emphasis> page.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						To verify process definitions, click <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Definitions</emphasis>, and click 
						<inlinemediaobject>
							<imageobject>
								<imagedata fileref="images/_images/getting-started/btn_refresh.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>btn refresh</phrase>
							</textobject>
						</inlinemediaobject>
						.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click 
						<inlinemediaobject>
							<imageobject>
								<imagedata fileref="images/_images/project-data/dots.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>dots</phrase>
							</textobject>
						</inlinemediaobject>
						 in the <emphasis role="strong">Actions</emphasis> column and select <emphasis role="strong">Start</emphasis> to start a new instance of the process.
					</simpara>
				</listitem>
			</orderedlist>
		</chapter>
		<chapter xml:id="config-project-settings">
			<title>Configuring project settings</title>
			<simpara>
				Starting with Red Hat Decision Manager 7.10, Business Central contains additional project setting categories in the new process designer.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						You have created a Business Central project.
					</simpara>
				</listitem>
			</itemizedlist>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						To access the project <emphasis role="strong">Settings</emphasis> tab, in Business Central go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click the project name.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Settings</emphasis> to view or modify the following project settings:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<emphasis role="strong">General Settings</emphasis> - Enables users to set the project’s <emphasis role="strong">Name</emphasis>, <emphasis role="strong">Description</emphasis>, <emphasis role="strong">Group ID</emphasis>, <emphasis role="strong">Artifact ID</emphasis>, <emphasis role="strong">Version</emphasis> (GAV), and <emphasis role="strong">Development Mode</emphasis> attributes. It also includes the following options:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										<emphasis role="strong">URL</emphasis> - Use to specify a read-only URL for cloning a project as a git repository.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Disable GAV conflict check</emphasis> - Determines whether to enable or disable the GAV conflict check. Disabling this feature enables projects to have the same GAV values.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Allow child GAV edition</emphasis> - Allows GAV editions for sub-projects.
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Dependencies</emphasis> - Used to add dependencies either manually, by entering the <emphasis role="strong">Group ID</emphasis>, <emphasis role="strong">Artifact ID</emphasis>, and <emphasis role="strong">Version</emphasis> or from a repository project in Business Central. For each dependency, set select <emphasis role="strong">All</emphasis> or <emphasis role="strong">None</emphasis> for the <emphasis role="strong">Package white list</emphasis> option.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">KIE Bases</emphasis> - The new name for what was previously called <emphasis role="strong">Knowledge bases</emphasis>. You must specify a KIE base as the default. Provide the following details to add a Kie base:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										<emphasis role="strong">Name</emphasis>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Included KIE bases</emphasis>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Package</emphasis>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Equal Behavior</emphasis> - <emphasis role="strong">Identity</emphasis> or <emphasis role="strong">Equality</emphasis>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Event Processing Model</emphasis> - <emphasis role="strong">Stream</emphasis> or <emphasis role="strong">Cloud</emphasis>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">KIE sessions</emphasis>
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">External Data Objects</emphasis> - Data objects are not explicitly defined within a project or project dependencies that a rule author may require. External data objects are usually provided by the Java runtime, for example, <literal>java.util.List</literal>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Validation</emphasis> - Maven repositories that are used to check the uniqueness of a project’s GAV when creating a new project or module or when installing or deploying a project to a Maven repository.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Service Tasks</emphasis> - The following service tasks can be added to a project:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										<emphasis role="strong">BusinessRuleTask</emphasis> - Execute a business rule task
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Decision Task</emphasis> - Execute a DMN decision task
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Email</emphasis> - Send email
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">JMSSendTask</emphasis> - Send JMS Message
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Rest</emphasis> - Perform a Rest call
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">ServiceTask</emphasis> - Execute a service task
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">WebService</emphasis> - Perform a web service call
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Deployments</emphasis> - Deployments are divided in to the following categories:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										<emphasis role="strong">General Settings</emphasis> - <emphasis role="strong">Runtime Strategy</emphasis>, <emphasis role="strong">Persistence Unit Name</emphasis>, <emphasis role="strong">Persistence Mode</emphasis>, <emphasis role="strong">Audit Persistence Unit Name</emphasis>, and <emphasis role="strong">Audit Mode</emphasis>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Marshalling strategies</emphasis>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Global</emphasis>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Event listeners</emphasis>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Required roles</emphasis>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Remoteable classes</emphasis>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Task event listeners</emphasis>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Configuration</emphasis>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Environment entries</emphasis>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Work item handlers</emphasis>
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Persistence</emphasis> - Persistence is divided in to the following categories:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										<emphasis role="strong">Persistence Unit</emphasis>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Persistence Provider</emphasis>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Data Source</emphasis>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Properties</emphasis> - Used to set values for the following properties and also to create new properties:
									</simpara>
									<itemizedlist>
										<listitem>
											<simpara>
												<emphasis role="strong">hibernate.dialect</emphasis>
											</simpara>
										</listitem>
										<listitem>
											<simpara>
												<emphasis role="strong">hibernate.max_fetch_depth</emphasis>
											</simpara>
										</listitem>
										<listitem>
											<simpara>
												<emphasis role="strong">hibernate.hbm2ddl.auto</emphasis>
											</simpara>
										</listitem>
										<listitem>
											<simpara>
												<emphasis role="strong">hibernate.show_sql</emphasis>
											</simpara>
										</listitem>
										<listitem>
											<simpara>
												<emphasis role="strong">hibernate.id.new_generator_mappings</emphasis>
											</simpara>
										</listitem>
										<listitem>
											<simpara>
												<emphasis role="strong">hibernate.transaction.jta.platform</emphasis>
											</simpara>
										</listitem>
									</itemizedlist>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Project Persistable Data Objects</emphasis>
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Branch Management</emphasis> - Provides branch role access based on the branch name and assigned user roles.
							</simpara>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Save</emphasis>.
					</simpara>
				</listitem>
			</orderedlist>
		</chapter>
		<chapter xml:id="multiple-branches-con">
			<title>Multiple branches in Business Central</title>
			<simpara>
				Multiple branches support in Business Central provides the ability to create a new branch based on an existing one, including all of its assets. All new, imported, and sample projects open in the default <emphasis role="strong">master</emphasis> branch. You can create as many branches as you need and can work on multiple branches interchangeably without impacting the original project on the <emphasis role="strong">master</emphasis> branch.
			</simpara>
			<simpara>
				Red Hat Decision Manager 7.10 includes support for persisting branches, which means that Business Central remembers the last branch used and will open in that branch when you log back in.
			</simpara>
			<section xml:id="create-branches-proc">
				<title>Creating branches</title>
				<simpara>
					You can create new branches in Business Central and name them whatever you like. Initially, you will only have the default <emphasis role="strong">master</emphasis> branch. When you create a new branch for a project, you are making a copy of the selected branch. You can make changes to the project on the new branch without impacting the original <emphasis role="strong">master</emphasis> branch version.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the project to create the new branch, for example the <emphasis role="strong">Mortgages</emphasis> sample project.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">master</emphasis> → <emphasis role="strong">Add Branch</emphasis>.
						</simpara>
						<figure>
							<title>Create the new branch menu</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/getting-started/new-branch.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>Creating the new branch menu</phrase>
								</textobject>
							</mediaobject>
						</figure>
					</listitem>
					<listitem>
						<simpara>
							Type <literal>testBranch1</literal> in the <emphasis role="strong">Name</emphasis> field and select <emphasis role="strong">master</emphasis> from the <emphasis role="strong">Add Branch</emphasis> window. Where <literal>testBranch1</literal> is any name that you want to name the new branch.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select the branch that will be the base for the new branch from the <emphasis role="strong">Add Branch</emphasis> window. This can be any existing branch.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Add</emphasis>.
						</simpara>
						<figure>
							<title>Add the new branch window</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/getting-started/test-branch.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>Adding the new branch testBranch1</phrase>
								</textobject>
							</mediaobject>
						</figure>
					</listitem>
				</orderedlist>
				<simpara>
					After adding the new branch, you will be redirected to it, and it will contain all of the assets that you had in your project in the <emphasis role="strong">master</emphasis> branch.
				</simpara>
			</section>
			<section xml:id="select-branches-proc">
				<title>Selecting branches</title>
				<simpara>
					You can switch between branches to make modifications to project assets and test the revised functionality.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Click the current branch name and select the desired project branch from the drop-down list.
						</simpara>
						<figure>
							<title>Select a branch menu</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/project-data/change-branch1.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>Selecting a branch menu</phrase>
								</textobject>
							</mediaobject>
						</figure>
					</listitem>
				</orderedlist>
				<simpara>
					After selecting the branch, you are redirected to that branch containing the project and all of the assets that you had defined.
				</simpara>
			</section>
			<section xml:id="delete-branches-proc">
				<title>Deleting branches</title>
				<simpara>
					You can delete any branch except for the <emphasis role="strong">master</emphasis> branch. Business Central does not allow you to delete the <emphasis role="strong">master</emphasis> branch to avoid corrupting your environment. You must be in any branch other than <emphasis role="strong">master</emphasis> for the following procedure to work.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Click 
							<inlinemediaobject>
								<imageobject>
									<imagedata fileref="images/_images/project-data/dots.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>dots</phrase>
								</textobject>
							</inlinemediaobject>
							 in the upper-right corner of the screen and select <emphasis role="strong">Delete Branch</emphasis>.
						</simpara>
						<figure>
							<title>Delete a branch</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/getting-started/delete-branch.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>Delete a branch</phrase>
								</textobject>
							</mediaobject>
						</figure>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Delete Branch</emphasis> window, enter the name of the branch you want to delete.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Delete Branch</emphasis>. The branch is deleted and the project branch switches to the master branch.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="build-deploy-branches-proc">
				<title>Building and deploying projects</title>
				<simpara>
					After your project is developed, you can build the project from the specified branch in Business Central and deploy it to the configured KIE Server.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis> and click the project name.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the upper-right corner, click <emphasis role="strong">Deploy</emphasis> to build the project and deploy it to KIE Server.
						</simpara>
						<note>
							<simpara>
								You can also select the <emphasis role="strong">Build &amp; Install</emphasis> option to build the project and publish the KJAR file to the configured Maven repository without deploying to a KIE Server. In a development environment, you can click <emphasis role="strong">Deploy</emphasis> to deploy the built KJAR file to a KIE Server without stopping any running instances (if applicable), or click <emphasis role="strong">Redeploy</emphasis> to deploy the built KJAR file and replace all instances. The next time you deploy or redeploy the built KJAR, the previous deployment unit (KIE container) is automatically updated in the same target KIE Server. In a production environment, the <emphasis role="strong">Redeploy</emphasis> option is disabled and you can click <emphasis role="strong">Deploy</emphasis> only to deploy the built KJAR file to a new deployment unit (KIE container) on a KIE Server.
							</simpara>
							<simpara>
								To configure the KIE Server environment mode, set the <literal>org.kie.server.mode</literal> system property to <literal>org.kie.server.mode=development</literal> or <literal>org.kie.server.mode=production</literal>. To configure the deployment behavior for a corresponding project in Business Central, go to project <emphasis role="strong">Settings</emphasis> → <emphasis role="strong">General Settings</emphasis> → <emphasis role="strong">Version</emphasis> and toggle the <emphasis role="strong">Development Mode</emphasis> option. By default, KIE Server and all new projects in Business Central are in development mode. You cannot deploy a project with <emphasis role="strong">Development Mode</emphasis> turned on or with a manually added <literal>SNAPSHOT</literal> version suffix to a KIE Server that is in production mode.
							</simpara>
						</note>
						<simpara>
							If the build fails, address any problems described in the <emphasis role="strong">Alerts</emphasis> panel at the bottom of the screen.
						</simpara>
						<simpara>
							To review project deployment details, click <emphasis role="strong">View deployment details</emphasis> in the deployment banner at the top of the screen or in the <emphasis role="strong">Deploy</emphasis> drop-down menu. This option directs you to the <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Deploy</emphasis> → <emphasis role="strong">Execution Servers</emphasis> page.
						</simpara>
						<simpara>
							For more information about project deployment options, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/deploying_and_managing_red_hat_decision_manager_services#assembly-packaging-deploying"><emphasis>Packaging and deploying a Red Hat Decision Manager project</emphasis></link>.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
		<chapter xml:id="change-requests-con_managing-projects">
			<title>Change requests in Business Central</title>
			<simpara>
				If you have more than one branch in a Business Central project and you make a change in a branch that you want to merge to another branch, you can create a change request. Any user with permission to view the target branch, usually the <emphasis role="strong">master</emphasis> branch, can see the change request.
			</simpara>
			<section xml:id="creating-change-requests-proc_managing-projects">
				<title>Creating change requests</title>
				<simpara>
					You can create a change request in a Business Central project after you have made a change in your project, for example after you have added or deleted an attribute to an asset.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have more than one branch of a Business Central project.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							You made a change in one branch that you want to merge to another branch.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis> and select the space and project that contains the change that you want to merge.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the project page, select the branch that contains the change.
						</simpara>
						<figure>
							<title>Select a branch menu</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/project-data/change-branch1.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>Selecting a branch menu</phrase>
								</textobject>
							</mediaobject>
						</figure>
					</listitem>
					<listitem>
						<simpara>
							Do one of the following tasks to submit the change request:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									Click 
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/project-data/dots.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>dots</phrase>
										</textobject>
									</inlinemediaobject>
									 in the upper-right corner of the screen and select <emphasis role="strong">Submit Change Request</emphasis>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click the <emphasis role="strong">Change Requests</emphasis> tab and then click <emphasis role="strong">Submit Change Request</emphasis>.
								</simpara>
								<simpara>
									The <emphasis role="strong">Submit Change Request</emphasis> window appears.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							Enter a summary and a description, select the target branch, and click <emphasis role="strong">Submit</emphasis>. The target branch is the branch where the change will be merged. After you click <emphasis role="strong">Submit</emphasis>, the change request window appears.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="reviewing-change-requests-proc_managing-projects">
				<title>Working with change requests</title>
				<simpara>
					You can view change requests for any branch that you have access to. You must have administrator permissions to accept a change request.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have more than one branch of a Business Central project.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis> and select a space and project.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the project page, verify that you are on the correct branch.
						</simpara>
						<informalfigure>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/project-data/change-branch1.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>Selecting a branch menu</phrase>
							</textobject>
						</mediaobject>
						</informalfigure>
					</listitem>
					<listitem>
						<simpara>
							Click the <emphasis role="strong">Change Requests</emphasis> tab. A list of pending change requests appears.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							To filter change requests, select <emphasis role="strong">Open</emphasis>, <emphasis role="strong">Closed</emphasis>, or <emphasis role="strong">All</emphasis> to the left of the <emphasis role="strong">Search</emphasis> box.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							To search for specific change requests, enter an ID or text in the <emphasis role="strong">Search</emphasis> box and click the magnifying glass.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							To view the change request details, click the summary link. The change request window has two tabs:
						</simpara>
						<orderedlist numeration="loweralpha">
							<listitem>
								<simpara>
									Review the <emphasis role="strong">Overview</emphasis> tab for general information about the change request.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click the <emphasis role="strong">Changed Files</emphasis> tab and expand a file to review the proposed changes.
								</simpara>
							</listitem>
						</orderedlist>
					</listitem>
					<listitem>
						<simpara>
							Click a button in the top right corner.
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Squash and Merge</emphasis> to squash all commits into a single commit and merge the commit to the target branch.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Merge</emphasis> to merge the changes into the target branch.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Reject</emphasis> to reject the changes and leave the target branch unchanged.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Close</emphasis> to close the change request without rejecting or accepting it. Note that only the user who created the submitted the change request can close it.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Cancel</emphasis> to return to the project window without making any changes.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
	</part>
	<part xml:id="assembly-managing-assets">
		<title>Managing assets in Business Central</title>
		<partintro>
			<simpara>
				As a process administrator, you can use Business Central in Red Hat Decision Manager to manage assets, such as rules, business processes, and decision tables.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						Red Hat JBoss Enterprise Application Platform 7.3 is installed. For details, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/installation_guide/"><emphasis>Red Hat JBoss Enterprise Application Platform 7.3 Installation Guide</emphasis></link>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Red Hat Decision Manager is installed and configured with KIE Server. For more information see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/installing_and_configuring_red_hat_decision_manager#assembly-install-on-eap"><emphasis>Installing and configuring Red Hat Decision Manager on Red Hat JBoss EAP 7.3</emphasis></link>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Red Hat Decision Manager is running and you can log in to Business Central with the <literal>developer</literal> role. For more information, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/installing_and_configuring_red_hat_decision_manager#assembly-planning"><emphasis>Planning a Red Hat Decision Manager installation</emphasis></link>.
					</simpara>
				</listitem>
			</itemizedlist>
		</partintro>
		<chapter remap="_assets_con" xml:id="assets_con">
			<title>Asset overview</title>
			<simpara>
				Business rules, process definition files, and other assets and resources created in Business Central are stored in the Artifact repository (Knowledge Store) that is accessed by the KIE Server.
			</simpara>
			<simpara>
				The Artifact repository is a centralized repository for your business knowledge. It connects multiple GIT repositories so that you can access them from a single environment while storing different kinds of knowledge and artifacts in different locations. GIT is a distributed version control system and it implements revisions as commit objects. Every time you save your changes to a repository this creates a new commit object in the GIT repository. Similarly, the user can also copy an existing repository. This copying process is typically called cloning and the resulting repository can be referred to as clone. Every clone contains the full history of the collection of files and a cloned repository has the same content as the original repository.
			</simpara>
			<simpara>
				Business Central provides a web front-end that enables you to view and update the stored content. To access Artifact repository assets, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis> in Business Central and click the project name.
			</simpara>
		</chapter>
		<chapter remap="_assets_types_ref" xml:id="assets_types_ref">
			<title>Types of assets</title>
			<simpara>
				Anything that can be versioned in the Business Central repository is an asset. A project can contain rules, packages, business processes, decision tables, fact models, domain specific languages (DSLs) or any other assets that are specific to your project’s requirements.
			</simpara>
			<simpara>
				The following image shows the available assets in Red Hat Decision Manager 7.10.
			</simpara>
			<informalfigure>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/_images/getting-started/types-of-assets-DM.png" format="PNG" />
				</imageobject>
				<textobject>
					<phrase>types of assets DM</phrase>
				</textobject>
			</mediaobject>
			</informalfigure>
			<simpara>
				The following sections describe each asset type in Red Hat Decision Manager 7.10.
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						Business Process
					</simpara>
					<simpara>
						Business Processes are diagrams that describe the steps necessary to achieve business goals (see the <link xlink:href="https://access.redhat.com/documentation/en-US/JBoss_Enterprise_BRMS_Platform/5/html-single/BRMS_Business_Process_Management_Guide/index.html"><emphasis>Red Hat Decision Manager Business Process Management Guide</emphasis></link> for more details).
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Data Object
					</simpara>
					<simpara>
						Data objects are the building blocks for the rule assets that you create. Data objects are custom data types implemented as Java objects in specified packages of your project. For example, you might create a Person object with data fields Name, Address, and Date of Birth to specify personal details for loan application rules. These custom data types determine what data your assets and your decision service are based on.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Decision Table (Spreadsheet)
					</simpara>
					<simpara>
						Decision tables are collections of rules stored in either a spreadsheet or in the Red Hat Decision Manager user interface as guided decision tables. After you define your rules in an external XLS or XLSX file, you can upload the file as a decision table in your project in Business Central.
					</simpara>
					<important>
						<simpara>
							You should typically upload only one spreadsheet of decision tables, containing all necessary <literal>RuleTable</literal> definitions, per rule package in Business Central. You can upload separate decision table spreadsheets for separate packages, but uploading multiple spreadsheets in the same package can cause compilation errors from conflicting <literal>RuleSet</literal> or <literal>RuleTable</literal> attributes and is therefore not recommended.
						</simpara>
					</important>
				</listitem>
				<listitem>
					<simpara>
						DMN
					</simpara>
					<simpara>
						Decision Model and Notation (DMN) creates a standardized bridge for the gap between the business decision design and decision implementation. You can use the DMN designer in Business Central to design DMN decision requirements diagrams (DRDs) and define decision logic for a complete and functional DMN decision model.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						DRL file
					</simpara>
					<simpara>
						A rule file is typically a file with a .drl extension. In a DRL file you can have multiple rules, queries and functions, as well as some resource declarations like imports, globals and attributes that are assigned and used by your rules and queries. However, you are also able to spread your rules across multiple rule files (in that case, the extension .rule is suggested, but not required) - spreading rules across files can help with managing large numbers of rules. A DRL file is simply a text file.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						DSL definition
					</simpara>
					<simpara>
						Domain Specific Languages (DSLs) are a way of creating a rule language that is dedicated to your problem domains. A set of DSL definitions consists of transformations from DSL "sentences" to DRL constructs, which lets you use of all the underlying rule language and decision engine features.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Enumeration
					</simpara>
					<simpara>
						Data enumerations are an optional asset type that can be configured to provide drop-down lists for the guided designer. They are stored and edited just like any other asset, and apply to the package that they belong to.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Global Variable(s)
					</simpara>
					<simpara>
						Global variables are used to make application objects available to the rules. Typically, they are used to provide data or services that the rules use, especially application services used in rule consequences, and to return data from the rules, like logs or values added in rule consequences, or for the rules to interact with the application, doing callbacks.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Guided Decision Table
					</simpara>
					<simpara>
						Decision tables are collections of rules stored in either a spreadsheet or in the Red Hat Decision Manager user interface as guided decision tables.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Guided Decision Table Graph
					</simpara>
					<simpara>
						A Guided Decision Table Graph is a collection of related guided decision tables that are displayed within a single designer. You can use this designer to better visualize and work with various related decision tables in one location. Additionally, when a condition or an action in one table uses the same data type as a condition or an action in another table, the tables will be physically linked with a line in the table graph designer.
					</simpara>
					<simpara>
						For example, if one decision table determines a loan application rate and another table uses the application rate to determine some other action, then the two decision tables are linked in a guided decision table graph.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Guided Rule
					</simpara>
					<simpara>
						Rules provide the logic for the decision engine to execute against. A rule includes a name, attributes, a <literal>when</literal> statement on the left hand side of the rule, and a <literal>then</literal> statement on the right hand side of the rule.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Guided Rule Template
					</simpara>
					<simpara>
						Guided rule templates provide a reusable rule structure for multiple rules that are compiled into Drools Rule Language (DRL) and form the core of the decision service for your project.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Package
					</simpara>
					<simpara>
						All assets are contained in packages in Business Central. A package is a folder for rules and also serves as a "namespace".
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Solver configuration
					</simpara>
					<simpara>
						A Solver configuration is created by the Solver designer and can be run in the Execution Solver or plain Java code after the KJAR is deployed. You can edit and create Solver configurations in Business Central.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Test Scenario
					</simpara>
					<simpara>
						Test scenarios in Red Hat Decision Manager enable you to validate the functionality of rules, models, and events before deploying them into production. A test scenario uses data for conditions that resemble an instance of your fact or project model. This data is matched against a given set of rules and if the expected results match the actual results, the test is successful. If the expected results do not match the actual results, then the test fails.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Test Scenario (Legacy)
					</simpara>
					<simpara>
						Red Hat Decision Manager 7.10 includes support for the legacy Test Scenario because the default Test Scenario asset is still in development.
					</simpara>
				</listitem>
			</itemizedlist>
		</chapter>
		<chapter xml:id="creating_assets_proc_managing-assets">
			<title>Creating assets</title>
			<simpara>
				You can create business processes, rules, DRL files, and other assets in your Business Central projects.
			</simpara>
			<note>
				<simpara>
					Migrating business processes is an irreversible process.
				</simpara>
			</note>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis> and click the project name. For example, <emphasis role="strong">Evaluation</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Add Asset</emphasis> and select the asset type.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In the <emphasis role="strong">Create new <literal><emphasis>asset_type</emphasis></literal></emphasis> window, add the required information and click <emphasis role="strong">Ok</emphasis>.
					</simpara>
					<figure>
						<title>Define Asset</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/getting-started/3275.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>A screenshot of Create new pop-up dialog</phrase>
							</textobject>
						</mediaobject>
					</figure>
				</listitem>
			</orderedlist>
			<note>
				<simpara>
					If you have not created a project, you can either add a project, use a sample project, or import an existing project. For more information, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/deploying_and_managing_red_hat_decision_manager_services#assembly-managing-projects"><emphasis>Managing projects in Business Central</emphasis></link>.
				</simpara>
			</note>
		</chapter>
		<chapter remap="_assets_renaming_proc" xml:id="assets_renaming_proc">
			<title>Renaming, copying, or deleting assets</title>
			<simpara>
				After an asset has been created and defined, you can use the <emphasis role="strong">Repository View</emphasis> of the <emphasis role="strong">Project Explorer</emphasis> to copy, rename, delete, or archive assets as needed.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis> and click the project name.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click the asset name and expand the <emphasis role="strong">Project Explorer</emphasis> by clicking 
						<inlinemediaobject>
							<imageobject>
								<imagedata fileref="images/_images/getting-started/expand-proj-explorer.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>expand proj explorer</phrase>
							</textobject>
						</inlinemediaobject>
						 on the upper-left corner.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click 
						<inlinemediaobject>
							<imageobject>
								<imagedata fileref="images/_images/admin-and-config/4766.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>4766</phrase>
							</textobject>
						</inlinemediaobject>
						 in the <emphasis role="strong">Project Explorer</emphasis> toolbar and select <emphasis role="strong">Repository View</emphasis> to display the folders and files that make up the asset.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Use the icons next to each listed asset to copy, rename, delete, or archive the asset as needed. Some of these options may not be available for all assets.
					</simpara>
					<figure>
						<title>Copy, rename, delete, or archive assets</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/admin-and-config/assets-renaming.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>assets renaming</phrase>
							</textobject>
						</mediaobject>
					</figure>
				</listitem>
				<listitem>
					<simpara>
						Use the following toolbar buttons to copy, rename, or delete assets.
					</simpara>
					<figure>
						<title>Toolbar options</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/admin-and-config/tools.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>tools</phrase>
							</textobject>
						</mediaobject>
					</figure>
				</listitem>
			</orderedlist>
		</chapter>
		<chapter remap="_assets_metadata_managing_proc" xml:id="assets_metadata_managing_proc">
			<title>Managing asset metadata and version history</title>
			<simpara>
				Most assets within Business Central have metadata and version information associated with them to help you identify and organize them within your projects. You can manage asset metadata and version history from the asset designer in Business Central.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis> and click the project name.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select the asset from the list to open the asset designer.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In the asset designer window, select <emphasis role="strong">Overview</emphasis>. If an asset doesn’t have an <emphasis role="strong">Overview</emphasis> tab, then no metadata is associated with that asset.
					</simpara>
					<informalfigure>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/_images/admin-and-config/6593.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>6593</phrase>
						</textobject>
					</mediaobject>
					</informalfigure>
				</listitem>
				<listitem>
					<simpara>
						Select the <emphasis role="strong">Version History</emphasis> or <emphasis role="strong">Metadata</emphasis> tab to edit and update version and metadata details.
					</simpara>
					<informalfigure>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/_images/admin-and-config/meta-data.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>meta data</phrase>
						</textobject>
					</mediaobject>
					</informalfigure>
					<note>
						<simpara>
							Another way to update the working version of an asset is by clicking <emphasis role="strong">Latest Version</emphasis> in the top-right corner of the asset designer.
						</simpara>
						<figure>
							<title>Latest version of an asset</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/admin-and-config/6594.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>Get latest version of asset</phrase>
								</textobject>
							</mediaobject>
						</figure>
					</note>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Save</emphasis> to save changes.
					</simpara>
				</listitem>
			</orderedlist>
		</chapter>
		<chapter remap="_assets_filtering_proc" xml:id="assets_filtering_proc">
			<title>Filtering assets by tags</title>
			<simpara>
				You can apply tags in the metadata of each asset and then group assets by tags in the Project Explorer. This feature helps you quickly search through assets of a specific category.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis> and click the project name.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Open the asset editor by clicking the asset name.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In the asset editor window, go to <emphasis role="strong">Overview → Metadata</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In the <emphasis role="strong">Tags</emphasis> field, enter the name of your new tag and click <emphasis role="strong">Add new tag(s)</emphasis>. You can assign multiple tags to an asset by separating tag names with a space.
					</simpara>
					<figure>
						<title>Creating tags</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/admin-and-config/Creating_Tags.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>Creating Tags in Matadata view</phrase>
							</textobject>
						</mediaobject>
					</figure>
					<simpara>
						The assigned tags are displayed as buttons next to the <emphasis role="strong">Tags</emphasis> field.
					</simpara>
					<figure>
						<title>Tags in metadata view</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/admin-and-config/Created_Tags.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>Tags created in Metadata View</phrase>
							</textobject>
						</mediaobject>
					</figure>
					<simpara>
						Click the trash icon on the tag button to delete the tag.
					</simpara>
					<figure>
						<title>Deleting tags in metadata view</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/admin-and-config/delete-tag.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>Deleting tags in Metadata View</phrase>
							</textobject>
						</mediaobject>
					</figure>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Save</emphasis> to save your metadata changes.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Expand the <emphasis role="strong">Project Explorer</emphasis> by clicking 
						<inlinemediaobject>
							<imageobject>
								<imagedata fileref="images/_images/getting-started/expand-proj-explorer.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>expand proj explorer</phrase>
							</textobject>
						</inlinemediaobject>
						 on the upper-left corner.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click 
						<inlinemediaobject>
							<imageobject>
								<imagedata fileref="images/_images/admin-and-config/5461.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>5461</phrase>
							</textobject>
						</inlinemediaobject>
						 in the <emphasis role="strong">Project Explorer</emphasis> toolbar and select <emphasis role="strong">Enable Tag filtering</emphasis>.
					</simpara>
					<figure>
						<title>Enable tag filtering</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/admin-and-config/Enable_Tag_Filtering.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>Enable Tag Filtering in Customize View</phrase>
							</textobject>
						</mediaobject>
					</figure>
					<simpara>
						This displays a <emphasis role="strong">Filter by Tag</emphasis> drop-down menu in the Project Explorer.
					</simpara>
					<figure>
						<title>Filter by tag</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/admin-and-config/Filter_By_Tag.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>Enable Tag Filtering in Customize View</phrase>
							</textobject>
						</mediaobject>
					</figure>
					<simpara>
						You can sort your assets through this filter to display all assets and service tasks that include the selected metadata tag.
					</simpara>
				</listitem>
			</orderedlist>
		</chapter>
		<chapter remap="_assets_unlocking_proc" xml:id="assets_unlocking_proc">
			<title>Unlocking assets</title>
			<simpara>
				By default, whenever you open and modify an asset in Business Central, that asset is automatically locked for your exclusive use in order to avoid conflicts in a multiuser setup. This lock is automatically released when your session ends or when you save or close the asset. This lock feature ensures that users do not overwrite each other’s changes.
			</simpara>
			<simpara>
				However, you can force unlock an asset if you need to edit a file that is locked by another user.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis> and click the project name.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select the asset from the list to open the asset designer.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Go to <emphasis role="strong">Overview → Metadata</emphasis> and view the <emphasis role="strong">Lock Status</emphasis>.
					</simpara>
					<figure>
						<title>Unlock metadata view</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/admin-and-config/unlock-lock.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>Unlock Metadata View</phrase>
							</textobject>
						</mediaobject>
					</figure>
					<simpara>
						If the asset is already being edited by another user, the following will be displayed in the <emphasis role="strong">Lock status</emphasis> field:
					</simpara>
					<simpara>
						<literal>Locked by &lt;user_name&gt;</literal>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Force unclock asset</emphasis> to unlock.
					</simpara>
					<simpara>
						The following confirmation pop-up message is displayed:
					</simpara>
					<simpara>
						<literal>Are you sure you want to release the lock of this asset? This might cause &lt;user_name&gt; to lose unsaved changes!</literal>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Yes</emphasis> to confirm.
					</simpara>
					<simpara>
						The asset returns to an unlocked state and the lock icon option will appear next to the asset.
					</simpara>
				</listitem>
			</orderedlist>
		</chapter>
	</part>
	<part xml:id="assembly-kie-apis">
		<title>Interacting with Red Hat Decision Manager using KIE APIs</title>
		<partintro>
			<simpara>
				As a business rules developer or system administrator, you can use KIE APIs to interact with KIE Servers, KIE containers, and business assets in Red Hat Decision Manager. You can use the KIE Server REST API and Java client API to interact with KIE containers and business assets (such as business rules, processes, and solvers), the Decision Manager controller REST API and Java client API to interact with KIE Server templates and instances, and the Knowledge Store REST API to interact with spaces and projects in Business Central.
			</simpara>
			<note>
				<title>REST API endpoints for KIE Server and the Decision Manager controller</title>
				<simpara>
					The lists of REST API endpoints for KIE Server and the Decision Manager controller are published separately from this document and maintained dynamically to ensure that endpoint options and data are as current as possible. Use this document to understand what the KIE Server and Decision Manager controller REST APIs enable you to do and how to use them, and use the separately maintained lists of REST API endpoints for specific endpoint details.
				</simpara>
				<simpara>
					For the full list of KIE Server REST API endpoints and descriptions, use one of the following resources:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<link xlink:href="http://jbpm.org/learn/documentation.html">Execution Server REST API</link> on the jBPM Documentation page (static)
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Swagger UI for the KIE Server REST API at <literal>http://SERVER:PORT/kie-server/docs</literal> (dynamic, requires running KIE Server)
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					For the full list of Decision Manager controller REST API endpoints and descriptions, use one of the following resources:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<link xlink:href="http://jbpm.org/learn/documentation.html">Controller REST API</link> on the jBPM Documentation page (static)
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Swagger UI for the Decision Manager controller REST API at <literal>http://SERVER:PORT/CONTROLLER/docs</literal> (dynamic, requires running Decision Manager controller)
						</simpara>
					</listitem>
				</itemizedlist>
			</note>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						Red Hat Decision Manager is installed and running. For installation and startup options, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/installing_and_configuring_red_hat_decision_manager#assembly-planning"><emphasis>Planning a Red Hat Decision Manager installation</emphasis></link>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						You have access to Red Hat Decision Manager with the following user roles:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<literal>kie-server</literal>: For access to KIE Server API capabilities, and access to headless Decision Manager controller API capabilities without Business Central (if applicable)
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>rest-all</literal>: For access to Business Central API capabilities for the built-in Decision Manager controller and for the Business Central Knowledge Store
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>admin</literal>: For full administrative access to Red Hat Decision Manager
							</simpara>
							<simpara>
								Although these user roles are not all required for every KIE API, consider acquiring all of them to ensure that you can access any KIE API without disruption. For more information about user roles, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/installing_and_configuring_red_hat_decision_manager#assembly-planning"><emphasis>Planning a Red Hat Decision Manager installation</emphasis></link>.
							</simpara>
						</listitem>
					</itemizedlist>
				</listitem>
			</itemizedlist>
		</partintro>
		<chapter xml:id="kie-server-rest-api-con_kie-apis">
			<title>KIE Server REST API for KIE containers and business assets</title>
			<simpara>
				Red Hat Decision Manager provides a KIE Server REST API that you can use to interact with your KIE containers and business assets (such as business rules, processes, and solvers) in Red Hat Decision Manager without using the Business Central user interface. This API support enables you to maintain your Red Hat Decision Manager resources more efficiently and optimize your integration and development with Red Hat Decision Manager.
			</simpara>
			<simpara>
				With the KIE Server REST API, you can perform the following actions:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						Deploy or dispose KIE containers
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Retrieve and update KIE container information
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Return KIE Server status and basic information
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Retrieve and update business asset information
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Execute business assets (such as rules and processes)
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				KIE Server REST API requests require the following components:
			</simpara>
			<variablelist>
				<varlistentry>
					<term>Authentication</term>
					<listitem>
						<simpara>
							The KIE Server REST API requires HTTP Basic authentication or token-based authentication for the user role <literal>kie-server</literal>. To view configured user roles for your Red Hat Decision Manager distribution, navigate to <literal>~/$SERVER_HOME/standalone/configuration/application-roles.properties</literal> and <literal>~/application-users.properties</literal>.
						</simpara>
						<simpara>
							To add a user with the <literal>kie-server</literal> role, navigate to <literal>~/$SERVER_HOME/bin</literal> and run the following command:
						</simpara>
						
<programlisting language="bash" linenumbering="unnumbered">$ ./add-user.sh -a --user &lt;USERNAME&gt; --password &lt;PASSWORD&gt; --role kie-server</programlisting>
						<simpara>
							For more information about user roles and Red Hat Decision Manager installation options, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/installing_and_configuring_red_hat_decision_manager#assembly-planning"><emphasis>Planning a Red Hat Decision Manager installation</emphasis></link>.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>HTTP headers</term>
					<listitem>
						<simpara>
							The KIE Server REST API requires the following HTTP headers for API requests:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>Accept</literal>: Data format accepted by your requesting client:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<literal>application/json</literal> (JSON)
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<literal>application/xml</literal> (XML, for JAXB or XSTREAM)
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
							<listitem>
								<simpara>
									<literal>Content-Type</literal>: Data format of your <literal>POST</literal> or <literal>PUT</literal> API request data:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<literal>application/json</literal> (JSON)
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<literal>application/xml</literal> (XML, for JAXB or XSTREAM)
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
							<listitem>
								<simpara>
									<literal>X-KIE-ContentType</literal>: Required header for <literal>application/xml</literal> XSTREAM API requests and responses:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<literal>XSTREAM</literal>
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
						</itemizedlist>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>HTTP methods</term>
					<listitem>
						<simpara>
							The KIE Server REST API supports the following HTTP methods for API requests:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>GET</literal>: Retrieves specified information from a specified resource endpoint
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>POST</literal>: Updates a resource or resource instance
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>PUT</literal>: Updates or creates a resource or resource instance
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>DELETE</literal>: Deletes a resource or resource instance
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Base URL</term>
					<listitem>
						<simpara>
							The base URL for KIE Server REST API requests is <literal>http://SERVER:PORT/kie-server/services/rest/</literal>, such as <literal>http://localhost:8080/kie-server/services/rest/</literal>.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Endpoints</term>
					<listitem>
						<simpara>
							KIE Server REST API endpoints, such as <literal>/server/containers/{containerId}</literal> for a specified KIE container, are the URIs that you append to the KIE Server REST API base URL to access the corresponding resource or type of resource in Red Hat Decision Manager.
						</simpara>
						<formalpara>
							<title>Example request URL for <literal>/server/containers/{containerId}</literal> endpoint</title>
							<para>
								<literal>http://localhost:8080/kie-server/services/rest/server/containers/MyContainer</literal>
							</para>
						</formalpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Request parameters and request data</term>
					<listitem>
						<simpara>
							Many KIE Server REST API requests require specific parameters in the request URL path to identify or filter specific resources and to perform specific actions. You can append URL parameters to the endpoint in the format <literal>?&lt;PARAM&gt;=&lt;VALUE&gt;&amp;&lt;PARAM&gt;=&lt;VALUE&gt;</literal>.
						</simpara>
						<formalpara>
							<title>Example GET request URL with parameters</title>
							<para>
								<literal>http://localhost:8080/kie-server/services/rest/server/containers?groupId=com.redhat&amp;artifactId=Project1&amp;version=1.0&amp;status=STARTED</literal>
							</para>
						</formalpara>
						<simpara>
							HTTP <literal>POST</literal> and <literal>PUT</literal> requests may additionally require a request body or file with data to accompany the request.
						</simpara>
						<formalpara>
							<title>Example POST request URL and JSON request body data</title>
							<para>
								<literal>http://localhost:8080/kie-server/services/rest/server/containers/MyContainer/release-id</literal>
							</para>
						</formalpara>
						
<programlisting language="json" linenumbering="unnumbered">{
  "release-id": {
    "artifact-id": "Project1",
    "group-id": "com.redhat",
    "version": "1.1"
  }
}</programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<section xml:id="kie-server-rest-api-requests-proc_kie-apis">
				<title>Sending requests with the KIE Server REST API using a REST client or curl utility</title>
				<simpara>
					The KIE Server REST API enables you to interact with your KIE containers and business assets (such as business rules, processes, and solvers) in Red Hat Decision Manager without using the Business Central user interface. You can send KIE Server REST API requests using any REST client or curl utility.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							KIE Server is installed and running.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							You have <literal>kie-server</literal> user role access to KIE Server.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Identify the relevant <link linkend="kie-server-rest-api-endpoints-ref_kie-apis">API endpoint</link> to which you want to send a request, such as <literal>[GET] /server/containers</literal> to retrieve KIE containers from KIE Server.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In a REST client or curl utility, enter the following components for a <literal>GET</literal> request to <literal>/server/containers</literal>. Adjust any request details according to your use case.
						</simpara>
						<simpara>
							For REST client:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">Authentication</emphasis>: Enter the user name and password of the KIE Server user with the <literal>kie-server</literal> role.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">HTTP Headers</emphasis>: Set the following header:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<literal>Accept</literal>: <literal>application/json</literal>
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">HTTP method</emphasis>: Set to <literal>GET</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">URL</emphasis>: Enter the KIE Server REST API base URL and endpoint, such as <literal>http://localhost:8080/kie-server/services/rest/server/containers</literal>.
								</simpara>
							</listitem>
						</itemizedlist>
						<simpara>
							For curl utility:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>-u</literal>: Enter the user name and password of the KIE Server user with the <literal>kie-server</literal> role.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>-H</literal>: Set the following header:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<literal>accept</literal>: <literal>application/json</literal>
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
							<listitem>
								<simpara>
									<literal>-X</literal>: Set to <literal>GET</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">URL</emphasis>: Enter the KIE Server REST API base URL and endpoint, such as <literal>http://localhost:8080/kie-server/services/rest/server/containers</literal>.
								</simpara>
							</listitem>
						</itemizedlist>
						
<screen>curl -u 'baAdmin:password@1' -H "accept: application/json" -X GET "http://localhost:8080/kie-server/services/rest/server/containers"</screen>
					</listitem>
					<listitem>
						<simpara>
							Execute the request and review the KIE Server response.
						</simpara>
						<simpara>
							Example server response (JSON):
						</simpara>
						
<programlisting language="json" linenumbering="unnumbered">{
  "type": "SUCCESS",
  "msg": "List of created containers",
  "result": {
    "kie-containers": {
      "kie-container": [
        {
          "container-id": "itorders_1.0.0-SNAPSHOT",
          "release-id": {
            "group-id": "itorders",
            "artifact-id": "itorders",
            "version": "1.0.0-SNAPSHOT"
          },
          "resolved-release-id": {
            "group-id": "itorders",
            "artifact-id": "itorders",
            "version": "1.0.0-SNAPSHOT"
          },
          "status": "STARTED",
          "scanner": {
            "status": "DISPOSED",
            "poll-interval": null
          },
          "config-items": [],
          "container-alias": "itorders"
        }
      ]
    }
  }
}</programlisting>
					</listitem>
					<listitem>
						<simpara>
							For this example, copy or note the project <literal>group-id</literal>, <literal>artifact-id</literal>, and <literal>version</literal> (GAV) data from one of the deployed KIE containers returned in the response.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In your REST client or curl utility, send another API request with the following components for a <literal>PUT</literal> request to <literal>/server/containers/{containerId}</literal> to deploy a new KIE container with the copied project GAV data. Adjust any request details according to your use case.
						</simpara>
						<simpara>
							For REST client:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">Authentication</emphasis>: Enter the user name and password of the KIE Server user with the <literal>kie-server</literal> role.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">HTTP Headers</emphasis>: Set the following headers:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<literal>Accept</literal>: <literal>application/json</literal>
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<literal>Content-Type</literal>: <literal>application/json</literal>
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">HTTP method</emphasis>: Set to <literal>PUT</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">URL</emphasis>: Enter the KIE Server REST API base URL and endpoint, such as <literal>http://localhost:8080/kie-server/services/rest/server/containers/MyContainer</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Request body</emphasis>: Add a JSON request body with the configuration items for the new KIE container:
								</simpara>
							</listitem>
						</itemizedlist>
						
<programlisting language="json" linenumbering="unnumbered">{
  "config-items": [
    {
      "itemName": "RuntimeStrategy",
      "itemValue": "SINGLETON",
      "itemType": "java.lang.String"
    },
    {
      "itemName": "MergeMode",
      "itemValue": "MERGE_COLLECTIONS",
      "itemType": "java.lang.String"
    },
    {
      "itemName": "KBase",
      "itemValue": "",
      "itemType": "java.lang.String"
    },
    {
      "itemName": "KSession",
      "itemValue": "",
      "itemType": "java.lang.String"
    }
  ],
  "release-id": {
    "group-id": "itorders",
    "artifact-id": "itorders",
    "version": "1.0.0-SNAPSHOT"
  },
  "scanner": {
    "poll-interval": "5000",
    "status": "STARTED"
  }
}</programlisting>
						<simpara>
							For curl utility:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>-u</literal>: Enter the user name and password of the KIE Server user with the <literal>kie-server</literal> role.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>-H</literal>: Set the following headers:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<literal>accept</literal>: <literal>application/json</literal>
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<literal>content-type</literal>: <literal>application/json</literal>
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
							<listitem>
								<simpara>
									<literal>-X</literal>: Set to <literal>PUT</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">URL</emphasis>: Enter the KIE Server REST API base URL and endpoint, such as <literal>http://localhost:8080/kie-server/services/rest/server/containers/MyContainer</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>-d</literal>: Add a JSON request body or file (<literal>@file.json</literal>) with the configuration items for the new KIE container:
								</simpara>
							</listitem>
						</itemizedlist>
						
<screen>curl -u 'baAdmin:password@1' -H "accept: application/json" -H "content-type: application/json" -X PUT "http://localhost:8080/kie-server/services/rest/server/containers/MyContainer" -d "{ \"config-items\": [ { \"itemName\": \"RuntimeStrategy\", \"itemValue\": \"SINGLETON\", \"itemType\": \"java.lang.String\" }, { \"itemName\": \"MergeMode\", \"itemValue\": \"MERGE_COLLECTIONS\", \"itemType\": \"java.lang.String\" }, { \"itemName\": \"KBase\", \"itemValue\": \"\", \"itemType\": \"java.lang.String\" }, { \"itemName\": \"KSession\", \"itemValue\": \"\", \"itemType\": \"java.lang.String\" } ], \"release-id\": { \"group-id\": \"itorders\", \"artifact-id\": \"itorders\", \"version\": \"1.0.0-SNAPSHOT\" }, \"scanner\": { \"poll-interval\": \"5000\", \"status\": \"STARTED\" }}"</screen>
						
<screen>curl -u 'baAdmin:password@1' -H "accept: application/json" -H "content-type: application/json" -X PUT "http://localhost:8080/kie-server/services/rest/server/containers/MyContainer" -d @my-container-configs.json</screen>
					</listitem>
					<listitem>
						<simpara>
							Execute the request and review the KIE Server response.
						</simpara>
						<simpara>
							Example server response (JSON):
						</simpara>
						
<programlisting language="json" linenumbering="unnumbered">{
  "type": "SUCCESS",
  "msg": "Container MyContainer successfully deployed with module itorders:itorders:1.0.0-SNAPSHOT.",
  "result": {
    "kie-container": {
      "container-id": "MyContainer",
      "release-id": {
        "group-id": "itorders",
        "artifact-id": "itorders",
        "version": "1.0.0-SNAPSHOT"
      },
      "resolved-release-id": {
        "group-id": "itorders",
        "artifact-id": "itorders",
        "version": "1.0.0-SNAPSHOT"
      },
      "status": "STARTED",
      "scanner": {
        "status": "STARTED",
        "poll-interval": 5000
      },
      "config-items": [],
      "messages": [
        {
          "severity": "INFO",
          "timestamp": {
            "java.util.Date": 1540584717937
          },
          "content": [
            "Container MyContainer successfully created with module itorders:itorders:1.0.0-SNAPSHOT."
          ]
        }
      ],
      "container-alias": null
    }
  }
}</programlisting>
						<simpara>
							If you encounter request errors, review the returned error code messages and adjust your request accordingly.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="kie-server-rest-api-requests-swagger-proc_kie-apis">
				<title>Sending requests with the KIE Server REST API using the Swagger interface</title>
				<simpara>
					The KIE Server REST API supports a Swagger web interface that you can use instead of a standalone REST client or curl utility to interact with your KIE containers and business assets (such as business rules, processes, and solvers) in Red Hat Decision Manager without using the Business Central user interface.
				</simpara>
				<note>
					<simpara>
						By default, the Swagger web interface for KIE Server is enabled by the <literal>org.kie.swagger.server.ext.disabled=false</literal> system property. To disable the Swagger web interface in KIE Server, set this system property to <literal>true</literal>.
					</simpara>
				</note>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							KIE Server is installed and running.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							You have <literal>kie-server</literal> user role access to KIE Server.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In a web browser, navigate to <literal>http://SERVER:PORT/kie-server/docs</literal>, such as <literal>http://localhost:8080/kie-server/docs</literal>, and log in with the user name and password of the KIE Server user with the <literal>kie-server</literal> role.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the Swagger page, select the relevant API endpoint to which you want to send a request, such as <emphasis role="strong">KIE Server and KIE containers</emphasis> → <emphasis role="strong">[GET] /server/containers</emphasis> to retrieve KIE containers from KIE Server.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Try it out</emphasis> and provide any optional parameters by which you want to filter results, if needed.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Response content type</emphasis> drop-down menu, select the desired format of the server response, such as <emphasis role="strong">application/json</emphasis> for JSON format.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Execute</emphasis> and review the KIE Server response.
						</simpara>
						<simpara>
							Example server response (JSON):
						</simpara>
						
<programlisting language="json" linenumbering="unnumbered">{
  "type": "SUCCESS",
  "msg": "List of created containers",
  "result": {
    "kie-containers": {
      "kie-container": [
        {
          "container-id": "itorders_1.0.0-SNAPSHOT",
          "release-id": {
            "group-id": "itorders",
            "artifact-id": "itorders",
            "version": "1.0.0-SNAPSHOT"
          },
          "resolved-release-id": {
            "group-id": "itorders",
            "artifact-id": "itorders",
            "version": "1.0.0-SNAPSHOT"
          },
          "status": "STARTED",
          "scanner": {
            "status": "DISPOSED",
            "poll-interval": null
          },
          "config-items": [],
          "container-alias": "itorders"
        }
      ]
    }
  }
}</programlisting>
					</listitem>
					<listitem>
						<simpara>
							For this example, copy or note the project <literal>group-id</literal>, <literal>artifact-id</literal>, and <literal>version</literal> (GAV) data from one of the deployed KIE containers returned in the response.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the Swagger page, navigate to the <emphasis role="strong">KIE Server and KIE containers</emphasis> → <emphasis role="strong">[PUT] /server/containers/{containerId}</emphasis> endpoint to send another request to deploy a new KIE container with the copied project GAV data. Adjust any request details according to your use case.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Try it out</emphasis> and enter the following components for the request:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">containerId</emphasis>: Enter the ID of the new KIE container, such as <literal>MyContainer</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">body</emphasis>: Set the <emphasis role="strong">Parameter content type</emphasis> to the desired request body format, such as <emphasis role="strong">application/json</emphasis> for JSON format, and add a request body with the configuration items for the new KIE container:
								</simpara>
							</listitem>
						</itemizedlist>
						
<programlisting language="json" linenumbering="unnumbered">{
  "config-items": [
    {
      "itemName": "RuntimeStrategy",
      "itemValue": "SINGLETON",
      "itemType": "java.lang.String"
    },
    {
      "itemName": "MergeMode",
      "itemValue": "MERGE_COLLECTIONS",
      "itemType": "java.lang.String"
    },
    {
      "itemName": "KBase",
      "itemValue": "",
      "itemType": "java.lang.String"
    },
    {
      "itemName": "KSession",
      "itemValue": "",
      "itemType": "java.lang.String"
    }
  ],
  "release-id": {
    "group-id": "itorders",
    "artifact-id": "itorders",
    "version": "1.0.0-SNAPSHOT"
  },
  "scanner": {
    "poll-interval": "5000",
    "status": "STARTED"
  }
}</programlisting>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Response content type</emphasis> drop-down menu, select the desired format of the server response, such as <emphasis role="strong">application/json</emphasis> for JSON format.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Execute</emphasis> and review the KIE Server response.
						</simpara>
						<simpara>
							Example server response (JSON):
						</simpara>
						
<programlisting language="json" linenumbering="unnumbered">{
  "type": "SUCCESS",
  "msg": "Container MyContainer successfully deployed with module itorders:itorders:1.0.0-SNAPSHOT.",
  "result": {
    "kie-container": {
      "container-id": "MyContainer",
      "release-id": {
        "group-id": "itorders",
        "artifact-id": "itorders",
        "version": "1.0.0-SNAPSHOT"
      },
      "resolved-release-id": {
        "group-id": "itorders",
        "artifact-id": "itorders",
        "version": "1.0.0-SNAPSHOT"
      },
      "status": "STARTED",
      "scanner": {
        "status": "STARTED",
        "poll-interval": 5000
      },
      "config-items": [],
      "messages": [
        {
          "severity": "INFO",
          "timestamp": {
            "java.util.Date": 1540584717937
          },
          "content": [
            "Container MyContainer successfully created with module itorders:itorders:1.0.0-SNAPSHOT."
          ]
        }
      ],
      "container-alias": null
    }
  }
}</programlisting>
						<simpara>
							If you encounter request errors, review the returned error code messages and adjust your request accordingly.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="kie-server-rest-api-endpoints-ref_kie-apis">
				<title>Supported KIE Server REST API endpoints</title>
				<simpara>
					The KIE Server REST API provides endpoints for the following types of resources in Red Hat Decision Manager:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							KIE Server and KIE containers
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							KIE session assets (for runtime commands)
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							DMN assets
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Planning solvers
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					The KIE Server REST API base URL is <literal>http://SERVER:PORT/kie-server/services/rest/</literal>. All requests require HTTP Basic authentication or token-based authentication for the <literal>kie-server</literal> user role.
				</simpara>
				<simpara>
					For the full list of KIE Server REST API endpoints and descriptions, use one of the following resources:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<link xlink:href="http://jbpm.org/learn/documentation.html">Execution Server REST API</link> on the jBPM Documentation page (static)
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Swagger UI for the KIE Server REST API at <literal>http://SERVER:PORT/kie-server/docs</literal> (dynamic, requires running KIE Server)
						</simpara>
						<note>
							<simpara>
								By default, the Swagger web interface for KIE Server is enabled by the <literal>org.kie.swagger.server.ext.disabled=false</literal> system property. To disable the Swagger web interface in KIE Server, set this system property to <literal>true</literal>.
							</simpara>
						</note>
					</listitem>
				</itemizedlist>
			</section>
		</chapter>
		<chapter xml:id="kie-server-java-api-con_kie-apis">
			<title>KIE Server Java client API for KIE containers and business assets</title>
			<simpara>
				Red Hat Decision Manager provides a KIE Server Java client API that enables you to connect to KIE Server using REST protocol from your Java client application. You can use the KIE Server Java client API as an alternative to the KIE Server REST API to interact with your KIE containers and business assets (such as business rules, processes, and solvers) in Red Hat Decision Manager without using the Business Central user interface. This API support enables you to maintain your Red Hat Decision Manager resources more efficiently and optimize your integration and development with Red Hat Decision Manager.
			</simpara>
			<simpara>
				With the KIE Server Java client API, you can perform the following actions also supported by the KIE Server REST API:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						Deploy or dispose KIE containers
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Retrieve and update KIE container information
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Return KIE Server status and basic information
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Retrieve and update business asset information
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Execute business assets (such as rules and processes)
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				KIE Server Java client API requests require the following components:
			</simpara>
			<variablelist>
				<varlistentry>
					<term>Authentication</term>
					<listitem>
						<simpara>
							The KIE Server Java client API requires HTTP Basic authentication for the user role <literal>kie-server</literal>. To view configured user roles for your Red Hat Decision Manager distribution, navigate to <literal>~/$SERVER_HOME/standalone/configuration/application-roles.properties</literal> and <literal>~/application-users.properties</literal>.
						</simpara>
						<simpara>
							To add a user with the <literal>kie-server</literal> role, navigate to <literal>~/$SERVER_HOME/bin</literal> and run the following command:
						</simpara>
						
<programlisting language="bash" linenumbering="unnumbered">$ ./add-user.sh -a --user &lt;USERNAME&gt; --password &lt;PASSWORD&gt; --role kie-server</programlisting>
						<simpara>
							For more information about user roles and Red Hat Decision Manager installation options, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/installing_and_configuring_red_hat_decision_manager#assembly-planning"><emphasis>Planning a Red Hat Decision Manager installation</emphasis></link>.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Project dependencies</term>
					<listitem>
						<simpara>
							The KIE Server Java client API requires the following dependencies on the relevant classpath of your Java project:
						</simpara>
						
<programlisting language="xml" linenumbering="unnumbered">&lt;!-- For remote execution on KIE Server --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.kie.server&lt;/groupId&gt;
  &lt;artifactId&gt;kie-server-client&lt;/artifactId&gt;
  &lt;version&gt;${rhdm.version}&lt;/version&gt;
&lt;/dependency&gt;

&lt;!-- For runtime commands --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.drools&lt;/groupId&gt;
  &lt;artifactId&gt;drools-compiler&lt;/artifactId&gt;
  &lt;scope&gt;runtime&lt;/scope&gt;
  &lt;version&gt;${rhdm.version}&lt;/version&gt;
&lt;/dependency&gt;

&lt;!-- For debug logging (optional) --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;
  &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;
  &lt;version&gt;${logback.version}&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
						<simpara>
							The <literal>&lt;version&gt;</literal> for Red Hat Decision Manager dependencies is the Maven artifact version for Red Hat Decision Manager currently used in your project (for example, 7.48.0.Final-redhat-00002).
						</simpara>
						<note>
							<simpara>
								Instead of specifying a Red Hat Decision Manager <literal>&lt;version&gt;</literal> for individual dependencies, consider adding the Red Hat Business Automation bill of materials (BOM) dependency to your project <literal>pom.xml</literal> file. The Red Hat Business Automation BOM applies to both Red Hat Decision Manager and Red Hat Process Automation Manager. When you add the BOM files, the correct versions of transitive dependencies from the provided Maven repositories are included in the project.
							</simpara>
							<simpara>
								Example BOM dependency:
							</simpara>
							
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
  &lt;groupId&gt;com.redhat.ba&lt;/groupId&gt;
  &lt;artifactId&gt;ba-platform-bom&lt;/artifactId&gt;
  &lt;version&gt;7.10.0.redhat-00002&lt;/version&gt;
  &lt;scope&gt;import&lt;/scope&gt;
  &lt;type&gt;pom&lt;/type&gt;
&lt;/dependency&gt;</programlisting>
							<simpara>
								For more information about the Red Hat Business Automation BOM, see <link xlink:href="https://access.redhat.com/solutions/3363991">What is the mapping between RHDM product and maven library version?</link>.
							</simpara>
						</note>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Client request configuration</term>
					<listitem>
						<simpara>
							All Java client requests with the KIE Server Java client API must define at least the following server communication components:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									Credentials of the <literal>kie-server</literal> user
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									KIE Server location, such as <literal>http://localhost:8080/kie-server/services/rest/server</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Marshalling format for API requests and responses (JSON, JAXB, or XSTREAM)
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									A <literal>KieServicesConfiguration</literal> object and a <literal>KieServicesClient</literal> object, which serve as the entry point for starting the server communication using the Java client API
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									A <literal>KieServicesFactory</literal> object defining REST protocol and user access
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Any other client services used, such as <literal>RuleServicesClient</literal>, <literal>ProcessServicesClient</literal>, or <literal>QueryServicesClient</literal>
								</simpara>
							</listitem>
						</itemizedlist>
						<simpara>
							The following are examples of basic and advanced client configurations with these components:
						</simpara>
						<formalpara>
							<title>Basic client configuration example</title>
							<para>
								
<programlisting language="java" linenumbering="unnumbered">import org.kie.server.api.marshalling.MarshallingFormat;
import org.kie.server.client.KieServicesClient;
import org.kie.server.client.KieServicesConfiguration;
import org.kie.server.client.KieServicesFactory;

public class MyConfigurationObject {

  private static final String URL = "http://localhost:8080/kie-server/services/rest/server";
  private static final String USER = "baAdmin";
  private static final String PASSWORD = "password@1";

  private static final MarshallingFormat FORMAT = MarshallingFormat.JSON;

  private static KieServicesConfiguration conf;
  private static KieServicesClient kieServicesClient;

  public static void initialize() {
    conf = KieServicesFactory.newRestConfiguration(URL, USER, PASSWORD);

    //If you use custom classes, such as Obj.class, add them to the configuration.
    Set&lt;Class&lt;?&gt;&gt; extraClassList = new HashSet&lt;Class&lt;?&gt;&gt;();
    extraClassList.add(Obj.class);
    conf.addExtraClasses(extraClassList);

    conf.setMarshallingFormat(FORMAT);
    kieServicesClient = KieServicesFactory.newKieServicesClient(conf);
  }
}</programlisting>
							</para>
						</formalpara>
						<formalpara>
							<title>Advanced client configuration example with additional client services</title>
							<para>
								
<programlisting language="java" linenumbering="unnumbered">import org.kie.server.api.marshalling.MarshallingFormat;
import org.kie.server.client.CaseServicesClient;
import org.kie.server.client.DMNServicesClient;
import org.kie.server.client.DocumentServicesClient;
import org.kie.server.client.JobServicesClient;
import org.kie.server.client.KieServicesClient;
import org.kie.server.client.KieServicesConfiguration;
import org.kie.server.client.KieServicesFactory;
import org.kie.server.client.ProcessServicesClient;
import org.kie.server.client.QueryServicesClient;
import org.kie.server.client.RuleServicesClient;
import org.kie.server.client.SolverServicesClient;
import org.kie.server.client.UIServicesClient;
import org.kie.server.client.UserTaskServicesClient;
import org.kie.server.api.model.instance.ProcessInstance;
import org.kie.server.api.model.KieContainerResource;
import org.kie.server.api.model.ReleaseId;

public class MyAdvancedConfigurationObject {

    // REST API base URL, credentials, and marshalling format
    private static final String URL = "http://localhost:8080/kie-server/services/rest/server";
    private static final String USER = "baAdmin";
    private static final String PASSWORD = "password@1";;

    private static final MarshallingFormat FORMAT = MarshallingFormat.JSON;

    private static KieServicesConfiguration conf;

    // KIE client for common operations
    private static KieServicesClient kieServicesClient;

    // Rules client
    private static RuleServicesClient ruleClient;

    // Process automation clients
    private static CaseServicesClient caseClient;
    private static DocumentServicesClient documentClient;
    private static JobServicesClient jobClient;
    private static ProcessServicesClient processClient;
    private static QueryServicesClient queryClient;
    private static UIServicesClient uiClient;
    private static UserTaskServicesClient userTaskClient;

    // DMN client
    private static DMNServicesClient dmnClient;

    // Planning client
    private static SolverServicesClient solverClient;

    public static void main(String[] args) {
        initializeKieServerClient();
        initializeDroolsServiceClients();
        initializeJbpmServiceClients();
        initializeSolverServiceClients();
    }

    public static void initializeKieServerClient() {
        conf = KieServicesFactory.newRestConfiguration(URL, USER, PASSWORD);
        conf.setMarshallingFormat(FORMAT);
        kieServicesClient = KieServicesFactory.newKieServicesClient(conf);
    }

    public static void initializeDroolsServiceClients() {
        ruleClient = kieServicesClient.getServicesClient(RuleServicesClient.class);
        dmnClient = kieServicesClient.getServicesClient(DMNServicesClient.class);
    }

    public static void initializeJbpmServiceClients() {
        caseClient = kieServicesClient.getServicesClient(CaseServicesClient.class);
        documentClient = kieServicesClient.getServicesClient(DocumentServicesClient.class);
        jobClient = kieServicesClient.getServicesClient(JobServicesClient.class);
        processClient = kieServicesClient.getServicesClient(ProcessServicesClient.class);
        queryClient = kieServicesClient.getServicesClient(QueryServicesClient.class);
        uiClient = kieServicesClient.getServicesClient(UIServicesClient.class);
        userTaskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class);
    }

    public static void initializeSolverServiceClients() {
        solverClient = kieServicesClient.getServicesClient(SolverServicesClient.class);
    }
}</programlisting>
							</para>
						</formalpara>
					</listitem>
				</varlistentry>
			</variablelist>
			<section xml:id="kie-server-java-api-requests-proc_kie-apis">
				<title>Sending requests with the KIE Server Java client API</title>
				<simpara>
					The KIE Server Java client API enables you to connect to KIE Server using REST protocol from your Java client application. You can use the KIE Server Java client API as an alternative to the KIE Server REST API to interact with your KIE containers and business assets (such as business rules, processes, and solvers) in Red Hat Decision Manager without using the Business Central user interface.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							KIE Server is installed and running.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							You have <literal>kie-server</literal> user role access to KIE Server.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							You have a Java project with Red Hat Decision Manager resources.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In your client application, ensure that the following dependencies have been added to the relevant classpath of your Java project:
						</simpara>
						
<programlisting language="xml" linenumbering="unnumbered">&lt;!-- For remote execution on KIE Server --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.kie.server&lt;/groupId&gt;
  &lt;artifactId&gt;kie-server-client&lt;/artifactId&gt;
  &lt;version&gt;${rhdm.version}&lt;/version&gt;
&lt;/dependency&gt;

&lt;!-- For runtime commands --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.drools&lt;/groupId&gt;
  &lt;artifactId&gt;drools-compiler&lt;/artifactId&gt;
  &lt;scope&gt;runtime&lt;/scope&gt;
  &lt;version&gt;${rhdm.version}&lt;/version&gt;
&lt;/dependency&gt;

&lt;!-- For debug logging (optional) --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;
  &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;
  &lt;version&gt;${logback.version}&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
					</listitem>
					<listitem>
						<simpara>
							Download the <emphasis role="strong">Red Hat Decision Manager 7.10.0 Source Distribution</emphasis> from the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html">Red Hat Customer Portal</link> and navigate to <literal>~/rhdm-7.10.0-sources/src/droolsjbpm-integration-$VERSION/kie-server-parent/kie-server-remote/kie-server-client/src/main/java/org/kie/server/client</literal> to access the KIE Server Java clients.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <literal>~/kie/server/client</literal> folder , identify the relevant Java client for the request you want to send, such as <literal>KieServicesClient</literal> to access client services for KIE containers and other assets in KIE Server.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In your client application, create a <literal>.java</literal> class for the API request. The class must contain the necessary imports, KIE Server location and user credentials, a <literal>KieServicesClient</literal> object, and the client method to execute, such as <literal>createContainer</literal> and <literal>disposeContainer</literal> from the <literal>KieServicesClient</literal> client. Adjust any configuration details according to your use case.
						</simpara>
						<formalpara>
							<title>Creating and disposing a container</title>
							<para>
								
<programlisting language="java" linenumbering="unnumbered">import org.kie.server.api.marshalling.MarshallingFormat;
import org.kie.server.client.KieServicesClient;
import org.kie.server.client.KieServicesConfiguration;
import org.kie.server.client.KieServicesFactory;
import org.kie.server.api.model.KieContainerResource;
import org.kie.server.api.model.ServiceResponse;

public class MyConfigurationObject {

  private static final String URL = "http://localhost:8080/kie-server/services/rest/server";
  private static final String USER = "baAdmin";
  private static final String PASSWORD = "password@1";

  private static final MarshallingFormat FORMAT = MarshallingFormat.JSON;

  private static KieServicesConfiguration conf;
  private static KieServicesClient kieServicesClient;

  public static void initialize() {
    conf = KieServicesFactory.newRestConfiguration(URL, USER, PASSWORD);

  public void disposeAndCreateContainer() {
      System.out.println("== Disposing and creating containers ==");

      // Retrieve list of KIE containers
      List&lt;KieContainerResource&gt; kieContainers = kieServicesClient.listContainers().getResult().getContainers();
      if (kieContainers.size() == 0) {
          System.out.println("No containers available...");
          return;
      }

      // Dispose KIE container
      KieContainerResource container = kieContainers.get(0);
      String containerId = container.getContainerId();
      ServiceResponse&lt;Void&gt; responseDispose = kieServicesClient.disposeContainer(containerId);
      if (responseDispose.getType() == ResponseType.FAILURE) {
          System.out.println("Error disposing " + containerId + ". Message: ");
          System.out.println(responseDispose.getMsg());
          return;
      }
      System.out.println("Success Disposing container " + containerId);
      System.out.println("Trying to recreate the container...");

      // Re-create KIE container
      ServiceResponse&lt;KieContainerResource&gt; createResponse = kieServicesClient.createContainer(containerId, container);
      if(createResponse.getType() == ResponseType.FAILURE) {
          System.out.println("Error creating " + containerId + ". Message: ");
          System.out.println(responseDispose.getMsg());
          return;
      }
      System.out.println("Container recreated with success!");
      }
  }
}</programlisting>
							</para>
						</formalpara>
						<simpara>
							You define service responses using the <literal>org.kie.server.api.model.ServiceResponse&lt;T&gt;</literal> object, where <literal>T</literal> represents the type of returned response. The <literal>ServiceResponse</literal> object has the following attributes:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>String <emphasis>message</emphasis></literal>: Returns the response message
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>ResponseType <emphasis>type</emphasis></literal>: Returns either <literal>SUCCESS</literal> or <literal>FAILURE</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>T <emphasis>result</emphasis></literal>: Returns the requested object
								</simpara>
							</listitem>
						</itemizedlist>
						<simpara>
							In this example, when you dispose a container, the <literal>ServiceResponse</literal> returns a <literal>Void</literal> response. When you create a container, the <literal>ServiceResponse</literal> returns a <literal>KieContainerResource</literal> object.
						</simpara>
						<note>
							<simpara>
								A conversation between a client and a specific KIE Server container in a clustered environment is secured by a unique <literal>conversationID</literal>. The <literal>conversationID</literal> is transferred using the <literal>X-KIE-ConversationId</literal> REST header. If you update the container, unset the previous <literal>conversationID</literal>. Use <literal>KieServiesClient.completeConversation()</literal> to unset the <literal>conversationID</literal> for Java API.
							</simpara>
						</note>
					</listitem>
					<listitem>
						<simpara>
							Run the configured <literal>.java</literal> class from your project directory to execute the request, and review the KIE Server response.
						</simpara>
						<simpara>
							If you enabled debug logging, KIE Server responds with a detailed response according to your configured marshalling format, such as JSON.
						</simpara>
						<simpara>
							Example server response for a new KIE container (log):
						</simpara>
						
<screen>10:23:35.194 [main] INFO  o.k.s.a.m.MarshallerFactory - Marshaller extensions init
10:23:35.396 [main] DEBUG o.k.s.client.balancer.LoadBalancer - Load balancer RoundRobinBalancerStrategy{availableEndpoints=[http://localhost:8080/kie-server/services/rest/server]} selected url 'http://localhost:8080/kie-server/services/rest/server'
10:23:35.398 [main] DEBUG o.k.s.c.i.AbstractKieServicesClientImpl - About to send GET request to 'http://localhost:8080/kie-server/services/rest/server'
10:23:35.440 [main] DEBUG o.k.s.c.i.AbstractKieServicesClientImpl - About to deserialize content:
 '{
  "type" : "SUCCESS",
  "msg" : "Kie Server info",
  "result" : {
    "kie-server-info" : {
      "id" : "default-kieserver",
      "version" : "7.11.0.Final-redhat-00003",
      "name" : "default-kieserver",
      "location" : "http://localhost:8080/kie-server/services/rest/server",
      "capabilities" : [ "KieServer", "BRM", "BPM", "CaseMgmt", "BPM-UI", "BRP", "DMN", "Swagger" ],
      "messages" : [ {
        "severity" : "INFO",
        "timestamp" : {
  "java.util.Date" : 1540814906533
},
        "content" : [ "Server KieServerInfo{serverId='default-kieserver', version='7.11.0.Final-redhat-00003', name='default-kieserver', location='http://localhost:8080/kie-server/services/rest/server', capabilities=[KieServer, BRM, BPM, CaseMgmt, BPM-UI, BRP, DMN, Swagger], messages=null}started successfully at Mon Oct 29 08:08:26 EDT 2018" ]
      } ]
    }
  }
}'
 into type: 'class org.kie.server.api.model.ServiceResponse'
10:23:35.653 [main] DEBUG o.k.s.c.impl.KieServicesClientImpl - KieServicesClient connected to: default-kieserver version 7.11.0.Final-redhat-00003
10:23:35.653 [main] DEBUG o.k.s.c.impl.KieServicesClientImpl - Supported capabilities by the server: [KieServer, BRM, BPM, CaseMgmt, BPM-UI, BRP, DMN, Swagger]
10:23:35.653 [main] DEBUG o.k.s.c.impl.KieServicesClientImpl - Building services client for server capability KieServer
10:23:35.653 [main] DEBUG o.k.s.c.impl.KieServicesClientImpl - No builder found for 'KieServer' capability
10:23:35.654 [main] DEBUG o.k.s.c.impl.KieServicesClientImpl - Building services client for server capability BRM
10:23:35.654 [main] DEBUG o.k.s.c.impl.KieServicesClientImpl - Builder 'org.kie.server.client.helper.DroolsServicesClientBuilder@6b927fb' for capability 'BRM'
10:23:35.655 [main] DEBUG o.k.s.c.impl.KieServicesClientImpl - Capability implemented by {interface org.kie.server.client.RuleServicesClient=org.kie.server.client.impl.RuleServicesClientImpl@4a94ee4}
10:23:35.655 [main] DEBUG o.k.s.c.impl.KieServicesClientImpl - Building services client for server capability BPM
10:23:35.656 [main] DEBUG o.k.s.c.impl.KieServicesClientImpl - Builder 'org.kie.server.client.helper.JBPMServicesClientBuilder@4cc451f2' for capability 'BPM'
10:23:35.672 [main] DEBUG o.k.s.c.impl.KieServicesClientImpl - Capability implemented by {interface org.kie.server.client.JobServicesClient=org.kie.server.client.impl.JobServicesClientImpl@1189dd52, interface org.kie.server.client.admin.ProcessAdminServicesClient=org.kie.server.client.admin.impl.ProcessAdminServicesClientImpl@36bc55de, interface org.kie.server.client.DocumentServicesClient=org.kie.server.client.impl.DocumentServicesClientImpl@564fabc8, interface org.kie.server.client.admin.UserTaskAdminServicesClient=org.kie.server.client.admin.impl.UserTaskAdminServicesClientImpl@16d04d3d, interface org.kie.server.client.QueryServicesClient=org.kie.server.client.impl.QueryServicesClientImpl@49ec71f8, interface org.kie.server.client.ProcessServicesClient=org.kie.server.client.impl.ProcessServicesClientImpl@1d2adfbe, interface org.kie.server.client.UserTaskServicesClient=org.kie.server.client.impl.UserTaskServicesClientImpl@36902638}
10:23:35.672 [main] DEBUG o.k.s.c.impl.KieServicesClientImpl - Building services client for server capability CaseMgmt
10:23:35.672 [main] DEBUG o.k.s.c.impl.KieServicesClientImpl - Builder 'org.kie.server.client.helper.CaseServicesClientBuilder@223d2c72' for capability 'CaseMgmt'
10:23:35.676 [main] DEBUG o.k.s.c.impl.KieServicesClientImpl - Capability implemented by {interface org.kie.server.client.admin.CaseAdminServicesClient=org.kie.server.client.admin.impl.CaseAdminServicesClientImpl@2b662a77, interface org.kie.server.client.CaseServicesClient=org.kie.server.client.impl.CaseServicesClientImpl@7f0eb4b4}
10:23:35.676 [main] DEBUG o.k.s.c.impl.KieServicesClientImpl - Building services client for server capability BPM-UI
10:23:35.676 [main] DEBUG o.k.s.c.impl.KieServicesClientImpl - Builder 'org.kie.server.client.helper.JBPMUIServicesClientBuilder@5c33f1a9' for capability 'BPM-UI'
10:23:35.677 [main] DEBUG o.k.s.c.impl.KieServicesClientImpl - Capability implemented by {interface org.kie.server.client.UIServicesClient=org.kie.server.client.impl.UIServicesClientImpl@223191a6}
10:23:35.678 [main] DEBUG o.k.s.c.impl.KieServicesClientImpl - Building services client for server capability BRP
10:23:35.678 [main] DEBUG o.k.s.c.impl.KieServicesClientImpl - Builder 'org.kie.server.client.helper.OptaplannerServicesClientBuilder@49139829' for capability 'BRP'
10:23:35.679 [main] DEBUG o.k.s.c.impl.KieServicesClientImpl - Capability implemented by {interface org.kie.server.client.SolverServicesClient=org.kie.server.client.impl.SolverServicesClientImpl@77fbd92c}
10:23:35.679 [main] DEBUG o.k.s.c.impl.KieServicesClientImpl - Building services client for server capability DMN
10:23:35.679 [main] DEBUG o.k.s.c.impl.KieServicesClientImpl - Builder 'org.kie.server.client.helper.DMNServicesClientBuilder@67c27493' for capability 'DMN'
10:23:35.680 [main] DEBUG o.k.s.c.impl.KieServicesClientImpl - Capability implemented by {interface org.kie.server.client.DMNServicesClient=org.kie.server.client.impl.DMNServicesClientImpl@35e2d654}
10:23:35.680 [main] DEBUG o.k.s.c.impl.KieServicesClientImpl - Building services client for server capability Swagger
10:23:35.680 [main] DEBUG o.k.s.c.impl.KieServicesClientImpl - No builder found for 'Swagger' capability
10:23:35.681 [main] DEBUG o.k.s.client.balancer.LoadBalancer - Load balancer RoundRobinBalancerStrategy{availableEndpoints=[http://localhost:8080/kie-server/services/rest/server]} selected url 'http://localhost:8080/kie-server/services/rest/server'
10:23:35.701 [main] DEBUG o.k.s.c.i.AbstractKieServicesClientImpl - About to send PUT request to 'http://localhost:8080/kie-server/services/rest/server/containers/employee-rostering3' with payload '{
  "container-id" : null,
  "release-id" : {
    "group-id" : "employeerostering",
    "artifact-id" : "employeerostering",
    "version" : "1.0.0-SNAPSHOT"
  },
  "resolved-release-id" : null,
  "status" : null,
  "scanner" : null,
  "config-items" : [ ],
  "messages" : [ ],
  "container-alias" : null
}'
10:23:38.071 [main] DEBUG o.k.s.c.i.AbstractKieServicesClientImpl - About to deserialize content:
 '{
  "type" : "SUCCESS",
  "msg" : "Container employee-rostering3 successfully deployed with module employeerostering:employeerostering:1.0.0-SNAPSHOT.",
  "result" : {
    "kie-container" : {
      "container-id" : "employee-rostering3",
      "release-id" : {
        "group-id" : "employeerostering",
        "artifact-id" : "employeerostering",
        "version" : "1.0.0-SNAPSHOT"
      },
      "resolved-release-id" : {
        "group-id" : "employeerostering",
        "artifact-id" : "employeerostering",
        "version" : "1.0.0-SNAPSHOT"
      },
      "status" : "STARTED",
      "scanner" : {
        "status" : "DISPOSED",
        "poll-interval" : null
      },
      "config-items" : [ ],
      "messages" : [ {
        "severity" : "INFO",
        "timestamp" : {
  "java.util.Date" : 1540909418069
},
        "content" : [ "Container employee-rostering3 successfully created with module employeerostering:employeerostering:1.0.0-SNAPSHOT." ]
      } ],
      "container-alias" : null
    }
  }
}'
 into type: 'class org.kie.server.api.model.ServiceResponse'</screen>
						<simpara>
							If you encounter request errors, review the returned error code messages and adjust your Java configurations accordingly.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="kie-server-java-clients-ref_kie-apis">
				<title>Supported KIE Server Java clients</title>
				<simpara>
					The following are some of the Java client services available in the <literal>org.kie.server.client</literal> package of your Red Hat Decision Manager distribution. You can use these services to interact with related resources in KIE Server similarly to the KIE Server REST API.
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<literal>KieServicesClient</literal>: Used as the entry point for other KIE Server Java clients, and used to interact with KIE containers
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>JobServicesClient</literal>: Used to schedule, cancel, re-queue, and get job requests
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>RuleServicesClient</literal>: Used to send commands to the server to perform rule-related operations, such as executing rules or inserting objects into the KIE session
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>SolverServicesClient</literal>: Used to perform all Red Hat Business Optimizer operations, such as getting the solver state and the best solution, or disposing a solver
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					The <literal>getServicesClient</literal> method provides access to any of these clients:
				</simpara>
				
<programlisting language="java" linenumbering="unnumbered">RuleServicesClient rulesClient = kieServicesClient.getServicesClient(RuleServicesClient.class);</programlisting>
				<simpara>
					For the full list of available KIE Server Java clients, download the <emphasis role="strong">Red Hat Decision Manager 7.10.0 Source Distribution</emphasis> from the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html">Red Hat Customer Portal</link> and navigate to <literal>~/rhdm-7.10.0-sources/src/droolsjbpm-integration-$VERSION/kie-server-parent/kie-server-remote/kie-server-client/src/main/java/org/kie/server/client</literal>.
				</simpara>
			</section>
			<section xml:id="kie-server-java-api-examples-ref_kie-apis">
				<title>Example requests with the KIE Server Java client API</title>
				<simpara>
					The following are examples of KIE Server Java client API requests for basic interactions with KIE Server. For the full list of available KIE Server Java clients, download the <emphasis role="strong">Red Hat Decision Manager 7.10.0 Source Distribution</emphasis> from the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html">Red Hat Customer Portal</link> and navigate to <literal>~/rhdm-7.10.0-sources/src/droolsjbpm-integration-$VERSION/kie-server-parent/kie-server-remote/kie-server-client/src/main/java/org/kie/server/client</literal>.
				</simpara>
				<variablelist>
					<varlistentry>
						<term>Listing KIE Server capabilities</term>
						<listitem>
							<simpara>
								You can use the <literal>org.kie.server.api.model.KieServerInfo</literal> object to identify server capabilities. The <literal>KieServicesClient</literal> client requires the server capability information to correctly produce service clients. You can specify the capabilities globally in <literal>KieServicesConfiguration</literal>; otherwise they are automatically retrieved from KIE Server.
							</simpara>
							<formalpara>
								<title>Example request to return KIE Server capabilities</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">public void listCapabilities() {

  KieServerInfo serverInfo = kieServicesClient.getServerInfo().getResult();
  System.out.print("Server capabilities:");

  for (String capability : serverInfo.getCapabilities()) {
    System.out.print(" " + capability);
  }

  System.out.println();
}</programlisting>
								</para>
							</formalpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Listing KIE containers in KIE Server</term>
						<listitem>
							<simpara>
								KIE containers are represented by the <literal>org.kie.server.api.model.KieContainerResource</literal> object. The list of resources is represented by the <literal>org.kie.server.api.model.KieContainerResourceList</literal> object.
							</simpara>
							<formalpara>
								<title>Example request to return KIE containers from KIE Server</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">public void listContainers() {
    KieContainerResourceList containersList = kieServicesClient.listContainers().getResult();
    List&lt;KieContainerResource&gt; kieContainers = containersList.getContainers();
    System.out.println("Available containers: ");
    for (KieContainerResource container : kieContainers) {
        System.out.println("\t" + container.getContainerId() + " (" + container.getReleaseId() + ")");
    }
}</programlisting>
								</para>
							</formalpara>
							<simpara>
								You can optionally filter the KIE container results using an instance of the <literal>org.kie.server.api.model.KieContainerResourceFilter</literal> class, which is passed to the <literal>org.kie.server.client.KieServicesClient.listContainers()</literal> method.
							</simpara>
							<formalpara>
								<title>Example request to return KIE containers by release ID and status</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">public void listContainersWithFilter() {

    // Filter containers by releaseId "org.example:container:1.0.0.Final" and status FAILED
    KieContainerResourceFilter filter = new KieContainerResourceFilter.Builder()
            .releaseId("org.example", "container", "1.0.0.Final")
            .status(KieContainerStatus.FAILED)
            .build();

    // Using previously created KieServicesClient
    KieContainerResourceList containersList = kieServicesClient.listContainers(filter).getResult();
    List&lt;KieContainerResource&gt; kieContainers = containersList.getContainers();

    System.out.println("Available containers: ");

    for (KieContainerResource container : kieContainers) {
        System.out.println("\t" + container.getContainerId() + " (" + container.getReleaseId() + ")");
    }
}</programlisting>
								</para>
							</formalpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Creating and disposing KIE containers in KIE Server</term>
						<listitem>
							<simpara>
								You can use the <literal>createContainer</literal> and <literal>disposeContainer</literal> methods in the <literal>KieServicesClient</literal> client to dispose and create KIE containers. In this example, when you dispose a container, the <literal>ServiceResponse</literal> returns a <literal>Void</literal> response. When you create a container, the <literal>ServiceResponse</literal> returns a <literal>KieContainerResource</literal> object.
							</simpara>
							<formalpara>
								<title>Example request to dispose and re-create a KIE container</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">public void disposeAndCreateContainer() {
    System.out.println("== Disposing and creating containers ==");

    // Retrieve list of KIE containers
    List&lt;KieContainerResource&gt; kieContainers = kieServicesClient.listContainers().getResult().getContainers();
    if (kieContainers.size() == 0) {
        System.out.println("No containers available...");
        return;
    }

    // Dispose KIE container
    KieContainerResource container = kieContainers.get(0);
    String containerId = container.getContainerId();
    ServiceResponse&lt;Void&gt; responseDispose = kieServicesClient.disposeContainer(containerId);
    if (responseDispose.getType() == ResponseType.FAILURE) {
        System.out.println("Error disposing " + containerId + ". Message: ");
        System.out.println(responseDispose.getMsg());
        return;
    }
    System.out.println("Success Disposing container " + containerId);
    System.out.println("Trying to recreate the container...");

    // Re-create KIE container
    ServiceResponse&lt;KieContainerResource&gt; createResponse = kieServicesClient.createContainer(containerId, container);
    if(createResponse.getType() == ResponseType.FAILURE) {
        System.out.println("Error creating " + containerId + ". Message: ");
        System.out.println(responseDispose.getMsg());
        return;
    }
    System.out.println("Container recreated with success!");
}</programlisting>
								</para>
							</formalpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Executing runtime commands in KIE Server</term>
						<listitem>
							<simpara>
								Red Hat Decision Manager supports runtime commands that you can send to KIE Server for asset-related operations, such as inserting or retracting objects in a KIE session or firing all rules. The full list of supported runtime commands is located in the <literal>org.drools.core.command.runtime</literal> package in your Red Hat Decision Manager instance.
							</simpara>
							<simpara>
								You can use the <literal>org.kie.api.command.KieCommands</literal> class to insert commands, and use <literal>org.kie.api.KieServices.get().getCommands()</literal> to instantiate the <literal>KieCommands</literal> class. If you want to add multiple commands, use the <literal>BatchExecutionCommand</literal> wrapper.
							</simpara>
							<formalpara>
								<title>Example request to insert an object and fire all rules</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">import org.kie.api.command.Command;
import org.kie.api.command.KieCommands;
import org.kie.server.api.model.ServiceResponse;
import org.kie.server.client.RuleServicesClient;
import org.kie.server.client.KieServicesClient;
import org.kie.api.KieServices;

import java.util.Arrays;

...

public void executeCommands() {

  String containerId = "hello";
  System.out.println("== Sending commands to the server ==");
  RuleServicesClient rulesClient = kieServicesClient.getServicesClient(RuleServicesClient.class);
  KieCommands commandsFactory = KieServices.Factory.get().getCommands();

  Command&lt;?&gt; insert = commandsFactory.newInsert("Some String OBJ");
  Command&lt;?&gt; fireAllRules = commandsFactory.newFireAllRules();
  Command&lt;?&gt; batchCommand = commandsFactory.newBatchExecution(Arrays.asList(insert, fireAllRules));

  ServiceResponse&lt;String&gt; executeResponse = rulesClient.executeCommands(containerId, batchCommand);

  if(executeResponse.getType() == ResponseType.SUCCESS) {
    System.out.println("Commands executed with success! Response: ");
    System.out.println(executeResponse.getResult());
  } else {
    System.out.println("Error executing rules. Message: ");
    System.out.println(executeResponse.getMsg());
  }
}</programlisting>
								</para>
							</formalpara>
							<note>
								<simpara>
									A conversation between a client and a specific KIE Server container in a clustered environment is secured by a unique <literal>conversationID</literal>. The <literal>conversationID</literal> is transferred using the <literal>X-KIE-ConversationId</literal> REST header. If you update the container, unset the previous <literal>conversationID</literal>. Use <literal>KieServiesClient.completeConversation()</literal> to unset the <literal>conversationID</literal> for Java API.
								</simpara>
							</note>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</chapter>
		<chapter xml:id="kie-server-commands-con_kie-apis">
			<title>KIE Server and KIE container commands in Red Hat Decision Manager</title>
			<simpara>
				Red Hat Decision Manager supports server commands that you can send to KIE Server for server-related or container-related operations, such as retrieving server information or creating or deleting a container. The full list of supported KIE Server configuration commands is located in the <literal>org.kie.server.api.commands</literal> package in your Red Hat Decision Manager instance.
			</simpara>
			<simpara>
				In the KIE Server REST API, you use the <literal>org.kie.server.api.commands</literal> commands as the request body for <literal>POST</literal> requests to <literal>http://SERVER:PORT/kie-server/services/rest/server/config</literal>. For more information about using the KIE Server REST API, see <xref linkend="kie-server-rest-api-con_kie-apis" />.
			</simpara>
			<simpara>
				In the KIE Server Java client API, you use the corresponding method in the parent <literal>KieServicesClient</literal> Java client as an embedded API request in your Java application. All KIE Server commands are executed by methods provided in the Java client API, so you do not need to embed the actual KIE Server commands in your Java application. For more information about using the KIE Server Java client API, see <xref linkend="kie-server-java-api-con_kie-apis" />.
			</simpara>
			<section xml:id="kie-server-commands-samples-ref_kie-apis">
				<title>Sample KIE Server and KIE container commands</title>
				<simpara>
					The following are sample KIE Server commands that you can use with the KIE Server REST API or Java client API for server-related or container-related operations in KIE Server:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<literal>GetServerInfoCommand</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>GetServerStateCommand</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>CreateContainerCommand</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>GetContainerInfoCommand</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>ListContainersCommand</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>CallContainerCommand</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>DisposeContainerCommand</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>GetScannerInfoCommand</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>UpdateScannerCommand</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>UpdateReleaseIdCommand</literal>
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					For the full list of supported KIE Server configuration and management commands, see the <literal>org.kie.server.api.commands</literal> package in your Red Hat Decision Manager instance.
				</simpara>
				<simpara>
					You can run KIE Server commands individually or together as a batch REST API request or batch Java API request:
				</simpara>
				<formalpara>
					<title>Batch REST API request to create, call, and dispose a KIE container (JSON)</title>
					<para>
						
<programlisting language="json" linenumbering="unnumbered">{
  "commands": [
    {
      "create-container": {
        "container": {
          "status": "STARTED",
          "container-id": "command-script-container",
          "release-id": {
            "version": "1.0",
            "group-id": "com.redhat",
            "artifact-id": "Project1"
          }
        }
      }
    },
    {
      "call-container": {
        "payload": "{\n  \"commands\" : [ {\n    \"fire-all-rules\" : {\n      \"max\" : -1,\n      \"out-identifier\" : null\n    }\n  } ]\n}",
        "container-id": "command-script-container"
      }
    },
    {
      "dispose-container": {
        "container-id": "command-script-container"
      }
    }
  ]
}</programlisting>
					</para>
				</formalpara>
				<formalpara>
					<title>Batch Java API request to retrieve, dispose, and re-create a KIE container</title>
					<para>
						
<programlisting language="java" linenumbering="unnumbered">public void disposeAndCreateContainer() {
    System.out.println("== Disposing and creating containers ==");

    // Retrieve list of KIE containers
    List&lt;KieContainerResource&gt; kieContainers = kieServicesClient.listContainers().getResult().getContainers();
    if (kieContainers.size() == 0) {
        System.out.println("No containers available...");
        return;
    }

    // Dispose KIE container
    KieContainerResource container = kieContainers.get(0);
    String containerId = container.getContainerId();
    ServiceResponse&lt;Void&gt; responseDispose = kieServicesClient.disposeContainer(containerId);
    if (responseDispose.getType() == ResponseType.FAILURE) {
        System.out.println("Error disposing " + containerId + ". Message: ");
        System.out.println(responseDispose.getMsg());
        return;
    }
    System.out.println("Success Disposing container " + containerId);
    System.out.println("Trying to recreate the container...");

    // Re-create KIE container
    ServiceResponse&lt;KieContainerResource&gt; createResponse = kieServicesClient.createContainer(containerId, container);
    if(createResponse.getType() == ResponseType.FAILURE) {
        System.out.println("Error creating " + containerId + ". Message: ");
        System.out.println(responseDispose.getMsg());
        return;
    }
    System.out.println("Container recreated with success!");
}</programlisting>
					</para>
				</formalpara>
				<simpara>
					Each command in this section includes a REST request body example (JSON) for the KIE Server REST API and an embedded method example from the <literal>KieServicesClient</literal> Java client for the KIE Server Java client API.
				</simpara>
				<variablelist>
					<varlistentry>
						<term>GetServerInfoCommand</term>
						<listitem>
							<simpara>
								Returns information about the KIE Server.
							</simpara>
							<formalpara>
								<title>Example REST request body (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "commands" : [ {
    "get-server-info" : { }
  } ]
}</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example Java client method</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">KieServerInfo serverInfo = kieServicesClient.getServerInfo();</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example server response (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "response": [
    {
      "type": "SUCCESS",
      "msg": "Kie Server info",
      "result": {
        "kie-server-info": {
          "id": "default-kieserver",
          "version": "7.11.0.Final-redhat-00001",
          "name": "default-kieserver",
          "location": "http://localhost:8080/kie-server/services/rest/server",
          "capabilities": [
            "KieServer",
            "BRM",
            "BPM",
            "CaseMgmt",
            "BPM-UI",
            "BRP",
            "DMN",
            "Swagger"
          ],
          "messages": [
            {
              "severity": "INFO",
              "timestamp": {
                "java.util.Date": 1538502533321
              },
              "content": [
                "Server KieServerInfo{serverId='default-kieserver', version='7.11.0.Final-redhat-00001', name='default-kieserver', location='http://localhost:8080/kie-server/services/rest/server', capabilities=[KieServer, BRM, BPM, CaseMgmt, BPM-UI, BRP, DMN, Swagger], messages=null}started successfully at Tue Oct 02 13:48:53 EDT 2018"
              ]
            }
          ]
        }
      }
    }
  ]
}</programlisting>
								</para>
							</formalpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>GetServerStateCommand</term>
						<listitem>
							<simpara>
								Returns information about the current state and configurations of the KIE Server.
							</simpara>
							<formalpara>
								<title>Example REST request body (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "commands" : [ {
    "get-server-state" : { }
  } ]
}</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example Java client method</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">KieServerStateInfo serverStateInfo = kieServicesClient.getServerState();</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example server response (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "response": [
    {
      "type": "SUCCESS",
      "msg": "Successfully loaded server state for server id default-kieserver",
      "result": {
        "kie-server-state-info": {
          "controller": [
            "http://localhost:8080/decision-central/rest/controller"
          ],
          "config": {
            "config-items": [
              {
                "itemName": "org.kie.server.location",
                "itemValue": "http://localhost:8080/kie-server/services/rest/server",
                "itemType": "java.lang.String"
              },
              {
                "itemName": "org.kie.server.controller.user",
                "itemValue": "controllerUser",
                "itemType": "java.lang.String"
              },
              {
                "itemName": "org.kie.server.controller",
                "itemValue": "http://localhost:8080/decision-central/rest/controller",
                "itemType": "java.lang.String"
              }
            ]
          },
          "containers": [
            {
              "container-id": "employee-rostering",
              "release-id": {
                "group-id": "employeerostering",
                "artifact-id": "employeerostering",
                "version": "1.0.0-SNAPSHOT"
              },
              "resolved-release-id": null,
              "status": "STARTED",
              "scanner": {
                "status": "STOPPED",
                "poll-interval": null
              },
              "config-items": [
                {
                  "itemName": "KBase",
                  "itemValue": "",
                  "itemType": "BPM"
                },
                {
                  "itemName": "KSession",
                  "itemValue": "",
                  "itemType": "BPM"
                },
                {
                  "itemName": "MergeMode",
                  "itemValue": "MERGE_COLLECTIONS",
                  "itemType": "BPM"
                },
                {
                  "itemName": "RuntimeStrategy",
                  "itemValue": "SINGLETON",
                  "itemType": "BPM"
                }
              ],
              "messages": [],
              "container-alias": "employeerostering"
            }
          ]
        }
      }
    }
  ]
}</programlisting>
								</para>
							</formalpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>CreateContainerCommand</term>
						<listitem>
							<simpara>
								Creates a KIE container in the KIE Server.
							</simpara>
							<table colsep="1" frame="all" rowsep="1">
								<title>Command attributes</title>
								<tgroup cols="3">
									<colspec colname="col_1" colwidth="30*"></colspec>
									<colspec colname="col_2" colwidth="50*"></colspec>
									<colspec colname="col_3" colwidth="20*"></colspec>
									<thead>
										<row>
											<entry align="left" valign="top">Name</entry>
											<entry align="left" valign="top">Description</entry>
											<entry align="left" valign="top">Requirement</entry>
										</row>
									</thead>
									<tbody>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>container</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Map containing the <literal>container-id</literal>, <literal>release-id</literal> data (group ID, artifact ID, version), <literal>status</literal>, and any other components of the new KIE container
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Required
											</simpara>
											</entry>
										</row>
									</tbody>
								</tgroup>
							</table>
							<formalpara>
								<title>Example REST request body (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "commands" : [ {
    "create-container" : {
      "container" : {
        "status" : null,
        "messages" : [ ],
        "container-id" : "command-script-container",
        "release-id" : {
          "version" : "1.0",
          "group-id" : "com.redhat",
          "artifact-id" : "Project1"
        },
        "config-items" : [ ]
      }
    }
  } ]
}</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example Java client method</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">ServiceResponse&lt;KieContainerResource&gt; response = kieServicesClient.createContainer("command-script-container", resource);</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example server response (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "response": [
    {
      "type": "SUCCESS",
      "msg": "Container command-script-container successfully deployed with module com.redhat:Project1:1.0.",
      "result": {
        "kie-container": {
          "container-id": "command-script-container",
          "release-id": {
            "version" : "1.0",
            "group-id" : "com.redhat",
            "artifact-id" : "Project1"
          },
          "resolved-release-id": {
            "version" : "1.0",
            "group-id" : "com.redhat",
            "artifact-id" : "Project1"
          },
          "status": "STARTED",
          "scanner": {
            "status": "DISPOSED",
            "poll-interval": null
          },
          "config-items": [],
          "messages": [
            {
              "severity": "INFO",
              "timestamp": {
                "java.util.Date": 1538762455510
              },
              "content": [
                "Container command-script-container successfully created with module com.redhat:Project1:1.0."
              ]
            }
          ],
          "container-alias": null
        }
      }
    }
  ]
}</programlisting>
								</para>
							</formalpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>GetContainerInfoCommand</term>
						<listitem>
							<simpara>
								Returns information about a specified KIE container in KIE Server.
							</simpara>
							<table colsep="1" frame="all" rowsep="1">
								<title>Command attributes</title>
								<tgroup cols="3">
									<colspec colname="col_1" colwidth="30*"></colspec>
									<colspec colname="col_2" colwidth="50*"></colspec>
									<colspec colname="col_3" colwidth="20*"></colspec>
									<thead>
										<row>
											<entry align="left" valign="top">Name</entry>
											<entry align="left" valign="top">Description</entry>
											<entry align="left" valign="top">Requirement</entry>
										</row>
									</thead>
									<tbody>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>container-id</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												ID of the KIE container
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Required
											</simpara>
											</entry>
										</row>
									</tbody>
								</tgroup>
							</table>
							<formalpara>
								<title>Example REST request body (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "commands" : [ {
    "get-container-info" : {
      "container-id" : "command-script-container"
    }
  } ]
}</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example Java client method</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">ServiceResponse&lt;KieContainerResource&gt; response = kieServicesClient.getContainerInfo("command-script-container");</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example server response (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "response": [
    {
      "type": "SUCCESS",
      "msg": "Info for container command-script-container",
      "result": {
        "kie-container": {
          "container-id": "command-script-container",
          "release-id": {
            "group-id": "com.redhat",
            "artifact-id": "Project1",
            "version": "1.0"
          },
          "resolved-release-id": {
            "group-id": "com.redhat",
            "artifact-id": "Project1",
            "version": "1.0"
          },
          "status": "STARTED",
          "scanner": {
            "status": "DISPOSED",
            "poll-interval": null
          },
          "config-items": [

          ],
          "container-alias": null
        }
      }
    }
  ]
}</programlisting>
								</para>
							</formalpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>ListContainersCommand</term>
						<listitem>
							<simpara>
								Returns a list of KIE containers that have been created in the KIE Server.
							</simpara>
							<table colsep="1" frame="all" rowsep="1">
								<title>Command attributes</title>
								<tgroup cols="3">
									<colspec colname="col_1" colwidth="30*"></colspec>
									<colspec colname="col_2" colwidth="50*"></colspec>
									<colspec colname="col_3" colwidth="20*"></colspec>
									<thead>
										<row>
											<entry align="left" valign="top">Name</entry>
											<entry align="left" valign="top">Description</entry>
											<entry align="left" valign="top">Requirement</entry>
										</row>
									</thead>
									<tbody>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>kie-container-filter</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Optional map containing <literal>release-id-filter</literal>, <literal>container-status-filter</literal>, and any other KIE container properties by which you want to filter results
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Optional
											</simpara>
											</entry>
										</row>
									</tbody>
								</tgroup>
							</table>
							<formalpara>
								<title>Example REST request body (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "commands" : [ {
    "list-containers" : {
      "kie-container-filter" : {
        "release-id-filter" : { },
        "container-status-filter" : {
          "accepted-status" : ["FAILED"]
        }
      }
    }
  } ]
}</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example Java client method</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">KieContainerResourceFilter filter = new KieContainerResourceFilter.Builder()
        .status(KieContainerStatus.FAILED)
        .build();

KieContainerResourceList containersList = kieServicesClient.listContainers(filter);</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example server response (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "response": [
    {
      "type": "SUCCESS",
      "msg": "List of created containers",
      "result": {
        "kie-containers": {
          "kie-container": [
            {
              "container-id": "command-script-container",
              "release-id": {
                "group-id": "com.redhat",
                "artifact-id": "Project1",
                "version": "1.0"
              },
              "resolved-release-id": {
                "group-id": "com.redhat",
                "artifact-id": "Project1",
                "version": "1.0"
              },
              "status": "STARTED",
              "scanner": {
                "status": "STARTED",
                "poll-interval": 5000
              },
              "config-items": [
                {
                  "itemName": "RuntimeStrategy",
                  "itemValue": "SINGLETON",
                  "itemType": "java.lang.String"
                },
                {
                  "itemName": "MergeMode",
                  "itemValue": "MERGE_COLLECTIONS",
                  "itemType": "java.lang.String"
                },
                {
                  "itemName": "KBase",
                  "itemValue": "",
                  "itemType": "java.lang.String"
                },
                {
                  "itemName": "KSession",
                  "itemValue": "",
                  "itemType": "java.lang.String"
                }
              ],
              "messages": [
                {
                  "severity": "INFO",
                  "timestamp": {
                    "java.util.Date": 1538504619749
                  },
                  "content": [
                    "Container command-script-container successfully created with module com.redhat:Project1:1.0."
                  ]
                }
              ],
              "container-alias": null
            }
          ]
        }
      }
    }
  ]
}</programlisting>
								</para>
							</formalpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>CallContainerCommand</term>
						<listitem>
							<simpara>
								Calls a KIE container and executes one or more runtime commands. For information about Red Hat Decision Manager runtime commands, see <xref linkend="runtime-commands-con_kie-apis" />.
							</simpara>
							<table colsep="1" frame="all" rowsep="1">
								<title>Command attributes</title>
								<tgroup cols="3">
									<colspec colname="col_1" colwidth="30*"></colspec>
									<colspec colname="col_2" colwidth="50*"></colspec>
									<colspec colname="col_3" colwidth="20*"></colspec>
									<thead>
										<row>
											<entry align="left" valign="top">Name</entry>
											<entry align="left" valign="top">Description</entry>
											<entry align="left" valign="top">Requirement</entry>
										</row>
									</thead>
									<tbody>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>container-id</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												ID of the KIE container to be called
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Required
											</simpara>
											</entry>
										</row>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>payload</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												One or more commands in a <literal>BatchExecutionCommand</literal> wrapper to be executed on the KIE container
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Required
											</simpara>
											</entry>
										</row>
									</tbody>
								</tgroup>
							</table>
							<formalpara>
								<title>Example REST request body (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "commands" : [ {
    "call-container" : {
      "payload" : "{\n  \"lookup\" : \"defaultKieSession\",\n  \"commands\" : [ {\n    \"fire-all-rules\" : {\n      \"max\" : -1,\n      \"out-identifier\" : null\n    }\n  } ]\n}",
      "container-id" : "command-script-container"
    }
  } ]
}</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example Java client method</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">List&lt;Command&lt;?&gt;&gt; commands = new ArrayList&lt;Command&lt;?&gt;&gt;();
      BatchExecutionCommand batchExecution1 = commandsFactory.newBatchExecution(commands, "defaultKieSession");
      commands.add(commandsFactory.newFireAllRules());

      ServiceResponse&lt;ExecutionResults&gt; response1 = ruleClient.executeCommandsWithResults("command-script-container", batchExecution1);</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example server response (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "response": [
    {
      "type": "SUCCESS",
      "msg": "Container command-script-container successfully called.",
      "result": "{\n  \"results\" : [ ],\n  \"facts\" : [ ]\n}"
    }
  ]
}</programlisting>
								</para>
							</formalpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>DisposeContainerCommand</term>
						<listitem>
							<simpara>
								Disposes a specified KIE container in the KIE Server.
							</simpara>
							<table colsep="1" frame="all" rowsep="1">
								<title>Command attributes</title>
								<tgroup cols="3">
									<colspec colname="col_1" colwidth="30*"></colspec>
									<colspec colname="col_2" colwidth="50*"></colspec>
									<colspec colname="col_3" colwidth="20*"></colspec>
									<thead>
										<row>
											<entry align="left" valign="top">Name</entry>
											<entry align="left" valign="top">Description</entry>
											<entry align="left" valign="top">Requirement</entry>
										</row>
									</thead>
									<tbody>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>container-id</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												ID of the KIE container to be disposed
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Required
											</simpara>
											</entry>
										</row>
									</tbody>
								</tgroup>
							</table>
							<formalpara>
								<title>Example REST request body (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "commands" : [ {
    "dispose-container" : {
      "container-id" : "command-script-container"
    }
  } ]
}</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example Java client method</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">ServiceResponse&lt;Void&gt; response = kieServicesClient.disposeContainer("command-script-container");</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example server response (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "response": [
    {
      "type": "SUCCESS",
      "msg": "Container command-script-container successfully disposed.",
      "result": null
    }
  ]
}</programlisting>
								</para>
							</formalpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>GetScannerInfoCommand</term>
						<listitem>
							<simpara>
								Returns information about the KIE scanner used for automatic updates in a specified KIE container, if applicable.
							</simpara>
							<table colsep="1" frame="all" rowsep="1">
								<title>Command attributes</title>
								<tgroup cols="3">
									<colspec colname="col_1" colwidth="30*"></colspec>
									<colspec colname="col_2" colwidth="50*"></colspec>
									<colspec colname="col_3" colwidth="20*"></colspec>
									<thead>
										<row>
											<entry align="left" valign="top">Name</entry>
											<entry align="left" valign="top">Description</entry>
											<entry align="left" valign="top">Requirement</entry>
										</row>
									</thead>
									<tbody>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>container-id</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												ID of the KIE container where the KIE scanner is used
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Required
											</simpara>
											</entry>
										</row>
									</tbody>
								</tgroup>
							</table>
							<formalpara>
								<title>Example REST request body (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "commands" : [ {
    "get-scanner-info" : {
      "container-id" : "command-script-container"
    }
  } ]
}</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example Java client method</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">ServiceResponse&lt;KieScannerResource&gt; response = kieServicesClient.getScannerInfo("command-script-container");</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example server response (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "response": [
    {
      "type": "SUCCESS",
      "msg": "Scanner info successfully retrieved",
      "result": {
        "kie-scanner": {
          "status": "DISPOSED",
          "poll-interval": null
        }
      }
    }
  ]
}</programlisting>
								</para>
							</formalpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>UpdateScannerCommand</term>
						<listitem>
							<simpara>
								Starts or stops a KIE scanner that controls polling for updated KIE container deployments.
							</simpara>
							<note>
								<simpara>
									Avoid using a KIE scanner with business processes. Using a KIE scanner with processes can lead to unforeseen updates that can then cause errors in long-running processes when changes are not compatible with running process instances.
								</simpara>
							</note>
							<table colsep="1" frame="all" rowsep="1">
								<title>Command attributes</title>
								<tgroup cols="3">
									<colspec colname="col_1" colwidth="30*"></colspec>
									<colspec colname="col_2" colwidth="50*"></colspec>
									<colspec colname="col_3" colwidth="20*"></colspec>
									<thead>
										<row>
											<entry align="left" valign="top">Name</entry>
											<entry align="left" valign="top">Description</entry>
											<entry align="left" valign="top">Requirement</entry>
										</row>
									</thead>
									<tbody>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>container-id</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												ID of the KIE container where the KIE scanner is used
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Required
											</simpara>
											</entry>
										</row>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>status</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Status to be set on the KIE scanner (<literal>STARTED</literal>, <literal>STOPPED</literal>)
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Required
											</simpara>
											</entry>
										</row>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>poll-interval</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Permitted polling duration in milliseconds
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Required only when starting scanner
											</simpara>
											</entry>
										</row>
									</tbody>
								</tgroup>
							</table>
							<formalpara>
								<title>Example REST request body (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "commands" : [ {
    "update-scanner" : {
      "scanner" : {
        "status" : "STARTED",
        "poll-interval" : 10000
      },
      "container-id" : "command-script-container"
    }
  } ]
}</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example Java client method</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">KieScannerResource scannerResource = new KieScannerResource();
scannerResource.setPollInterval(10000);
scannerResource.setStatus(KieScannerStatus. STARTED);

ServiceResponse&lt;KieScannerResource&gt; response = kieServicesClient.updateScanner("command-script-container", scannerResource);</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example server response (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "response": [
    {
      "type": "SUCCESS",
      "msg": "Kie scanner successfully created.",
      "result": {
        "kie-scanner": {
          "status": "STARTED",
          "poll-interval": 10000
        }
      }
    }
  ]
}</programlisting>
								</para>
							</formalpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>UpdateReleaseIdCommand</term>
						<listitem>
							<simpara>
								Updates the release ID data (group ID, artifact ID, version) for a specified KIE container.
							</simpara>
							<table colsep="1" frame="all" rowsep="1">
								<title>Command attributes</title>
								<tgroup cols="3">
									<colspec colname="col_1" colwidth="30*"></colspec>
									<colspec colname="col_2" colwidth="50*"></colspec>
									<colspec colname="col_3" colwidth="20*"></colspec>
									<thead>
										<row>
											<entry align="left" valign="top">Name</entry>
											<entry align="left" valign="top">Description</entry>
											<entry align="left" valign="top">Requirement</entry>
										</row>
									</thead>
									<tbody>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>container-id</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												ID of the KIE container to be updated
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Required
											</simpara>
											</entry>
										</row>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>releaseId</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Updated GAV (group ID, artifact ID, version) data to be applied to the KIE container
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Required
											</simpara>
											</entry>
										</row>
									</tbody>
								</tgroup>
							</table>
							<formalpara>
								<title>Example REST request body (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "commands" : [ {
    "update-release-id" : {
      "releaseId" : {
        "version" : "1.1",
        "group-id" : "com.redhat",
        "artifact-id" : "Project1"
      },
      "container-id" : "command-script-container"
    }
  } ]
}</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example Java client method</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">ServiceResponse&lt;ReleaseId&gt; response = kieServicesClient.updateReleaseId("command-script-container", "com.redhat:Project1:1.1");</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example server response (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "response": [
    {
      "type": "SUCCESS",
      "msg": "Release id successfully updated",
      "result": {
        "release-id": {
          "group-id": "com.redhat",
          "artifact-id": "Project1",
          "version": "1.1"
        }
      }
    }
  ]
}</programlisting>
								</para>
							</formalpara>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</chapter>
		<chapter xml:id="runtime-commands-con_kie-apis">
			<title>Runtime commands in Red Hat Decision Manager</title>
			<simpara>
				Red Hat Decision Manager supports runtime commands that you can send to KIE Server for asset-related operations, such as executing all rules or inserting or retracting objects in a KIE session. The full list of supported runtime commands is located in the <literal>org.drools.core.command.runtime</literal> package in your Red Hat Decision Manager instance.
			</simpara>
			<simpara>
				In the KIE Server REST API, you use the global <literal>org.drools.core.command.runtime</literal> commands or the rule-specific <literal>org.drools.core.command.runtime.rule</literal> commands as the request body for <literal>POST</literal> requests to <literal>http://SERVER:PORT/kie-server/services/rest/server/containers/instances/{containerId}</literal>. For more information about using the KIE Server REST API, see <xref linkend="kie-server-rest-api-con_kie-apis" />.
			</simpara>
			<simpara>
				In the KIE Server Java client API, you can embed these commands in your Java application along with the relevant Java client. For example, for rule-related commands, you use the <literal>RuleServicesClient</literal> Java client with the embedded commands. For more information about using the KIE Server Java client API, see <xref linkend="kie-server-java-api-con_kie-apis" />.
			</simpara>
			<section xml:id="runtime-commands-samples-ref_kie-apis">
				<title>Sample runtime commands in Red Hat Decision Manager</title>
				<simpara>
					The following are sample runtime commands that you can use with the KIE Server REST API or Java client API for asset-related operations in KIE Server:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<literal>BatchExecutionCommand</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>InsertObjectCommand</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>RetractCommand</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>ModifyCommand</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>GetObjectCommand</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>GetObjectsCommand</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>InsertElementsCommand</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>FireAllRulesCommand</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>QueryCommand</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>SetGlobalCommand</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>GetGlobalCommand</literal>
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					For the full list of supported runtime commands, see the <literal>org.drools.core.command.runtime</literal> package in your Red Hat Decision Manager instance.
				</simpara>
				<simpara>
					Each command in this section includes a REST request body example (JSON) for the KIE Server REST API and an embedded Java command example for the KIE Server Java client API. The Java examples use an object <literal>org.drools.compiler.test.Person</literal> with the fields <literal>name</literal> (String) and <literal>age</literal> (Integer).
				</simpara>
				<variablelist>
					<varlistentry>
						<term>BatchExecutionCommand</term>
						<listitem>
							<simpara>
								Contains multiple commands to be executed together.
							</simpara>
							<table colsep="1" frame="all" rowsep="1">
								<title>Command attributes</title>
								<tgroup cols="3">
									<colspec colname="col_1" colwidth="30*"></colspec>
									<colspec colname="col_2" colwidth="50*"></colspec>
									<colspec colname="col_3" colwidth="20*"></colspec>
									<thead>
										<row>
											<entry align="left" valign="top">Name</entry>
											<entry align="left" valign="top">Description</entry>
											<entry align="left" valign="top">Requirement</entry>
										</row>
									</thead>
									<tbody>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>commands</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												List of commands to be executed.
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Required
											</simpara>
											</entry>
										</row>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>lookup</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Sets the KIE session ID on which the commands will be executed. For stateless KIE sessions, this attribute is required. For stateful KIE sessions, this attribute is optional and if not specified, the default KIE session is used.
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Required for stateless KIE session, optional for stateful KIE session
											</simpara>
											</entry>
										</row>
									</tbody>
								</tgroup>
							</table>
							<note>
								<simpara>
									KIE session IDs are in the <literal>kmodule.xml</literal> file of your Red Hat Decision Manager project. To view or add a KIE session ID in Business Central to use with the <literal>lookup</literal> command attribute, navigate to the relevant project in Business Central and go to project <emphasis role="strong">Settings</emphasis> → <emphasis role="strong">KIE bases</emphasis> → <emphasis role="strong">KIE sessions</emphasis>. If no KIE bases exist, click <emphasis role="strong">Add KIE base</emphasis> → <emphasis role="strong">KIE sessions</emphasis> to define the new KIE base and KIE sessions.
								</simpara>
							</note>
							<formalpara>
								<title>Example JSON request body</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "lookup": "ksession1",
  "commands": [ {
      "insert": {
        "object": {
          "org.drools.compiler.test.Person": {
            "name": "john",
            "age": 25
          }
        }
      }
    },
    {
      "fire-all-rules": {
        "max": 10,
        "out-identifier": "firedActivations"
      }
    }
  ]
}</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example Java command</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">BatchExecutionCommand command = new BatchExecutionCommand();
command.setLookup("ksession1");

InsertObjectCommand insertObjectCommand = new InsertObjectCommand(new Person("john", 25));
FireAllRulesCommand fireAllRulesCommand = new FireAllRulesCommand();

command.getCommands().add(insertObjectCommand);
command.getCommands().add(fireAllRulesCommand);

ksession.execute(command);</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example server response (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "response": [
    {
      "type": "SUCCESS",
      "msg": "Container command-script-container successfully called.",
      "result": {
        "execution-results": {
          "results": [
            {
              "value": 0,
              "key": "firedActivations"
            }
          ],
          "facts": []
        }
      }
    }
  ]
}</programlisting>
								</para>
							</formalpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>InsertObjectCommand</term>
						<listitem>
							<simpara>
								Inserts an object into the KIE session.
							</simpara>
							<table colsep="1" frame="all" rowsep="1">
								<title>Command attributes</title>
								<tgroup cols="3">
									<colspec colname="col_1" colwidth="30*"></colspec>
									<colspec colname="col_2" colwidth="50*"></colspec>
									<colspec colname="col_3" colwidth="20*"></colspec>
									<thead>
										<row>
											<entry align="left" valign="top">Name</entry>
											<entry align="left" valign="top">Description</entry>
											<entry align="left" valign="top">Requirement</entry>
										</row>
									</thead>
									<tbody>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>object</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												The object to be inserted
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Required
											</simpara>
											</entry>
										</row>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>out-identifier</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												ID of the <literal>FactHandle</literal> created from the object insertion and added to the execution results
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Optional
											</simpara>
											</entry>
										</row>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>return-object</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Boolean to determine whether the object must be returned in the execution results (default: <literal>true</literal>)
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Optional
											</simpara>
											</entry>
										</row>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>entry-point</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Entry point for the insertion
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Optional
											</simpara>
											</entry>
										</row>
									</tbody>
								</tgroup>
							</table>
							<formalpara>
								<title>Example JSON request body</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "commands": [ {
      "insert": {
        "entry-point": "my stream",
        "object": {
          "org.drools.compiler.test.Person": {
            "age": 25,
            "name": "john"
          }
        },
        "out-identifier": "john",
        "return-object": false
      }
    }
  ]
}</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example Java command</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">Command insertObjectCommand =
  CommandFactory.newInsert(new Person("john", 25), "john", false, null);

ksession.execute(insertObjectCommand);</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example server response (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "response": [
    {
      "type": "SUCCESS",
      "msg": "Container command-script-container successfully called.",
      "result": {
        "execution-results": {
          "results": [],
          "facts": [
            {
              "value": {
                "org.drools.core.common.DefaultFactHandle": {
                  "external-form": "0:4:436792766:-2127720265:4:DEFAULT:NON_TRAIT:java.util.LinkedHashMap"
                }
              },
              "key": "john"
            }
          ]
        }
      }
    }
  ]
}</programlisting>
								</para>
							</formalpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>RetractCommand</term>
						<listitem>
							<simpara>
								Retracts an object from the KIE session.
							</simpara>
							<table colsep="1" frame="all" rowsep="1">
								<title>Command attributes</title>
								<tgroup cols="3">
									<colspec colname="col_1" colwidth="30*"></colspec>
									<colspec colname="col_2" colwidth="50*"></colspec>
									<colspec colname="col_3" colwidth="20*"></colspec>
									<thead>
										<row>
											<entry align="left" valign="top">Name</entry>
											<entry align="left" valign="top">Description</entry>
											<entry align="left" valign="top">Requirement</entry>
										</row>
									</thead>
									<tbody>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>fact-handle</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												The <literal>FactHandle</literal> associated with the object to be retracted
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Required
											</simpara>
											</entry>
										</row>
									</tbody>
								</tgroup>
							</table>
							<formalpara>
								<title>Example JSON request body</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "commands": [ {
      "retract": {
        "fact-handle": "0:4:436792766:-2127720265:4:DEFAULT:NON_TRAIT:java.util.LinkedHashMap"
      }
    }
  ]
}</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example Java command: Use <literal>FactHandleFromString</literal></title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">RetractCommand retractCommand = new RetractCommand();
retractCommand.setFactHandleFromString("123:234:345:456:567");</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example Java command: Use <literal>FactHandle</literal> from inserted object</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">RetractCommand retractCommand = new RetractCommand(factHandle);</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example server response (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "response": [
    {
      "type": "SUCCESS",
      "msg": "Container employee-rostering successfully called.",
      "result": {
        "execution-results": {
          "results": [],
          "facts": []
        }
      }
    }
  ]
}</programlisting>
								</para>
							</formalpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>ModifyCommand</term>
						<listitem>
							<simpara>
								Modifies a previously inserted object in the KIE session.
							</simpara>
							<table colsep="1" frame="all" rowsep="1">
								<title>Command attributes</title>
								<tgroup cols="3">
									<colspec colname="col_1" colwidth="30*"></colspec>
									<colspec colname="col_2" colwidth="50*"></colspec>
									<colspec colname="col_3" colwidth="20*"></colspec>
									<thead>
										<row>
											<entry align="left" valign="top">Name</entry>
											<entry align="left" valign="top">Description</entry>
											<entry align="left" valign="top">Requirement</entry>
										</row>
									</thead>
									<tbody>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>fact-handle</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												The <literal>FactHandle</literal> associated with the object to be modified
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Required
											</simpara>
											</entry>
										</row>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>setters</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												List of setters for object modifications
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Required
											</simpara>
											</entry>
										</row>
									</tbody>
								</tgroup>
							</table>
							<formalpara>
								<title>Example JSON request body</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "commands": [ {
      "modify": {
        "fact-handle": "0:4:436792766:-2127720265:4:DEFAULT:NON_TRAIT:java.util.LinkedHashMap",
        "setters": {
          "accessor": "age",
          "value": 25
        }
      }
    }
  ]
}</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example Java command</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">ModifyCommand modifyCommand = new ModifyCommand(factHandle);

List&lt;Setter&gt; setters = new ArrayList&lt;Setter&gt;();
setters.add(new SetterImpl("age", "25"));

modifyCommand.setSetters(setters);</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example server response (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "response": [
    {
      "type": "SUCCESS",
      "msg": "Container employee-rostering successfully called.",
      "result": {
        "execution-results": {
          "results": [],
          "facts": []
        }
      }
    }
  ]
}</programlisting>
								</para>
							</formalpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>GetObjectCommand</term>
						<listitem>
							<simpara>
								Retrieves an object from a KIE session.
							</simpara>
							<table colsep="1" frame="all" rowsep="1">
								<title>Command attributes</title>
								<tgroup cols="3">
									<colspec colname="col_1" colwidth="30*"></colspec>
									<colspec colname="col_2" colwidth="50*"></colspec>
									<colspec colname="col_3" colwidth="20*"></colspec>
									<thead>
										<row>
											<entry align="left" valign="top">Name</entry>
											<entry align="left" valign="top">Description</entry>
											<entry align="left" valign="top">Requirement</entry>
										</row>
									</thead>
									<tbody>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>fact-handle</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												The <literal>FactHandle</literal> associated with the object to be retrieved
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Required
											</simpara>
											</entry>
										</row>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>out-identifier</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												ID of the <literal>FactHandle</literal> created from the object insertion and added to the execution results
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Optional
											</simpara>
											</entry>
										</row>
									</tbody>
								</tgroup>
							</table>
							<formalpara>
								<title>Example JSON request body</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "commands": [ {
      "get-object": {
        "fact-handle": "0:4:436792766:-2127720265:4:DEFAULT:NON_TRAIT:java.util.LinkedHashMap",
        "out-identifier": "john"
      }
    }
  ]
}</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example Java command</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">GetObjectCommand getObjectCommand = new GetObjectCommand();
getObjectCommand.setFactHandleFromString("123:234:345:456:567");
getObjectCommand.setOutIdentifier("john");</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example server response (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "response": [
    {
      "type": "SUCCESS",
      "msg": "Container command-script-container successfully called.",
      "result": {
        "execution-results": {
          "results": [
            {
              "value": null,
              "key": "john"
            }
          ],
          "facts": []
        }
      }
    }
  ]
}</programlisting>
								</para>
							</formalpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>GetObjectsCommand</term>
						<listitem>
							<simpara>
								Retrieves all objects from the KIE session as a collection.
							</simpara>
							<table colsep="1" frame="all" rowsep="1">
								<title>Command attributes</title>
								<tgroup cols="3">
									<colspec colname="col_1" colwidth="30*"></colspec>
									<colspec colname="col_2" colwidth="50*"></colspec>
									<colspec colname="col_3" colwidth="20*"></colspec>
									<thead>
										<row>
											<entry align="left" valign="top">Name</entry>
											<entry align="left" valign="top">Description</entry>
											<entry align="left" valign="top">Requirement</entry>
										</row>
									</thead>
									<tbody>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>object-filter</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Filter for the objects returned from the KIE session
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Optional
											</simpara>
											</entry>
										</row>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>out-identifier</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Identifier to be used in the execution results
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Optional
											</simpara>
											</entry>
										</row>
									</tbody>
								</tgroup>
							</table>
							<formalpara>
								<title>Example JSON request body</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "commands": [ {
      "get-objects": {
        "out-identifier": "objects"
      }
    }
  ]
}</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example Java command</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">GetObjectsCommand getObjectsCommand = new GetObjectsCommand();
getObjectsCommand.setOutIdentifier("objects");</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example server response (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "response": [
    {
      "type": "SUCCESS",
      "msg": "Container command-script-container successfully called.",
      "result": {
        "execution-results": {
          "results": [
            {
              "value": [
                {
                  "org.apache.xerces.dom.ElementNSImpl": "&lt;?xml version=\"1.0\" encoding=\"UTF-16\"?&gt;\n&lt;object xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"person\"&gt;&lt;age&gt;25&lt;/age&gt;&lt;name&gt;john&lt;/name&gt;\n &lt;\/object&gt;"
                },
                {
                  "org.drools.compiler.test.Person": {
                    "name": "john",
                    "age": 25
                  }
                }
              ],
              "key": "objects"
            }
          ],
          "facts": []
        }
      }
    }
  ]
}</programlisting>
								</para>
							</formalpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>InsertElementsCommand</term>
						<listitem>
							<simpara>
								Inserts a list of objects into the KIE session.
							</simpara>
							<table colsep="1" frame="all" rowsep="1">
								<title>Command attributes</title>
								<tgroup cols="3">
									<colspec colname="col_1" colwidth="30*"></colspec>
									<colspec colname="col_2" colwidth="50*"></colspec>
									<colspec colname="col_3" colwidth="20*"></colspec>
									<thead>
										<row>
											<entry align="left" valign="top">Name</entry>
											<entry align="left" valign="top">Description</entry>
											<entry align="left" valign="top">Requirement</entry>
										</row>
									</thead>
									<tbody>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>objects</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												The list of objects to be inserted into the KIE session
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Required
											</simpara>
											</entry>
										</row>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>out-identifier</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												ID of the <literal>FactHandle</literal> created from the object insertion and added to the execution results
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Optional
											</simpara>
											</entry>
										</row>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>return-object</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Boolean to determine whether the object must be returned in the execution results. Default value: <literal>true</literal>.
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Optional
											</simpara>
											</entry>
										</row>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>entry-point</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Entry point for the insertion
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Optional
											</simpara>
											</entry>
										</row>
									</tbody>
								</tgroup>
							</table>
							<formalpara>
								<title>Example JSON request body</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "commands": [ {
    "insert-elements": {
        "objects": [
            {
                "containedObject": {
                    "@class": "org.drools.compiler.test.Person",
                    "age": 25,
                    "name": "john"
                }
            },
            {
                "containedObject": {
                    "@class": "Person",
                    "age": 35,
                    "name": "sarah"
                }
            }
        ]
    }
  }
]
}</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example Java command</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">List&lt;Object&gt; objects = new ArrayList&lt;Object&gt;();
objects.add(new Person("john", 25));
objects.add(new Person("sarah", 35));

Command insertElementsCommand = CommandFactory.newInsertElements(objects);</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example server response (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "response": [
    {
      "type": "SUCCESS",
      "msg": "Container command-script-container successfully called.",
      "result": {
        "execution-results": {
          "results": [],
          "facts": [
            {
              "value": {
                "org.drools.core.common.DefaultFactHandle": {
                  "external-form": "0:4:436792766:-2127720265:4:DEFAULT:NON_TRAIT:java.util.LinkedHashMap"
                }
              },
              "key": "john"
            },
            {
              "value": {
                "org.drools.core.common.DefaultFactHandle": {
                  "external-form": "0:4:436792766:-2127720266:4:DEFAULT:NON_TRAIT:java.util.LinkedHashMap"
                }
              },
              "key": "sarah"
            }
          ]
        }
      }
    }
  ]
}</programlisting>
								</para>
							</formalpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>FireAllRulesCommand</term>
						<listitem>
							<simpara>
								Executes all rules in the KIE session.
							</simpara>
							<table colsep="1" frame="all" rowsep="1">
								<title>Command attributes</title>
								<tgroup cols="3">
									<colspec colname="col_1" colwidth="30*"></colspec>
									<colspec colname="col_2" colwidth="50*"></colspec>
									<colspec colname="col_3" colwidth="20*"></colspec>
									<thead>
										<row>
											<entry align="left" valign="top">Name</entry>
											<entry align="left" valign="top">Description</entry>
											<entry align="left" valign="top">Requirement</entry>
										</row>
									</thead>
									<tbody>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>max</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Maximum number of rules to be executed. The default is <literal>-1</literal> and does not put any restriction on execution.
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Optional
											</simpara>
											</entry>
										</row>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>out-identifier</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												ID to be used for retrieving the number of fired rules in execution results.
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Optional
											</simpara>
											</entry>
										</row>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>agenda-filter</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Agenda Filter to be used for rule execution.
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Optional
											</simpara>
											</entry>
										</row>
									</tbody>
								</tgroup>
							</table>
							<formalpara>
								<title>Example JSON request body</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "commands" : [ {
    "fire-all-rules": {
        "max": 10,
        "out-identifier": "firedActivations"
    }
  } ]
}</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example Java command</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">FireAllRulesCommand fireAllRulesCommand = new FireAllRulesCommand();
fireAllRulesCommand.setMax(10);
fireAllRulesCommand.setOutIdentifier("firedActivations");</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example server response (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "response": [
    {
      "type": "SUCCESS",
      "msg": "Container command-script-container successfully called.",
      "result": {
        "execution-results": {
          "results": [
            {
              "value": 0,
              "key": "firedActivations"
            }
          ],
          "facts": []
        }
      }
    }
  ]
}</programlisting>
								</para>
							</formalpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>QueryCommand</term>
						<listitem>
							<simpara>
								Executes a query defined in the KIE base.
							</simpara>
							<table colsep="1" frame="all" rowsep="1">
								<title>Command attributes</title>
								<tgroup cols="3">
									<colspec colname="col_1" colwidth="30*"></colspec>
									<colspec colname="col_2" colwidth="50*"></colspec>
									<colspec colname="col_3" colwidth="20*"></colspec>
									<thead>
										<row>
											<entry align="left" valign="top">Name</entry>
											<entry align="left" valign="top">Description</entry>
											<entry align="left" valign="top">Requirement</entry>
										</row>
									</thead>
									<tbody>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>name</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Query name.
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Required
											</simpara>
											</entry>
										</row>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>out-identifier</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												ID of the query results. The query results are added in the execution results with this identifier.
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Optional
											</simpara>
											</entry>
										</row>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>arguments</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												List of objects to be passed as a query parameter.
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Optional
											</simpara>
											</entry>
										</row>
									</tbody>
								</tgroup>
							</table>
							<formalpara>
								<title>Example JSON request body</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "commands": [
    {
      "query": {
        "name": "persons",
        "arguments": [],
        "out-identifier": "persons"
      }
    }
  ]
}</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example Java command</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">QueryCommand queryCommand = new QueryCommand();
queryCommand.setName("persons");
queryCommand.setOutIdentifier("persons");</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example server response (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "type": "SUCCESS",
  "msg": "Container stateful-session successfully called.",
  "result": {
    "execution-results": {
      "results": [
        {
          "value": {
            "org.drools.core.runtime.rule.impl.FlatQueryResults": {
              "idFactHandleMaps": {
                "type": "LIST",
                "componentType": null,
                "element": [
                  {
                    "type": "MAP",
                    "componentType": null,
                    "element": [
                      {
                        "value": {
                          "org.drools.core.common.DisconnectedFactHandle": {
                            "id": 1,
                            "identityHashCode": 1809949690,
                            "objectHashCode": 1809949690,
                            "recency": 1,
                            "object": {
                              "org.kie.server.testing.Person": {
                                "fullname": "John Doe",
                                "age": 47
                              }
                            },
                            "entryPointId": "DEFAULT",
                            "traitType": "NON_TRAIT",
                            "external-form": "0:1:1809949690:1809949690:1:DEFAULT:NON_TRAIT:org.kie.server.testing.Person"
                          }
                        },
                        "key": "$person"
                      }
                    ]
                  }
                ]
              },
              "idResultMaps": {
                "type": "LIST",
                "componentType": null,
                "element": [
                  {
                    "type": "MAP",
                    "componentType": null,
                    "element": [
                      {
                        "value": {
                          "org.kie.server.testing.Person": {
                            "fullname": "John Doe",
                            "age": 47
                          }
                        },
                        "key": "$person"
                      }
                    ]
                  }
                ]
              },
              "identifiers": {
                "type": "SET",
                "componentType": null,
                "element": [
                  "$person"
                ]
              }
            }
          },
          "key": "persons"
        }
      ],
      "facts": []
    }
  }
}</programlisting>
								</para>
							</formalpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>SetGlobalCommand</term>
						<listitem>
							<simpara>
								Sets an object to a global state.
							</simpara>
							<table colsep="1" frame="all" rowsep="1">
								<title>Command attributes</title>
								<tgroup cols="3">
									<colspec colname="col_1" colwidth="30*"></colspec>
									<colspec colname="col_2" colwidth="50*"></colspec>
									<colspec colname="col_3" colwidth="20*"></colspec>
									<thead>
										<row>
											<entry align="left" valign="top">Name</entry>
											<entry align="left" valign="top">Description</entry>
											<entry align="left" valign="top">Requirement</entry>
										</row>
									</thead>
									<tbody>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>identifier</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												ID of the global variable defined in the KIE base
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Required
											</simpara>
											</entry>
										</row>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>object</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Object to be set into the global variable
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Optional
											</simpara>
											</entry>
										</row>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>out</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Boolean to exclude the global variable you set from the execution results
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Optional
											</simpara>
											</entry>
										</row>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>out-identifier</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												ID of the global execution result
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Optional
											</simpara>
											</entry>
										</row>
									</tbody>
								</tgroup>
							</table>
							<formalpara>
								<title>Example JSON request body</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "commands": [
    {
      "set-global": {
        "identifier": "helper",
        "object": {
          "org.kie.server.testing.Person": {
            "fullname": "kyle",
            "age": 30
          }
        },
        "out-identifier": "output"
      }
    }
  ]
}</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example Java command</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">SetGlobalCommand setGlobalCommand = new SetGlobalCommand();
setGlobalCommand.setIdentifier("helper");
setGlobalCommand.setObject(new Person("kyle", 30));
setGlobalCommand.setOut(true);
setGlobalCommand.setOutIdentifier("output");</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example server response (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "type": "SUCCESS",
  "msg": "Container stateful-session successfully called.",
  "result": {
    "execution-results": {
      "results": [
        {
          "value": {
            "org.kie.server.testing.Person": {
              "fullname": "kyle",
              "age": 30
            }
          },
          "key": "output"
        }
      ],
      "facts": []
    }
  }
}</programlisting>
								</para>
							</formalpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>GetGlobalCommand</term>
						<listitem>
							<simpara>
								Retrieves a previously defined global object.
							</simpara>
							<table colsep="1" frame="all" rowsep="1">
								<title>Command attributes</title>
								<tgroup cols="3">
									<colspec colname="col_1" colwidth="30*"></colspec>
									<colspec colname="col_2" colwidth="50*"></colspec>
									<colspec colname="col_3" colwidth="20*"></colspec>
									<thead>
										<row>
											<entry align="left" valign="top">Name</entry>
											<entry align="left" valign="top">Description</entry>
											<entry align="left" valign="top">Requirement</entry>
										</row>
									</thead>
									<tbody>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>identifier</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												ID of the global variable defined in the KIE base
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Required
											</simpara>
											</entry>
										</row>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>out-identifier</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												ID to be used in the execution results
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Optional
											</simpara>
											</entry>
										</row>
									</tbody>
								</tgroup>
							</table>
							<formalpara>
								<title>Example JSON request body</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "commands": [ {
      "get-global": {
        "identifier": "helper",
        "out-identifier": "helperOutput"
      }
    }
  ]
}</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example Java command</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">GetGlobalCommand getGlobalCommand = new GetGlobalCommand();
getGlobalCommand.setIdentifier("helper");
getGlobalCommand.setOutIdentifier("helperOutput");</programlisting>
								</para>
							</formalpara>
							<formalpara>
								<title>Example server response (JSON)</title>
								<para>
									
<programlisting language="json" linenumbering="unnumbered">{
  "response": [
    {
      "type": "SUCCESS",
      "msg": "Container command-script-container successfully called.",
      "result": {
        "execution-results": {
          "results": [
            {
              "value": null,
              "key": "helperOutput"
            }
          ],
          "facts": []
        }
      }
    }
  ]
}</programlisting>
								</para>
							</formalpara>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</chapter>
		<chapter xml:id="controller-rest-api-con_kie-apis">
			<title>Decision Manager controller REST API for KIE Server templates and instances</title>
			<simpara>
				Red Hat Decision Manager provides a Decision Manager controller REST API that you can use to interact with your KIE Server templates (configurations), KIE Server instances (remote servers), and associated KIE containers (deployment units) in Red Hat Decision Manager without using the Business Central user interface. This API support enables you to maintain your Red Hat Decision Manager servers and resources more efficiently and optimize your integration and development with Red Hat Decision Manager.
			</simpara>
			<simpara>
				With the Decision Manager controller REST API, you can perform the following actions:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						Retrieve information about KIE Server templates, instances, and associated KIE containers
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Update, start, or stop KIE containers associated with KIE Server templates and instances
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Create, update, or delete KIE Server templates
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Create, update, or delete KIE Server instances
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				Requests to the Decision Manager controller REST API require the following components:
			</simpara>
			<variablelist>
				<varlistentry>
					<term>Authentication</term>
					<listitem>
						<simpara>
							The Decision Manager controller REST API requires HTTP Basic authentication or token-based authentication for the following user roles, depending on controller type:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>rest-all</literal> user role if you installed Business Central and you want to use the built-in Decision Manager controller
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>kie-server</literal> user role if you installed the headless Decision Manager controller separately from Business Central
								</simpara>
							</listitem>
						</itemizedlist>
						<simpara>
							To view configured user roles for your Red Hat Decision Manager distribution, navigate to <literal>~/$SERVER_HOME/standalone/configuration/application-roles.properties</literal> and <literal>~/application-users.properties</literal>.
						</simpara>
						<simpara>
							To add a user with the <literal>kie-server</literal> role or the <literal>rest-all</literal> role or both, navigate to <literal>~/$SERVER_HOME/bin</literal> and run the following command with the role or roles specified:
						</simpara>
						
<programlisting language="bash" linenumbering="unnumbered">$ ./add-user.sh -a --user &lt;USERNAME&gt; --password &lt;PASSWORD&gt; --role kie-server,rest-all</programlisting>
						<simpara>
							To configure the <literal>kie-server</literal> or <literal>rest-all</literal> user with Decision Manager controller access, navigate to <literal>~/$SERVER_HOME/standalone/configuration/standalone-full.xml</literal>, uncomment the <literal>org.kie.server</literal> properties (if applicable), and add the controller user login credentials and controller location (if needed):
						</simpara>
						
<programlisting language="xml" linenumbering="unnumbered">&lt;property name="org.kie.server.location" value="http://localhost:8080/kie-server/services/rest/server"/&gt;
&lt;property name="org.kie.server.controller" value="http://localhost:8080/decision-central/rest/controller"/&gt;
&lt;property name="org.kie.server.controller.user" value="baAdmin"/&gt;
&lt;property name="org.kie.server.controller.pwd" value="password@1"/&gt;
&lt;property name="org.kie.server.id" value="default-kieserver"/&gt;</programlisting>
						<simpara>
							For more information about user roles and Red Hat Decision Manager installation options, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/installing_and_configuring_red_hat_decision_manager#assembly-planning"><emphasis>Planning a Red Hat Decision Manager installation</emphasis></link>.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>HTTP headers</term>
					<listitem>
						<simpara>
							The Decision Manager controller REST API requires the following HTTP headers for API requests:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>Accept</literal>: Data format accepted by your requesting client:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<literal>application/json</literal> (JSON)
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<literal>application/xml</literal> (XML, for JAXB)
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
							<listitem>
								<simpara>
									<literal>Content-Type</literal>: Data format of your <literal>POST</literal> or <literal>PUT</literal> API request data:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<literal>application/json</literal> (JSON)
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<literal>application/xml</literal> (XML, for JAXB)
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
						</itemizedlist>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>HTTP methods</term>
					<listitem>
						<simpara>
							The Decision Manager controller REST API supports the following HTTP methods for API requests:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>GET</literal>: Retrieves specified information from a specified resource endpoint
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>POST</literal>: Updates a resource or resource instance
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>PUT</literal>: Creates a resource or resource instance
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>DELETE</literal>: Deletes a resource or resource instance
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Base URL</term>
					<listitem>
						<simpara>
							The base URL for Decision Manager controller REST API requests is <literal>http://SERVER:PORT/CONTROLLER/rest/</literal>, such as <literal>http://localhost:8080/decision-central/rest/</literal> if you are using the Decision Manager controller built in to Business Central.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Endpoints</term>
					<listitem>
						<simpara>
							Decision Manager controller REST API endpoints, such as <literal>/controller/management/servers/{serverTemplateId}</literal> for a specified KIE Server template, are the URIs that you append to the Decision Manager controller REST API base URL to access the corresponding server resource or type of server resource in Red Hat Decision Manager.
						</simpara>
						<formalpara>
							<title>Example request URL for <literal>/controller/management/servers/{serverTemplateId}</literal> endpoint</title>
							<para>
								<literal>http://localhost:8080/decision-central/rest/controller/management/servers/default-kieserver</literal>
							</para>
						</formalpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Request parameters and request data</term>
					<listitem>
						<simpara>
							Some Decision Manager controller REST API requests require specific parameters in the request URL path to identify or filter specific resources and to perform specific actions. You can append URL parameters to the endpoint in the format <literal>?&lt;PARAM&gt;=&lt;VALUE&gt;&amp;&lt;PARAM&gt;=&lt;VALUE&gt;</literal>.
						</simpara>
						<formalpara>
							<title>Example DELETE request URL with parameters</title>
							<para>
								<literal>http://localhost:8080/decision-central/rest/controller/server/new-kieserver-instance?location=http://localhost:8080/kie-server/services/rest/server</literal>
							</para>
						</formalpara>
						<simpara>
							HTTP <literal>POST</literal> and <literal>PUT</literal> requests may additionally require a request body or file with data to accompany the request.
						</simpara>
						<formalpara>
							<title>Example PUT request URL and JSON request body data</title>
							<para>
								<literal>http://localhost:8080/decision-central/rest/controller/management/servers/new-kieserver</literal>
							</para>
						</formalpara>
						
<programlisting language="json" linenumbering="unnumbered">{
  "server-id": "new-kieserver",
  "server-name": "new-kieserver",
  "container-specs": [],
  "server-config": {},
  "capabilities": [
    "RULE",
    "PROCESS",
    "PLANNING"
  ]
}</programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<section xml:id="controller-rest-api-requests-proc_kie-apis">
				<title>Sending requests with the Decision Manager controller REST API using a REST client or curl utility</title>
				<simpara>
					The Decision Manager controller REST API enables you to interact with your KIE Server templates (configurations), KIE Server instances (remote servers), and associated KIE containers (deployment units) in Red Hat Decision Manager without using the Business Central user interface. You can send Decision Manager controller REST API requests using any REST client or curl utility.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							KIE Server is installed and running.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							The Decision Manager controller or headless Decision Manager controller is installed and running.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							You have <literal>rest-all</literal> user role access to the Decision Manager controller if you installed Business Central, or <literal>kie-server</literal> user role access to the headless Decision Manager controller installed separately from Business Central.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Identify the relevant <link linkend="controller-rest-api-endpoints-ref_kie-apis">API endpoint</link> to which you want to send a request, such as <literal>[GET] /controller/management/servers</literal> to retrieve KIE Server templates from the Decision Manager controller.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In a REST client or curl utility, enter the following components for a <literal>GET</literal> request to <literal>controller/management/servers</literal>. Adjust any request details according to your use case.
						</simpara>
						<simpara>
							For REST client:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">Authentication</emphasis>: Enter the user name and password of the Decision Manager controller user with the <literal>rest-all</literal> role or the headless Decision Manager controller user with the <literal>kie-server</literal> role.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">HTTP Headers</emphasis>: Set the following header:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<literal>Accept</literal>: <literal>application/json</literal>
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">HTTP method</emphasis>: Set to <literal>GET</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">URL</emphasis>: Enter the Decision Manager controller REST API base URL and endpoint, such as <literal>http://localhost:8080/decision-central/rest/controller/management/servers</literal>.
								</simpara>
							</listitem>
						</itemizedlist>
						<simpara>
							For curl utility:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>-u</literal>: Enter the user name and password of the Decision Manager controller user with the <literal>rest-all</literal> role or the headless Decision Manager controller user with the <literal>kie-server</literal> role.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>-H</literal>: Set the following header:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<literal>accept</literal>: <literal>application/json</literal>
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
							<listitem>
								<simpara>
									<literal>-X</literal>: Set to <literal>GET</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">URL</emphasis>: Enter the Decision Manager controller REST API base URL and endpoint, such as <literal>http://localhost:8080/decision-central/rest/controller/management/servers</literal>.
								</simpara>
							</listitem>
						</itemizedlist>
						
<screen>curl -u 'baAdmin:password@1' -H "accept: application/json" -X GET "http://localhost:8080/decision-central/rest/controller/management/servers"</screen>
					</listitem>
					<listitem>
						<simpara>
							Execute the request and review the Decision Manager controller response.
						</simpara>
						<simpara>
							Example server response (JSON):
						</simpara>
						
<programlisting language="json" linenumbering="unnumbered">{
  "server-template": [
    {
      "server-id": "default-kieserver",
      "server-name": "default-kieserver",
      "container-specs": [
        {
          "container-id": "employeerostering_1.0.0-SNAPSHOT",
          "container-name": "employeerostering",
          "server-template-key": {
            "server-id": "default-kieserver",
            "server-name": "default-kieserver"
          },
          "release-id": {
            "group-id": "employeerostering",
            "artifact-id": "employeerostering",
            "version": "1.0.0-SNAPSHOT"
          },
          "configuration": {
            "RULE": {
              "org.kie.server.controller.api.model.spec.RuleConfig": {
                "pollInterval": null,
                "scannerStatus": "STOPPED"
              }
            },
            "PROCESS": {
              "org.kie.server.controller.api.model.spec.ProcessConfig": {
                "runtimeStrategy": "SINGLETON",
                "kbase": "",
                "ksession": "",
                "mergeMode": "MERGE_COLLECTIONS"
              }
            }
          },
          "status": "STARTED"
        },
        {
          "container-id": "mortgage-process_1.0.0-SNAPSHOT",
          "container-name": "mortgage-process",
          "server-template-key": {
            "server-id": "default-kieserver",
            "server-name": "default-kieserver"
          },
          "release-id": {
            "group-id": "mortgage-process",
            "artifact-id": "mortgage-process",
            "version": "1.0.0-SNAPSHOT"
          },
          "configuration": {
            "RULE": {
              "org.kie.server.controller.api.model.spec.RuleConfig": {
                "pollInterval": null,
                "scannerStatus": "STOPPED"
              }
            },
            "PROCESS": {
              "org.kie.server.controller.api.model.spec.ProcessConfig": {
                "runtimeStrategy": "PER_PROCESS_INSTANCE",
                "kbase": "",
                "ksession": "",
                "mergeMode": "MERGE_COLLECTIONS"
              }
            }
          },
          "status": "STARTED"
        }
      ],
      "server-config": {},
      "server-instances": [
        {
          "server-instance-id": "default-kieserver-instance@localhost:8080",
          "server-name": "default-kieserver-instance@localhost:8080",
          "server-template-id": "default-kieserver",
          "server-url": "http://localhost:8080/kie-server/services/rest/server"
        }
      ],
      "capabilities": [
        "RULE",
        "PROCESS",
        "PLANNING"
      ]
    }
  ]
}</programlisting>
					</listitem>
					<listitem>
						<simpara>
							In your REST client or curl utility, send another API request with the following components for a <literal>PUT</literal> request to <literal>/controller/management/servers/{serverTemplateId}</literal> to create a new KIE Server template. Adjust any request details according to your use case.
						</simpara>
						<simpara>
							For REST client:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">Authentication</emphasis>: Enter the user name and password of the Decision Manager controller user with the <literal>rest-all</literal> role or the headless Decision Manager controller user with the <literal>kie-server</literal> role.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">HTTP Headers</emphasis>: Set the following headers:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<literal>Accept</literal>: <literal>application/json</literal>
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<literal>Content-Type</literal>: <literal>application/json</literal>
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">HTTP method</emphasis>: Set to <literal>PUT</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">URL</emphasis>: Enter the Decision Manager controller REST API base URL and endpoint, such as <literal>http://localhost:8080/decision-central/rest/controller/management/servers/new-kieserver</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Request body</emphasis>: Add a JSON request body with the configurations for the new KIE Server template:
								</simpara>
							</listitem>
						</itemizedlist>
						
<programlisting language="json" linenumbering="unnumbered">{
  "server-id": "new-kieserver",
  "server-name": "new-kieserver",
  "container-specs": [],
  "server-config": {},
  "capabilities": [
    "RULE",
    "PROCESS",
    "PLANNING"
  ]
}</programlisting>
						<simpara>
							For curl utility:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>-u</literal>: Enter the user name and password of the Decision Manager controller user with the <literal>rest-all</literal> role or the headless Decision Manager controller user with the <literal>kie-server</literal> role.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>-H</literal>: Set the following headers:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<literal>accept</literal>: <literal>application/json</literal>
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<literal>content-type</literal>: <literal>application/json</literal>
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
							<listitem>
								<simpara>
									<literal>-X</literal>: Set to <literal>PUT</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">URL</emphasis>: Enter the Decision Manager controller REST API base URL and endpoint, such as <literal>http://localhost:8080/decision-central/rest/controller/management/servers/new-kieserver</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>-d</literal>: Add a JSON request body or file (<literal>@file.json</literal>) with the configurations for the new KIE Server template:
								</simpara>
							</listitem>
						</itemizedlist>
						
<screen>curl -u 'baAdmin:password@1' -H "accept: application/json" -H "content-type: application/json" -X PUT "http://localhost:8080/decision-central/rest/controller/management/servers/new-kieserver" -d "{ \"server-id\": \"new-kieserver\", \"server-name\": \"new-kieserver\", \"container-specs\": [], \"server-config\": {}, \"capabilities\": [ \"RULE\", \"PROCESS\", \"PLANNING\" ]}"</screen>
						
<screen>curl -u 'baAdmin:password@1' -H "accept: application/json" -H "content-type: application/json" -X PUT "http://localhost:8080/decision-central/rest/controller/management/servers/new-kieserver" -d @my-server-template-configs.json</screen>
					</listitem>
					<listitem>
						<simpara>
							Execute the request and confirm the successful Decision Manager controller response.
						</simpara>
						<simpara>
							If you encounter request errors, review the returned error code messages and adjust your request accordingly.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="controller-rest-api-requests-swagger-proc_kie-apis">
				<title>Sending requests with the Decision Manager controller REST API using the Swagger interface</title>
				<simpara>
					The Decision Manager controller REST API supports a Swagger web interface that you can use instead of a standalone REST client or curl utility to interact with your KIE Server templates, instances, and associated KIE containers in Red Hat Decision Manager without using the Business Central user interface.
				</simpara>
				<note>
					<simpara>
						By default, the Swagger web interface for the Decision Manager controller is enabled by the <literal>org.kie.workbench.swagger.disabled=false</literal> system property. To disable the Swagger web interface for the Decision Manager controller, set this system property to <literal>true</literal>.
					</simpara>
				</note>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							The Decision Manager controller is installed and running.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							You have <literal>rest-all</literal> user role access to the Decision Manager controller if you installed Business Central, or <literal>kie-server</literal> user role access to the headless Decision Manager controller installed separately from Business Central.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In a web browser, navigate to <literal>http://SERVER:PORT/CONTROLLER/docs</literal>, such as <literal>http://localhost:8080/decision-central/docs</literal>, and log in with the user name and password of the Decision Manager controller user with the <literal>rest-all</literal> role or the headless Decision Manager controller user with the <literal>kie-server</literal> role.
						</simpara>
						<note>
							<simpara>
								If you are using the Decision Manager controller built in to Business Central, the Swagger page associated with the Decision Manager controller is identified as the "Business Central API" for Business Central REST services. If you are using the headless Decision Manager controller without Business Central, the Swagger page associated with the headless Decision Manager controller is identified as the "Controller API". In both cases, the Decision Manager controller REST API endpoints are the same.
							</simpara>
						</note>
					</listitem>
					<listitem>
						<simpara>
							In the Swagger page, select the relevant API endpoint to which you want to send a request, such as <emphasis role="strong">Controller :: KIE Server templates and KIE containers</emphasis> → <emphasis role="strong">[GET] /controller/management/servers</emphasis> to retrieve KIE Server templates from the Decision Manager controller.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Try it out</emphasis> and provide any optional parameters by which you want to filter results, if applicable.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Response content type</emphasis> drop-down menu, select the desired format of the server response, such as <emphasis role="strong">application/json</emphasis> for JSON format.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Execute</emphasis> and review the KIE Server response.
						</simpara>
						<simpara>
							Example server response (JSON):
						</simpara>
						
<programlisting language="json" linenumbering="unnumbered">{
  "server-template": [
    {
      "server-id": "default-kieserver",
      "server-name": "default-kieserver",
      "container-specs": [
        {
          "container-id": "employeerostering_1.0.0-SNAPSHOT",
          "container-name": "employeerostering",
          "server-template-key": {
            "server-id": "default-kieserver",
            "server-name": "default-kieserver"
          },
          "release-id": {
            "group-id": "employeerostering",
            "artifact-id": "employeerostering",
            "version": "1.0.0-SNAPSHOT"
          },
          "configuration": {
            "RULE": {
              "org.kie.server.controller.api.model.spec.RuleConfig": {
                "pollInterval": null,
                "scannerStatus": "STOPPED"
              }
            },
            "PROCESS": {
              "org.kie.server.controller.api.model.spec.ProcessConfig": {
                "runtimeStrategy": "SINGLETON",
                "kbase": "",
                "ksession": "",
                "mergeMode": "MERGE_COLLECTIONS"
              }
            }
          },
          "status": "STARTED"
        },
        {
          "container-id": "mortgage-process_1.0.0-SNAPSHOT",
          "container-name": "mortgage-process",
          "server-template-key": {
            "server-id": "default-kieserver",
            "server-name": "default-kieserver"
          },
          "release-id": {
            "group-id": "mortgage-process",
            "artifact-id": "mortgage-process",
            "version": "1.0.0-SNAPSHOT"
          },
          "configuration": {
            "RULE": {
              "org.kie.server.controller.api.model.spec.RuleConfig": {
                "pollInterval": null,
                "scannerStatus": "STOPPED"
              }
            },
            "PROCESS": {
              "org.kie.server.controller.api.model.spec.ProcessConfig": {
                "runtimeStrategy": "PER_PROCESS_INSTANCE",
                "kbase": "",
                "ksession": "",
                "mergeMode": "MERGE_COLLECTIONS"
              }
            }
          },
          "status": "STARTED"
        }
      ],
      "server-config": {},
      "server-instances": [
        {
          "server-instance-id": "default-kieserver-instance@localhost:8080",
          "server-name": "default-kieserver-instance@localhost:8080",
          "server-template-id": "default-kieserver",
          "server-url": "http://localhost:8080/kie-server/services/rest/server"
        }
      ],
      "capabilities": [
        "RULE",
        "PROCESS",
        "PLANNING"
      ]
    }
  ]
}</programlisting>
					</listitem>
					<listitem>
						<simpara>
							In the Swagger page, navigate to the <emphasis role="strong">Controller :: KIE Server templates and KIE containers</emphasis> → <emphasis role="strong">[GET] /controller/management/servers/{serverTemplateId}</emphasis> endpoint to send another request to create a new KIE Server template. Adjust any request details according to your use case.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Try it out</emphasis> and enter the following components for the request:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">serverTemplateId</emphasis>: Enter the ID of the new KIE Server template, such as <literal>new-kieserver</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">body</emphasis>: Set the <emphasis role="strong">Parameter content type</emphasis> to the desired request body format, such as <emphasis role="strong">application/json</emphasis> for JSON format, and add a request body with the configurations for the new KIE Server template:
								</simpara>
							</listitem>
						</itemizedlist>
						
<programlisting language="json" linenumbering="unnumbered">{
  "server-id": "new-kieserver",
  "server-name": "new-kieserver",
  "container-specs": [],
  "server-config": {},
  "capabilities": [
    "RULE",
    "PROCESS",
    "PLANNING"
  ]
}</programlisting>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Response content type</emphasis> drop-down menu, select the desired format of the server response, such as <emphasis role="strong">application/json</emphasis> for JSON format.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Execute</emphasis> and confirm the successful Decision Manager controller response.
						</simpara>
						<simpara>
							If you encounter request errors, review the returned error code messages and adjust your request accordingly.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="controller-rest-api-endpoints-ref_kie-apis">
				<title>Supported Decision Manager controller REST API endpoints</title>
				<simpara>
					The Decision Manager controller REST API provides endpoints for interacting with KIE Server templates (configurations), KIE Server instances (remote servers), and associated KIE containers (deployment units). The Decision Manager controller REST API base URL is <literal>http://SERVER:PORT/CONTROLLER/rest/</literal>. All requests require HTTP Basic authentication or token-based authentication for the <literal>rest-all</literal> user role if you installed Business Central and you want to use the built-in Decision Manager controller, or the <literal>kie-server</literal> user role if you installed the headless Decision Manager controller separately from Business Central.
				</simpara>
				<simpara>
					For the full list of Decision Manager controller REST API endpoints and descriptions, use one of the following resources:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<link xlink:href="http://jbpm.org/learn/documentation.html">Controller REST API</link> on the jBPM Documentation page (static)
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Swagger UI for the Decision Manager controller REST API at <literal>http://SERVER:PORT/CONTROLLER/docs</literal> (dynamic, requires running Decision Manager controller)
						</simpara>
						<note>
							<simpara>
								By default, the Swagger web interface for the Decision Manager controller is enabled by the <literal>org.kie.workbench.swagger.disabled=false</literal> system property. To disable the Swagger web interface for the Decision Manager controller, set this system property to <literal>true</literal>.
							</simpara>
							<simpara>
								If you are using the Decision Manager controller built in to Business Central, the Swagger page associated with the Decision Manager controller is identified as the "Business Central API" for Business Central REST services. If you are using the headless Decision Manager controller without Business Central, the Swagger page associated with the headless Decision Manager controller is identified as the "Controller API". In both cases, the Decision Manager controller REST API endpoints are the same.
							</simpara>
						</note>
					</listitem>
				</itemizedlist>
			</section>
		</chapter>
		<chapter xml:id="controller-java-api-con_kie-apis">
			<title>Decision Manager controller Java client API for KIE Server templates and instances</title>
			<simpara>
				Red Hat Decision Manager provides a Decision Manager controller Java client API that enables you to connect to the Decision Manager controller using REST or WebSocket protocol from your Java client application. You can use the Decision Manager controller Java client API as an alternative to the Decision Manager controller REST API to interact with your KIE Server templates (configurations), KIE Server instances (remote servers), and associated KIE containers (deployment units) in Red Hat Decision Manager without using the Business Central user interface. This API support enables you to maintain your Red Hat Decision Manager servers and resources more efficiently and optimize your integration and development with Red Hat Decision Manager.
			</simpara>
			<simpara>
				With the Decision Manager controller Java client API, you can perform the following actions also supported by the Decision Manager controller REST API:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						Retrieve information about KIE Server templates, instances, and associated KIE containers
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Update, start, or stop KIE containers associated with KIE Server templates and instances
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Create, update, or delete KIE Server templates
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Create, update, or delete KIE Server instances
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				Decision Manager controller Java client API requests require the following components:
			</simpara>
			<variablelist>
				<varlistentry>
					<term>Authentication</term>
					<listitem>
						<simpara>
							The Decision Manager controller Java client API requires HTTP Basic authentication for the following user roles, depending on controller type:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>rest-all</literal> user role if you installed Business Central and you want to use the built-in Decision Manager controller
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>kie-server</literal> user role if you installed the headless Decision Manager controller separately from Business Central
								</simpara>
							</listitem>
						</itemizedlist>
						<simpara>
							To view configured user roles for your Red Hat Decision Manager distribution, navigate to <literal>~/$SERVER_HOME/standalone/configuration/application-roles.properties</literal> and <literal>~/application-users.properties</literal>.
						</simpara>
						<simpara>
							To add a user with the <literal>kie-server</literal> role or the <literal>rest-all</literal> role or both (assuming a Keystore is already set), navigate to <literal>~/$SERVER_HOME/bin</literal> and run the following command with the role or roles specified:
						</simpara>
						
<programlisting language="bash" linenumbering="unnumbered">$ ./add-user.sh -a --user &lt;USERNAME&gt; --password &lt;PASSWORD&gt; --role kie-server,rest-all</programlisting>
						<simpara>
							In case the Keystore is not set, then execute the following command to create a Keystore:
						</simpara>
						
<programlisting language="bash" linenumbering="unnumbered">$ keytool -importpassword -keystore $SERVER_HOME/standalone/configuration/kie_keystore.jceks -keypass &lt;SECRETKEYPASSWORD&gt; -alias kieserver -storepass &lt;SECRETSTOREPASSWORD&gt; -storetype JCEKS</programlisting>
						<simpara>
							Also, add the following properties to <literal>~/$SERVER_HOME/standalone/configuration/standalone-full.xml</literal>:
						</simpara>
						
<programlisting language="xml" linenumbering="unnumbered">    &lt;property name="kie.keystore.keyStoreURL" value="file:///data/jboss/rhpam780/standalone/configuration/kie_keystore.jceks"/&gt;
    &lt;property name="kie.keystore.keyStorePwd" value="&lt;SECRETSTOREPASSWORD&gt;"/&gt;
    &lt;property name="kie.keystore.key.server.alias" value="kieserver"/&gt;
    &lt;property name="kie.keystore.key.server.pwd" value="&lt;SECRETKEYPASSWORD&gt;"/&gt;
    &lt;property name="kie.keystore.key.ctrl.alias" value="kieserver"/&gt;
    &lt;property name="kie.keystore.key.ctrl.pwd" value="&lt;SECRETKEYPASSWORD&gt;"/&gt;</programlisting>
						<simpara>
							To configure the <literal>kie-server</literal> or <literal>rest-all</literal> user with Decision Manager controller access, navigate to <literal>~/$SERVER_HOME/standalone/configuration/standalone-full.xml</literal>, uncomment the <literal>org.kie.server</literal> properties (if applicable), and add the controller user login credentials and controller location (if needed):
						</simpara>
						
<programlisting language="xml" linenumbering="unnumbered">&lt;property name="org.kie.server.location" value="http://localhost:8080/kie-server/services/rest/server"/&gt;
&lt;property name="org.kie.server.controller" value="http://localhost:8080/decision-central/rest/controller"/&gt;
&lt;property name="org.kie.server.controller.user" value="&lt;USERNAME&gt;"/&gt;
&lt;property name="org.kie.server.id" value="default-kieserver"/&gt;</programlisting>
						<simpara>
							For more information about user roles and Red Hat Decision Manager installation options, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/installing_and_configuring_red_hat_decision_manager#assembly-planning"><emphasis>Planning a Red Hat Decision Manager installation</emphasis></link>.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Project dependencies</term>
					<listitem>
						<simpara>
							The Decision Manager controller Java client API requires the following dependencies on the relevant classpath of your Java project:
						</simpara>
						
<programlisting language="xml" linenumbering="unnumbered">&lt;!-- For remote execution on controller --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.kie.server&lt;/groupId&gt;
  &lt;artifactId&gt;kie-server-controller-client&lt;/artifactId&gt;
  &lt;version&gt;${rhdm.version}&lt;/version&gt;
&lt;/dependency&gt;

&lt;!-- For REST client --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.jboss.resteasy&lt;/groupId&gt;
  &lt;artifactId&gt;resteasy-client&lt;/artifactId&gt;
  &lt;version&gt;${resteasy.version}&lt;/version&gt;
&lt;/dependency&gt;

&lt;!-- For WebSocket client --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;io.undertow&lt;/groupId&gt;
  &lt;artifactId&gt;undertow-websockets-jsr&lt;/artifactId&gt;
  &lt;version&gt;${undertow.version}&lt;/version&gt;
&lt;/dependency&gt;

&lt;!-- For debug logging (optional) --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;
  &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;
  &lt;version&gt;${logback.version}&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
						<simpara>
							The <literal>&lt;version&gt;</literal> for Red Hat Decision Manager dependencies is the Maven artifact version for Red Hat Decision Manager currently used in your project (for example, 7.48.0.Final-redhat-00002).
						</simpara>
						<note>
							<simpara>
								Instead of specifying a Red Hat Decision Manager <literal>&lt;version&gt;</literal> for individual dependencies, consider adding the Red Hat Business Automation bill of materials (BOM) dependency to your project <literal>pom.xml</literal> file. The Red Hat Business Automation BOM applies to both Red Hat Decision Manager and Red Hat Process Automation Manager. When you add the BOM files, the correct versions of transitive dependencies from the provided Maven repositories are included in the project.
							</simpara>
							<simpara>
								Example BOM dependency:
							</simpara>
							
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
  &lt;groupId&gt;com.redhat.ba&lt;/groupId&gt;
  &lt;artifactId&gt;ba-platform-bom&lt;/artifactId&gt;
  &lt;version&gt;7.10.0.redhat-00002&lt;/version&gt;
  &lt;scope&gt;import&lt;/scope&gt;
  &lt;type&gt;pom&lt;/type&gt;
&lt;/dependency&gt;</programlisting>
							<simpara>
								For more information about the Red Hat Business Automation BOM, see <link xlink:href="https://access.redhat.com/solutions/3363991">What is the mapping between RHDM product and maven library version?</link>.
							</simpara>
						</note>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Client request configuration</term>
					<listitem>
						<simpara>
							All Java client requests with the Decision Manager controller Java client API must define at least the following controller communication components:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									Credentials of the <literal>rest-all</literal> user if you installed Business Central, or the <literal>kie-server</literal> user if you installed the headless Decision Manager controller separately from Business Central
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Decision Manager controller location for REST or WebSocket protocol:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											Example REST URL: <literal>http://localhost:8080/decision-central/rest/controller</literal>
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											Example WebSocket URL: <literal>ws://localhost:8080/headless-controller/websocket/controller</literal>
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
							<listitem>
								<simpara>
									Marshalling format for API requests and responses (JSON or JAXB)
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									A <literal>KieServerControllerClient</literal> object, which serves as the entry point for starting the server communication using the Java client API
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									A <literal>KieServerControllerClientFactory</literal> defining REST or WebSocket protocol and user access
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									The Decision Manager controller client service or services used, such as <literal>listServerTemplates</literal>, <literal>getServerTemplate</literal>, or <literal>getServerInstances</literal>
								</simpara>
							</listitem>
						</itemizedlist>
						<simpara>
							The following are examples of REST and WebSocket client configurations with these components:
						</simpara>
						<formalpara>
							<title>Client configuration example with REST</title>
							<para>
								
<programlisting language="java" linenumbering="unnumbered">import org.kie.server.api.marshalling.MarshallingFormat;
import org.kie.server.controller.api.model.spec.ServerTemplateList;
import org.kie.server.controller.client.KieServerControllerClient;
import org.kie.server.controller.client.KieServerControllerClientFactory;

public class ListServerTemplatesExample {

    private static final String URL = "http://localhost:8080/decision-central/rest/controller";
    private static final String USER = "baAdmin";
    private static final String PASSWORD = "password@1";

    private static final MarshallingFormat FORMAT = MarshallingFormat.JSON;

    public static void main(String[] args) {
        KieServerControllerClient client = KieServerControllerClientFactory.newRestClient(URL,
                                                                                          USER,
                                                                                          PASSWORD);

        final ServerTemplateList serverTemplateList = client.listServerTemplates();
        System.out.println(String.format("Found %s server template(s) at controller url: %s",
                                         serverTemplateList.getServerTemplates().length,
                                         URL));
    }
}</programlisting>
							</para>
						</formalpara>
						<formalpara>
							<title>Client configuration example with WebSocket</title>
							<para>
								
<programlisting language="java" linenumbering="unnumbered">import org.kie.server.api.marshalling.MarshallingFormat;
import org.kie.server.controller.api.model.spec.ServerTemplateList;
import org.kie.server.controller.client.KieServerControllerClient;
import org.kie.server.controller.client.KieServerControllerClientFactory;

public class ListServerTemplatesExample {

    private static final String URL = "ws://localhost:8080/my-controller/websocket/controller";
    private static final String USER = "baAdmin";
    private static final String PASSWORD = "password@1";

    private static final MarshallingFormat FORMAT = MarshallingFormat.JSON;

    public static void main(String[] args) {
        KieServerControllerClient client = KieServerControllerClientFactory.newWebSocketClient(URL,
                                                                                               USER,
                                                                                               PASSWORD);

        final ServerTemplateList serverTemplateList = client.listServerTemplates();
        System.out.println(String.format("Found %s server template(s) at controller url: %s",
                                         serverTemplateList.getServerTemplates().length,
                                         URL));
    }
}</programlisting>
							</para>
						</formalpara>
					</listitem>
				</varlistentry>
			</variablelist>
			<section xml:id="controller-java-api-requests-proc_kie-apis">
				<title>Sending requests with the Decision Manager controller Java client API</title>
				<simpara>
					The Decision Manager controller Java client API enables you to connect to the Decision Manager controller using REST or WebSocket protocols from your Java client application. You can use the Decision Manager controller Java client API as an alternative to the Decision Manager controller REST API to interact with your KIE Server templates (configurations), KIE Server instances (remote servers), and associated KIE containers (deployment units) in Red Hat Decision Manager without using the Business Central user interface.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							KIE Server is installed and running.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							The Decision Manager controller or headless Decision Manager controller is installed and running.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							You have <literal>rest-all</literal> user role access to the Decision Manager controller if you installed Business Central, or <literal>kie-server</literal> user role access to the headless Decision Manager controller installed separately from Business Central.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							You have a Java project with Red Hat Decision Manager resources.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In your client application, ensure that the following dependencies have been added to the relevant classpath of your Java project:
						</simpara>
						
<programlisting language="xml" linenumbering="unnumbered">&lt;!-- For remote execution on controller --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.kie.server&lt;/groupId&gt;
  &lt;artifactId&gt;kie-server-controller-client&lt;/artifactId&gt;
  &lt;version&gt;${rhdm.version}&lt;/version&gt;
&lt;/dependency&gt;

&lt;!-- For REST client --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.jboss.resteasy&lt;/groupId&gt;
  &lt;artifactId&gt;resteasy-client&lt;/artifactId&gt;
  &lt;version&gt;${resteasy.version}&lt;/version&gt;
&lt;/dependency&gt;

&lt;!-- For WebSocket client --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;io.undertow&lt;/groupId&gt;
  &lt;artifactId&gt;undertow-websockets-jsr&lt;/artifactId&gt;
  &lt;version&gt;${undertow.version}&lt;/version&gt;
&lt;/dependency&gt;

&lt;!-- For debug logging (optional) --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;
  &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;
  &lt;version&gt;${logback.version}&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
					</listitem>
					<listitem>
						<simpara>
							Download the <emphasis role="strong">Red Hat Decision Manager 7.10.0 Source Distribution</emphasis> from the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html">Red Hat Customer Portal</link> and navigate to <literal>~/rhdm-7.10.0-sources/src/droolsjbpm-integration-$VERSION/kie-server-parent/kie-server-controller/kie-server-controller-client/src/main/java/org/kie/server/controller/client</literal> to access the Decision Manager controller Java clients.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <literal>~/kie/server/controller/client</literal> folder , identify the relevant Java client implementation for the request you want to send, such as the <literal>RestKieServerControllerClient</literal> implementation to access client services for KIE Server templates and KIE containers in REST protocol.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In your client application, create a <literal>.java</literal> class for the API request. The class must contain the necessary imports, the Decision Manager controller location and user credentials, a <literal>KieServerControllerClient</literal> object, and the client method to execute, such as <literal>createServerTemplate</literal> and <literal>createContainer</literal> from the <literal>RestKieServerControllerClient</literal> implementation. Adjust any configuration details according to your use case.
						</simpara>
						<formalpara>
							<title>Creating and interacting with a KIE Server template and KIE containers</title>
							<para>
								
<programlisting language="java" linenumbering="unnumbered">import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import org.kie.server.api.marshalling.MarshallingFormat;
import org.kie.server.api.model.KieContainerStatus;
import org.kie.server.api.model.KieScannerStatus;
import org.kie.server.api.model.ReleaseId;
import org.kie.server.controller.api.model.spec.*;
import org.kie.server.controller.client.KieServerControllerClient;
import org.kie.server.controller.client.KieServerControllerClientFactory;

public class RestTemplateContainerExample {

  private static final String URL = "http://localhost:8080/decision-central/rest/controller";
  private static final String USER = "baAdmin";
  private static final String PASSWORD = "password@1";

    private static KieServerControllerClient client;

    public static void main(String[] args) {
        KieServerControllerClient client = KieServerControllerClientFactory.newRestClient(URL,
                                                                                          USER,
                                                                                          PASSWORD,
                                                                                          MarshallingFormat.JSON);
        // Create server template and KIE container, start and stop KIE container, and delete server template
        ServerTemplate serverTemplate = createServerTemplate();
        ContainerSpec container = createContainer(serverTemplate);
        client.startContainer(container);
        client.stopContainer(container);
        client.deleteServerTemplate(serverTemplate.getId());
    }

    // Re-create and configure server template
    protected static ServerTemplate createServerTemplate() {
        ServerTemplate serverTemplate = new ServerTemplate();
        serverTemplate.setId("example-client-id");
        serverTemplate.setName("example-client-name");
        serverTemplate.setCapabilities(Arrays.asList(Capability.PROCESS.name(),
                                                     Capability.RULE.name(),
                                                     Capability.PLANNING.name()));

        client.saveServerTemplate(serverTemplate);

        return serverTemplate;
    }

    // Re-create and configure KIE containers
    protected static ContainerSpec createContainer(ServerTemplate serverTemplate){
        Map&lt;Capability, ContainerConfig&gt; containerConfigMap = new HashMap();

        ProcessConfig processConfig = new ProcessConfig("PER_PROCESS_INSTANCE", "kieBase", "kieSession", "MERGE_COLLECTION");
        containerConfigMap.put(Capability.PROCESS, processConfig);

        RuleConfig ruleConfig = new RuleConfig(500l, KieScannerStatus.SCANNING);
        containerConfigMap.put(Capability.RULE, ruleConfig);

        ReleaseId releaseId = new ReleaseId("org.kie.server.testing", "stateless-session-kjar", "1.0.0-SNAPSHOT");

        ContainerSpec containerSpec = new ContainerSpec("example-container-id", "example-client-name", serverTemplate, releaseId, KieContainerStatus.STOPPED, containerConfigMap);
        client.saveContainerSpec(serverTemplate.getId(), containerSpec);

        return containerSpec;
    }
}</programlisting>
							</para>
						</formalpara>
					</listitem>
					<listitem>
						<simpara>
							Run the configured <literal>.java</literal> class from your project directory to execute the request, and review the Decision Manager controller response.
						</simpara>
						<simpara>
							If you enabled debug logging, KIE Server responds with a detailed response according to your configured marshalling format, such as JSON. If you encounter request errors, review the returned error code messages and adjust your Java configurations accordingly.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="controller-java-clients-ref_kie-apis">
				<title>Supported Decision Manager controller Java clients</title>
				<simpara>
					The following are some of the Java client services available in the <literal>org.kie.server.controller.client</literal> package of your Red Hat Decision Manager distribution. You can use these services to interact with related resources in the Decision Manager controller similarly to the Decision Manager controller REST API.
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<literal>KieServerControllerClient</literal>: Used as the entry point for communicating with the Decision Manager controller
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>RestKieServerControllerClient</literal>: Implementation used to interact with KIE Server templates and KIE containers in REST protocol (found in <literal>~/org/kie/server/controller/client/rest</literal>)
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>WebSocketKieServerControllerClient</literal>: Implementation used to interact with KIE Server templates and KIE containers in WebSocket protocol (found in <literal>~/org/kie/server/controller/client/websocket</literal>)
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					For the full list of available Decision Manager controller Java clients, download the <emphasis role="strong">Red Hat Decision Manager 7.10.0 Source Distribution</emphasis> from the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html">Red Hat Customer Portal</link> and navigate to <literal>~/rhdm-7.10.0-sources/src/droolsjbpm-integration-$VERSION/kie-server-parent/kie-server-controller/kie-server-controller-client/src/main/java/org/kie/server/controller/client</literal>.
				</simpara>
			</section>
			<section xml:id="controller-java-api-examples-ref_kie-apis">
				<title>Example requests with the Decision Manager controller Java client API</title>
				<simpara>
					The following are examples of Decision Manager controller Java client API requests for basic interactions with the Decision Manager controller. For the full list of available Decision Manager controller Java clients, download the <emphasis role="strong">Red Hat Decision Manager 7.10.0 Source Distribution</emphasis> from the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html">Red Hat Customer Portal</link> and navigate to <literal>~/rhdm-7.10.0-sources/src/droolsjbpm-integration-$VERSION/kie-server-parent/kie-server-controller/kie-server-controller-client/src/main/java/org/kie/server/controller/client</literal>.
				</simpara>
				<variablelist>
					<varlistentry>
						<term>Creating and interacting with KIE Server templates and KIE containers</term>
						<listitem>
							<simpara>
								You can use the <literal>ServerTemplate</literal> and <literal>ContainerSpec</literal> services in the REST or WebSocket Decision Manager controller clients to create, dispose, and update KIE Server templates and KIE containers, and to start and stop KIE containers, as illustrated in this example.
							</simpara>
							<formalpara>
								<title>Example request to create and interact with a KIE Server template and KIE containers</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import org.kie.server.api.marshalling.MarshallingFormat;
import org.kie.server.api.model.KieContainerStatus;
import org.kie.server.api.model.KieScannerStatus;
import org.kie.server.api.model.ReleaseId;
import org.kie.server.controller.api.model.spec.*;
import org.kie.server.controller.client.KieServerControllerClient;
import org.kie.server.controller.client.KieServerControllerClientFactory;

public class RestTemplateContainerExample {

  private static final String URL = "http://localhost:8080/decision-central/rest/controller";
  private static final String USER = "baAdmin";
  private static final String PASSWORD = "password@1";

    private static KieServerControllerClient client;

    public static void main(String[] args) {
        KieServerControllerClient client = KieServerControllerClientFactory.newRestClient(URL,
                                                                                          USER,
                                                                                          PASSWORD,
                                                                                          MarshallingFormat.JSON);
        // Create server template and KIE container, start and stop KIE container, and delete server template
        ServerTemplate serverTemplate = createServerTemplate();
        ContainerSpec container = createContainer(serverTemplate);
        client.startContainer(container);
        client.stopContainer(container);
        client.deleteServerTemplate(serverTemplate.getId());
    }

    // Re-create and configure server template
    protected static ServerTemplate createServerTemplate() {
        ServerTemplate serverTemplate = new ServerTemplate();
        serverTemplate.setId("example-client-id");
        serverTemplate.setName("example-client-name");
        serverTemplate.setCapabilities(Arrays.asList(Capability.PROCESS.name(),
                                                     Capability.RULE.name(),
                                                     Capability.PLANNING.name()));

        client.saveServerTemplate(serverTemplate);

        return serverTemplate;
    }

    // Re-create and configure KIE containers
    protected static ContainerSpec createContainer(ServerTemplate serverTemplate){
        Map&lt;Capability, ContainerConfig&gt; containerConfigMap = new HashMap();

        ProcessConfig processConfig = new ProcessConfig("PER_PROCESS_INSTANCE", "kieBase", "kieSession", "MERGE_COLLECTION");
        containerConfigMap.put(Capability.PROCESS, processConfig);

        RuleConfig ruleConfig = new RuleConfig(500l, KieScannerStatus.SCANNING);
        containerConfigMap.put(Capability.RULE, ruleConfig);

        ReleaseId releaseId = new ReleaseId("org.kie.server.testing", "stateless-session-kjar", "1.0.0-SNAPSHOT");

        ContainerSpec containerSpec = new ContainerSpec("example-container-id", "example-client-name", serverTemplate, releaseId, KieContainerStatus.STOPPED, containerConfigMap);
        client.saveContainerSpec(serverTemplate.getId(), containerSpec);

        return containerSpec;
    }
}</programlisting>
								</para>
							</formalpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Listing KIE Server templates and specifying connection timeout (REST)</term>
						<listitem>
							<simpara>
								When you use REST protocol for Decision Manager controller Java client API requests, you can provide your own <literal>javax.ws.rs.core.Configuration</literal> specification to modify the underlying REST client API, such as connection timeout.
							</simpara>
							<formalpara>
								<title>Example REST request to return server templates and specify connection timeout</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">import java.util.concurrent.TimeUnit;
import javax.ws.rs.core.Configuration;
import org.jboss.resteasy.client.jaxrs.ResteasyClientBuilder;

import org.kie.server.api.marshalling.MarshallingFormat;
import org.kie.server.controller.api.model.spec.ServerTemplateList;
import org.kie.server.controller.client.KieServerControllerClient;
import org.kie.server.controller.client.KieServerControllerClientFactory;

public class RESTTimeoutExample {

  private static final String URL = "http://localhost:8080/decision-central/rest/controller";
  private static final String USER = "baAdmin";
  private static final String PASSWORD = "password@1";

  public static void main(String[] args) {

      // Specify connection timeout
      final Configuration configuration =
              new ResteasyClientBuilder()
                      .establishConnectionTimeout(10,
                                                    TimeUnit.SECONDS)
                      .socketTimeout(60,
                                       TimeUnit.SECONDS)
                        .getConfiguration();
        KieServerControllerClient client = KieServerControllerClientFactory.newRestClient(URL,
                                                                                          USER,
                                                                                          PASSWORD,
                                                                                          MarshallingFormat.JSON,
                                                                                          configuration);

        // Retrieve list of server templates
        final ServerTemplateList serverTemplateList = client.listServerTemplates();
        System.out.println(String.format("Found %s server template(s) at controller url: %s",
                                         serverTemplateList.getServerTemplates().length,
                                         URL));
    }
}</programlisting>
								</para>
							</formalpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Listing KIE Server templates and specifying event notifications (WebSocket)</term>
						<listitem>
							<simpara>
								When you use WebSocket protocol for Decision Manager controller Java client API requests, you can enable event notifications based on changes that happen in the particular Decision Manager controller to which the client API is connected. For example, you can receive notifications when KIE Server templates or instances are connected to or updated in the Decision Manager controller.
							</simpara>
							<formalpara>
								<title>Example WebSocket request to return server templates and specify event notifications</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">import org.kie.server.api.marshalling.MarshallingFormat;
import org.kie.server.controller.api.model.events.*;
import org.kie.server.controller.api.model.spec.ServerTemplateList;
import org.kie.server.controller.client.KieServerControllerClient;
import org.kie.server.controller.client.KieServerControllerClientFactory;
import org.kie.server.controller.client.event.EventHandler;

public class WebSocketEventsExample {

    private static final String URL = "ws://localhost:8080/my-controller/websocket/controller";
    private static final String USER = "baAdmin";
    private static final String PASSWORD = "password@1";

    public static void main(String[] args) {
        KieServerControllerClient client = KieServerControllerClientFactory.newWebSocketClient(URL,
                                                                                               USER,
                                                                                               PASSWORD,
                                                                                               MarshallingFormat.JSON,
                                                                                               new TestEventHandler());

        // Retrieve list of server templates
        final ServerTemplateList serverTemplateList = client.listServerTemplates();
        System.out.println(String.format("Found %s server template(s) at controller url: %s",
                                         serverTemplateList.getServerTemplates().length,
                                         URL));
        try {
            Thread.sleep(60 * 1000);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Set up event notifications
    static class TestEventHandler implements EventHandler {

        @Override
        public void onServerInstanceConnected(ServerInstanceConnected serverInstanceConnected) {
            System.out.println("serverInstanceConnected = " + serverInstanceConnected);
        }

        @Override
        public void onServerInstanceDeleted(ServerInstanceDeleted serverInstanceDeleted) {
            System.out.println("serverInstanceDeleted = " + serverInstanceDeleted);
        }

        @Override
        public void onServerInstanceDisconnected(ServerInstanceDisconnected serverInstanceDisconnected) {
            System.out.println("serverInstanceDisconnected = " + serverInstanceDisconnected);
        }

        @Override
        public void onServerTemplateDeleted(ServerTemplateDeleted serverTemplateDeleted) {
            System.out.println("serverTemplateDeleted = " + serverTemplateDeleted);
        }

        @Override
        public void onServerTemplateUpdated(ServerTemplateUpdated serverTemplateUpdated) {
            System.out.println("serverTemplateUpdated = " + serverTemplateUpdated);
        }

        @Override
        public void onServerInstanceUpdated(ServerInstanceUpdated serverInstanceUpdated) {
            System.out.println("serverInstanceUpdated = " + serverInstanceUpdated);
        }

        @Override
        public void onContainerSpecUpdated(ContainerSpecUpdated containerSpecUpdated) {
            System.out.println("onContainerSpecUpdated = " + containerSpecUpdated);
        }
    }
}</programlisting>
								</para>
							</formalpara>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</chapter>
		<chapter xml:id="bpmn-fluent-api-con_kie-apis">
			<title>BPMN process fluent API for Business Central processes</title>
			<simpara>
				Red Hat Decision Manager provides a BPMN process fluent API that enables you to create business processes using factories. You can also manually validate the business process that you created using process fluent API. The process fluent API is defined in the <literal>org.kie.api.fluent</literal> package.
			</simpara>
			<simpara>
				Therefore, instead of using BPMN2 XML standard, you can use the process fluent API to create business processes in a few lines of code.
			</simpara>
			<section remap="_example_requests_with_the_bpmn_process_fluent_api" xml:id="example_requests_with_the_bpmn_process_fluent_api">
				<title>Example requests with the BPMN process fluent API</title>
				<simpara>
					The following example includes BPMN process fluent API requests for basic interactions with a business process. For more examples, download the <emphasis role="strong">Red Hat Decision Manager 7.10.0 Source Distribution</emphasis> from the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html">Red Hat Customer Portal</link> and navigate to <literal>~/rhdm-7.10.0-sources/src/droolsjbpm-knowledge-$VERSION/kie-api/src/main/java/org/kie/api/fluent</literal>.
				</simpara>
				<variablelist>
					<varlistentry>
						<term>Creating and interacting with Business Central business processes</term>
						<listitem>
							<simpara>
								The following example shows basic business process with a script task, an exception handler, and a variable:
							</simpara>
							<formalpara>
								<title>Example request to create and interact with a Business Central business process</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">Process process =
                // Create process builder
                factory.processBuilder(processId)
                       // package and name
                       .packageName("org.jbpm")
                       .name("My process")
                       // start node
                       .startNode(1).name("Start").done()
                       // Add variable of type string
                       .variable(var("pepe", String.class))
                       // Add exception handler
                       .exceptionHandler(IllegalArgumentException.class, Dialect.JAVA, "System.out.println(\"Exception\");")
                       // script node in Java language that prints "action"
                       .actionNode(2).name("Action")
                       .action(Dialect.JAVA,
                               "System.out.println(\"Action\");").done()
                       // end node
                       .endNode(3).name("End").done()
                       // connections
                       .connection(1,
                                   2)
                       .connection(2,
                                   3)
                       .build();</programlisting>
								</para>
							</formalpara>
							<simpara>
								In this example, a <literal>ProcessBuilderFactory</literal> reference is obtained and then, using <literal>processBuilder(String processId)</literal> method, a <literal>ProcessBuilder</literal> instance is created, which is associated with the given process Id. The <literal>ProcessBuilder</literal> instance enables you to build a definition of the created process using the fluent API.
							</simpara>
							<simpara>
								A business process consists of three components:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										Header: The header section contains global elements such as the name of the process, imports, and variables.
									</simpara>
									<simpara>
										In the previous example, the header contains the name and version of the process and the package name.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Nodes: The nodes section contains all the different nodes that are part of the process.
									</simpara>
									<simpara>
										In the previous example, nodes are added to the process by calling the <literal>startNode()</literal>, <literal>actionNode()</literal>, and <literal>endNode()</literal> methods. These methods return a specific <literal>NodeBuilder</literal> that allows you to set the properties of that node. After the code finishes configuring that specific node, the <literal>done()</literal> method returns the <literal>NodeContainerBuilder</literal> to add more nodes, if necessary.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Connections: The connections section links the nodes to create a flow chart.
									</simpara>
									<simpara>
										In the previous example, once you add all the nodes, you must connect them by creating connections between them. You can call the <literal>connection()</literal> method, which links the nodes.
									</simpara>
								</listitem>
							</itemizedlist>
							<simpara>
								Finally, you can call the <literal>build()</literal> method and obtain the generated process definition. The <literal>build()</literal> method also validates the process definition and throws an exception if the process definition is not valid.
							</simpara>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			<section remap="_example_requests_to_execute_a_business_process" xml:id="example_requests_to_execute_a_business_process">
				<title>Example requests to execute a business process</title>
				<simpara>
					Once you create a valid process definition instance, you can execute it using a combination of public and internal KIE APIs. To execute a process, create a <literal>Resource</literal>, which is used to create a <literal>KieBase</literal>. Using the <literal>KieBase</literal>, you can create a <literal>KieSession</literal> to execute the process.
				</simpara>
				<simpara>
					The following example uses <literal>ProcessBuilderFactory.toBytes</literal> process to create a <literal>ByteArrayResource</literal> resource.
				</simpara>
				<formalpara>
					<title>Example request to execute a process</title>
					<para>
						
<programlisting language="java" linenumbering="unnumbered">// Build resource from Process
KieResources resources = ServiceRegistry.getInstance().get(KieResources.class);
Resource res = resources
                        .newByteArrayResource(factory.toBytes(process))
                        ​.setSourcePath("/tmp/processFactory.bpmn2"); // source path or target path must be set to be added into kbase
​// Build kie base from this resource using KIE API
​KieServices ks = KieServices.Factory.get();
​KieRepository kr = ks.getRepository();
​KieFileSystem kfs = ks.newKieFileSystem();
​kfs.write(res);
​KieBuilder kb = ks.newKieBuilder(kfs);
​kb.buildAll(); // kieModule is automatically deployed to KieRepository if successfully built.
​KieContainer kContainer = ks.newKieContainer(kr.getDefaultReleaseId());
​KieBase kbase = kContainer.getKieBase();
​// Create kie session using KieBase
​KieSessionConfiguration conf = ...;
​Environment env = ....;
​KieSession ksession = kbase.newKieSession(conf,env);
​// execute process using same process Id that is used to obtain ProcessBuilder instance
​ksession.startProcess(processId)</programlisting>
					</para>
				</formalpara>
			</section>
		</chapter>
		<chapter xml:id="knowledge-store-rest-api-con_kie-apis">
			<title>Knowledge Store REST API for Business Central spaces and projects</title>
			<simpara>
				Red Hat Decision Manager provides a Knowledge Store REST API that you can use to interact with your projects and spaces in Red Hat Decision Manager without using the Business Central user interface. The Knowledge Store is the artifact repository for assets in Red Hat Decision Manager. This API support enables you to facilitate and automate maintenance of Business Central projects and spaces.
			</simpara>
			<simpara>
				With the Knowledge Store REST API, you can perform the following actions:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						Retrieve information about all projects and spaces
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Create, update, or delete projects and spaces
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Build, deploy, and test projects
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Retrieve information about previous Knowledge Store REST API requests, or <emphasis>jobs</emphasis>
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				Knowledge Store REST API requests require the following components:
			</simpara>
			<variablelist>
				<varlistentry>
					<term>Authentication</term>
					<listitem>
						<simpara>
							The Knowledge Store REST API requires HTTP Basic authentication or token-based authentication for the user role <literal>rest-all</literal>. To view configured user roles for your Red Hat Decision Manager distribution, navigate to <literal>~/$SERVER_HOME/standalone/configuration/application-roles.properties</literal> and <literal>~/application-users.properties</literal>.
						</simpara>
						<simpara>
							To add a user with the <literal>rest-all</literal> role, navigate to <literal>~/$SERVER_HOME/bin</literal> and run the following command:
						</simpara>
						
<programlisting language="bash" linenumbering="unnumbered">$ ./add-user.sh -a --user &lt;USERNAME&gt; --password &lt;PASSWORD&gt; --role rest-all</programlisting>
						<simpara>
							For more information about user roles and Red Hat Decision Manager installation options, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/installing_and_configuring_red_hat_decision_manager#assembly-planning"><emphasis>Planning a Red Hat Decision Manager installation</emphasis></link>.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>HTTP headers</term>
					<listitem>
						<simpara>
							The Knowledge Store REST API requires the following HTTP headers for API requests:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>Accept</literal>: Data format accepted by your requesting client:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<literal>application/json</literal> (JSON)
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
							<listitem>
								<simpara>
									<literal>Content-Type</literal>: Data format of your <literal>POST</literal> or <literal>PUT</literal> API request data:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<literal>application/json</literal> (JSON)
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
						</itemizedlist>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>HTTP methods</term>
					<listitem>
						<simpara>
							The Knowledge Store REST API supports the following HTTP methods for API requests:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>GET</literal>: Retrieves specified information from a specified resource endpoint
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>POST</literal>: Creates or updates a resource
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>PUT</literal>: Updates a resource
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>DELETE</literal>: Deletes a resource
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Base URL</term>
					<listitem>
						<simpara>
							The base URL for Knowledge Store REST API requests is <literal>http://SERVER:PORT/decision-central/rest/</literal>, such as <literal>http://localhost:8080/decision-central/rest/</literal>.
						</simpara>
						<note>
							<simpara>
								The REST API base URL for the Knowledge Store and for the Decision Manager controller built in to Business Central are the same because both are considered part of Business Central REST services.
							</simpara>
						</note>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Endpoints</term>
					<listitem>
						<simpara>
							Knowledge Store REST API endpoints, such as <literal>/spaces/{spaceName}</literal> for a specified space, are the URIs that you append to the Knowledge Store REST API base URL to access the corresponding resource or type of resource in Red Hat Decision Manager.
						</simpara>
						<formalpara>
							<title>Example request URL for <literal>/spaces/{spaceName}</literal> endpoint</title>
							<para>
								<literal>http://localhost:8080/decision-central/rest/spaces/MySpace</literal>
							</para>
						</formalpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Request data</term>
					<listitem>
						<simpara>
							HTTP <literal>POST</literal> requests in the Knowledge Store REST API may require a JSON request body with data to accompany the request.
						</simpara>
						<formalpara>
							<title>Example POST request URL and JSON request body data</title>
							<para>
								<literal>http://localhost:8080/decision-central/rest/spaces/MySpace/projects</literal>
							</para>
						</formalpara>
						
<programlisting language="json" linenumbering="unnumbered">{
  "name": "Employee_Rostering",
  "groupId": "employeerostering",
  "version": "1.0.0-SNAPSHOT",
  "description": "Employee rostering problem optimisation using Planner. Assigns employees to shifts based on their skill."
}</programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<section xml:id="knowledge-store-rest-api-requests-proc_kie-apis">
				<title>Sending requests with the Knowledge Store REST API using a REST client or curl utility</title>
				<simpara>
					The Knowledge Store REST API enables you to interact with your projects and spaces in Red Hat Decision Manager without using the Business Central user interface. You can send Knowledge Store REST API requests using any REST client or curl utility.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							Business Central is installed and running.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							You have <literal>rest-all</literal> user role access to Business Central.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Identify the relevant <link linkend="knowledge-store-rest-api-endpoints-ref_kie-apis">API endpoint</link> to which you want to send a request, such as <literal>[GET] /spaces</literal> to retrieve spaces in Business Central.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In a REST client or curl utility, enter the following components for a <literal>GET</literal> request to <literal>/spaces</literal>. Adjust any request details according to your use case.
						</simpara>
						<simpara>
							For REST client:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">Authentication</emphasis>: Enter the user name and password of the Business Central user with the <literal>rest-all</literal> role.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">HTTP Headers</emphasis>: Set the following header:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<literal>Accept</literal>: <literal>application/json</literal>
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">HTTP method</emphasis>: Set to <literal>GET</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">URL</emphasis>: Enter the Knowledge Store REST API base URL and endpoint, such as <literal>http://localhost:8080/decision-central/rest/spaces</literal>.
								</simpara>
							</listitem>
						</itemizedlist>
						<simpara>
							For curl utility:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>-u</literal>: Enter the user name and password of the Business Central user with the <literal>rest-all</literal> role.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>-H</literal>: Set the following header:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<literal>Accept</literal>: <literal>application/json</literal>
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
							<listitem>
								<simpara>
									<literal>-X</literal>: Set to <literal>GET</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">URL</emphasis>: Enter the Knowledge Store REST API base URL and endpoint, such as <literal>http://localhost:8080/decision-central/rest/spaces</literal>.
								</simpara>
							</listitem>
						</itemizedlist>
						
<screen>curl -u 'baAdmin:password@1' -H "Accept: application/json" -X GET "http://localhost:8080/decision-central/rest/spaces"</screen>
					</listitem>
					<listitem>
						<simpara>
							Execute the request and review the KIE Server response.
						</simpara>
						<simpara>
							Example server response (JSON):
						</simpara>
						
<programlisting language="json" linenumbering="unnumbered">[
  {
    "name": "MySpace",
    "description": null,
    "projects": [
      {
        "name": "Employee_Rostering",
        "spaceName": "MySpace",
        "groupId": "employeerostering",
        "version": "1.0.0-SNAPSHOT",
        "description": "Employee rostering problem optimisation using Planner. Assigns employees to shifts based on their skill.",
        "publicURIs": [
          {
            "protocol": "git",
            "uri": "git://localhost:9418/MySpace/example-Employee_Rostering"
          },
          {
            "protocol": "ssh",
            "uri": "ssh://localhost:8001/MySpace/example-Employee_Rostering"
          }
        ]
      },
      {
        "name": "Mortgage_Process",
        "spaceName": "MySpace",
        "groupId": "mortgage-process",
        "version": "1.0.0-SNAPSHOT",
        "description": "Getting started loan approval process in BPMN2, decision table, business rules, and forms.",
        "publicURIs": [
          {
            "protocol": "git",
            "uri": "git://localhost:9418/MySpace/example-Mortgage_Process"
          },
          {
            "protocol": "ssh",
            "uri": "ssh://localhost:8001/MySpace/example-Mortgage_Process"
          }
        ]
      }
    ],
    "owner": "admin",
    "defaultGroupId": "com.myspace"
  },
  {
    "name": "MySpace2",
    "description": null,
    "projects": [
      {
        "name": "IT_Orders",
        "spaceName": "MySpace",
        "groupId": "itorders",
        "version": "1.0.0-SNAPSHOT",
        "description": "Case Management IT Orders project",
        "publicURIs": [
          {
            "protocol": "git",
            "uri": "git://localhost:9418/MySpace/example-IT_Orders-1"
          },
          {
            "protocol": "ssh",
            "uri": "ssh://localhost:8001/MySpace/example-IT_Orders-1"
          }
        ]
      }
    ],
    "owner": "admin",
    "defaultGroupId": "com.myspace"
  }
]</programlisting>
					</listitem>
					<listitem>
						<simpara>
							In your REST client or curl utility, send another API request with the following components for a <literal>POST</literal> request to <literal>/spaces/{spaceName}/projects</literal> to create a project within a space. Adjust any request details according to your use case.
						</simpara>
						<simpara>
							For REST client:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">Authentication</emphasis>: Enter the user name and password of the Business Central user with the <literal>rest-all</literal> role.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">HTTP Headers</emphasis>: Set the following header:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<literal>Accept</literal>: <literal>application/json</literal>
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<literal>Content-Type</literal>: <literal>application/json</literal>
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">HTTP method</emphasis>: Set to <literal>POST</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">URL</emphasis>: Enter the Knowledge Store REST API base URL and endpoint, such as <literal>http://localhost:8080/decision-central/rest/spaces/MySpace/projects</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Request body</emphasis>: Add a JSON request body with the identification data for the new project:
								</simpara>
							</listitem>
						</itemizedlist>
						
<programlisting language="json" linenumbering="unnumbered">{
  "name": "Employee_Rostering",
  "groupId": "employeerostering",
  "version": "1.0.0-SNAPSHOT",
  "description": "Employee rostering problem optimisation using Planner. Assigns employees to shifts based on their skill."
}</programlisting>
						<simpara>
							For curl utility:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>-u</literal>: Enter the user name and password of the Business Central user with the <literal>rest-all</literal> role.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>-H</literal>: Set the following headers:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<literal>Accept</literal>: <literal>application/json</literal>
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<literal>Content-Type</literal>: <literal>application/json</literal>
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
							<listitem>
								<simpara>
									<literal>-X</literal>: Set to <literal>POST</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">URL</emphasis>: Enter the Knowledge Store REST API base URL and endpoint, such as <literal>http://localhost:8080/decision-central/rest/spaces/MySpace/projects</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>-d</literal>: Add a JSON request body or file (<literal>@file.json</literal>) with the identification data for the new project:
								</simpara>
							</listitem>
						</itemizedlist>
						
<screen>curl -u 'baAdmin:password@1' -H "Accept: application/json" -H "Content-Type: application/json" -X POST "http://localhost:8080/decision-central/rest/spaces/MySpace/projects" -d "{ \"name\": \"Employee_Rostering\", \"groupId\": \"employeerostering\", \"version\": \"1.0.0-SNAPSHOT\", \"description\": \"Employee rostering problem optimisation using Planner. Assigns employees to shifts based on their skill.\"}"</screen>
						
<screen>curl -u 'baAdmin:password@1' -H "Accept: application/json" -H "Content-Type: application/json" -X POST "http://localhost:8080/decision-central/rest/spaces/MySpace/projects" -d @my-project.json</screen>
					</listitem>
					<listitem>
						<simpara>
							Execute the request and review the KIE Server response.
						</simpara>
						<simpara>
							Example server response (JSON):
						</simpara>
						
<programlisting language="json" linenumbering="unnumbered">{
  "jobId": "1541017411591-6",
  "status": "APPROVED",
  "spaceName": "MySpace",
  "projectName": "Employee_Rostering",
  "projectGroupId": "employeerostering",
  "projectVersion": "1.0.0-SNAPSHOT",
  "description": "Employee rostering problem optimisation using Planner. Assigns employees to shifts based on their skill."
}</programlisting>
						<simpara>
							If you encounter request errors, review the returned error code messages and adjust your request accordingly.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="knowledge-store-rest-api-endpoints-ref_kie-apis">
				<title>Supported Knowledge Store REST API endpoints</title>
				<simpara>
					The Knowledge Store REST API provides endpoints for managing spaces and projects in Red Hat Decision Manager and for retrieving information about previous Knowledge Store REST API requests, or <emphasis>jobs</emphasis>.
				</simpara>
				<section xml:id="knowledge-store-rest-api-spaces-ref_kie-apis">
					<title>Spaces</title>
					<simpara>
						The Knowledge Store REST API supports the following endpoints for managing spaces in Business Central. The Knowledge Store REST API base URL is <literal>http://SERVER:PORT/decision-central/rest/</literal>. All requests require HTTP Basic authentication or token-based authentication for the <literal>rest-all</literal> user role.
					</simpara>
					<variablelist>
						<varlistentry>
							<term>[GET] /spaces</term>
							<listitem>
								<simpara>
									Returns all spaces in Business Central.
								</simpara>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">[
  {
    "name": "MySpace",
    "description": null,
    "projects": [
      {
        "name": "Employee_Rostering",
        "spaceName": "MySpace",
        "groupId": "employeerostering",
        "version": "1.0.0-SNAPSHOT",
        "description": "Employee rostering problem optimisation using Planner. Assigns employees to shifts based on their skill.",
        "publicURIs": [
          {
            "protocol": "git",
            "uri": "git://localhost:9418/MySpace/example-Employee_Rostering"
          },
          {
            "protocol": "ssh",
            "uri": "ssh://localhost:8001/MySpace/example-Employee_Rostering"
          }
        ]
      },
      {
        "name": "Mortgage_Process",
        "spaceName": "MySpace",
        "groupId": "mortgage-process",
        "version": "1.0.0-SNAPSHOT",
        "description": "Getting started loan approval process in BPMN2, decision table, business rules, and forms.",
        "publicURIs": [
          {
            "protocol": "git",
            "uri": "git://localhost:9418/MySpace/example-Mortgage_Process"
          },
          {
            "protocol": "ssh",
            "uri": "ssh://localhost:8001/MySpace/example-Mortgage_Process"
          }
        ]
      }
    ],
    "owner": "admin",
    "defaultGroupId": "com.myspace"
  },
  {
    "name": "MySpace2",
    "description": null,
    "projects": [
      {
        "name": "IT_Orders",
        "spaceName": "MySpace",
        "groupId": "itorders",
        "version": "1.0.0-SNAPSHOT",
        "description": "Case Management IT Orders project",
        "publicURIs": [
          {
            "protocol": "git",
            "uri": "git://localhost:9418/MySpace/example-IT_Orders-1"
          },
          {
            "protocol": "ssh",
            "uri": "ssh://localhost:8001/MySpace/example-IT_Orders-1"
          }
        ]
      }
    ],
    "owner": "admin",
    "defaultGroupId": "com.myspace"
  }
]</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[GET] /spaces/{spaceName}</term>
							<listitem>
								<simpara>
									Returns information about a specified space.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>spaceName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the space to be retrieved
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "name": "MySpace",
  "description": null,
  "projects": [
    {
      "name": "Mortgage_Process",
      "spaceName": "MySpace",
      "groupId": "mortgage-process",
      "version": "1.0.0-SNAPSHOT",
      "description": "Getting started loan approval process in BPMN2, decision table, business rules, and forms.",
      "publicURIs": [
        {
          "protocol": "git",
          "uri": "git://localhost:9418/MySpace/example-Mortgage_Process"
        },
        {
          "protocol": "ssh",
          "uri": "ssh://localhost:8001/MySpace/example-Mortgage_Process"
        }
      ]
    },
    {
      "name": "Employee_Rostering",
      "spaceName": "MySpace",
      "groupId": "employeerostering",
      "version": "1.0.0-SNAPSHOT",
      "description": "Employee rostering problem optimisation using Planner. Assigns employees to shifts based on their skill.",
      "publicURIs": [
        {
          "protocol": "git",
          "uri": "git://localhost:9418/MySpace/example-Employee_Rostering"
        },
        {
          "protocol": "ssh",
          "uri": "ssh://localhost:8001/MySpace/example-Employee_Rostering"
        }
      ]
    },
    {
      "name": "Evaluation_Process",
      "spaceName": "MySpace",
      "groupId": "evaluation",
      "version": "1.0.0-SNAPSHOT",
      "description": "Getting started Business Process for evaluating employees",
      "publicURIs": [
        {
          "protocol": "git",
          "uri": "git://localhost:9418/MySpace/example-Evaluation_Process"
        },
        {
          "protocol": "ssh",
          "uri": "ssh://localhost:8001/MySpace/example-Evaluation_Process"
        }
      ]
    },
    {
      "name": "IT_Orders",
      "spaceName": "MySpace",
      "groupId": "itorders",
      "version": "1.0.0-SNAPSHOT",
      "description": "Case Management IT Orders project",
      "publicURIs": [
        {
          "protocol": "git",
          "uri": "git://localhost:9418/MySpace/example-IT_Orders"
        },
        {
          "protocol": "ssh",
          "uri": "ssh://localhost:8001/MySpace/example-IT_Orders"
        }
      ]
    }
  ],
  "owner": "admin",
  "defaultGroupId": "com.myspace"
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[POST] /spaces</term>
							<listitem>
								<simpara>
									Creates a space in Business Central.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">body</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													The <literal>name</literal>, <literal>description</literal>, <literal>owner</literal>, <literal>defaultGroupId</literal>, and any other components of the new space
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Request body
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example request body (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "name": "NewSpace",
  "description": "My new space.",
  "owner": "admin",
  "defaultGroupId": "com.newspace"
}</programlisting>
									</para>
								</formalpara>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "jobId": "1541016978154-3",
  "status": "APPROVED",
  "spaceName": "NewSpace",
  "owner": "admin",
  "defaultGroupId": "com.newspace",
  "description": "My new space."
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[PUT] /spaces</term>
							<listitem>
								<simpara>
									Updates <literal>description</literal>, <literal>owner</literal>, and <literal>defaultGroupId</literal> of a space in Business Central.
								</simpara>
								<formalpara>
									<title>Example request body (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "name": "MySpace",
  "description": "This is updated description",
  "owner": "admin",
  "defaultGroupId": "com.updatedGroupId"
}</programlisting>
									</para>
								</formalpara>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "jobId": "1592214574454-1",
  "status": "APPROVED",
  "spaceName": "MySpace",
  "owner": "admin",
  "defaultGroupId": "com.updatedGroupId",
  "description": "This is updated description"
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[DELETE] /spaces/{spaceName}</term>
							<listitem>
								<simpara>
									Deletes a specified space from Business Central.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>spaceName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the space to be deleted
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "jobId": "1541127032997-8",
  "status": "APPROVED",
  "spaceName": "MySpace",
  "owner": "admin",
  "description": "My deleted space.",
  "repositories": null
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
					</variablelist>
				</section>
				<section xml:id="knowledge-store-rest-api-projects-ref_kie-apis">
					<title>Projects</title>
					<simpara>
						The Knowledge Store REST API supports the following endpoints for managing, building, and deploying projects in Business Central. The Knowledge Store REST API base URL is <literal>http://SERVER:PORT/decision-central/rest/</literal>. All requests require HTTP Basic authentication or token-based authentication for the <literal>rest-all</literal> user role.
					</simpara>
					<variablelist>
						<varlistentry>
							<term>[GET] /spaces/{spaceName}/projects</term>
							<listitem>
								<simpara>
									Returns projects in a specified space.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>spaceName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the space for which you are retrieving projects
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">[
  {
    "name": "Mortgage_Process",
    "spaceName": "MySpace",
    "groupId": "mortgage-process",
    "version": "1.0.0-SNAPSHOT",
    "description": "Getting started loan approval process in BPMN2, decision table, business rules, and forms.",
    "publicURIs": [
      {
        "protocol": "git",
        "uri": "git://localhost:9418/MySpace/example-Mortgage_Process"
      },
      {
        "protocol": "ssh",
        "uri": "ssh://localhost:8001/MySpace/example-Mortgage_Process"
      }
    ]
  },
  {
    "name": "Employee_Rostering",
    "spaceName": "MySpace",
    "groupId": "employeerostering",
    "version": "1.0.0-SNAPSHOT",
    "description": "Employee rostering problem optimisation using Planner. Assigns employees to shifts based on their skill.",
    "publicURIs": [
      {
        "protocol": "git",
        "uri": "git://localhost:9418/MySpace/example-Employee_Rostering"
      },
      {
        "protocol": "ssh",
        "uri": "ssh://localhost:8001/MySpace/example-Employee_Rostering"
      }
    ]
  },
  {
    "name": "Evaluation_Process",
    "spaceName": "MySpace",
    "groupId": "evaluation",
    "version": "1.0.0-SNAPSHOT",
    "description": "Getting started Business Process for evaluating employees",
    "publicURIs": [
      {
        "protocol": "git",
        "uri": "git://localhost:9418/MySpace/example-Evaluation_Process"
      },
      {
        "protocol": "ssh",
        "uri": "ssh://localhost:8001/MySpace/example-Evaluation_Process"
      }
    ]
  },
  {
    "name": "IT_Orders",
    "spaceName": "MySpace",
    "groupId": "itorders",
    "version": "1.0.0-SNAPSHOT",
    "description": "Case Management IT Orders project",
    "publicURIs": [
      {
        "protocol": "git",
        "uri": "git://localhost:9418/MySpace/example-IT_Orders"
      },
      {
        "protocol": "ssh",
        "uri": "ssh://localhost:8001/MySpace/example-IT_Orders"
      }
    ]
  }
]</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[GET] /spaces/{spaceName}/projects/{projectName}</term>
							<listitem>
								<simpara>
									Returns information about a specified project in a specified space.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>spaceName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the space where the project is located
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>projectName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the project to be retrieved
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "name": "Employee_Rostering",
  "spaceName": "MySpace",
  "groupId": "employeerostering",
  "version": "1.0.0-SNAPSHOT",
  "description": "Employee rostering problem optimisation using Planner. Assigns employees to shifts based on their skill.",
  "publicURIs": [
    {
      "protocol": "git",
      "uri": "git://localhost:9418/MySpace/example-Employee_Rostering"
    },
    {
      "protocol": "ssh",
      "uri": "ssh://localhost:8001/MySpace/example-Employee_Rostering"
    }
  ]
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[POST] /spaces/{spaceName}/projects</term>
							<listitem>
								<simpara>
									Creates a project in a specified space.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>spaceName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the space in which the new project will be created
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">body</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													The <literal>name</literal>, <literal>groupId</literal>, <literal>version</literal>, <literal>description</literal>, and any other components of the new project
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Request body
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example request body (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "name": "Employee_Rostering",
  "groupId": "employeerostering",
  "version": "1.0.0-SNAPSHOT",
  "description": "Employee rostering problem optimisation using Planner. Assigns employees to shifts based on their skill."
}</programlisting>
									</para>
								</formalpara>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "jobId": "1541017411591-6",
  "status": "APPROVED",
  "spaceName": "MySpace",
  "projectName": "Employee_Rostering",
  "projectGroupId": "employeerostering",
  "projectVersion": "1.0.0-SNAPSHOT",
  "description": "Employee rostering problem optimisation using Planner. Assigns employees to shifts based on their skill."
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[DELETE] /spaces/{spaceName}/projects/{projectName}</term>
							<listitem>
								<simpara>
									Deletes a specified project from a specified space.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>spaceName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the space where the project is located
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>projectName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the project to be deleted
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "jobId": "1541128617727-10",
  "status": "APPROVED",
  "projectName": "Employee_Rostering",
  "spaceName": "MySpace"
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[POST] /spaces/{spaceName}/git/clone</term>
							<listitem>
								<simpara>
									Clones a project into a specified space from a specified Git address.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>spaceName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the space to which you are cloning a project
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">body</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													The <literal>name</literal>, <literal>description</literal>, and Git repository <literal>userName</literal>, <literal>password</literal>, and <literal>gitURL</literal> for the project to be cloned
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Request body
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example request body (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "name": "Employee_Rostering",
  "description": "Employee rostering problem optimisation using Planner. Assigns employees to shifts based on their skill.",
  "userName": "baAdmin",
  "password": "password@1",
  "gitURL": "git://localhost:9418/MySpace/example-Employee_Rostering"
}</programlisting>
									</para>
								</formalpara>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "jobId": "1541129488547-13",
  "status": "APPROVED",
  "cloneProjectRequest": {
    "name": "Employee_Rostering",
    "description": "Employee rostering problem optimisation using Planner. Assigns employees to shifts based on their skill.",
    "userName": "baAdmin",
    "password": "password@1",
    "gitURL": "git://localhost:9418/MySpace/example-Employee_Rostering"
  },
  "spaceName": "MySpace2"
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[POST] /spaces/{spaceName}/projects/{projectName}/maven/compile</term>
							<listitem>
								<simpara>
									Compiles a specified project in a specified space (equivalent to <literal>mvn compile</literal>).
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>spaceName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the space where the project is located
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>projectName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the project to be compiled
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "jobId": "1541128617727-10",
  "status": "APPROVED",
  "projectName": "Employee_Rostering",
  "spaceName": "MySpace"
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[POST] /spaces/{spaceName}/projects/{projectName}/maven/test</term>
							<listitem>
								<simpara>
									Tests a specified project in a specified space (equivalent to <literal>mvn test</literal>).
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>spaceName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the space where the project is located
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>projectName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the project to be tested
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "jobId": "1541132591595-19",
  "status": "APPROVED",
  "projectName": "Employee_Rostering",
  "spaceName": "MySpace"
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[POST] /spaces/{spaceName}/projects/{projectName}/maven/install</term>
							<listitem>
								<simpara>
									Installs a specified project in a specified space (equivalent to <literal>mvn install</literal>).
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>spaceName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the space where the project is located
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>projectName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the project to be installed
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "jobId": "1541132668987-20",
  "status": "APPROVED",
  "projectName": "Employee_Rostering",
  "spaceName": "MySpace"
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[POST] /spaces/{spaceName}/projects/{projectName}/maven/deploy</term>
							<listitem>
								<simpara>
									Deploys a specified project in a specified space (equivalent to <literal>mvn deploy</literal>).
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>spaceName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the space where the project is located
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>projectName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the project to be deployed
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "jobId": "1541132816435-21",
  "status": "APPROVED",
  "projectName": "Employee_Rostering",
  "spaceName": "MySpace"
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
					</variablelist>
				</section>
				<section xml:id="knowledge-store-rest-api-jobs-ref_kie-apis">
					<title>Jobs (API requests)</title>
					<simpara>
						All <literal>POST</literal> and <literal>DELETE</literal> requests in the Knowledge Store REST API return a job ID associated with each request, in addition to the returned request details. You can use a job ID to view the request status or delete a sent request.
					</simpara>
					<simpara>
						Knowledge Store REST API requests, or <emphasis>jobs</emphasis>, can have the following statuses:
					</simpara>
					<table colsep="1" frame="all" rowsep="1">
						<title>Job statuses (API request statuses)</title>
						<tgroup cols="2">
							<colspec colname="col_1" colwidth="25*"></colspec>
							<colspec colname="col_2" colwidth="75*"></colspec>
							<thead>
								<row>
									<entry align="left" valign="top">Status</entry>
									<entry align="left" valign="top">Description</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>ACCEPTED</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The request was accepted and is being processed.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>BAD_REQUEST</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The request contained incorrect content and was not accepted.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>RESOURCE_NOT_EXIST</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The requested resource (path) does not exist.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>DUPLICATE_RESOURCE</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The resource already exists.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>SERVER_ERROR</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										An error occurred in KIE Server.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>SUCCESS</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The request finished successfully.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>FAIL</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The request failed.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>APPROVED</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The request was approved.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>DENIED</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The request was denied.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>GONE</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The job ID for the request could not be found due to one of the following reasons:
									</simpara>
									<itemizedlist>
										<listitem>
											<simpara>
												The request was explicitly removed.
											</simpara>
										</listitem>
										<listitem>
											<simpara>
												The request finished and has been deleted from a status cache. A request is removed from a status cache after the cache has reached its maximum capacity.
											</simpara>
										</listitem>
										<listitem>
											<simpara>
												The request never existed.
											</simpara>
										</listitem>
									</itemizedlist>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
					<simpara>
						The Knowledge Store REST API supports the following endpoints for retrieving or deleting sent API requests. The Knowledge Store REST API base URL is <literal>http://SERVER:PORT/decision-central/rest/</literal>. All requests require HTTP Basic authentication or token-based authentication for the <literal>rest-all</literal> user role.
					</simpara>
					<variablelist>
						<varlistentry>
							<term>[GET] /jobs/{jobId}</term>
							<listitem>
								<simpara>
									Returns the status of a specified job (a previously sent API request).
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>jobId</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													ID of the job to be retrieved (example: <literal>1541010216919-1</literal>)
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "status": "SUCCESS",
  "jobId": "1541010216919-1",
  "result": null,
  "lastModified": 1541010218352,
  "detailedResult": [
    "level:INFO, path:null, text:Build of module 'Mortgage_Process' (requested by system) completed.\n Build: SUCCESSFUL"
  ]
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[DELETE] /jobs/{jobId}</term>
							<listitem>
								<simpara>
									Deletes a specified job (a previously sent API request). If the job is not being processed yet, this request removes the job from the job queue. This request does not cancel or stop an ongoing job.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>jobId</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													ID of the job to be deleted (example: <literal>1541010216919-1</literal>)
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "status": "GONE",
  "jobId": "1541010216919-1",
  "result": null,
  "lastModified": 1541132054916,
  "detailedResult": [
    "level:INFO, path:null, text:Build of module 'Mortgage_Process' (requested by system) completed.\n Build: SUCCESSFUL"
  ]
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
					</variablelist>
				</section>
				<section xml:id="knowledge-store-rest-api-branches-ref_kie-apis">
					<title>Branches</title>
					<simpara>
						The Knowledge Store REST API supports the following endpoints for managing branches in Business Central. The Knowledge Store REST API base URL is <literal>http://SERVER:PORT/decision-central/rest/</literal>. All requests require HTTP Basic authentication or token-based authentication for the <literal>rest-all</literal> user role.
					</simpara>
					<variablelist>
						<varlistentry>
							<term>[GET] /spaces/{spaceName}/projects/{projectName}/branches</term>
							<listitem>
								<simpara>
									Returns all branches in a specified project and space.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>spaceName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the space for which you are retrieving projects
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>projectName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the project for which you are retrieving branches
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">[
  {
    "name":"master"
  }
]</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[POST] /spaces/{spaceName}/projects/{projectName}/branches</term>
							<listitem>
								<simpara>
									Adds a specified branch in a specified project and space.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>spaceName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the space where the project is located
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>projectName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the project in which the new branch needs to be created
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">body</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													The <literal>newBranchName</literal> and <literal>baseBranchName</literal> of a project
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Request body
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example request body (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
   "newBranchName":  "branch01",
   "baseBranchName": "master"
}</programlisting>
									</para>
								</formalpara>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
    "jobId":          "1576175811141-3",
    "status":         "APPROVED",
    "spaceName":      "Space123",
    "projectName":    "ProjABC",
    "newBranchName":  "b1",
    "baseBranchName": "master",
    "userIdentifier": "bc"
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[DELETE] /spaces/{spaceName}/projects/{projectName}/branches/{branchName}</term>
							<listitem>
								<simpara>
									Deletes a specified branch in a specified project and space.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>spaceName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the space where the project is located
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>projectName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the project where the branch is located
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>branchName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the branch to be deleted
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
    "jobId":          "1576175811421-5",
    "status":         "APPROVED",
    "spaceName":      "Space123",
    "projectName":    "ProjABC",
    "branchName":     "b1",
    "userIdentifier": "bc"
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[POST] /spaces/{spaceName}/projects/{projectName}/branches/{branchName}/maven/compile</term>
							<listitem>
								<simpara>
									Compiles a specified branch in a specified project and space. If <literal>branchName</literal> is not specified, then request applies to the master branch.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>spaceName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the space where the project is located
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>projectName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the project where the branch is located
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>branchName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the branch to be compiled
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
    "jobId":       "1576175811233-4",
    "status":      "APPROVED",
    "spaceName":   "Space123",
    "projectName": "ProjABC",
    "branchName":  "b1",
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[POST] /spaces/{spaceName}/projects/{projectName}/branches/{branchName}/maven/install</term>
							<listitem>
								<simpara>
									Installs a specified branch in a specified project and space. If <literal>branchName</literal> is not specified, then request applies to the master branch.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>spaceName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the space where the project is located
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>projectName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the project where the branch is located
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>branchName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the branch to be installed
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
    "jobId":       "1576175811233-4",
    "status":      "APPROVED",
    "spaceName":   "Space123",
    "projectName": "ProjABC",
    "branchName":  "b1",
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[POST] /spaces/{spaceName}/projects/{projectName}/branches/{branchName}/maven/test</term>
							<listitem>
								<simpara>
									Tests a specified branch in a specified project and space. If <literal>branchName</literal> is not specified, then request applies to the master branch.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>spaceName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the space where the project located
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>projectName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the project where the branch is located
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>branchName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the branch to be tested
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
    "jobId":       "1576175811233-4",
    "status":      "APPROVED",
    "spaceName":   "Space123",
    "projectName": "ProjABC",
    "branchName":  "b1",
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[POST] /spaces/{spaceName}/projects/{projectName}/branches/{branchName}/maven/deploy</term>
							<listitem>
								<simpara>
									Deploys a specified branch in a specified project and space. If <literal>branchName</literal> is not specified, then request applies to the master branch.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>spaceName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the space where the project is located
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>projectName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the project where the branch is located
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>branchName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the branch to be deployed
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
    "jobId":       "1576175811233-4",
    "status":      "APPROVED",
    "spaceName":   "Space123",
    "projectName": "ProjABC",
    "branchName":  "b1",
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
					</variablelist>
				</section>
			</section>
		</chapter>
		<chapter xml:id="security-management-rest-api-con_kie-apis">
			<title>Security Management REST API for Business Central groups, roles, and users</title>
			<simpara>
				Red Hat Decision Manager provides a Security Management REST API that you can use to manage the groups, roles, and users in Red Hat Decision Manager without using the Business Central user interface. This API support enables you to facilitate and automate management of Business Central groups, roles, users, and granted permissions.
			</simpara>
			<simpara>
				With the Security Management REST API, you can perform the following actions:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						Retrieve information about all groups, roles, users, and their granted permissions
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Create, update, or delete groups and users
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Update granted permissions for groups, roles, and users
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Retrieve information about groups and roles assigned to the users
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				Security Management REST API requests require the following components:
			</simpara>
			<variablelist>
				<varlistentry>
					<term>Authentication</term>
					<listitem>
						<simpara>
							The Security Management REST API requires HTTP Basic authentication or token-based authentication for the user role <literal>admin</literal>. To view configured user roles for your Red Hat Decision Manager distribution, navigate to <literal>~/$SERVER_HOME/standalone/configuration/application-roles.properties</literal> and <literal>~/application-users.properties</literal>.
						</simpara>
						<simpara>
							To add a user with the <literal>admin</literal> role, navigate to <literal>~/$SERVER_HOME/bin</literal> and run the following command:
						</simpara>
						
<programlisting language="bash" linenumbering="unnumbered">$ ./add-user.sh -a --user &lt;USERNAME&gt; --password &lt;PASSWORD&gt; --role admin</programlisting>
						<simpara>
							For more information about user roles and Red Hat Decision Manager installation options, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/installing_and_configuring_red_hat_decision_manager#assembly-planning"><emphasis>Planning a Red Hat Decision Manager installation</emphasis></link>.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>HTTP headers</term>
					<listitem>
						<simpara>
							The Security Management REST API requires the following HTTP headers for API requests:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>Accept</literal>: Data format accepted by your requesting client:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<literal>application/json</literal> (JSON)
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
							<listitem>
								<simpara>
									<literal>Content-Type</literal>: Data format of your <literal>POST</literal> or <literal>PUT</literal> API request data:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<literal>application/json</literal> (JSON)
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
						</itemizedlist>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>HTTP methods</term>
					<listitem>
						<simpara>
							The Security Management REST API supports the following HTTP methods for API requests:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>GET</literal>: Retrieves specified information from a specified resource endpoint
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>POST</literal>: Creates or updates a resource
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>DELETE</literal>: Deletes a resource
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Base URL</term>
					<listitem>
						<simpara>
							The base URL for Security Management REST API requests is <literal>http://SERVER:PORT/decision-central/rest/</literal>, such as <literal>http://localhost:8080/decision-central/rest/</literal>.
						</simpara>
						<note>
							<simpara>
								The REST API base URL for the Security Management, Knowledge Store, and Decision Manager controller built into Business Central are the same because all are considered part of Business Central REST services.
							</simpara>
						</note>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Endpoints</term>
					<listitem>
						<simpara>
							Security Management REST API endpoints, such as <literal>/users/{userName}</literal> for a specified user, are the URIs that you append to the Security Management REST API base URL to access the corresponding resource or type of resource in Red Hat Decision Manager.
						</simpara>
						<formalpara>
							<title>Example request URL for <literal>/users/{userName}</literal> endpoint</title>
							<para>
								<literal>http://localhost:8080/decision-central/rest/users/newUser</literal>
							</para>
						</formalpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Request data</term>
					<listitem>
						<simpara>
							HTTP <literal>POST</literal> requests in the Security Management REST API may require a JSON request body with data to accompany the request.
						</simpara>
						<formalpara>
							<title>Example POST request URL and JSON request body data</title>
							<para>
								<literal>http://localhost:8080/decision-central/rest/users/newUser/groups</literal>
							</para>
						</formalpara>
						
<programlisting language="json" linenumbering="unnumbered">[
  "newGroup"
]</programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<section xml:id="security-management-rest-api-requests-proc_kie-apis">
				<title>Sending requests with the Security Management REST API using a REST client or curl utility</title>
				<simpara>
					The Security Management REST API enables you to manage the groups, roles, and users in Red Hat Decision Manager without using the Business Central user interface. You can send Security Management REST API requests using any REST client or curl utility.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							Business Central is installed and running.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							You have <literal>admin</literal> user role access to Business Central.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Identify the relevant <link linkend="security-management-rest-api-endpoints-ref_kie-apis">API endpoint</link> to which you want to send a request, such as <literal>[GET] /groups</literal> to retrieve groups in Business Central.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In a REST client or curl utility, enter the following components for a <literal>GET</literal> request to <literal>/groups</literal>. Adjust any request details according to your use case.
						</simpara>
						<simpara>
							For REST client:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">Authentication</emphasis>: Enter the user name and password of the Business Central user with the <literal>admin</literal> role.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">HTTP Headers</emphasis>: Set the following header:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<literal>Accept</literal>: <literal>application/json</literal>
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">HTTP method</emphasis>: Set to <literal>GET</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">URL</emphasis>: Enter the Security Management REST API base URL and endpoint, such as <literal>http://localhost:8080/decision-central/rest/groups</literal>.
								</simpara>
							</listitem>
						</itemizedlist>
						<simpara>
							For curl utility:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>-u</literal>: Enter the user name and password of the Business Central user with the <literal>admin</literal> role.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>-H</literal>: Set the following header:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<literal>Accept</literal>: <literal>application/json</literal>
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
							<listitem>
								<simpara>
									<literal>-X</literal>: Set to <literal>GET</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">URL</emphasis>: Enter the Security Management REST API base URL and endpoint, such as <literal>http://localhost:8080/decision-central/rest/groups</literal>.
								</simpara>
							</listitem>
						</itemizedlist>
						
<screen>curl -u 'baAdmin:password@1' -H "Accept: application/json" -X GET "http://localhost:8080/decision-central/rest/groups"</screen>
					</listitem>
					<listitem>
						<simpara>
							Execute the request and review the KIE Server response.
						</simpara>
						<simpara>
							Example server response (JSON):
						</simpara>
						
<programlisting language="json" linenumbering="unnumbered">[
  	{
		"group1"
	},
	{
		"group2"
	}
]</programlisting>
					</listitem>
					<listitem>
						<simpara>
							In your REST client or curl utility, send another API request with the following components for a <literal>POST</literal> request to <literal>/users/{userName}/groups</literal> to update the groups assigned to a user. Adjust any request details according to your use case.
						</simpara>
						<simpara>
							For REST client:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">Authentication</emphasis>: Enter the user name and password of the Business Central user with the <literal>admin</literal> role.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">HTTP Headers</emphasis>: Set the following header:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<literal>Accept</literal>: <literal>application/json</literal>
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<literal>Content-Type</literal>: <literal>application/json</literal>
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">HTTP method</emphasis>: Set to <literal>POST</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">URL</emphasis>: Enter the Security Management REST API base URL and endpoint, such as <literal>http://localhost:8080/decision-central/rest/users/newUser/groups</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Request body</emphasis>: Add a JSON request body with the identification data for the new group:
								</simpara>
							</listitem>
						</itemizedlist>
						
<programlisting language="json" linenumbering="unnumbered">[
  "newGroup"
]</programlisting>
						<simpara>
							For curl utility:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>-u</literal>: Enter the user name and password of the Business Central user with the <literal>admin</literal> role.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>-H</literal>: Set the following headers:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<literal>Accept</literal>: <literal>application/json</literal>
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<literal>Content-Type</literal>: <literal>application/json</literal>
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
							<listitem>
								<simpara>
									<literal>-X</literal>: Set to <literal>POST</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">URL</emphasis>: Enter the Security Management REST API base URL and endpoint, such as <literal>http://localhost:8080/decision-central/rest/users/newUser/groups</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>-d</literal>: Add a JSON request body or file (<literal>@file.json</literal>) with the identification data for the new group:
								</simpara>
							</listitem>
						</itemizedlist>
						
<screen>curl -u 'baAdmin:password@1' -H "Accept: application/json" -H "Content-Type: application/json" -X POST "http://localhost:8080/decision-central/rest/users/newUser/groups" -d "["newGroup"]"</screen>
						
<screen>curl -u 'baAdmin:password@1' -H "Accept: application/json" -H "Content-Type: application/json" -X POST "http://localhost:8080/decision-central/rest/users/newUser/groups" -d @user-groups.json</screen>
					</listitem>
					<listitem>
						<simpara>
							Execute the request and review the KIE Server response.
						</simpara>
						<simpara>
							Example server response (JSON):
						</simpara>
						
<programlisting language="json" linenumbering="unnumbered">{
  "status": "OK",
  "message": "Groups [newGroup] are assigned successfully to user wbadmin"
}</programlisting>
						<simpara>
							If you encounter request errors, review the returned error code messages and adjust your request accordingly.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="security-management-rest-api-endpoints-ref_kie-apis">
				<title>Supported Security Management REST API endpoints</title>
				<simpara>
					The Security Management REST API provides endpoints for managing groups, roles, users, and permissions in Business Central. It includes the security and permission management tasks that an administrator can also perform using the <emphasis role="strong">Security Management</emphasis> page in Business Central.
				</simpara>
				<section xml:id="security-management-rest-api-groups-ref_kie-apis">
					<title>Groups</title>
					<simpara>
						The Security Management REST API supports the following endpoints for managing groups in Business Central. The Security Management REST API base URL is <literal>http://SERVER:PORT/decision-central/rest/</literal>. All requests require HTTP Basic authentication or token-based authentication for the <literal>admin</literal> user role.
					</simpara>
					<variablelist>
						<varlistentry>
							<term>[GET] /groups</term>
							<listitem>
								<simpara>
									Returns all groups in Business Central.
								</simpara>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">[
  	{
		"group1"
	},
	{
		"group2"
	}
]</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[POST] /groups</term>
							<listitem>
								<simpara>
									Creates a group in Business Central. A group must have at least one user assigned.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">body</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the group and users assigned to the new group
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Request body
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example request body (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "name": "groupName",
  "users": [
    "userNames"
  ]
}</programlisting>
									</para>
								</formalpara>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "status": "OK",
  "message": "Group newGroup is created successfully."
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[DELETE] /groups/{groupName}</term>
							<listitem>
								<simpara>
									Deletes a specified group from Business Central.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>groupName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the group to be deleted
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "status": "OK",
  "message": "Group newGroup is deleted successfully."
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
					</variablelist>
				</section>
				<section xml:id="security-management-rest-api-roles-ref_kie-apis">
					<title>Roles</title>
					<simpara>
						The Security Management REST API supports the following endpoints for managing roles in Business Central. The Security Management REST API base URL is <literal>http://SERVER:PORT/decision-central/rest/</literal>. All requests require HTTP Basic authentication or token-based authentication for the <literal>admin</literal> user role.
					</simpara>
					<variablelist>
						<varlistentry>
							<term>[GET] /roles</term>
							<listitem>
								<simpara>
									Returns all roles in Business Central.
								</simpara>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">[
  {
    "name": "process-admin"
  },
  {
    "name": "manager"
  },
  {
    "name": "admin"
  }
]</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
					</variablelist>
				</section>
				<section xml:id="security-management-rest-api-users-ref_kie-apis">
					<title>Users</title>
					<simpara>
						The Security Management REST API supports the following endpoints for managing users in Business Central. The Security Management REST API base URL is <literal>http://SERVER:PORT/decision-central/rest/</literal>. All requests require HTTP Basic authentication or token-based authentication for the <literal>admin</literal> user role.
					</simpara>
					<variablelist>
						<varlistentry>
							<term>[GET] /users</term>
							<listitem>
								<simpara>
									Returns all users in Business Central.
								</simpara>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">[
    "newUser",
    "user1",
    "user2",
]</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[GET] /users/{userName}/groups</term>
							<listitem>
								<simpara>
									Returns all groups assigned to a specified user.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>userName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the user for whom you are retrieving assigned groups
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">[
  	{
		"group1"
	},
	{
		"group2"
	}
]</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[GET] /users/{userName}/roles</term>
							<listitem>
								<simpara>
									Returns all roles assigned to a specified user.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>userName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the user for whom you are retrieving assigned roles
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">[
  {
    "name": "process-admin"
  },
  {
    "name": "manager"
  },
  {
    "name": "admin"
  }
]</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[POST] /users</term>
							<listitem>
								<simpara>
									Creates a specified user with specified roles and groups.
								</simpara>
								<formalpara>
									<title>Example request body (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "name": "newUser",
  "roles": [
    "admin",
    "developer"
  ],
  "groups": [
    "group1",
    "group2"
  ]
}</programlisting>
									</para>
								</formalpara>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "status": "OK",
  "message": "User newUser is created successfully."
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[Post] /users/{userName}/changePassword</term>
							<listitem>
								<simpara>
									Changes the password of a specified user.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>userName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the user for whom you are changing the password
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example request command</title>
									<para>
										
<screen>curl -u 'baAdmin:password@1' -H "Accept: application/json" -H "Content-Type: application/json" -X POST "http://localhost:8080/decision-central/rest/users/newUser/changePassword" -d newpassword</screen>
									</para>
								</formalpara>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "status": "OK",
  "message": "Password for newUser has been updated successfully."
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[DELETE] /users/{userName}</term>
							<listitem>
								<simpara>
									Deletes a specified user from Business Central.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>userName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the user to be deleted
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "status": "OK",
  "message": "User newUser is deleted successfully."
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[POST] /users/{userName}/groups</term>
							<listitem>
								<simpara>
									Overrides the existing groups assigned to a specified user with new groups.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>userName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the user for whom you are updating groups
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example request body (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">[
  "newGroup"
]</programlisting>
									</para>
								</formalpara>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "status": "OK",
  "message": "Groups [newGroup] are assigned successfully to user wbadmin"
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[POST] /users/{userName}/roles</term>
							<listitem>
								<simpara>
									Overrides the existing roles assigned to a specified user with new roles.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>userName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the user for whom you are updating roles
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example request body (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">[
  "admin"
]</programlisting>
									</para>
								</formalpara>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "status": "OK",
  "message": "Roles [admin] are assigned successfully to user wbadmin"
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
					</variablelist>
				</section>
				<section xml:id="security-management-rest-api-permissions-ref_kie-apis">
					<title>Permissions</title>
					<simpara>
						The Security Management REST API supports the following endpoints for managing permissions granted to the groups, roles, and users in Business Central. The Security Management REST API base URL is <literal>http://SERVER:PORT/decision-central/rest/</literal>. All requests require HTTP Basic authentication or token-based authentication for the <literal>admin</literal> user role.
					</simpara>
					<variablelist>
						<varlistentry>
							<term>[GET] /groups/{groupName}/permissions</term>
							<listitem>
								<simpara>
									Returns all permissions granted to a specified group.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>groupName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the group for whom you are retrieving permissions
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
	"homePage": "HomePerspective",
	"priority": -10,
	"project": {
		"read": {
			"access": false,
			"exceptions": []
		},

	},
	"spaces": {
		"read": {
			"access": true,
			"exceptions": [
				"MySpace"
			]
		},
	},
	"editor": {
		"read": {
			"access": false,
			"exceptions": [
				"GuidedDecisionTreeEditorPresenter"
			]
		},
		"create": null,
		"update": null,
		"delete": null,
		"build": null
	},
	"pages": {
		"read": {
			"access": true,
			"exceptions": []
		},
		"build": null
	},
	"workbench": {
		"editDataObject": false,
		"plannerAvailable": false,
		"editGlobalPreferences": false,
		"editProfilePreferences": false,
		"accessDataTransfer": false,
		"jarDownload": true,
		"editGuidedDecisionTableColumns": true
	}
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[GET] /roles/{roleName}/permissions</term>
							<listitem>
								<simpara>
									Returns all permissions granted to a specified role.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>roleName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the role for whom you are retrieving permissions
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
	"homePage": "HomePerspective",
	"priority": -10,
	"project": {
		"read": {
			"access": false,
			"exceptions": []
		},

	},
	"spaces": {
		"read": {
			"access": true,
			"exceptions": [
				"MySpace"
			]
		},
	},
	"editor": {
		"read": {
			"access": false,
			"exceptions": [
				"GuidedDecisionTreeEditorPresenter"
			]
		},
		"create": null,
		"update": null,
		"delete": null,
		"build": null
	},
	"pages": {
		"read": {
			"access": true,
			"exceptions": []
		},
		"build": null
	},
	"workbench": {
		"editDataObject": false,
		"plannerAvailable": false,
		"editGlobalPreferences": false,
		"editProfilePreferences": false,
		"accessDataTransfer": false,
		"jarDownload": true,
		"editGuidedDecisionTableColumns": true
	}
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[GET] /users/{userName}/permissions</term>
							<listitem>
								<simpara>
									Returns all permissions granted to a specified user.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>userName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the user for whom you are retrieving permissions
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
	"homePage": null,
	"priority": null,
	"project": {
		"read": {
			"access": false,
			"exceptions": []
		},

	},
	"spaces": {
		"read": {
			"access": true,
			"exceptions": [
				"MySpace"
			]
		},
	},
	"editor": {
		"read": {
			"access": false,
			"exceptions": [
				"GuidedDecisionTreeEditorPresenter"
			]
		},
		"create": null,
		"update": null,
		"delete": null,
		"build": null
	},
	"pages": {
		"read": {
			"access": true,
			"exceptions": []
		},
		"build": null
	},
	"workbench": {
		"editDataObject": false,
		"plannerAvailable": false,
		"editGlobalPreferences": false,
		"editProfilePreferences": false,
		"accessDataTransfer": false,
		"jarDownload": true,
		"editGuidedDecisionTableColumns": true
	}
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[Post] /groups/{groupName}/permissions</term>
							<listitem>
								<simpara>
									Updates the permissions of a specified group.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>groupName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the group for whom you are updating permissions
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example request body (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "homepage": "HomePerspective",
  "priority": 10,
  "pages": {
    "create": true,
    "read": false,
    "delete": false,
    "update": false,
    "exceptions": [
      {
        "name": "HomePerspective",
        "permissions": {
          "read": true
        }
      }
    ]
  },
  "project": {
    "create": true,
    "read": true,
    "delete": false,
    "update": false,
    "Build": false
  },
  "spaces": {
    "create": true,
    "read": true,
    "delete": false,
    "update": false
  },
  "editor": {
    "read": true
  },
  "workbench": {
    "editDataObject": true,
    "plannerAvailable": true,
    "editGlobalPreferences": true,
    "editProfilePreferences": true,
    "accessDataTransfer": true,
    "jarDownload": true,
    "editGuidedDecisionTableColumns": true
  }
}</programlisting>
									</para>
								</formalpara>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "status": "OK",
  "message": "Group newGroup permissions are updated successfully."
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>[Post] /roles/{roleName}/permissions</term>
							<listitem>
								<simpara>
									Updates the permissions of a specified role.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Request parameters</title>
									<tgroup cols="4">
										<colspec colname="col_1" colwidth="15*"></colspec>
										<colspec colname="col_2" colwidth="45*"></colspec>
										<colspec colname="col_3" colwidth="15*"></colspec>
										<colspec colname="col_4" colwidth="25*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Name</entry>
												<entry align="left" valign="top">Description</entry>
												<entry align="left" valign="top">Type</entry>
												<entry align="left" valign="top">Requirement</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>roleName</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Name of the role for whom you are updating permissions
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													String
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Required
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<formalpara>
									<title>Example request body (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
	"homepage": "HomePerspective",
	"priority": 10,
	"pages": {
		"create": true,
		"read": false,
		"delete": false,
		"update": false,
		"exceptions": [{
			"name": "HomePerspective",
			"permissions": {
				"read": true
			}
		}]
	},
	"project": {
		"create": true,
		"read": true,
		"delete": false,
		"update": false,
		"Build": false
	},
	"spaces": {
		"create": true,
		"read": true,
		"delete": false,
		"update": false
	},
	"editor": {
		"read": true
	},
	"workbench": {
		"editDataObject": true,
		"plannerAvailable": true,
		"editGlobalPreferences": true,
		"editProfilePreferences": true,
		"accessDataTransfer": true,
		"jarDownload": true,
		"editGuidedDecisionTableColumns": true
	}
}</programlisting>
									</para>
								</formalpara>
								<formalpara>
									<title>Example server response (JSON)</title>
									<para>
										
<programlisting language="json" linenumbering="unnumbered">{
  "status": "OK",
  "message": "Role newRole permissions are updated successfully."
}</programlisting>
									</para>
								</formalpara>
							</listitem>
						</varlistentry>
					</variablelist>
					<section xml:id="security-management-rest-api-supported-permissions-ref_kie-apis">
						<title>Supported permissions in Business Central</title>
						<simpara>
							The following are available permissions in Red Hat Decision Manager. Administrators use these permissions to allow specific actions to a group, role, or user in Business Central.
						</simpara>
						<variablelist>
							<varlistentry>
								<term>Priority</term>
								<listitem>
									<simpara>
										Priority is an integer that defines the precedence of users who are assigned multiple roles or groups. The default value of priority for a new group is <literal>-100</literal>. In Business Central, you can set an integer value as a priority, which is resolved using the following rules:
									</simpara>
									<table colsep="1" frame="all" rowsep="1">
										<title>Priority value table</title>
										<tgroup cols="2">
											<colspec colname="col_1" colwidth="50*"></colspec>
											<colspec colname="col_2" colwidth="50*"></colspec>
											<thead>
												<row>
													<entry align="left" valign="top">Integer value</entry>
													<entry align="left" valign="top">Priority</entry>
												</row>
											</thead>
											<tbody>
												<row>
													<entry align="left" valign="top">
													<simpara>
														Less than -5
													</simpara>
													</entry>
													<entry align="left" valign="top">
													<simpara>
														VERY LOW
													</simpara>
													</entry>
												</row>
												<row>
													<entry align="left" valign="top">
													<simpara>
														Between -5 and 0
													</simpara>
													</entry>
													<entry align="left" valign="top">
													<simpara>
														LOW
													</simpara>
													</entry>
												</row>
												<row>
													<entry align="left" valign="top">
													<simpara>
														Equal to 0
													</simpara>
													</entry>
													<entry align="left" valign="top">
													<simpara>
														NORMAL
													</simpara>
													</entry>
												</row>
												<row>
													<entry align="left" valign="top">
													<simpara>
														Between 0 and 5
													</simpara>
													</entry>
													<entry align="left" valign="top">
													<simpara>
														HIGH
													</simpara>
													</entry>
												</row>
												<row>
													<entry align="left" valign="top">
													<simpara>
														Greater than 5
													</simpara>
													</entry>
													<entry align="left" valign="top">
													<simpara>
														VERY HIGH
													</simpara>
													</entry>
												</row>
											</tbody>
										</tgroup>
									</table>
								</listitem>
							</varlistentry>
							<varlistentry>
								<term>Home Page</term>
								<listitem>
									<simpara>
										Home Page indicates the default landing page for users.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry>
								<term>Workbench</term>
								<listitem>
									<simpara>
										Workbench consists of the following defined permissions:
									</simpara>
									
<programlisting language="json" linenumbering="unnumbered">{
  "editDataObject": true,
  "plannerAvailable": true,
  "editGlobalPreferences": true,
  "editProfilePreferences": true,
  "accessDataTransfer": true,
  "jarDownload": true,
  "editGuidedDecisionTableColumns": true
}</programlisting>
								</listitem>
							</varlistentry>
							<varlistentry>
								<term>Pages, Editor, Spaces, and Projects</term>
								<listitem>
									<simpara>
										The following are possible values for the permissions based on the resource type:
									</simpara>
									<itemizedlist>
										<listitem>
											<simpara>
												<literal>PAGES: read,create,update,delete</literal>
											</simpara>
										</listitem>
										<listitem>
											<simpara>
												<literal>EDITOR: read</literal>
											</simpara>
										</listitem>
										<listitem>
											<simpara>
												<literal>SPACES: read,create,update,delete</literal>
											</simpara>
										</listitem>
										<listitem>
											<simpara>
												<literal>PROJECT: read,create,update,delete,build</literal>
											</simpara>
										</listitem>
									</itemizedlist>
									<simpara>
										You can use following code to add exceptions to <emphasis role="strong">Pages</emphasis>, <emphasis role="strong">Editor</emphasis>, <emphasis role="strong">Spaces</emphasis>, and <emphasis role="strong">Projects</emphasis> permissions:
									</simpara>
									
<programlisting language="json" linenumbering="unnumbered">{
  "pages": {
    "read": false,
    "exceptions": [
      {
        "resourceName": "ProcessInstances",
        "permissions": {
          "read": false
        }
      },
      {
        "resourceName": "ProcessDefinitions",
        "permissions": {
          "read": false
        }
      }
    ]
  }
}</programlisting>
									<simpara>
										The <literal>name</literal> attribute is an identifier of a resource that you add as an exception. Use the following REST API endpoints to get the list of possible identifiers. The REST API base URL is <literal>http://SERVER:PORT/decision-central/rest/</literal>.
									</simpara>
									<itemizedlist>
										<listitem>
											<simpara>
												<literal>[GET] /perspectives</literal>: Returns perspective names of all pages in Business Central
											</simpara>
										</listitem>
										<listitem>
											<simpara>
												<literal>[GET] /editors</literal>: Returns all editors in Business Central
											</simpara>
										</listitem>
										<listitem>
											<simpara>
												<literal>[GET] /spaces</literal>: Returns all spaces in Business Central
											</simpara>
										</listitem>
										<listitem>
											<simpara>
												<literal>[GET] /spaces/{spaceName}/projects</literal>: Returns projects in a specified space
											</simpara>
										</listitem>
									</itemizedlist>
									<formalpara>
										<title>Example server response for pages (JSON)</title>
										<para>
											
<programlisting language="json" linenumbering="unnumbered">"pages": {
	"create": true,
	"read": false,
	"exceptions": [
    {
		"name": "HomePerspective",
		"permissions": {
			"read": true
		}
	}
]
}</programlisting>
										</para>
									</formalpara>
								</listitem>
							</varlistentry>
						</variablelist>
					</section>
				</section>
			</section>
		</chapter>
		<chapter remap="_additional_resources_2" xml:id="additional_resources_2">
			<title>Additional resources</title>
			<itemizedlist>
				<listitem>
					<simpara>
						<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/managing_red_hat_decision_manager_and_kie_server_settings#assembly-managing-and-monitoring-execution-server"><emphasis>Managing and monitoring KIE Server</emphasis></link>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.10/html-single/deploying_and_managing_red_hat_decision_manager_services#assembly-packaging-deploying"><emphasis>Packaging and deploying a Red Hat Decision Manager project</emphasis></link>
					</simpara>
				</listitem>
			</itemizedlist>
		</chapter>
	</part>
	<appendix xml:id="versioning-information">
		<title>Versioning information</title>
		<simpara>
			Documentation last updated on Monday, January 18, 2021.
		</simpara>
	</appendix>
	<appendix xml:id="author-group">
		<title>Contact information</title>
		<simpara>
			Red Hat Decision Manager documentation team: <link xlink:href="mailto:brms-docs@redhat.com">brms-docs@redhat.com</link>
		</simpara>
	</appendix>
</book>

