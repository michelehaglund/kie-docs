<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE book [
<!ENTITY % BOOK_ENTITIES SYSTEM "master.ent">
%BOOK_ENTITIES;
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">
<!ENTITY % DOCBOOK_ENTS PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/dbcentx.mod">
%DOCBOOK_ENTS;
]>
<book version="5.0" xml:lang="en-US" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
	<?asciidoc-toc ?><?asciidoc-numbered ?>
	<info>
		<title>Developing process services in Red Hat Process Automation Manager</title>
		<subtitle></subtitle>
		 <date>2021-01-28</date>
		<productname>Red Hat Process Automation Manager</productname>
		<productnumber>7.10</productnumber>
		<abstract>
			<para>
				This document describes how to develop process services and case definitions with Red Hat Process Automation Manager using Business Process Model and Notation (BPMN) 2.0 models. This document also describes concepts and options for process and case management.
			</para>
		</abstract>
		<xi:include href="Common_Content/Legal_Notice.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
	</info>
	<preface>
		<title>Preface</title>
		<simpara>
			As a developer of business processes, you can use Red Hat Process Automation Manager to develop process services and case definitions using Business Process Model and Notation (BPMN) 2.0 models. BPMN process models are graphical representations of the steps required to achieve a business goal. For more information about BPMN, see the Object Management Group (OMG) <link xlink:href="https://www.omg.org/spec/BPMN/2.0/About-BPMN">Business Process Model and Notation 2.0 specification</link>.
		</simpara>
	</preface>
	<preface xml:id="snip-conscious-language_developing-process-services">
		<title>Making open source more inclusive</title>
		<simpara>
			Red Hat is committed to replacing problematic language in our code, documentation, and web properties. We are beginning with these four terms: master, slave, blacklist, and whitelist. Because of the enormity of this endeavor, these changes will be implemented gradually over several upcoming releases. For more details, see <link xlink:href="https://www.redhat.com/en/blog/making-open-source-more-inclusive-eradicating-problematic-language"><emphasis>our CTO Chris Wright’s message</emphasis></link>.
		</simpara>
	</preface>
	<part xml:id="assembly-designing-business-processes">
		<title>Designing business processes using BPMN models</title>
		<partintro>
			<simpara>
				As a business processes developer, you can use Business Central in Red Hat Process Automation Manager or the Red Hat Process Automation Manager BPMN modeler in VSCode to design business processes to meet specific business requirements. This document describes business processes and the concepts and options for creating them using the process designer in Red Hat Process Automation Manager. This document also describes the BPMN2 elements in Red Hat Process Automation Manager. For more details about BPMN2, see the <link xlink:href="https://www.omg.org/spec/BPMN/2.0/About-BPMN">Business Process Model and Notation Version 2.0</link> specification.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						Red Hat JBoss Enterprise Application Platform 7.3 is installed. For details, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/installation_guide/"><emphasis>Red Hat JBoss Enterprise Application Platform 7.3 Installation Guide</emphasis></link>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Red Hat Process Automation Manager is installed and configured with KIE Server. For more information, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/installing_and_configuring_red_hat_process_automation_manager#assembly-install-on-eap"><emphasis>Installing and configuring Red Hat Process Automation Manager on Red Hat JBoss EAP 7.3</emphasis></link>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Red Hat Process Automation Manager is running and you can log in to Business Central with the <literal>developer</literal> role. For more information, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/installing_and_configuring_red_hat_process_automation_manager#assembly-planning"><emphasis>Planning a Red Hat Process Automation Manager installation</emphasis></link>.
					</simpara>
				</listitem>
			</itemizedlist>
		</partintro>
		<chapter xml:id="business_process">
			<title>Business processes</title>
			<simpara>
				A business process is a diagram that describes the order for a series of steps that must be executed and consists of predefined nodes and connections. Each node represents one step in the process while the connections specify how to transition from one node to another.
			</simpara>
			<simpara>
				A typical business process consists of the following components:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						The header section that comprises global elements such as the name of the process, imports, and variables
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						The nodes section that contains all the different nodes that are part of the process
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						The connections section that links these nodes to each other to create a flow chart
					</simpara>
				</listitem>
			</itemizedlist>
			<figure>
				<title>Business process</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/_images/processes/1142.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>This image shows the steps of "self evaluation" through the project manager and HR manager.</phrase>
					</textobject>
				</mediaobject>
			</figure>
			<simpara>
				Red Hat Process Automation Manager contains the legacy process designer and the new process designer for creating business process diagrams. The new process designer has an improved layout and feature set and continues to be developed. Until all features of the legacy process designer are completely implemented in the new process designer, both designers are available in Business Central for you to use.
			</simpara>
			<note>
				<simpara>
					The legacy process designer in Business Central is deprecated in Red Hat Process Automation Manager 7.10.0. It will be removed in a future Red Hat Process Automation Manager release. The legacy process designer will not receive any new enhancements or features. If you intend to use the new process designer, start migrating your processes to the new designer. Create all new processes in the new process designer. For information about migrating to the new designer, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/deploying_and_managing_red_hat_process_automation_manager_services#migrating-from-legacy-designer-proc"><emphasis>Managing projects in Business Central</emphasis></link>.
				</simpara>
			</note>
		</chapter>
		<chapter xml:id="con-BPMN-DMN-modelers_business-processes">
			<title>Red Hat Process Automation Manager BPMN and DMN modelers</title>
			<simpara>
				Red Hat Process Automation Manager provides the following extensions or applications that you can use to design Business Process Model and Notation (BPMN) process models and Decision Model and Notation (DMN) decision models using graphical modelers.
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						<emphasis role="strong">Business Central</emphasis>: Enables you to view and design BPMN models, DMN models, and test scenario files in a related embedded designer.
					</simpara>
					<simpara>
						To use Business Central, you can set up a development environment containing a Business Central to design business rules and processes, and a KIE Server to execute and test the created business rules and processes.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">Red Hat Process Automation Manager VSCode extension</emphasis>: Enables you to view and design BPMN models, DMN models, and test scenario files in Visual Studio Code (VSCode). The VSCode extension requires VSCode 1.46.0 or later.
					</simpara>
					<simpara>
						To install the Red Hat Process Automation Manager VSCode extension, select the <emphasis role="strong">Extensions</emphasis> menu option in VSCode and search for and install the <emphasis role="strong">Red Hat Business Automation Bundle</emphasis> extension.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">Standalone BPMN and DMN editors</emphasis>: Enable you to view and design BPMN and DMN models embedded in your web applications. To download the necessary files, you can either use the NPM artifacts from the <link xlink:href="https://npm.registry.redhat.com/">NPM registry</link> or download the JavaScript files directly for the DMN standalone editor library at <literal><link xlink:href="https://&lt;YOUR_PAGE&gt;/dmn/index.js">https://&lt;YOUR_PAGE&gt;/dmn/index.js</link></literal> and for the BPMN standalone editor library at <literal><link xlink:href="https://&lt;YOUR_PAGE&gt;/bpmn/index.js">https://&lt;YOUR_PAGE&gt;/bpmn/index.js</link></literal>.
					</simpara>
				</listitem>
			</itemizedlist>
			<section xml:id="proc-vscode-extension_business-processes">
				<title>Installing the Red Hat Process Automation Manager VSCode extension bundle</title>
				<simpara>
					Red Hat Process Automation Manager provides a <emphasis role="strong">Red Hat Business Automation Bundle</emphasis> VSCode extension that enables you to design Decision Model and Notation (DMN) decision models, Business Process Model and Notation (BPMN) 2.0 business processes, and test scenarios directly in VSCode. VSCode is the preferred integrated development environment (IDE) for developing new business applications. Red Hat Process Automation Manager also provides individual <emphasis role="strong">DMN Editor</emphasis> and <emphasis role="strong">BPMN Editor</emphasis> VSCode extensions for DMN or BPMN support only, if needed.
				</simpara>
				<important>
					<simpara>
						The editors in the VSCode are partially compatible with the editors in the Business Central, and several Business Central features are not supported in the VSCode.
					</simpara>
				</important>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							The latest stable version of <link xlink:href="https://code.visualstudio.com/">VSCode</link> is installed.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In your VSCode IDE, select the <emphasis role="strong">Extensions</emphasis> menu option and search for <emphasis role="strong">Red Hat Business Automation Bundle</emphasis> for DMN, BPMN, and test scenario file support.
						</simpara>
						<simpara>
							For DMN or BPMN file support only, you can also search for the individual <emphasis role="strong">DMN Editor</emphasis> or <emphasis role="strong">BPMN Editor</emphasis> extensions.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							When the <emphasis role="strong">Red Hat Business Automation Bundle</emphasis> extension appears in VSCode, select it and click <emphasis role="strong">Install</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							For optimal VSCode editor behavior, after the extension installation is complete, reload or close and re-launch your instance of VSCode.
						</simpara>
					</listitem>
				</orderedlist>
				<simpara>
					After you install the VSCode extension bundle, any <literal>.dmn</literal>, <literal>.bpmn</literal>, or <literal>.bpmn2</literal> files that you open or create in VSCode are automatically displayed as graphical models. Additionally, any <literal>.scesim</literal> files that you open or create are automatically displayed as tabular test scenario models for testing the functionality of your business decisions.
				</simpara>
				<simpara>
					If the DMN, BPMN, or test scenario modelers open only the XML source of a DMN, BPMN, or test scenario file and displays an error message, review the reported errors and the model file to ensure that all elements are correctly defined.
				</simpara>
				<note>
					<simpara>
						For new DMN or BPMN models, you can also enter <literal>dmn.new</literal> or <literal>bpmn.new</literal> in a web browser to design your DMN or BPMN model in the online modeler. When you finish creating your model, you can click <emphasis role="strong">Download</emphasis> in the online modeler page to import your DMN or BPMN file into your Red Hat Process Automation Manager project in VSCode.
					</simpara>
				</note>
			</section>
			<section xml:id="proc-standalone-editors_business-processes">
				<title>Configuring the Red Hat Process Automation Manager standalone editors</title>
				<simpara>
					Red Hat Process Automation Manager provides standalone editors that are distributed in a self-contained library providing an all-in-one JavaScript file for each editor. The JavaScript file uses a comprehensive API to set and control the editor.
				</simpara>
				<simpara>
					You can install the standalone editors in three ways:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Download each JavaScript file manually
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Use the NPM package
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Install the standalone editors using one of the following methods:
						</simpara>
						<simpara>
							<emphasis role="strong">Download each JavaScript file manually</emphasis>: For this method, follow these steps:
						</simpara>
						<orderedlist numeration="loweralpha">
							<listitem>
								<simpara>
									Download the JavaScript files.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Add the downloaded Javascript files to your hosted application.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Add the following <literal>&lt;script&gt;</literal> tag to your HTML page:
								</simpara>
								<formalpara>
									<title>Script tag for your HTML page for the DMN editor</title>
									<para>
										
<screen>&lt;script src="https://&lt;YOUR_PAGE&gt;/dmn/index.js"&gt;&lt;/script&gt;</screen>
									</para>
								</formalpara>
								<formalpara>
									<title>Script tag for your HTML page for the BPMN editor</title>
									<para>
										
<screen>&lt;script src="https://&lt;YOUR_PAGE&gt;/bpmn/index.js"&gt;&lt;/script&gt;</screen>
									</para>
								</formalpara>
							</listitem>
						</orderedlist>
						<simpara>
							<emphasis role="strong">Use the NPM package</emphasis>: For this method, follow these steps:
						</simpara>
						<orderedlist numeration="loweralpha">
							<listitem>
								<simpara>
									Add the NPM package to your <literal>package.json</literal> file:
								</simpara>
								<formalpara>
									<title>Adding the NPM package</title>
									<para>
										
<screen>npm install @redhat/kogito-tooling-kie-editors-standalone</screen>
									</para>
								</formalpara>
							</listitem>
							<listitem>
								<simpara>
									Import each editor library to your TypeScript file:
								</simpara>
								<formalpara>
									<title>Importing each editor</title>
									<para>
										
<screen>import * as DmnEditor from "@redhat/kogito-tooling-kie-editors-standalone/dist/dmn"
import * as BpmnEditor from "@redhat/kogito-tooling-kie-editors-standalone/dist/bpmn"</screen>
									</para>
								</formalpara>
							</listitem>
						</orderedlist>
					</listitem>
					<listitem>
						<simpara>
							After you install the standalone editors, open the required editor by using the provided editor API, as shown in the following example for opening a DMN editor. The API is the same for each editor.
						</simpara>
						<formalpara>
							<title>Opening the DMN standalone editor</title>
							<para>
								
<programlisting language="java" linenumbering="unnumbered">const editor = DmnEditor.open({
  container: document.getElementById("dmn-editor-container"),
  initialContent: Promise.resolve(""),
  readOnly: false,
  origin: "",
  resources: new Map([
    [
      "MyIncludedModel.dmn",
      {
        contentType: "text",
        content: Promise.resolve("")
      }
    ]
  ])
});</programlisting>
							</para>
						</formalpara>
						<simpara>
							Use the following parameters with the editor API:
						</simpara>
						<table colsep="1" frame="all" rowsep="1">
							<title>Example parameters</title>
							<tgroup cols="2">
								<colspec colname="col_1" colwidth="40*"></colspec>
								<colspec colname="col_2" colwidth="60*"></colspec>
								<thead>
									<row>
										<entry align="left" valign="top">Parameter</entry>
										<entry align="left" valign="top">Description</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>container</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											HTML element in which the editor is appended.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>initialContent</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Promise to a DMN model content. This parameter can be empty, as shown in the following examples:
										</simpara>
										<itemizedlist>
											<listitem>
												<simpara>
													<literal>Promise.resolve("")</literal>
												</simpara>
											</listitem>
											<listitem>
												<simpara>
													<literal>Promise.resolve("&lt;DIAGRAM_CONTENT_DIRECTLY_HERE&gt;")</literal>
												</simpara>
											</listitem>
											<listitem>
												<simpara>
													<literal>fetch("MyDmnModel.dmn").then(content ⇒ content.text())</literal>
												</simpara>
											</listitem>
										</itemizedlist>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>readOnly</literal> (Optional)
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Enables you to allow changes in the editor. Set to <literal>false</literal> (default) to allow content editing and <literal>true</literal> for read-only mode in editor.
										</simpara>
										<note>
											<simpara>
												Only the DMN editor supports read-only mode for now.
											</simpara>
										</note>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>origin</literal> (Optional)
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Origin of the repository. The default value is <literal>window.location.origin</literal>.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>resources</literal> (Optional)
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Map of resources for the editor. For example, this parameter is used to provide included models for the DMN editor or work item definitions for the BPMN editor. Each entry in the map contains a resource name and an object that consists of <literal>content-type</literal> (<literal>text</literal> or <literal>binary</literal>) and <literal>content</literal> (similar to the <literal>initialContent</literal> parameter).
										</simpara>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</table>
						<simpara>
							The returned object contains the methods that are required to manipulate the editor.
						</simpara>
						<table colsep="1" frame="all" rowsep="1">
							<title>Returned object methods</title>
							<tgroup cols="2">
								<colspec colname="col_1" colwidth="40*"></colspec>
								<colspec colname="col_2" colwidth="60*"></colspec>
								<thead>
									<row>
										<entry align="left" valign="top">Method</entry>
										<entry align="left" valign="top">Description</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>getContent(): Promise&lt;string&gt;</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Returns a promise containing the editor content.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>setContent(content: string): void</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Sets the content of the editor.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>getPreview(): Promise&lt;string&gt;</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Returns a promise containing an SVG string of the current diagram.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>subscribeToContentChanges(callback: (isDirty: boolean) ⇒ void): (isDirty: boolean) ⇒ void</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Sets a callback to be called when the content changes in the editor and returns the same callback to be used for unsubscription.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>unsubscribeToContentChanges(callback: (isDirty: boolean) ⇒ void): void</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Unsubscribes the passed callback when the content changes in the editor.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>markAsSaved(): void</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Resets the editor state that indicates that the content in the editor is saved. Also, it activates the subscribed callbacks related to content change.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>undo(): void</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Undoes the last change in the editor. Also, it activates the subscribed callbacks related to content change.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>redo(): void</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Redoes the last undone change in the editor. Also, it activates the subscribed callbacks related to content change.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>close(): void</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Closes the editor.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>getElementPosition(selector: string): Promise&lt;Rect&gt;</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Provides an alternative to extend the standard query selector when an element lives inside a canvas or a video component. The <literal>selector</literal> parameter must follow the <literal>&lt;PROVIDER&gt;:::&lt;SELECT&gt;</literal> format, such as <literal>Canvas:::MySquare</literal> or <literal>Video:::PresenterHand</literal>. This method returns a <literal>Rect</literal> representing the element position.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>envelopeApi: MessageBusClientApi&lt;KogitoEditorEnvelopeApi&gt;</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											This is an advanced editor API. For more information about advanced editor API, see <link xlink:href="https://github.com/kiegroup/kogito-tooling/blob/master/packages/envelope-bus/src/api/index.ts#L43-L56">MessageBusClientApi</link> and <link xlink:href="https://github.com/kiegroup/kogito-tooling/blob/master/packages/editor/src/api/KogitoEditorEnvelopeApi.ts#L34-L41">KogitoEditorEnvelopeApi</link>.
										</simpara>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</table>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
		<chapter xml:id="proc-dmn-bpmn-maven-create_business-processes">
			<title>Creating and executing DMN and BPMN models using Maven</title>
			<simpara>
				You can use Maven archetypes to develop DMN and BPMN models in VSCode using the Red Hat Process Automation Manager VSCode extension instead of Business Central. You can then integrate your archetypes with your Red Hat Process Automation Manager decision and process services in Business Central as needed. This method of developing DMN and BPMN models is helpful for building new business applications using the Red Hat Process Automation Manager VSCode extension.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In a command terminal, navigate to a local folder where you want to store the new Red Hat Process Automation Manager project.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Enter the following command to generate a project within a defined folder using the following Maven archetype:
					</simpara>
					<formalpara>
						<title>Generating a project using Maven archetype</title>
						<para>
							
<screen>mvn archetype:generate \
    -DarchetypeGroupId=org.kie \
    -DarchetypeArtifactId=kie-kjar-archetype \
    -DarchetypeVersion=7.48.0.Final-redhat-00002</screen>
						</para>
					</formalpara>
					<simpara>
						This command generates a Maven project with required dependencies and generates required directories and files to build your business application. You can set up and use Git version-control system (recommended) when developing a project.
					</simpara>
					<simpara>
						If you want to generate multiple projects in the same directory, you can specify the <literal>artifactId</literal> and <literal>groupId</literal> of the generated business application by adding <literal>-DgroupId=&lt;groupid&gt; -DartifactId=&lt;artifactId&gt;</literal> to the previous command.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In your VSCode IDE, click <emphasis role="strong">File</emphasis>, select <emphasis role="strong">Open Folder</emphasis>, and navigate to the folder that is generated using the previous command.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Before creating the first asset, set a package for your business application, for example, <literal>org.kie.businessapp</literal>, and create respective directories in the following paths:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<literal>PROJECT_HOME/src/main/java</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>PROJECT_HOME/src/main/resources</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>PROJECT_HOME/src/test/resources</literal>
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						For example, you can create <literal>PROJECT_HOME/src/main/java/org/kie/businessapp</literal> for <literal>org.kie.businessapp</literal> package.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Use VSCode to create assets for your business application. You can create the assets supported by Red Hat Process Automation Manager VSCode extension using the following ways:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								To create a business process, create a new file with <literal>.bpmn</literal> or <literal>.bpmn2</literal> in <literal>PROJECT_HOME/src/main/java/org/kie/businessapp</literal> directory, such as <literal>Process.bpmn</literal>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To create a DMN model, create a new file with <literal>.dmn</literal> in <literal>PROJECT_HOME/src/main/java/org/kie/businessapp</literal> directory, such as <literal>AgeDecision.dmn</literal>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To create a test scenario simulation model, create a new file with <literal>.scesim</literal> in <literal>PROJECT_HOME/src/main/java/org/kie/businessapp</literal> directory, such as <literal>TestAgeScenario.scesim</literal>.
							</simpara>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<simpara>
						After you create the assets in your Maven archetype, navigate to the root directory (contains <literal>pom.xml</literal>) of the project in the command line and run the following command to build the knowledge JAR (KJAR) of your project:
					</simpara>
					
<screen>mvn clean install</screen>
					<simpara>
						If the build fails, address any problems described in the command line error messages and try again to validate the project until the build is successful. However, if the build is successful, you can find the artifact of your business application in <literal>PROJECT_HOME/target</literal> directory.
					</simpara>
					<note>
						<simpara>
							Use <literal>mvn clean install</literal> command often to validate your project after each major change during development.
						</simpara>
					</note>
				</listitem>
			</orderedlist>
			<simpara>
				You can deploy the generated knowledge JAR (KJAR) of your business application on a running KIE Server using the REST API. For more information about using REST API, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/deploying_and_managing_red_hat_process_automation_manager_services#assembly-kie-apis"><emphasis>Interacting with Red Hat Process Automation Manager using KIE APIs</emphasis></link>.
			</simpara>
		</chapter>
		<chapter xml:id="bpmn-con_business-processes">
			<title>Business Process Modeling and Notation Version 2.0</title>
			<simpara>
				The Business Process Modeling and Notation Version 2.0 (BPMN2) specification is an Object Management Group (OMG) specification that defines standards for graphically representing a business process, defines execution semantics for the elements, and provides process definitions in XML format.
			</simpara>
			<simpara>
				A process is defined or determined by its process definition. It exists in a knowledge base and is identified by its ID.
			</simpara>
			<table colsep="1" frame="all" rowsep="1">
				<title>General process properties</title>
				<tgroup cols="2">
					<colspec colname="col_1" colwidth="30*"></colspec>
					<colspec colname="col_2" colwidth="70*"></colspec>
					<thead>
						<row>
							<entry align="left" valign="top">Label</entry>
							<entry align="left" valign="top">Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry align="left" valign="top">
							<simpara>
								<emphasis role="strong">Name</emphasis>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Enter the name of the process.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								<emphasis role="strong">Documentation</emphasis>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Describes the process. The text in this field is included in the process documentation, if applicable.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								<emphasis role="strong">ID</emphasis>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Enter an identifier for this process, for example <literal>orderItems</literal>.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								<emphasis role="strong">Package</emphasis>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Enter the package location for this process in your Red Hat Process Automation Manager project, for example <literal>org.acme</literal>.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								<emphasis role="strong">ProcessType</emphasis>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Specify whether the process is public or private. (Currently not supported.)
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								<emphasis role="strong">Version</emphasis>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Enter the artifact version for the process.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								<emphasis role="strong">Ad hoc</emphasis>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Select this option if this process is an ad hoc subprocess.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								<emphasis role="strong">Process Instance Description</emphasis>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Enter a description of the purpose of the process.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								<emphasis role="strong">Imports</emphasis>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Click to open the <emphasis role="strong">Imports</emphasis> window and add any data type classes required for your process.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								<emphasis role="strong">Executable</emphasis>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Select this option to make the process executable part of your Red Hat Process Automation Manager project.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								<emphasis role="strong">SLA Due Date</emphasis>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Enter the service level agreement (SLA) expiration date.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								<emphasis role="strong">Process Variables</emphasis>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Add any process variables for the process. Process variables are visible within the specific process instance. Process variables are initialized at process creation and destroyed on process completion. Variable tags provide greater control over variable behavior, for example whether the variable is tagged as <literal>required</literal> or <literal>readonly</literal>. For more information about variable tags, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/developing_process_services_in_red_hat_process_automation_manager#variables-con_business-processes"><emphasis>Designing business processes using BPMN models</emphasis></link>.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								<emphasis role="strong">Metadata Attributes</emphasis>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Add any custom metadata attribute name and value that you want to use for custom event listeners, such as a listener to implement some action when a metadata attribute is present.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								<emphasis role="strong">Global Variables</emphasis>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Add any global variables for the process. Global variables are visible to all process instances and assets in a project. Global variables are typically used by business rules and constraints and are created dynamically by the rules or constraints.
							</simpara>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
			<simpara>
				A process is a container for a set of modeling elements. It contains elements that specify the execution workflow of a business process or its parts using flow objects and flows. Each process has its own BPMN2 diagram. Red Hat Process Automation Manager contains the new process designer for creating BPMN2 diagrams and the legacy process designer to open the old BPMN2 diagram with <literal>.bpmn2</literal> extension. The new process designer has an improved layout and feature set and continues to develop. By default, the new diagrams are created in the new process designer.
			</simpara>
			<section xml:id="bpmn-support_business-processes">
				<title>Red Hat Process Automation Manager support for BPMN2</title>
				<simpara>
					With Red Hat Process Automation Manager, you can model your business processes using the BPMN 2.0 standard. You can then use Red Hat Process Automation Manager to run, manage, and monitor these business processes. The full BPMN 2.0 specification also includes details on how to represent items such as choreographies and collaboration. However, Red Hat Process Automation Manager uses only the parts of the specification that you can use to specify executable processes. This includes almost all elements and attributes as defined in the Common Executable subclass of the BPMN2 specification, extended with some additional elements and attributes.
				</simpara>
				<simpara>
					The following table contains a list of icons used to indicate whether a BPMN2 element is supported in the legacy process designer, the legacy and new process designer, or not supported.
				</simpara>
				<table colsep="1" frame="all" rowsep="1">
					<title>Support status icons</title>
					<tgroup cols="2">
						<colspec colname="col_1" colwidth="30*"></colspec>
						<colspec colname="col_2" colwidth="70*"></colspec>
						<thead>
							<row>
								<entry align="left" valign="top">Key</entry>
								<entry align="left" valign="top">Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Supported in the legacy and new process designer
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_star.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn star</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Supported in the legacy process designer only
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bk_x.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bk x</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Not supported
								</simpara>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				<simpara>
					Elements that have no icon do not exist in the BPMN2 specification.
				</simpara>
				<table colsep="1" frame="all" rowsep="1">
					<title>BPMN2 catching events</title>
					<tgroup cols="3">
						<colspec colname="col_1" colwidth="36*"></colspec>
						<colspec colname="col_2" colwidth="32*"></colspec>
						<colspec colname="col_3" colwidth="32*"></colspec>
						<thead>
							<row>
								<entry align="left" valign="top">Element Name</entry>
								<entry align="left" valign="top">Start</entry>
								<entry align="left" valign="top">Intermediate</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry align="left" valign="top">
								<simpara>
									None
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top"></entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Message
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Timer
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Error
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Escalation
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Cancel
								</simpara>
								</entry>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bk_x.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bk x</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Compensation
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Conditional
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Link
								</simpara>
								</entry>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bk_x.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bk x</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Signal
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Multiple
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bk_x.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bk x</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bk_x.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bk x</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Parallel Multiple
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bk_x.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bk x</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bk_x.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bk x</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				<table colsep="1" frame="all" rowsep="1">
					<title>BPMN2 throwing and non-interrupting events</title>
					<tgroup cols="5">
						<colspec colname="col_1" colwidth="20*"></colspec>
						<colspec colname="col_2" colwidth="20*"></colspec>
						<colspec colname="col_3" colwidth="20*"></colspec>
						<colspec colname="col_4" colwidth="20*"></colspec>
						<colspec colname="col_5" colwidth="20*"></colspec>
						<thead>
							<row>
								<entry align="left" valign="top">Element Name</entry>
								<entry align="left" valign="top">Throwing</entry>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">Non-interrupting</entry>
								<entry align="left" valign="top"></entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">
								<simpara>
									End
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Intermediate
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Start
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Intermediate
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									None
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top"></entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Message
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Timer
								</simpara>
								</entry>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Error
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top"></entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Escalation
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Cancel
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bk_x.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bk x</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bk_x.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bk x</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bk_x.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bk x</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Compensation
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top"></entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Conditional
								</simpara>
								</entry>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Link
								</simpara>
								</entry>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bk_x.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bk x</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top"></entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Signal
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Terminate
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top"></entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Multiple
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bk_x.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bk x</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bk_x.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bk x</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bk_x.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bk x</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bk_x.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bk x</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Parallel Multiple
								</simpara>
								</entry>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bk_x.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bk x</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bk_x.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bk x</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				<table colsep="1" frame="all" rowsep="1">
					<title>BPMN2 elements</title>
					<tgroup cols="3">
						<colspec colname="col_1" colwidth="36*"></colspec>
						<colspec colname="col_2" colwidth="32*"></colspec>
						<colspec colname="col_3" colwidth="32*"></colspec>
						<thead>
							<row>
								<entry align="left" valign="top">Element type</entry>
								<entry align="left" valign="top">Element</entry>
								<entry align="left" valign="top">Supported</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Task
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Business rule
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">
								<simpara>
									Script
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">
								<simpara>
									User task
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">
								<simpara>
									Service task
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Subprocesses, including multiple instance subprocesses
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Embedded
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">
								<simpara>
									Ad hoc
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">
								<simpara>
									Reusable
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">
								<simpara>
									Event
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Gateways
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Inclusive
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">
								<simpara>
									Exclusive
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">
								<simpara>
									Parallel
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">
								<simpara>
									Event-based
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">
								<simpara>
									Complex
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bk_x.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bk x</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Connecting objects
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Sequence flows
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">
								<simpara>
									Association flows
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Swimlanes
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Swimlanes
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Artifacts
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Group
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_star.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn star</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">
								<simpara>
									Text annotation
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">
								<simpara>
									Data object
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/grn_check.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>grn check</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				<simpara>
					For more information about the background and applications of BPMN2, see the <link xlink:href="https://www.omg.org/spec/BPMN/2.0/About-BPMN/">OMG Business Process Model and Notation (BPMN) Version 2.0</link> specification.
				</simpara>
			</section>
			<section xml:id="bpmn-events-con_business-processes">
				<title>BPMN2 events in process designer</title>
				<simpara>
					An event is something that happens to a business process. BPMN2 supports three categories of events:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Start
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							End
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Intermediate
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					A start event catches an event trigger, an end event throws an event trigger, and an intermediate event can both catch and throw event triggers.
				</simpara>
				<simpara>
					The following business process diagram shows examples of events: 
					<inlinemediaobject>
						<imageobject>
							<imagedata fileref="images/_images/BPMN2/events.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>events</phrase>
						</textobject>
					</inlinemediaobject>
				</simpara>
				<simpara>
					In this example, the following events occurred:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							The ATM Card Inserted signal start event is triggered when the signal is received.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							The timeout intermediate event is an interrupting event based on a timer trigger. This means that the Wait for PIN subprocess is canceled when the timer event is triggered.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Depending on the inputs to the process, either end event associated with the Validate User Pin task or the end event associated with the Inform User of Timeout task ends the process.
						</simpara>
					</listitem>
				</itemizedlist>
				<section xml:id="bpmn-start-events-ref_business-processes">
					<title>Start events</title>
					<simpara>
						Use start events to indicate the start of a business process. A start event cannot have an incoming sequence flow and must have only one outgoing sequence flow. You can use none start events in top-level processes, embedded subprocess, callable subprocesses, and event subprocesses.
					</simpara>
					<simpara>
						All start events, with the exception of the none start event, are catch events. For example, a signal start event starts the process only when the referenced signal (event trigger) is received. You can configure start events in event subprocesses to be interrupting or non-interrupting. An interrupting start event for an event subprocess stops or interrupts the execution of the containing or parent process. A non-interrupting start event does not stop or interrupt the execution of the containing or parent process.
					</simpara>
					<table colsep="1" frame="all" rowsep="1">
						<title>Start events</title>
						<tgroup cols="4">
							<colspec colname="col_1" colwidth="25*"></colspec>
							<colspec colname="col_2" colwidth="25*"></colspec>
							<colspec colname="col_3" colwidth="25*"></colspec>
							<colspec colname="col_4" colwidth="25*"></colspec>
							<thead>
								<row>
									<entry align="left" valign="top">Start event type</entry>
									<entry align="left" valign="top">Top-level</entry>
									<entry align="left" valign="top">Subprocesses</entry>
									<entry align="left" valign="top"></entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="left" valign="top"></entry>
									<entry align="left" valign="top"></entry>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">Interrupt</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">Non-interrupt</emphasis>
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<xref linkend="none_start_event" />
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-start-node.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn start node</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<xref linkend="conditional_start_event" />
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-conditional-start.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn conditional start</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-conditional-start.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn conditional start</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-conditional-non-interrupt.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn conditional non interrupt</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<xref linkend="compensation_start_event" />
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-compensation-start.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn compensation start</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-compensation-start.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn compensation start</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<xref linkend="error_start_event" />
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-error-start.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn error start</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<xref linkend="escalation_start_event" />
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-escalation-start.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn escalation start</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-escalation-start.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn escalation start</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-escalation-non-interrupt.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn escalation non interrupt</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<xref linkend="message_start_event" />
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-message-node.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn message node</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-message-node.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn message node</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-message-non-interrupt.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn message non interrupt</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<xref linkend="signal_start_event" />
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-signal-start.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn signal start</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-signal-start.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn signal start</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-signal-non-interrupt.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn signal non interrupt</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<xref linkend="timer_start_event" />
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-timer-start.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn timer start</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-timer-start.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn timer start</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-timer-non-interrupt.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn timer non interrupt</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
					<formalpara remap="_none_start_event" xml:id="none_start_event">
						<title>None</title>
						<para>
							The none start event is a start event without a trigger condition. A process or a subprocess can contain at most one none start event, which is triggered on process or subprocess start by default, and the outgoing flow is taken immediately.
						</para>
					</formalpara>
					<simpara>
						When you use a none start event in a subprocess, the execution of the process flow is transferred from the parent process into the subprocess and the none start event is triggered. This means that the token (the current location within the process flow) is passed from the parent process into the subprocess activity and the none start event of the subprocess generates a token of its own.
					</simpara>
					<formalpara remap="_conditional_start_event" xml:id="conditional_start_event">
						<title>Conditional</title>
						<para>
							The conditional start event is a start event with a Boolean condition definition. The execution is triggered when the condition is first evaluated to <literal>false</literal> and then to <literal>true</literal>. The process execution starts only if the condition is evaluated to <literal>true</literal> after the start event has been instantiated.
						</para>
					</formalpara>
					<simpara>
						A process can contain multiple conditional start events.
					</simpara>
					<formalpara remap="_compensation_start_event" xml:id="compensation_start_event">
						<title>Compensation</title>
						<para>
							A compensation start event is used to start a compensation event subprocess when using a subprocess as the target activity of a compensation intermediate event.
						</para>
					</formalpara>
					<formalpara remap="_error_start_event" xml:id="error_start_event">
						<title>Error</title>
						<para>
							A process or subprocess can contain multiple error start events, which are triggered when an error object with a particular <literal>ErrorRef</literal> property is received. The error object can be produced by an error end event. It indicates an incorrect process ending. The process instance with the error start event starts execution after it has received the respective error object. The error start event is executed immediately upon receiving the error object and its outgoing flow is taken.
						</para>
					</formalpara>
					<formalpara remap="_escalation_start_event" xml:id="escalation_start_event">
						<title>Escalation</title>
						<para>
							The escalation start event is a start event that is triggered by an escalation with a particular escalation code. Processes can contain multiple escalation start events. The process instance with an escalation start event starts its execution when it receives the defined escalation object. The process is instantiated and the escalation start event is executed immediately and its outgoing flow is taken.
						</para>
					</formalpara>
					<formalpara remap="_message_start_event" xml:id="message_start_event">
						<title>Message</title>
						<para>
							A process or an event subprocess can contain multiple message start events, which are triggered by a particular message. The process instance with a message start event only starts its execution from this event after it has received the respective message. After the message is received, the process is instantiated and its message start event is executed immediately (its outgoing flow is taken).
						</para>
					</formalpara>
					<simpara>
						Because a message can be consumed by an arbitrary number of processes and process elements, including no elements, one message can trigger multiple message start events and therefore instantiate multiple processes.
					</simpara>
					<formalpara remap="_signal_start_event" xml:id="signal_start_event">
						<title>Signal</title>
						<para>
							The signal start event is triggered by a signal with a particular signal code. A process can contain multiple signal start events. The signal start event only starts its execution within the process instance after the instance has received the respective signal. Then, the signal start event is executed and its outgoing flow is taken.
						</para>
					</formalpara>
					<formalpara remap="_timer_start_event" xml:id="timer_start_event">
						<title>Timer</title>
						<para>
							The timer start event is a start event with a timing mechanism. A process can contain multiple timer start events, which are triggered at the start of the process, after which the timing mechanism is applied.
						</para>
					</formalpara>
					<simpara>
						When you use a timer start event in a subprocess, execution of the process flow is transferred from the parent process into the subprocess and the timer start event is triggered. The token is taken from the parent subprocess activity and the timer start event of the subprocess is triggered and waits for the timer to trigger. After the time defined by the timing definition has been reached, the outgoing flow is taken.
					</simpara>
				</section>
				<section xml:id="bpmn-intermediate-events-ref_business-processes">
					<title>Intermediate events</title>
					<simpara>
						Intermediate events drive the flow of a business process. Intermediate events are used to either catch or throw an event during the execution of the business process. These events are placed between the start and end events and can also be used on the boundary of an activity, like a subprocess or a human task, as a catch event. In the BPMN modeler, you can set a data output in the <emphasis role="strong">Data Output and Assignments</emphasis> field for a boundary event, which is used in a further process to access the process instance details.
					</simpara>
					<simpara>
						For example, you can set the following data output variables for a boundary event:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<literal>nodeInstance</literal>: Carries the node instance details to use in a further process when the boundary event is triggered.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>signal</literal>: Carries the name of the signal.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>event</literal>: Carries the event details.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>workItem</literal>: Carries the work item details. This variable can be set for work item or user task.
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						The boundary catch events can be configured as interrupting or non-interrupting. An interrupting boundary catch event cancels the bound activity whereas a non-interrupting event does not.
					</simpara>
					<simpara>
						An intermediate event handles a particular situation that occurs during process execution. The situation is a trigger for an intermediate event. In a process, intermediate events with one outgoing flow can be placed on an activity boundary.
					</simpara>
					<simpara>
						If the event occurs while the activity is being executed, the event triggers its execution to the outgoing flow. One activity may have multiple boundary intermediate events. Note that depending on the behavior you require from the activity with the boundary intermediate event, you can use either of the following intermediate event types:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								Interrupting: The activity execution is interrupted and the execution of the intermediate event is triggered.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Non-interrupting: The intermediate event is triggered and the activity execution continues.
							</simpara>
						</listitem>
					</itemizedlist>
					<table colsep="1" frame="all" rowsep="1">
						<title>Intermediate events</title>
						<tgroup cols="5">
							<colspec colname="col_1" colwidth="20*"></colspec>
							<colspec colname="col_2" colwidth="20*"></colspec>
							<colspec colname="col_3" colwidth="20*"></colspec>
							<colspec colname="col_4" colwidth="20*"></colspec>
							<colspec colname="col_5" colwidth="20*"></colspec>
							<thead>
								<row>
									<entry align="left" valign="top">Intermediate event type</entry>
									<entry align="left" valign="top">Catching</entry>
									<entry align="left" valign="top">Boundary</entry>
									<entry align="left" valign="top"></entry>
									<entry align="left" valign="top">Throwing</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="left" valign="top"></entry>
									<entry align="left" valign="top"></entry>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">Interrupt</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">Non-interrupt</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<xref linkend="message_intermediate_event" />
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-intermediate-message.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn intermediate message</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-intermediate-message.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn intermediate message</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-message-noninterrupt.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn message noninterrupt</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-message-throwing.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn message throwing</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<xref linkend="timer_intermediate_event" />
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-intermediate-timer.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn intermediate timer</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-intermediate-timer.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn intermediate timer</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-timer-noninterrupt.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn timer noninterrupt</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<xref linkend="error_intermediate_event" />
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-intermediate-error.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn intermediate error</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<xref linkend="signal_intermediate_event" />
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-intermediate-signal.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn intermediate signal</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-intermediate-signal.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn intermediate signal</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-signal-noninterrupt.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn signal noninterrupt</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-signal-throwing.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn signal throwing</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<xref linkend="conditional_intermediate_event" />
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-intermediate-conditional.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn intermediate conditional</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-intermediate-conditional.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn intermediate conditional</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-conditional-noninterrupt.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn conditional noninterrupt</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<xref linkend="compensation_intermediate_event" />
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-intermediate-catch.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn intermediate catch</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-intermediate-catch.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn intermediate catch</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-intermediate-compensation-throwing.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn intermediate compensation throwing</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<xref linkend="escalation_intermediate_event" />
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-intermediate-escalation.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn intermediate escalation</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-intermediate-escalation.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn intermediate escalation</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-intermediate-escalation-non-interrupting.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn intermediate escalation non interrupting</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-intermediate-escalation-throwing.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn intermediate escalation throwing</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<xref linkend="link_intermediate_event" />
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-intermediate-link.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn intermediate link</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
									<entry align="left" valign="top"></entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-intermediate-link-throwing.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn intermediate link throwing</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
					<formalpara remap="_message_intermediate_event" xml:id="message_intermediate_event">
						<title>Message</title>
						<para>
							A message intermediate event is an intermediate event that enables you to manage a message object. Use one of the following events:
						</para>
					</formalpara>
					<itemizedlist>
						<listitem>
							<simpara>
								A throwing message intermediate event produces a message object based on the defined properties.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								A catching message intermediate event listens for a message object with the defined properties.
							</simpara>
						</listitem>
					</itemizedlist>
					<formalpara remap="_timer_intermediate_event" xml:id="timer_intermediate_event">
						<title>Timer</title>
						<para>
							A timer intermediate event enables you to delay workflow execution or to trigger the workflow execution periodically. It represents a timer that can trigger one or multiple times after a specified period of time. When the timer intermediate event is triggered, the timer condition, which is the defined time, is checked and the outgoing flow is taken. When the timer intermediate event is placed in the process workflow, it has one incoming flow and one outgoing flow. Its execution starts when the incoming flow transfers to the event. When a timer intermediate event is placed on an activity boundary, the execution is triggered at the same time as the activity execution.
						</para>
					</formalpara>
					<simpara>
						The timer is canceled if the timer element is canceled, for example by completing or aborting the enclosing process instance.
					</simpara>
					<formalpara remap="_conditional_intermediate_event" xml:id="conditional_intermediate_event">
						<title>Conditional</title>
						<para>
							A conditional intermediate event is an intermediate event with a boolean condition as its trigger. The event triggers further workflow execution when the condition evaluates to <literal>true</literal> and its outgoing flow is taken.
						</para>
					</formalpara>
					<simpara>
						The event must define the <literal role="property">Expression</literal> property. When a conditional intermediate event is placed in the process workflow, it has one incoming flow, one outgoing flow, and its execution starts when the incoming flow transfers to the event. When a conditional intermediate event is placed on an activity boundary, the execution is triggered at the same time as the activity execution. Note that if the event is non-interrupting, the event triggers continuously while the condition is <literal>true</literal>.
					</simpara>
					<formalpara remap="_signal_intermediate_event" xml:id="signal_intermediate_event">
						<title>Signal</title>
						<para>
							A signal intermediate event enables you to produce or consume a signal object. Use either of the following options:
						</para>
					</formalpara>
					<itemizedlist>
						<listitem>
							<simpara>
								A throwing signal intermediate event produces a signal object based on the defined properties.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								A catching signal intermediate event listens for a signal object with the defined properties.
							</simpara>
						</listitem>
					</itemizedlist>
					<formalpara remap="_error_intermediate_event" xml:id="error_intermediate_event">
						<title>Error</title>
						<para>
							An error intermediate event is an intermediate event that can be used only on an activity boundary. It enables the process to react to an error end event in the respective activity. The activity must not be atomic. When the activity finishes with an error end event that produces an error object with the respective <literal>ErrorCode</literal> property, the error intermediate event catches the error object and execution continues to its outgoing flow.
						</para>
					</formalpara>
					<formalpara remap="_compensation_intermediate_event" xml:id="compensation_intermediate_event">
						<title>Compensation</title>
						<para>
							A compensation intermediate event is a boundary event attached to an activity in a transaction subprocess. It can finish with a compensation end event or a cancel end event. The compensation intermediate event must be associated with a flow, which is connected to the compensation activity.
						</para>
					</formalpara>
					<simpara>
						The activity associated with the boundary compensation intermediate event is executed if the transaction subprocess finishes with the compensation end event. The execution continues with the respective flow.
					</simpara>
					<formalpara remap="_escalation_intermediate_event" xml:id="escalation_intermediate_event">
						<title>Escalation</title>
						<para>
							An escalation intermediate event is an intermediate event that enables you to produce or consume an escalation object. Depending on the action the event element should perform, you need to use either of the following options:
						</para>
					</formalpara>
					<itemizedlist>
						<listitem>
							<simpara>
								A throwing escalation intermediate event produces an escalation object based on the defined properties.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								A catching escalation intermediate event listens for an escalation object with the defined properties.
							</simpara>
						</listitem>
					</itemizedlist>
					<formalpara remap="_link_intermediate_event" xml:id="link_intermediate_event">
						<title>Link</title>
						<para>
							A link intermediate event is an intermediate event that makes the process diagram easier to understand without adding additional logic to the process. Link intermediate event is limited to a single process level, for example, link intermediate event cannot connect a parent process with a subprocess.
						</para>
					</formalpara>
					<simpara>
						Use either of the following options:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								A throwing link intermediate event produces a link object based on the defined properties.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								A catching link intermediate event listens for a link object with the defined properties.
							</simpara>
						</listitem>
					</itemizedlist>
				</section>
				<section xml:id="bpmn-end-events-ref_business-processes">
					<title>End events</title>
					<simpara>
						End events are used to end a business process and may not have any outgoing sequence flows. There may be multiple end events in a business process. All end events, with the exception of the none and terminate end events, are throw events.
					</simpara>
					<simpara>
						End events indicate the completion of a business process. An end event is a node that ends a particular workflow. It has one or more incoming sequence flows and no outgoing flow.
					</simpara>
					<simpara>
						A process must contain at least one end event.
					</simpara>
					<simpara>
						During run time, an end event finishes the process workflow. The end event can finish only the workflow that reached it, or all workflows in the process instance, depending on the end event type.
					</simpara>
					<table colsep="1" frame="all" rowsep="1">
						<title>End events</title>
						<tgroup cols="2">
							<colspec colname="col_1" colwidth="30*"></colspec>
							<colspec colname="col_2" colwidth="70*"></colspec>
							<thead>
								<row>
									<entry align="left" valign="top">End event</entry>
									<entry align="left" valign="top">Icon</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<xref linkend="none_end_event" />
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-end-node.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn end node</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<xref linkend="message_end_event" />
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-end-message.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn end message</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<xref linkend="signal_end_event" />
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-end-signal.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn end signal</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<xref linkend="error_end_event" />
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-end-error.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn end error</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<xref linkend="compensation_end_event" />
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-end-compensation.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn end compensation</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<xref linkend="escalation_end_event" />
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-end-escalation.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn end escalation</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<xref linkend="terminate_end_event" />
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/BPMN2/bpmn-end-terminate.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>bpmn end terminate</phrase>
											</textobject>
										</inlinemediaobject>
									</simpara>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
					<formalpara remap="_none_end_event" xml:id="none_end_event">
						<title>None</title>
						<para>
							The none end event specifies that no other special behavior is associated with the end of the process.
						</para>
					</formalpara>
					<formalpara remap="_message_end_event" xml:id="message_end_event">
						<title>Message</title>
						<para>
							When a flow enters a message end event, the flow finishes and the end event produces a message as defined in its properties.
						</para>
					</formalpara>
					<formalpara remap="_signal_end_event" xml:id="signal_end_event">
						<title>Signal</title>
						<para>
							A throwing signal end event is used to finish a process or subprocess flow. When the execution flow enters the element, the execution flow finishes and produces a signal identified by its <literal>SignalRef</literal> property.
						</para>
					</formalpara>
					<formalpara remap="_error_end_event" xml:id="error_end_event">
						<title>Error</title>
						<para>
							The throwing error end event finishes the incoming workflow, which means consumes the incoming token, and produces an error object. Any other running workflows in the process or subprocess remain uninfluenced.
						</para>
					</formalpara>
					<formalpara remap="_compensation_end_event" xml:id="compensation_end_event">
						<title>Compensation</title>
						<para>
							A compensation end event is used to finish a transaction subprocess and trigger the compensation defined by the compensation intermediate event attached to the boundary of the subprocess activities.
						</para>
					</formalpara>
					<formalpara remap="_escalation_end_event" xml:id="escalation_end_event">
						<title>Escalation</title>
						<para>
							The escalation end event finishes the incoming workflow, which means consumes the incoming token, and produces an escalation signal as defined in its properties, triggering the escalation process.
						</para>
					</formalpara>
					<formalpara remap="_terminate_end_event" xml:id="terminate_end_event">
						<title>Terminate</title>
						<para>
							The terminate end event finishes all execution flows in the specified process instance. Activities being executed are canceled. The subprocess instance terminates if it reaches a terminate end event.
						</para>
					</formalpara>
				</section>
			</section>
			<section xml:id="bpmn-tasks-overview-con_business-processes">
				<title>BPMN2 tasks in process designer</title>
				<simpara>
					A task is an automatic activity that is defined in the process model and the smallest unit of work in a process flow. The following task types defined in the BPMN2 specification are available in the Red Hat Process Automation Manager process designer palette:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Business rule task
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Script task
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							User task
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Service task
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							None task
						</simpara>
					</listitem>
				</itemizedlist>
				<table colsep="1" frame="all" rowsep="1">
					<title>Task</title>
					<tgroup cols="2">
						<colspec colname="col_1" colwidth="50*"></colspec>
						<colspec colname="col_2" colwidth="50*"></colspec>
						<tbody>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Business rule task
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bpmn-business-rule-task.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bpmn business rule task</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Script task
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bpmn-script-task.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bpmn script task</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									User task
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bpmn-user-task.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bpmn user task</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Service task
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bpmn-service-task.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bpmn service task</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									None task
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bpmn-none-task.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bpmn none task</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				<simpara>
					In addition, the BPMN2 specification provides the ability to create custom tasks. For more information about custom tasks, see <xref linkend="con_custom-tasks-overview" />.
				</simpara>
				<formalpara>
					<title>Business rule task</title>
					<para>
						A business rule task defines a way to make a decision either through a DMN model or a rule flow group.
					</para>
				</formalpara>
				<informalfigure>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/_images/BPMN2/bpmn-business-rule-task.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>bpmn business rule task</phrase>
					</textobject>
				</mediaobject>
				</informalfigure>
				<simpara>
					When a process reaches a business rule task defined by a DMN model, the process engine executes the DMN model decision with the inputs provided.
				</simpara>
				<simpara>
					When a process reaches a business rule task defined by a rule flow group, the process engine begins executing the rules in the defined rule flow group. When there are no more active rules in the rule flow group, the execution continues to the next element. During the rule flow group execution, new activations belonging to the active rule flow group can be added to the agenda because these activations are changed by other rules.
				</simpara>
				<formalpara>
					<title>Script task</title>
					<para>
						A script task represents a script to be executed during the process execution.
					</para>
				</formalpara>
				<informalfigure>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/_images/BPMN2/bpmn-script-task.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>bpmn script task</phrase>
					</textobject>
				</mediaobject>
				</informalfigure>
				<simpara>
					The associated script can access process variables and global variables. Review the following list before using a script task:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Avoid low-level implementation details in the process. A script task can be used to manipulate variables, but consider using a service task or a custom task when modelling more complex operations.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Ensure that the script is executed immediately, otherwise use an asynchronous service task.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Avoid contacting external services through a script task. Use a service task to model communication with an external service.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Ensure scripts do not throw exceptions. Runtime exceptions should be caught and managed, for example, inside the script or transformed into signals or errors that can then be handled inside the process.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					When a script task is reached during execution, the script is executed and the outgoing flow is taken.
				</simpara>
				<formalpara>
					<title>User task</title>
					<para>
						User tasks are tasks in the process workflow that cannot be performed automatically by the system and therefore require the intervention of a human user, the actor.
					</para>
				</formalpara>
				<informalfigure>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/_images/BPMN2/bpmn-user-task.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>bpmn user task</phrase>
					</textobject>
				</mediaobject>
				</informalfigure>
				<simpara>
					On execution, the User task element is instantiated as a task that appears in the list of tasks of one or more actors. If a User task element defines the <literal>Groups</literal> attribute, it is displayed in task lists of all users that are members of the group. Any user who is a member of the group can claim the task.
				</simpara>
				<simpara>
					After it is claimed, the task disappears from the task list of the other users.
				</simpara>
				<simpara>
					User tasks are implemented as domain-specific tasks and serve as a base for custom tasks.
				</simpara>
				<formalpara>
					<title>Service task</title>
					<para>
						Service tasks are tasks that do not require human interaction. They are completed automatically by an external software service.
					</para>
				</formalpara>
				<informalfigure>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/_images/BPMN2/bpmn-service-task.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>bpmn service task</phrase>
					</textobject>
				</mediaobject>
				</informalfigure>
				<formalpara>
					<title>None task</title>
					<para>
						None tasks are completed on activation. This is a conceptual model only. A none task is never actually executed by an IT system.
					</para>
				</formalpara>
				<informalfigure>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/_images/BPMN2/bpmn-none-task.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>bpmn none task</phrase>
					</textobject>
				</mediaobject>
				</informalfigure>
			</section>
			<section xml:id="con_custom-tasks-overview">
				<title>BPMN2 custom tasks in process designer</title>
				<simpara>
					The BPMN2 specification supports the ability to extend the <literal>bpmn2:task</literal> element to create custom tasks in a software implementation. Similar to standard BPMN tasks, custom tasks identify actions to be completed in a business process model, but they also include specialized functionality, such as compatibility with an external service of a specific type (REST, email, or web service) or checkpoint behavior within a process (milestone).
				</simpara>
				<simpara>
					Red Hat Process Automation Manager provides the following predefined custom tasks under <emphasis role="strong">Custom Tasks</emphasis> in the BPMN modeler palette:
				</simpara>
				<table colsep="1" frame="all" rowsep="1">
					<title>Supported custom tasks</title>
					<tgroup cols="2">
						<colspec colname="col_1" colwidth="50*"></colspec>
						<colspec colname="col_2" colwidth="50*"></colspec>
						<thead>
							<row>
								<entry align="left" valign="top">Custom task type</entry>
								<entry align="left" valign="top">Custom task node</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Rest
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bpmn-rest-custom-task.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bpmn rest custom task</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Email
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bpmn-email-custom-task.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bpmn email custom task</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Log
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bpmn-log-custom-task.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bpmn log custom task</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									WebService
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bpmn-webservice-custom-task.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bpmn webservice custom task</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Milestone
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bpmn-milestone.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bpmn milestone</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									DecisionTask
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bpmn-decision-task-custom.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bpmn decision task custom</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									BusinessRuleTask
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bpmn-business-rule-custom-task.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bpmn business rule custom task</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									KafkaPublishMessages
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bpmn-kafkapublishmessages-task.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bpmn kafkapublishmessages task</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				<simpara>
					For more information about enabling or disabling custom tasks in Business Central, see <xref linkend="manage-service-tasks-proc_custom-tasks" />.
				</simpara>
				<simpara>
					In the BPMN modeler, you can configure the following general properties for a selected custom task:
				</simpara>
				<table colsep="1" frame="all" rowsep="1">
					<title>General custom task properties</title>
					<tgroup cols="2">
						<colspec colname="col_1" colwidth="30*"></colspec>
						<colspec colname="col_2" colwidth="70*"></colspec>
						<thead>
							<row>
								<entry align="left" valign="top">Label</entry>
								<entry align="left" valign="top">Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<emphasis role="strong">Name</emphasis>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Identifies the name of the task. You can also double-click the task node to edit the name.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<emphasis role="strong">Documentation</emphasis>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Describes the task. The text in this field is included in the process documentation, if applicable.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<emphasis role="strong">Is Async</emphasis>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Determines whether this task is invoked asynchronously.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<emphasis role="strong">AdHoc Autostart</emphasis>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Determines whether this is an ad hoc task that is started automatically. This option enables the task to automatically start when the process is created instead of being started by a signal event.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<emphasis role="strong">On Entry Action</emphasis>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Defines a Java, JavaScript, or MVEL script that directs an action at the start of the task.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<emphasis role="strong">On Exit Action</emphasis>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Defines a Java, JavaScript, or MVEL script that directs an action at the end of the task.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<emphasis role="strong">SLA Due Date</emphasis>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Specifies the duration (string type) when the service level agreement (SLA) expires. You can specify the duration in days, minutes, seconds, and milliseconds. For example, <literal>1m</literal> value in <emphasis role="strong">SLA due date</emphasis> field indicates one minute.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<emphasis role="strong">Assignments</emphasis>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Defines data input and output for the task.
								</simpara>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				<formalpara>
					<title>Rest</title>
					<para>
						A rest custom task is used to invoke a remote RESTful service or perform an HTTP request from a process.
					</para>
				</formalpara>
				<informalfigure>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/_images/BPMN2/bpmn-rest-custom-task.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>bpmn rest custom task</phrase>
					</textobject>
				</mediaobject>
				</informalfigure>
				<simpara>
					To use the rest custom task, you can set the URL, HTTP method, and credentials in the process modeler. When a process reaches a rest custom task, it generates an HTTP request and returns the response as a string.
				</simpara>
				<simpara>
					You can click <emphasis role="strong">Assignments</emphasis> in the <emphasis role="strong">Properties</emphasis> panel to open the <emphasis role="strong">REST Data I/O</emphasis> window. In the <emphasis role="strong">REST Data I/O</emphasis> window, you can configure the data input and output as required. For example, to execute a rest custom task, enter the following data inputs in <emphasis role="strong">Data Inputs and Assignments</emphasis> fields:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<emphasis role="strong">Url</emphasis>: Endpoint URL for the REST service. This attribute is mandatory.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Method</emphasis>: Method of the endpoint called, such as <literal>GET</literal>, and <literal>POST</literal>. The default value is <literal>GET</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">ContentType</emphasis>: Data type when sending data. This attribute is mandatory for <literal>POST</literal> and <literal>PUT</literal> requests.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">ContentTypeCharset</emphasis>: Character set for the <literal>ContentType</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Content</emphasis>: Data you want to send. This attribute supports backward compatibility, use the <emphasis role="strong">ContentData</emphasis> attribute instead.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">ContentData</emphasis>: Data you want to send. This attribute is mandatory for <literal>POST</literal> and <literal>PUT</literal> requests.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">ConnectTimeout</emphasis>: Connection timeout (in seconds). The default value is 60 seconds.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">ReadTimeout</emphasis>: Timeout (in seconds) on response. The default value is 60 seconds.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Username</emphasis>: User name for authentication.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Password</emphasis>: Password for authentication.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">AuthUrl</emphasis>: URL that is handling authentication.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">AuthType</emphasis>: Type of URL that is handling authentication.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">HandleResponseErrors</emphasis> (Optional): Instructs handler to throw errors in case of an unsuccessful response codes (except 2XX).
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">ResultClass</emphasis>: Valid name of the class to which the response is unmarshalled. If not provided, then the raw response is returned in a string format.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">AcceptHeader</emphasis>: Value of the accept header.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">AcceptCharset</emphasis>: Character set of the accept header.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Headers</emphasis>: Headers to pass for REST call, such as <literal>content-type=text/html</literal>.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					You can add the following data output in <emphasis role="strong">Data Outputs and Assignments</emphasis> to store the output of the task execution:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<emphasis role="strong">Result</emphasis>: Output variable (object type) of the rest custom task.
						</simpara>
					</listitem>
				</itemizedlist>
				<formalpara>
					<title>Email</title>
					<para>
						An email custom task is used to send an email from a process. It contains email body associated with it.
					</para>
				</formalpara>
				<informalfigure>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/_images/BPMN2/bpmn-email-custom-task.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>bpmn email custom task</phrase>
					</textobject>
				</mediaobject>
				</informalfigure>
				<simpara>
					When an email custom task is activated, the email data is assigned to the data input property of the task. An email custom task completes when the associated email is sent.
				</simpara>
				<simpara>
					You can click <emphasis role="strong">Assignments</emphasis> in the <emphasis role="strong">Properties</emphasis> panel to open the <emphasis role="strong">Email Data I/O</emphasis> window. In the <emphasis role="strong">Email Data I/O</emphasis> window, you can configure the data input as required. For example, to execute an email custom task, enter the following data inputs in <emphasis role="strong">Data Inputs and Assignments</emphasis> fields:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<emphasis role="strong">Body</emphasis>: Body of the email.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">From</emphasis>: Email address of the sender.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Subject</emphasis>: Subject of the email.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">To</emphasis>: Email address of the recipient. You can specify multiple email addresses separated by semicolon (;).
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Template</emphasis> (Optional): Template to generate body of the email. The <literal>Template</literal> attribute overrides the <literal>Body</literal> parameter, if entered.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Reply-To</emphasis>: Email address to which reply message is sent.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Cc</emphasis>: Email address of the copied recipient. You can specify multiple email addresses separated by semicolon (;).
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Bcc</emphasis>: Email address of the blind copied recipient. You can specify multiple email addresses separated by semicolon (;).
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Attachments</emphasis>: Email attachment to send along with the email.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Debug</emphasis>: Flag to enable the debug logging.
						</simpara>
					</listitem>
				</itemizedlist>
				<formalpara>
					<title>Log</title>
					<para>
						A log custom task is used to log a message from a process. When a business process reaches a log custom task, the message data is assigned to the data input property.
					</para>
				</formalpara>
				<informalfigure>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/_images/BPMN2/bpmn-log-custom-task.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>bpmn log custom task</phrase>
					</textobject>
				</mediaobject>
				</informalfigure>
				<simpara>
					A log custom task completes when the associated message is logged. You can click <emphasis role="strong">Assignments</emphasis> in the <emphasis role="strong">Properties</emphasis> panel to open the <emphasis role="strong">Log Data I/O</emphasis> window. In the <emphasis role="strong">Log Data I/O</emphasis> window, you can configure the data input as required. For example, to execute a log custom task, enter the following data inputs in <emphasis role="strong">Data Inputs and Assignments</emphasis> fields:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<emphasis role="strong">Message</emphasis>: Log message from the process.
						</simpara>
					</listitem>
				</itemizedlist>
				<formalpara>
					<title>WebService</title>
					<para>
						A web service custom task is used to invoke a web service from a process. This custom task serves as a web service client with the web service response stored as a string.
					</para>
				</formalpara>
				<informalfigure>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/_images/BPMN2/bpmn-webservice-custom-task.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>bpmn webservice custom task</phrase>
					</textobject>
				</mediaobject>
				</informalfigure>
				<simpara>
					To invoke a web service from a process, you must use the correct task type. You can click <emphasis role="strong">Assignments</emphasis> in the <emphasis role="strong">Properties</emphasis> panel to open the <emphasis role="strong">WS Data I/O</emphasis> window. In the <emphasis role="strong">WS Data I/O</emphasis> window, you can configure the data input and output as required. For example, to execute a web service task, enter the following data inputs in <emphasis role="strong">Data Inputs and Assignments</emphasis> fields:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<emphasis role="strong">Endpoint</emphasis>: Endpoint location of the web service to invoke.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Interface</emphasis>: Name of a service, such as <literal>Weather</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Mode</emphasis>: Mode of a service, such as <literal>SYNC</literal>, <literal>ASYNC</literal>, or <literal>ONEWAY</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Namespace</emphasis>: Namespace of the web service, such as <literal><link xlink:href="http://ws.cdyne.com/WeatherWS/">http://ws.cdyne.com/WeatherWS/</link></literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Operation</emphasis>: Method name to call.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Parameter</emphasis>: Object or array to be sent for the operation.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Url</emphasis>: URL of the web service, such as <literal><link xlink:href="http://wsf.cdyne.com/WeatherWS/Weather.asmx?WSDL">http://wsf.cdyne.com/WeatherWS/Weather.asmx?WSDL</link></literal>.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					You can add the following data output in <emphasis role="strong">Data Outputs and Assignments</emphasis> to store the output of the task execution:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<emphasis role="strong">Result</emphasis>: Output variable (object type) of the web service task.
						</simpara>
					</listitem>
				</itemizedlist>
				<formalpara>
					<title>Milestone</title>
					<para>
						A milestone represents a single point of achievement within a process instance. You can use milestones to flag certain events to trigger other tasks or track the progress of the process.
					</para>
				</formalpara>
				<informalfigure>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/_images/BPMN2/bpmn-milestone.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>bpmn milestone</phrase>
					</textobject>
				</mediaobject>
				</informalfigure>
				<simpara>
					Milestones are useful for Key Performance Indicator (KPI) tracking or for identifying the tasks that are still to be completed. Milestones can occur at the end of a stage in a process or they can be the result of achieving other milestones.
				</simpara>
				<simpara>
					Milestones can reach the following states during process execution:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<literal>Active</literal>: A milestone condition has been defined for the milestone node but it has not been met.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>Completed</literal>: A milestone condition has been met (if applicable), the milestone has been achieved, and the process can proceed to the next task or can end.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					You can click <emphasis role="strong">Assignments</emphasis> in the <emphasis role="strong">Properties</emphasis> panel to open the <emphasis role="strong">Milestone Data I/O</emphasis> window. In the <emphasis role="strong">Milestone Data I/O</emphasis> window, you can configure the data input as required. For example, to execute a milestone, enter the following data inputs in <emphasis role="strong">Data Inputs and Assignments</emphasis> fields:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<emphasis role="strong">Condition</emphasis>: Condition for the milestone to meet. For example, you can enter a Java expression (string data type) that uses a process variable.
						</simpara>
					</listitem>
				</itemizedlist>
				<formalpara>
					<title>DecisionTask</title>
					<para>
						A decision task is used to execute a DMN diagram and invoke a decision engine service from a process. By default, a decision task maps to the DMN decision.
					</para>
				</formalpara>
				<informalfigure>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/_images/BPMN2/bpmn-decision-task-custom.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>bpmn decision task custom</phrase>
					</textobject>
				</mediaobject>
				</informalfigure>
				<simpara>
					You can use decision tasks to make an operational decision in a process. Decision tasks are useful for identifying key decisions in a process that need to be made.
				</simpara>
				<simpara>
					You can click <emphasis role="strong">Assignments</emphasis> in the <emphasis role="strong">Properties</emphasis> panel to open the <emphasis role="strong">Decision Task Data I/O</emphasis> window. In the <emphasis role="strong">Decision Task Data I/O</emphasis> window, you can configure the data input as required. For example, to execute a decision task, enter the following data inputs in <emphasis role="strong">Data Inputs and Assignments</emphasis> fields:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<emphasis role="strong">Decision</emphasis>: Decision for a process to make.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Language</emphasis>: Language of the decision task, defaults to DMN.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Model</emphasis>: Name of the DMN model.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Namespace</emphasis>: Namespace of the DMN model.
						</simpara>
					</listitem>
				</itemizedlist>
				<formalpara>
					<title>BusinessRuleTask</title>
					<para>
						A business rule task is used to evaluate a DRL rule and invoke a decision engine service from a process. By default, a business rule task maps to the DRL rules.
					</para>
				</formalpara>
				<informalfigure>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/_images/BPMN2/bpmn-business-rule-custom-task.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>bpmn business rule custom task</phrase>
					</textobject>
				</mediaobject>
				</informalfigure>
				<simpara>
					You can use business rule tasks to evaluate key business rules in a business process. You can click <emphasis role="strong">Assignments</emphasis> in the <emphasis role="strong">Properties</emphasis> panel to open the <emphasis role="strong">Business Rule Task Data I/O</emphasis> window. In the <emphasis role="strong">Business Rule Task Data I/O</emphasis> window, you can configure the data input as required. For example, to execute a business rule task, enter the following data inputs in <emphasis role="strong">Data Inputs and Assignments</emphasis> fields:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<emphasis role="strong">KieSessionName</emphasis>: Name of the KIE session.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">KieSessionType</emphasis>: Type of the KIE session.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Language</emphasis>: Language of the business rule task, defaults to DRL.
						</simpara>
					</listitem>
				</itemizedlist>
				<formalpara>
					<title>KafkaPublishMessages</title>
					<para>
						A Kafka work item is used to send events to a Kafka topic. This custom task includes a work item handler, which uses the Kafka producer to send messages to a specific Kafka server topic. For example, <literal>KafkaPublishMessages</literal> task publishes messages from a process to a Kafka topic.
					</para>
				</formalpara>
				<informalfigure>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/_images/BPMN2/bpmn-kafkapublishmessages-task.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>bpmn kafkapublishmessages task</phrase>
					</textobject>
				</mediaobject>
				</informalfigure>
				<simpara>
					You can click <emphasis role="strong">Assignments</emphasis> in the <emphasis role="strong">Properties</emphasis> panel to open the <emphasis role="strong">KafkaPublishMessages Data I/O</emphasis> window. In the <emphasis role="strong">KafkaPublishMessages Data I/O</emphasis> window, you can configure the data input and output as required. For example, to execute a Kafka work item, enter the following data inputs in <emphasis role="strong">Data Inputs and Assignments</emphasis> fields:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<emphasis role="strong">Key</emphasis>: Key of the Kafka message to be sent.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Topic</emphasis>: Name of a Kafka topic.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Value</emphasis>: Value of the Kafka message to be sent.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					You can add the following data output in <emphasis role="strong">Data Outputs and Assignments</emphasis> to store the output of the work item execution:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<emphasis role="strong">Result</emphasis>: Output variable (string type) of the work item.
						</simpara>
					</listitem>
				</itemizedlist>
			</section>
			<section xml:id="bpmn-subprocesses-ref_business-processes">
				<title>BPMN2 subprocesses in process designer</title>
				<simpara>
					A subprocess is an activity that contains nodes. You can embed part of the main process within a subprocess. You can also include variable definitions within the subprocess. These variables are accessible to all nodes inside the subprocess.
				</simpara>
				<simpara>
					A subprocess must have at least one incoming connection and one outgoing connection. A terminate end event inside a subprocess ends the subprocess instance but does not automatically end the parent process instance. A subprocess ends when there are no more active elements in it.
				</simpara>
				<simpara>
					The following subprocess types are supported in Red Hat Process Automation Manager:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Embedded subprocess: A subprocess that is a part of the parent process execution and shares the parent process data, along with declaring its own local subprocess variables.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Ad hoc subprocess: A subprocess that has no strict element execution order.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Reusable subprocess: A subprocess that is independent of its parent process.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Event subprocess: A subprocess that is only triggered on a start event or a timer.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Multi-instance subprocess: A subprocess that is instantiated multiple times.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					In the following example, the Place order subprocess checks whether sufficient stock is available to place the order and updates the stock information if the order can be placed. The customer is then notified through the main process based on whether or not the order was placed.
				</simpara>
				<simpara>
					<inlinemediaobject>
						<imageobject>
							<imagedata fileref="images/_images/BPMN2/subprocess.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>subprocess</phrase>
						</textobject>
					</inlinemediaobject>
				</simpara>
				<formalpara>
					<title>Embedded subprocess</title>
					<para>
						An embedded subprocess encapsulates a part of the process. It must contain a start event and at least one end event. Note that the element enables you to define local subprocess variables that are accessible to all elements inside this container.
					</para>
				</formalpara>
				<formalpara remap="_adhoc_sub_process" xml:id="adhoc_sub_process">
					<title>AdHoc subprocess</title>
					<para>
						An ad hoc subprocess or process contains a number of embedded inner activities and is intended to be executed with a more flexible ordering compared to the typical process flow. Unlike regular processes, an ad hoc subprocess does not contain a complete, structured BPMN2 diagram description, for example, from start event to end event. Instead, the ad hoc subprocess contains only activities, sequence flows, gateways, and intermediate events. An ad hoc subprocess can also contain data objects and data associations. The activities within the ad hoc subprocesses are not required to have incoming and outgoing sequence flows. However, you can specify sequence flows between some of the contained activities. When used, sequence flows provide the same ordering constraints as in a regular process. To have any meaning, intermediate events must have outgoing sequence flows and they can be triggered multiple times while the ad hoc subprocess is active.
					</para>
				</formalpara>
				<formalpara>
					<title>Reusable subprocess</title>
					<para>
						Reusable subprocesses appear collapsed within the parent process. To configure a reusable subprocess, select the reusable subprocess, click 
						<inlinemediaobject>
							<imageobject>
								<imagedata fileref="images/_images/getting-started/diagram_properties.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>diagram properties</phrase>
							</textobject>
						</inlinemediaobject>
						, and expand <emphasis role="strong">Implementation/Execution</emphasis>. Set the following properties:
					</para>
				</formalpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<emphasis role="strong">Called Element</emphasis>: The ID of the subprocess that the activity calls and instantiates.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Independent</emphasis>: If selected, the subprocess is started as an independent process. If not selected, the active subprocess is canceled when the parent process is terminated.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Abort Parent</emphasis>: If selected, non-independent reusable subprocesses can abort the parent process when there is an error during the execution of the called process instance. For example, when there’s an error when trying to invoke the subprocess or when the subprocess instance is aborted. This property is visible only when the <emphasis role="strong">Independent</emphasis> property is not selected. The following rules apply:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									If the reusable subprocess is independent, <emphasis role="strong">Abort parent</emphasis> is not available.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									If the reusable subprocess is not independent, <emphasis role="strong">Abort parent</emphasis> is available.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Wait for completion</emphasis>: If selected, the specified <emphasis role="strong">On Exit Action</emphasis> is not performed until the called subprocess instance is terminated. The parent process execution continues when the <emphasis role="strong">On Exit Action</emphasis> completes. This property is selected (set to <literal>true</literal>) by default.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Is Async</emphasis>: Select if the task should be invoked asynchronously and cannot be executed instantly.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Multiple Instance</emphasis>: Select to execute the subprocess elements a specified number of times. If selected, the following options are available:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">MI Execution mode</emphasis>: Indicates if the multiple instances execute in parallel or sequentially. If set to <emphasis role="strong">Sequential</emphasis>, new instances are not created until the previous instance completes.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">MI Collection input</emphasis>: Select a variable that represents a collection of elements for which new instances are created. The subprocess is instantiated as many times as the size of the collection.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">MI Data Input</emphasis>: Specifies the name of the variable containing the selected element in the collection. The variable is used to access elements in the collection.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">MI Collection output</emphasis>: Optional variable that represents the collection of elements that will gather the output of the multi-instance node.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">MI Data Output</emphasis>: Specifies the name of the variable that is added to the output collection that you selected in the <emphasis role="strong">MI Collection output</emphasis> property.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">MI Completion Condition (mvel)</emphasis>: MVEL expression that is evaluated on each completed instance to check if the specified multiple instance node can complete. If it evaluates to <literal>true</literal>, all remaining instances are canceled.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">On Entry Action</emphasis>: A Java or MVEL script that specifies an action at the start of the task.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">On Exit Action</emphasis>: A Java or MVEL script that specifies an action at the end of the task.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">SLA Due Date</emphasis>: The date that the service level agreement (SLA) expires. You can specify the duration in days, minutes, seconds, and milliseconds. For example, <literal>1m</literal> value in SLA due date field indicates one minute.
						</simpara>
					</listitem>
				</itemizedlist>
				<figure>
					<title>Reusable subprocess properties</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/_images/BPMN2/subproc-props.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>A screenshot of Subprocess properties</phrase>
						</textobject>
					</mediaobject>
				</figure>
				<formalpara remap="_event_sub_process" xml:id="event_sub_process">
					<title>Event subprocess</title>
					<para>
						An event subprocess becomes active when its start event is triggered. It can interrupt the parent process context or run in parallel with it.
					</para>
				</formalpara>
				<simpara>
					With no outgoing or incoming connections, only an event or a timer can trigger the subprocess. The subprocess is not part of the regular control flow. Although self-contained, it is executed in the context of the bounding process.
				</simpara>
				<simpara>
					Use an event subprocess within a process flow to handle events that happen outside of the main process flow. For example, while booking a flight, two events may occur:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Cancel booking (interrupting)
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Check booking status (non-interrupting)
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					You can model both of these events using the event subprocess.
				</simpara>
				<formalpara remap="_multiple_instances" xml:id="multiple_instances">
					<title>Multiple instance subprocess</title>
					<para>
						A multiple instances subprocess is instantiated multiple times when its execution is triggered. The instances are created sequentially or parallelly. If you set the sequential mode, a new subprocess instance is created only after the previous instance has finished. However, when you set the parallel mode, all the subprocess instances are created at once.
					</para>
				</formalpara>
				<simpara>
					A multiple instances subprocess has one incoming connection and one outgoing connection.
				</simpara>
			</section>
			<section xml:id="bpmn-gateways_business-processes">
				<title>BPMN2 gateways in process designer</title>
				<simpara>
					Gateways are used to create or synchronize branches in the workflow using a set of conditions called the gating mechanism. BPMN2 supports two types of gateways:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Converging gateways, merging multiple flows into one flow
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Diverging gateways, splitting one flow into multiple flows
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					One gateway cannot have multiple incoming and multiple outgoing flows.
				</simpara>
				<simpara>
					In the following business process diagram, the XOR gateway evaluates only the incoming flow whose condition evaluates to true: 
					<inlinemediaobject>
						<imageobject>
							<imagedata fileref="images/_images/BPMN2/gateway.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>gateway</phrase>
						</textobject>
					</inlinemediaobject>
				</simpara>
				<simpara>
					In this example, the customer details are verified by a user and the process is assigned to a user for approval. If approved, an approval notification is sent to the user. If the event of the request is rejected, a rejection notification is sent to the user.
				</simpara>
				<table colsep="1" frame="all" rowsep="1">
					<title>Gateway elements</title>
					<tgroup cols="2">
						<colspec colname="col_1" colwidth="30*"></colspec>
						<colspec colname="col_2" colwidth="70*"></colspec>
						<thead>
							<row>
								<entry align="left" valign="top">Element type</entry>
								<entry align="left" valign="top">Icon</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry align="left" valign="top">
								<simpara>
									exclusive (XOR)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bpmn-gateway-exclusive.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bpmn gateway exclusive</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Inclusive
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bpmn-gateway-inclusive.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bpmn gateway inclusive</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Parallel
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bpmn-gateway-parallel.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bpmn gateway parallel</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Event
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/BPMN2/bpmn-gateway-event.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>bpmn gateway event</phrase>
										</textobject>
									</inlinemediaobject>
								</simpara>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				<formalpara remap="_exclusive_gateway" xml:id="exclusive_gateway">
					<title>Exclusive</title>
					<para>
						In an exclusive diverging gateway, only the first incoming flow whose condition evaluates to true is chosen. In a converging gateway, the next node is triggered for each triggered incoming flow.
					</para>
				</formalpara>
				<simpara>
					The gateway triggers exactly one outgoing flow. The flow with the constraint evaluated to true and the <emphasis>lowest</emphasis> priority number is taken.
				</simpara>
				<important>
					<simpara>
						Ensure that at least one of the outgoing flows evaluates to true at run time. Otherwise, the process instance terminates with a runtime exception.
					</simpara>
				</important>
				<simpara>
					The converging gateway enables a workflow branch to continue to its outgoing flow as soon as it reaches the gateway. When one of the incoming flows triggers the gateway, the workflow continues to the outgoing flow of the gateway. If it is triggered from more than one incoming flow, it triggers the next node for each trigger.
				</simpara>
				<formalpara remap="_inclusive_gateway" xml:id="inclusive_gateway">
					<title>Inclusive</title>
					<para>
						With an inclusive diverging gateway, the incoming flow is taken and all outgoing flows that evaluate to true are taken. Connections with lower priority numbers are triggered before triggering higher priority connections. Priorities are evaluated but the BPMN2 specification does not guarantee the priority order. Avoid depending on the <literal>priority</literal> attribute in your workflow.
					</para>
				</formalpara>
				<important>
					<simpara>
						Ensure that at least one of the outgoing flows evaluates to true at run time. Otherwise, the process instance terminates with a runtime exception.
					</simpara>
				</important>
				<simpara>
					A converging inclusive gateway merges all incoming flows previously created by an inclusive diverging gateway. It acts as a synchronizing entry point for the inclusive gateway branches.
				</simpara>
				<formalpara>
					<title>Parallel</title>
					<para>
						Use a parallel gateway to synchronize and create parallel flows. With a parallel diverging gateway, the incoming flow is taken, all outgoing flows are taken simultaneously. With a converging parallel gateway, the gateway waits until all incoming flows have entered and only then triggers the outgoing flow.
					</para>
				</formalpara>
				<formalpara remap="_event_based_gateway" xml:id="event_based_gateway">
					<title>Event</title>
					<para>
						An event-based gateway is only diverging and enables you to react to possible events as opposed to the data-based exclusive gateway, which reacts to the process data. The outgoing flow is taken based on the event that occurs. Only one outgoing flow is taken at a time. The gateway might act as a start event, where the process is instantiated only if one of the intermediate events connected to the event-based gateway occurs.
					</para>
				</formalpara>
			</section>
			<section xml:id="bpmn-connecting-ref_business-processes">
				<title>BPMN2 connecting objects in process designer</title>
				<simpara>
					Connecting objects create an association between two BPMN2 elements. When a connecting object is directed, the association is sequential and indicates that one of the elements is executed immediately before the other, within an instance of the process. Connecting objects can start and end at the top, bottom, right, or left of the process elements being associated. The OMG BPMN2 specification allows you to use your discretion, placing connecting objects in a way that makes the process behavior easy to understand and follow.
				</simpara>
				<simpara>
					BPMN2 supports two main types of connecting objects:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Sequence flows: Connect elements of a process and define the order in which those elements are executed within an instance.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Association flows: Connect the elements of a process without execution semantics. Association flows can be undirected or unidirectional.
						</simpara>
					</listitem>
				</itemizedlist>
				<note>
					<simpara>
						The new process designer supports only undirected association flows. The legacy designer supports one direction and Unidirection flows.
					</simpara>
				</note>
			</section>
			<section xml:id="bpmn-lanes-proc_business-processes">
				<title>BPMN2 swimlanes in process designer</title>
				<simpara>
					Swimlanes are process elements that visually group tasks related to one group or user. You can use user tasks in combination with swimlanes to assign multiple user tasks to the same actor, due to <literal>Autoclaim</literal> property of the swimlanes. When a potential owner of a group claims the first task in a swimlane, then other tasks are directly assigned to the same owner. Therefore, the claim for other tasks is not needed by the remaining owners of the group. The <literal>Autoclaim</literal> property enables the auto-assignment of the tasks that are related to a swimlane.
				</simpara>
				<note>
					<simpara>
						If the remaining user tasks in a swimlane contain multiple predefined <literal>ActorIds</literal>, then the user tasks are not assigned automatically.
					</simpara>
				</note>
				<simpara>
					In the following example, an analyst lane consists of two user tasks: 
					<inlinemediaobject>
						<imageobject>
							<imagedata fileref="images/_images/BPMN2/swimlane.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>swimlane</phrase>
						</textobject>
					</inlinemediaobject>
				</simpara>
				<simpara>
					The <emphasis role="strong">Group</emphasis> field in the <emphasis>Update Customer Details</emphasis> and <emphasis>Resolve Customer Issue</emphasis> tasks contain the value <literal>analyst</literal>. When the process is started, and the <emphasis>Update Customer Details</emphasis> task is claimed, started, or completed by an analyst, and the <emphasis>Resolve Customer Issue</emphasis> task is claimed and assigned to the user who completed the first task. However, if only the <emphasis>Update Customer Details</emphasis> task contains the analyst group assigned, and the second task contains no user or group assignments, and the process stops after the first task completes.
				</simpara>
				<simpara>
					You can disable the <literal>Autoclaim</literal> property of the swimlanes. If the <literal>Autoclaim</literal> property is disabled, then the tasks related to a swimlane are not assigned automatically. By default, the value of <literal>Autoclaim</literal> property is set as <literal>true</literal>. If needed, you can also change the default value for the <literal>Autoclaim</literal> property from project settings in Business Central or using the deployment descriptor file.
				</simpara>
				<simpara>
					To change the default value of <literal>Autoclaim</literal> property of swimlanes in Business Central:
				</simpara>
				<orderedlist numeration="arabic">
					<listitem>
						<simpara>
							Go to project <emphasis role="strong">Settings</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Open <emphasis role="strong">Deployment → Environment entries</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Enter the following values in the given fields:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">Name</emphasis> - <literal>Autoclaim</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Value</emphasis> - <literal>"false”</literal>
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
				</orderedlist>
				<simpara>
					If you want to set the environment entry in the XML deployment descriptor, add the following code to the <literal>kie-deployment-descriptor.xml</literal> file:
				</simpara>
				
<programlisting language="xml" linenumbering="unnumbered">&lt;environment-entries&gt;
  ..
    &lt;environment-entry&gt;
        &lt;resolver&gt;mvel&lt;/resolver&gt;
        &lt;identifier&gt;new String ("false")&lt;/identifier&gt;
        &lt;parameters/&gt;
        &lt;name&gt;Autoclaim&lt;/name&gt;
    &lt;/environment-entry&gt;
  ..
&lt;/environment-entries&gt;</programlisting>
			</section>
			<section xml:id="bpmn-artifacts_business-processes">
				<title>BPMN2 artifacts in process designer</title>
				<simpara>
					Artifacts are used to provide additional information about a process. An artifact is any object depicted in the BPMN2 diagram that is not part of the process workflow. Artifacts have no incoming or outgoing flow objects.The purpose of artifacts is to provide additional information required to understand the diagram. The artifacts table lists the artifacts supported in the legacy process designer.
				</simpara>
				<table colsep="1" frame="all" rowsep="1">
					<title>Artifacts</title>
					<tgroup cols="2">
						<colspec colname="col_1" colwidth="30*"></colspec>
						<colspec colname="col_2" colwidth="70*"></colspec>
						<thead>
							<row>
								<entry align="left" valign="top">Artifact type</entry>
								<entry align="left" valign="top">Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Group
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Organizes tasks or processes that have significance in the overall process. Group artifacts are not supported in the new process designer.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Text annotation
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Provides additional textual information for the BPMN2 diagram.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Data object
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Displays the data flowing through a process in the BPMN2 diagram.
								</simpara>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				<section xml:id="proc-create-process-data-object_business-processes">
					<title>Creating data object</title>
					<simpara>
						Data objects represent, for example, documents used in a process in physical and digital form. Data objects appear as a page with a folded top right corner. The following procedure is a generic overview of creating a data object.
					</simpara>
					<note>
						<simpara>
							In Red Hat Process Automation Manager 7.10.0, limited support for data objects is provided that excludes support for data inputs, data outputs, and associations.
						</simpara>
					</note>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								Create a business process.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								In the process designer, select the <emphasis role="strong">Artifacts → Data Object</emphasis> from the tool palette.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Either drag and drop a data object onto the process designer canvas or click a blank area of the canvas.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								If necessary, in the upper-right corner of the screen, click the <emphasis role="strong">Properties</emphasis> icon.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Add or define the data object information listed in the following table as required.
							</simpara>
							<table colsep="1" frame="all" rowsep="1">
								<title>Data object parameters</title>
								<tgroup cols="2">
									<colspec colname="col_1" colwidth="30*"></colspec>
									<colspec colname="col_2" colwidth="70*"></colspec>
									<thead>
										<row>
											<entry align="left" valign="top">Label</entry>
											<entry align="left" valign="top">Description</entry>
										</row>
									</thead>
									<tbody>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<emphasis role="strong">Name</emphasis>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												The name of the data object. You can also double-click the data object shape to edit the name.
											</simpara>
											</entry>
										</row>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<emphasis role="strong">Type</emphasis>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												Select a type of the data object.
											</simpara>
											</entry>
										</row>
									</tbody>
								</tgroup>
							</table>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Save</emphasis>.
							</simpara>
						</listitem>
					</orderedlist>
				</section>
			</section>
		</chapter>
		<chapter xml:id="design-bus-proc">
			<title>Creating a business process in Business Central</title>
			<simpara>
				The process designer is the Red Hat Process Automation Manager process modeler. The output of the modeler is a BPMN 2.0 process definition file. The definition is used as input for the Red Hat Process Automation Manager process engine, which creates a process instance based on the definition.
			</simpara>
			<simpara>
				The procedures in this section provide a general overview of how to create a simple business process. For a more detailed business process example, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/getting_started_with_red_hat_process_automation_manager#assembly-getting-started-process-services"><emphasis>Getting started with business processes</emphasis></link>.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						You have created or imported a Red Hat Process Automation Manager project. For more information about creating projects, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/deploying_and_managing_red_hat_process_automation_manager_services#assembly-managing-projects"><emphasis>Managing projects in Business Central</emphasis></link>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						You have created the required users. User privileges and settings are controlled by the roles assigned to a user and the groups that a user belongs to. For more information about creating users, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/installing_and_configuring_red_hat_process_automation_manager#eap-users-create-proc_install-on-eap"><emphasis>Installing and configuring Red Hat Process Automation Manager on Red Hat JBoss EAP 7.3</emphasis></link>.
					</simpara>
				</listitem>
			</itemizedlist>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click the project name to open the project’s asset list.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Add Asset → Business Process</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In the <emphasis role="strong">Create new Business Process</emphasis> wizard, enter the following values:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<emphasis role="strong">Business Process</emphasis>: New business process name
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Package</emphasis>: Package location for your new business process, for example <literal>com.myspace.myProject</literal>
							</simpara>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Ok</emphasis> to open the process designer.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In the upper-right corner, click the <emphasis role="strong">Properties</emphasis> <inlinemediaobject>
							<imageobject>
								<imagedata fileref="images/_images/processes/diagram_properties.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>diagram properties</phrase>
							</textobject>
						</inlinemediaobject>
						 icon and add your business process property information, such as process data and variables:
					</simpara>
					<orderedlist numeration="loweralpha">
						<listitem>
							<simpara>
								Scroll down and expand <emphasis role="strong">Process Data</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click 
								<inlinemediaobject>
									<imageobject>
										<imagedata fileref="images/_images/processes/btn_plus.png" format="PNG" />
									</imageobject>
									<textobject>
										<phrase>btn plus</phrase>
									</textobject>
								</inlinemediaobject>
								 next to <emphasis role="strong">Process Variables</emphasis> and define the process variables that you want to use in your business process.
							</simpara>
						</listitem>
					</orderedlist>
					<table colsep="1" frame="all" rowsep="1">
						<title>General process properties</title>
						<tgroup cols="2">
							<colspec colname="col_1" colwidth="30*"></colspec>
							<colspec colname="col_2" colwidth="70*"></colspec>
							<thead>
								<row>
									<entry align="left" valign="top">Label</entry>
									<entry align="left" valign="top">Description</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">Name</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Enter the name of the process.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">Documentation</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Describes the process. The text in this field is included in the process documentation, if applicable.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">ID</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Enter an identifier for this process, such as <literal>orderItems</literal>.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">Package</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Enter the package location for this process in your Red Hat Process Automation Manager project, such as <literal>org.acme</literal>.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">ProcessType</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Specify whether the process is public or private (or null, if not applicable).
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">Version</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Enter the artifact version for the process.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">Ad hoc</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Select this option if this process is an ad hoc subprocess.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">Process Instance Description</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Enter a description of the purpose of the process.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">Imports</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Click to open the <emphasis role="strong">Imports</emphasis> window and add any data object classes required for your process.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">Executable</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Select this option to make the process executable part of your Red Hat Process Automation Manager project.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">SLA Due Date</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Enter the service level agreement (SLA) expiration date.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">Process Variables</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Add any process variables for the process. Process variables are visible within the specific process instance. Process variables are initialized at process creation and destroyed on process completion. Variable <emphasis role="strong">Tags</emphasis> provide greater control over variable behavior, for example whether the variable is <literal>required</literal> or <literal>readonly</literal>. For more information about variable tags, see <xref linkend="variables-con_business-processes" />.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">Metadata Attributes</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Add any custom metadata attribute name and value that you want to use for custom event listeners, such as a listener to implement some action when a metadata attribute is present.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">Global Variables</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Add any global variables for the process. Global variables are visible to all process instances and assets in a project. Global variables are typically used by business rules and constraints, and are created dynamically by the rules or constraints.
									</simpara>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
					<simpara>
						The <emphasis role="strong">Metadata Attributes</emphasis> entries are similar to <emphasis role="strong">Process Variables</emphasis> tags in that they enable new <literal>metaData</literal> extensions to BPMN diagrams. However, process variable tags modify the behavior of specific process variables, such as whether a certain variable is <literal>required</literal> or <literal>readonly</literal>, whereas metadata attributes are key-value definitions that modify the behavior of the overall process.
					</simpara>
					<simpara>
						For example, the following custom metadata attribute <literal>riskLevel</literal> and value <literal>low</literal> in a BPMN process correspond to a custom event listener for starting the process:
					</simpara>
					<figure>
						<title>Example metadata attribute and value in the BPMN modeler</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/BPMN2/bpmn-metadata-attributes-custom.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>Image of custom metadata attribute and value</phrase>
							</textobject>
						</mediaobject>
					</figure>
					<formalpara>
						<title>Example metadata attribute and value in the BPMN file</title>
						<para>
							
<programlisting language="xml" linenumbering="unnumbered">&lt;bpmn2:process id="approvals" name="approvals" isExecutable="true" processType="Public"&gt;
  &lt;bpmn2:extensionElements&gt;
    &lt;tns:metaData name="riskLevel"&gt;
      &lt;tns:metaValue&gt;&lt;![CDATA[low]]&gt;&lt;/tns:metaValue&gt;
    &lt;/tns:metaData&gt;
  &lt;/bpmn2:extensionElements&gt;</programlisting>
						</para>
					</formalpara>
					<formalpara>
						<title>Example event listener with metadata value</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">public class MyListener implements ProcessEventListener {
    ...
    @Override
    public void beforeProcessStarted(ProcessStartedEvent event) {
        Map &lt; String, Object &gt; metadata = event.getProcessInstance().getProcess().getMetaData();
        if (metadata.containsKey("low")) {
            // Implement some action for that metadata attribute
        }
    }
}</programlisting>
						</para>
					</formalpara>
				</listitem>
				<listitem>
					<simpara>
						In the process designer canvas, use the left toolbar to drag and drop BPMN components to define your business process logic, connections, events, tasks, or other elements.
					</simpara>
					<note>
						<simpara>
							A task and event in Red Hat Process Automation Manager expect one incoming and one outgoing flow. If you want to design a business process with multiple incoming and multiple outgoing flows, then consider redesigning the business process using gateways. Using gateways makes the logic apparent, which a sequence flow is executing. Therefore, gateways are considered as a best practice for multiple connections.
						</simpara>
						<simpara>
							However, if it is a must to use multiple connections for a task or an event, then you must set the JVM (Java virtual machine) system property <literal>jbpm.enable.multi.con</literal> to <literal>true</literal>. When Business Central and KIE Server run on different servers, then ensure that both of them contains the <literal>jbpm.enable.multi.con</literal> system property as enabled otherwise, the process engine throws an exception.
						</simpara>
					</note>
				</listitem>
				<listitem>
					<simpara>
						After you add and define all components of the business process, click <emphasis role="strong">Save</emphasis> to save the completed business process.
					</simpara>
				</listitem>
			</orderedlist>
			<section xml:id="create-business-rules-task-proc">
				<title>Creating business rules tasks</title>
				<simpara>
					Business rules tasks are used to make decisions through a Decision Model and Notation (DMN) model or rule flow group.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Create a business process.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the process designer, select the <emphasis role="strong">Activities</emphasis> tool from the tool palette.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select <emphasis role="strong">Business Rule</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click a blank area of the process designer canvas.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							If necessary, in the upper-right corner of the screen, click the <emphasis role="strong">Properties</emphasis> icon.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Add or define the task information listed in the following table as required.
						</simpara>
						<table colsep="1" frame="all" rowsep="1">
							<title>Business rule task parameters</title>
							<tgroup cols="2">
								<colspec colname="col_1" colwidth="30*"></colspec>
								<colspec colname="col_2" colwidth="70*"></colspec>
								<thead>
									<row>
										<entry align="left" valign="top">Label</entry>
										<entry align="left" valign="top">Description</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">Name</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											The name of the business rule task. You can also double-click the business rule task shape to edit the name.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">Rule Language</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											The output language for the task. Select Decision Model and Notation (DMN) or Drools (DRL).
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">Rule Flow Group</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											The rule flow group associated with this business task. Select a rule flow group from the list or specify a new rule flow group.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">On Entry Action</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											A Java, JavaScript, or MVEL script that specifies an action at the start of the task.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">On Exit Action</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											A Java, JavaScript, or MVEL script that specifies an action at the end of the task.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">Is Async</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Select if this task should be invoked asynchronously. Make tasks asynchronous if they cannot be executed instantaneously, for example a task performed by an outside service.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">AdHoc Autostart</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Select if this is an ad hoc task that should be started automatically. <emphasis role="strong">AdHoc Autostart</emphasis> enables the task to automatically start when the process or case instance is created instead of being starting by a start task. It is often used in case management.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">SLA Due Date</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											The date that the service level agreement (SLA) expires.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">Assignments</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Click to add local variables.
										</simpara>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</table>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Save</emphasis>.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="create-script-task-proc">
				<title>Creating script tasks</title>
				<simpara>
					Script tasks are used to execute a piece of code written in Java, JavaScript, or MVEL. They contain code snippets that specify the action of the script task. You can include global and process variables in your scripts.
				</simpara>
				<simpara>
					Note that MVEL accepts any valid Java code and additionally provides support for nested access of parameters. For example, the MVEL equivalent of the Java call <literal>person.getName()</literal> is <literal>person.name</literal>. MVEL also provides other improvements over Java and MVEL expressions are generally more convenient for business users.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Create a business process.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the process designer, select the <emphasis role="strong">Activities</emphasis> tool from the tool palette.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select <emphasis role="strong">Script</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click a blank area of the process designer canvas.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							If necessary, in the upper-right corner of the screen, click the <emphasis role="strong">Properties</emphasis> icon.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Add or define the task information listed in the following table as required.
						</simpara>
						<table colsep="1" frame="all" rowsep="1">
							<title>Script task parameters</title>
							<tgroup cols="2">
								<colspec colname="col_1" colwidth="30*"></colspec>
								<colspec colname="col_2" colwidth="70*"></colspec>
								<thead>
									<row>
										<entry align="left" valign="top">Label</entry>
										<entry align="left" valign="top">Description</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">Name</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											The name of the script task. You can also double-click the script task shape to edit the name.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">Documentation</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Enter a description of the task. The text in this field is included in the process documentation. Click the <emphasis role="strong">Documentation</emphasis> tab in the upper-left side of the process designer canvas to view the process documentation.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">Script</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Enter a script in Java, JavaScript, or MVEL to be excuted by the task, and select the script type.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">Is Async</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Select if this task should be invoked asynchronously. Make tasks asynchronous if they cannot be executed instantaneously, for example a task performed by an outside service.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">AdHoc Autostart</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Select if this is an ad hoc task that should be started automatically. <emphasis role="strong">AdHoc Autostart</emphasis> enables the task to automatically start when the process or case instance is created instead of being starting by a start task. It is often used in case management.
										</simpara>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</table>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Save</emphasis>.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="create-service-task-proc">
				<title>Creating service tasks</title>
				<simpara>
					A service task is a task that executes an action based on a web service call or in a Java class method. Examples of service tasks include sending an email and logging a message when these tasks are performed by systems. You can define the parameters (input) and results (output) that are associated with a service task. A Service Task should have one incoming connection and one outgoing connection.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, select the <emphasis role="strong">Admin</emphasis> icon in the top-right corner of the screen and select <emphasis role="strong">Artifacts</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Upload</emphasis> to open the <emphasis role="strong">Artifact upload</emphasis> window.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Choose the <literal>.jar</literal> file and click 
							<inlinemediaobject>
								<imageobject>
									<imagedata fileref="images/_images/processes/upload-button.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>upload button</phrase>
								</textobject>
							</inlinemediaobject>
							.
						</simpara>
						<important>
							<simpara>
								The <literal>.jar</literal> file contains data types (data objects) and Java classes for web service and Java service tasks respectively.
							</simpara>
						</important>
					</listitem>
					<listitem>
						<simpara>
							Create a project you want to use.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Go to your project <emphasis role="strong">Settings → Dependencies</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Add from repository</emphasis>, locate the uploaded <literal>.jar</literal> file, and click <emphasis role="strong">Select</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Open your project <emphasis role="strong">Settings → Work Item Handler</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Enter the following values in the given fields:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">Name</emphasis> - <literal>Service Task</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Value</emphasis> - <literal>new org.jbpm.process.workitem.bpmn2.ServiceTaskHandler(ksession, classLoader)</literal>
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							Save the project.
						</simpara>
						<formalpara>
							<title>Example of creating web service task</title>
							<para>
								The default implementation of a service task in the BPMN2 specification is a web service. The web service support is based on the Apache CXF dynamic client, which provides a dedicated service task handler that implements the <literal>WorkItemHandler</literal> interface:
							</para>
						</formalpara>
						<simpara>
							<literal>org.jbpm.process.workitem.bpmn2.ServiceTaskHandler</literal>
						</simpara>
						<simpara>
							To create a service task using web service, you must configure the web service:
						</simpara>
						<orderedlist numeration="loweralpha">
							<listitem>
								<simpara>
									Create a business process.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									If necessary, in the upper-right corner of the screen, click the <emphasis role="strong">Properties</emphasis> icon.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click 
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/processes/import-property-icon.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>import property icon</phrase>
										</textobject>
									</inlinemediaobject>
									 in the <emphasis role="strong">Imports</emphasis> property to open the <emphasis role="strong">Imports</emphasis> window.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">+Add</emphasis> next to the <emphasis role="strong">WSDL Imports</emphasis> to import the required WSDL (Web Services Description Language) values. For example:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<emphasis role="strong">Location</emphasis>: <link xlink:href="http://localhost:8080/sample-ws-1/SimpleService?wsdl">http://localhost:8080/sample-ws-1/SimpleService?wsdl</link>
										</simpara>
										<simpara>
											The location points to the WSDL file of your service.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<emphasis role="strong">Namespace</emphasis>: <link xlink:href="http://bpmn2.workitem.process.jbpm.org/">http://bpmn2.workitem.process.jbpm.org/</link>
										</simpara>
										<simpara>
											The namespace must match <literal>targetNamespace</literal> from your WSDL file.
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
							<listitem>
								<simpara>
									In the process designer, select the <emphasis role="strong">Activities</emphasis> tool from the tool palette.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Select <emphasis role="strong">Service Task</emphasis>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click a blank area of the process designer canvas.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Add or define the task information listed in the following table as required.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Web service task parameters</title>
									<tgroup cols="2">
										<colspec colname="col_1" colwidth="30*"></colspec>
										<colspec colname="col_2" colwidth="70*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Label</entry>
												<entry align="left" valign="top">Description</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">Name</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													The name of the service task. You can also double-click the service task shape to edit the name.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">Documentation</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Enter a description of the task. The text in this field is included in the process documentation. Click the <emphasis role="strong">Documentation</emphasis> tab in the upper-left side of the process designer canvas to view the process documentation.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">Implementation</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Specify a web service.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">Interface</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													The service used to implement the script, such as <literal>CountriesPortService</literal>.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">Operation</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													The operation that is called by the interface, such as <literal>getCountry</literal>.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">Assignments</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Click to add local variables.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">AdHoc Autostart</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Select if this is an ad hoc task that should be started automatically. <emphasis role="strong">AdHoc Autostart</emphasis> enables the task to automatically start when the process or case instance is created instead of being starting by a start task. It is often used in case management.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">Is Async</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Select if this task should be invoked asynchronously. Make tasks asynchronous if they cannot be executed instantaneously, for example a task performed by an outside service.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">Is Multiple Instance</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Select if this task has multiple instances.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">MI Execution mode</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Select if the multiple instances execute in parallel or sequentially.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">MI Collection input</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Specify a variable that represents a collection of elements for which new instances are created, such as <literal>inputCountryNames</literal>.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">MI Data Input</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Specify the input data assignment that is transferred to a web service, such as <literal>Parameter</literal>.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">MI Collection output</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													The array list in which values returned from the web service task is stored, such as <literal>outputCountries</literal>.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">MI Data Output</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Specify the output data assignment for the web service task, which stores the result of class execution on the server, such as <literal>Result</literal>.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">MI Completion Condition (mvel)</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Specify the MVEL expression that is evaluated on each completed instance to check if the specified multiple instance node can complete.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">On Entry Action</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													A Java, JavaScript, or MVEL script that specifies an action at the start of the task.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">On Exit Action</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													A Java, JavaScript, or MVEL script that specifies an action at the end of the task.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">SLA Due Date</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													The date that the service level agreement (SLA) expires.
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
							</listitem>
						</orderedlist>
						<formalpara>
							<title>Example of creating Java service task</title>
							<para>
								When you create a service task using Java method, then the method can only contain one parameter and returns a single value. To create a service task using a Java method, you must add the Java class to the dependencies of the project:
							</para>
						</formalpara>
						<orderedlist numeration="loweralpha">
							<listitem>
								<simpara>
									Create a business process.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									In the process designer, select the <emphasis role="strong">Activities</emphasis> tool from the tool palette.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Select <emphasis role="strong">Service Task</emphasis>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click a blank area of the process designer canvas.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									If necessary, in the upper-right corner of the screen, click the <emphasis role="strong">Properties</emphasis> icon.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Add or define the task information listed in the following table as required.
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Java service task parameters</title>
									<tgroup cols="2">
										<colspec colname="col_1" colwidth="30*"></colspec>
										<colspec colname="col_2" colwidth="70*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Label</entry>
												<entry align="left" valign="top">Description</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">Name</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													The name of the service task. You can also double-click the service task shape to edit the name.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">Documentation</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Enter a description of the task. The text in this field is included in the process documentation. Click the <emphasis role="strong">Documentation</emphasis> tab in the upper-left side of the process designer canvas to view the process documentation.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">Implementation</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Specify the task is implemented in Java.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">Interface</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													The class used to implement the script, such as <literal>org.xyz.HelloWorld</literal>.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">Operation</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													The method that is called by the interface, such as <literal>sayHello</literal>.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">Assignments</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Click to add local variables.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">AdHoc Autostart</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Select if this is an ad hoc task that should be started automatically. <emphasis role="strong">AdHoc Autostart</emphasis> enables the task to automatically start when the process or case instance is created instead of being starting by a start task. It is often used in case management.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">Is Async</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Select if this task should be invoked asynchronously. Make tasks asynchronous if they cannot be executed instantaneously, for example a task performed by an outside service.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">Is Multiple Instance</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Select if this task has multiple instances.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">MI Execution mode</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Select if the multiple instances execute in parallel or sequentially.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">MI Collection input</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Specify a variable that represents a collection of elements for which new instances are created, such as <literal>InputCollection</literal>.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">MI Data Input</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Specify the input data assignment that is transferred to a Java class. For example, you can set the input data assignments as <literal>Parameter</literal> and <literal>ParameterType</literal>. <literal>ParameterType</literal> represents the type of <literal>Parameter</literal> and sends arguments to the execution of Java method.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">MI Collection output</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													The array list in which values returned from the Java class is stored, such as <literal>OutputCollection</literal>.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">MI Data Output</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Specify the output data assignment for Java service task, which stores the result of class execution on the server, such as <literal>Result</literal>.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">MI Completion Condition (mvel)</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Specify the MVEL expression that is evaluated on each completed instance to check if the specified multiple instance node can complete. For example, <literal>OutputCollection.size() &lt;= 3</literal> indicates more than three people are not addressed.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">On Entry Action</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													A Java, JavaScript, or MVEL script that specifies an action at the start of the task.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">On Exit Action</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													A Java, JavaScript, or MVEL script that specifies an action at the end of the task.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<emphasis role="strong">SLA Due Date</emphasis>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													The date that the service level agreement (SLA) expires.
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
							</listitem>
						</orderedlist>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Save</emphasis>.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="create-user-task-proc">
				<title>Creating user tasks</title>
				<simpara>
					User tasks are used to include human actions as input to the business process.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Create a business process.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the process designer, select the <emphasis role="strong">Activities</emphasis> tool from the tool palette.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select <emphasis role="strong">User</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Either drag and drop a user task onto the process designer canvas or click a blank area of the canvas.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							If necessary, in the upper-right corner of the screen, click the <emphasis role="strong">Properties</emphasis> icon.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Add or define the task information listed in the following table as required.
						</simpara>
						<table colsep="1" frame="all" rowsep="1">
							<title>User task parameters</title>
							<tgroup cols="2">
								<colspec colname="col_1" colwidth="30*"></colspec>
								<colspec colname="col_2" colwidth="70*"></colspec>
								<thead>
									<row>
										<entry align="left" valign="top">Label</entry>
										<entry align="left" valign="top">Description</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">Name</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											The name of the user task. You can also double-click the user task shape to edit the name.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">Documentation</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Enter a description of the task. The text in this field is included in the process documentation. Click the <emphasis role="strong">Documentation</emphasis> tab in the upper-left side of the process designer canvas to view the process documentation.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">Task Name</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											The name of the human task.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">Subject</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Enter a subject for the task.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">Actors</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											The actors responsible for executing the human task. Click <emphasis role="strong">Add</emphasis> to add a row then select an actor from the list or click <emphasis role="strong">New</emphasis> to add a new actor.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">Groups</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											The groups responsible for executing the human task. Click <emphasis role="strong">Add</emphasis> to add a row then select a group from the list or click <emphasis role="strong">New</emphasis> to add a new group.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">Assignments</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Local variables for this task. Click to open the <emphasis role="strong">Task Data I/O</emphasis> window then add data inputs and outputs as required. You can also add MVEL expressions as data input and output assignments. For more information about MVEL language, see <link xlink:href="http://mvel.documentnode.com/">Language Guide for 2.0</link>.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">Reassignments</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Specify a different actor to complete this task.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">Notifications</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Click to specify notifications associated with the task.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">Is Async</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Select if this task should be invoked asynchronously. Make tasks asynchronous if they cannot be executed instantaneously, for example a task performed by an outside service.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">Skippable</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Select if this task is not mandatory.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">Priority</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Specify a priority for the task.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">Description</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Enter a description for the human task.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">Created By</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											The user that created this task.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">AdHoc Autostart</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Select if this is an ad hoc task that should be started automatically. <emphasis role="strong">AdHoc Autostart</emphasis> enables the task to automatically start when the process or case instance is created instead of being starting by a start task. It is often used in case management.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">Multiple Instance</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											Select if this task has multiple instances.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">On Entry Action</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											A Java, JavaScript, or MVEL script that specifies an action at the start of the task.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">On Exit Action</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											A Java, JavaScript, or MVEL script that specifies an action at the end of the task.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">Content</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											The content of the script.
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<emphasis role="strong">SLA Due Date</emphasis>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											The date that the service level agreement (SLA) expires.
										</simpara>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</table>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Save</emphasis>.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="bpmn-user-task-lifecycle-ref_business-processes">
				<title>BPMN2 user task life cycle in process designer</title>
				<simpara>
					You can trigger a user task element during the process instance execution to create a user task. The user task service of the task execution engine executes the user task instance. The process instance continues the execution only when the associated user task is completed or aborted. A user task life cycle is as follows:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							When a process instance enters a user task element, the user task is in the <literal>Created</literal> stage.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>Created</literal> stage is a transient stage and the user task enters the <literal>Ready</literal> stage immediately. The task appears in the task list of all the actors who are allowed to execute the task.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							When an actor claims the user task, the task becomes <literal>Reserved</literal>.
						</simpara>
					</listitem>
				</itemizedlist>
				<note>
					<simpara>
						If a user task has a single potential actor, the task is assigned to that actor upon creation.
					</simpara>
				</note>
				<itemizedlist>
					<listitem>
						<simpara>
							When an actor who claimed the user task starts the execution, the status of the user task changes to <literal>InProgress</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Once an actor completes the user task, the status changes to <literal>Completed</literal> or <literal>Failed</literal> depending on the execution outcome.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					There are also several other life cycle methods, including:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Delegating or forwarding a user task so the user task is assigned to another actor.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Revoking a user task, then the user task is no longer claimed by a single actor but is available to all actors who are allowed to take it.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Suspending and resuming a user task.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Stopping a user task that is in progress.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Skipping a user task, in which the execution of the task is suspended.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					For more information about the user task life cycle, refer <link xlink:href="http://download.boulder.ibm.com/ibmdl/pub/software/dw/specs/ws-bpel4people/WS-HumanTask_v1.pdf">Web Services Human Task</link>.
				</simpara>
			</section>
			<section xml:id="bpmn-user-task-permission-matrix-ref_business-processes">
				<title>BPMN2 task permission matrix in process designer</title>
				<simpara>
					The user task permission matrix summarizes the actions that are allowed for specific user roles. The user roles are as follows:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Potential owner: User who can claim the task, which was claimed earlier and is released and forwarded. The tasks with <literal>Ready</literal> status can be claimed, and the potential owner becomes the actual owner of the task.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Actual owner: User who claims the task and progresses the task to completion or failure.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Business administrator: Super user who can modify the status or progress with the task at any point of the task life cycle.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					The following permission matrix represents the authorizations for all operations that modify a task.
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<literal>+</literal> indicates that the user role is allowed to do the specified operation.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>-</literal> indicates that the user role is not allowed to do the specified operation, or the operation does not match with the user’s role.
						</simpara>
					</listitem>
				</itemizedlist>
				<table colsep="1" frame="all" rowsep="1">
					<title>Main operations permissions matrix</title>
					<tgroup cols="4">
						<colspec colname="col_1" colwidth="25*"></colspec>
						<colspec colname="col_2" colwidth="25*"></colspec>
						<colspec colname="col_3" colwidth="25*"></colspec>
						<colspec colname="col_4" colwidth="25*"></colspec>
						<thead>
							<row>
								<entry align="left" valign="top">Operation</entry>
								<entry align="left" valign="top">Potential owner</entry>
								<entry align="left" valign="top">Actual owner</entry>
								<entry align="left" valign="top">Business administrator</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry align="left" valign="top">
								<simpara>
									activate
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>-</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>-</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									claim
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>-</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									complete
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>-</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									delegate
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									fail
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>-</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									forward
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									nominate
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>-</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>-</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									release
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>-</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									remove
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>-</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>-</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									resume
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									skip
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									start
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									stop
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>-</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									suspend
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>+</literal>
								</simpara>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</section>
			<section xml:id="copy-process-proc">
				<title>Making a copy of a business process</title>
				<simpara>
					You can make a copy of a business process in Business Central and modify the copied process as needed.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In the business process designer, click <emphasis role="strong">Copy</emphasis> in the upper-right toolbar.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Make a Copy</emphasis> window, enter a new name for the copied business process, select the target package, and optionally add a comment.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Make a Copy</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Modify the copied business process as needed and click <emphasis role="strong">Save</emphasis> to save the updated business process.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="resize-elements">
				<title>Resizing elements and using the zoom function to view business processes</title>
				<simpara>
					You can resize individual elements in a business process and zoom in or out to modify the view of your business process.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In the business process designer, select the element and click the red dot in the lower-right corner of the element.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Drag the red dot to resize the element.
						</simpara>
						<figure>
							<title>Resize an element</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/processes/red-dot-resize.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>Resizing an element</phrase>
								</textobject>
							</mediaobject>
						</figure>
					</listitem>
					<listitem>
						<simpara>
							To zoom in or out to view the entire diagram, click the plus or minus sign on the lower-right side of the canvas.
						</simpara>
						<figure>
							<title>Enlarge or shrink a business process</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/processes/resize-diagram.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>Zooming to view the entire diagram</phrase>
								</textobject>
							</mediaobject>
						</figure>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="generate-process-docs-proc_business-processes">
				<title>Generating process documentation in Business Central</title>
				<simpara>
					In the process designer in Business Central, you can view and print a report of the process definition. The process documentation summarizes the components, data, and visual flow of the process in a format (PDF) that you can print and share more easily.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, navigate to a project that contains a business process and select the process.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the process designer, click the <emphasis role="strong">Documentation</emphasis> tab to view the summary of the process file, and click <emphasis role="strong">Print</emphasis> in the top-right corner of the window to print the PDF report.
						</simpara>
						<figure>
							<title>Generate process documentation</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/processes/generate-process-docs.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>Project-level service task settings</phrase>
								</textobject>
							</mediaobject>
						</figure>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
		<chapter xml:id="variables-con_business-processes">
			<title>Variables</title>
			<simpara>
				Variables store data that is used during runtime. Process designer uses three types of variables:
			</simpara>
			<formalpara>
				<title>Global variables</title>
				<para>
					Global variables are visible to all process instances and assets in a particular session. They are intended to be used primarily by business rules and by constraints and are created dynamically by rules or constraints.
				</para>
			</formalpara>
			<formalpara>
				<title>Process variables</title>
				<para>
					Process variables are defined as properties in the BPMN2 definition file and are visible within the process instance. They are initialized at process creation and destroyed on process completion.
				</para>
			</formalpara>
			<formalpara>
				<title>Local variables</title>
				<para>
					Local variables are associated with and available within specific process elements, such as activities. They are initialized when the element context is initialized, that is, when the execution workflow enters the node and execution of the <literal>onEntry</literal> action has finished, if applicable. They are destroyed when the element context is destroyed, that is, when the execution workflow leaves the element.
				</para>
			</formalpara>
			<simpara>
				An element, such as a process, sub-process, or task can only access variables in its own and parent contexts. An element cannot access a variable defined in the element’s child element. Therefore, when an elements requires access to a variable during runtime, its own context is searched first.
			</simpara>
			<simpara>
				If the variable cannot be found directly in the element’s context, the immediate parent context is searched. The search continues until the process context is reached. In case of global variables, the search is performed directly on the session container.
			</simpara>
			<simpara>
				If the variable cannot be found, a read access request returns <literal>null</literal> and a write access produces an error message, and the process continues its execution. Variables are searched for based on their ID.
			</simpara>
			<section xml:id="con-variable-tags_business-processes">
				<title>Variable tags</title>
				<simpara>
					For greater control over variable behavior, you can tag process variables and local variables in the BPMN process file. Tags are simple string values that you add as metadata to a specific variable.
				</simpara>
				<simpara>
					Red Hat Process Automation Manager supports the following tags for process variables and local variables:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<literal>required</literal>: Sets the variable as a requirement in order to start a process instance. If a process instance starts without the required variable, Red Hat Process Automation Manager generates a <literal>VariableViolationException</literal> error.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>readonly</literal>: Indicates that the variable is for informational purposes only and can be set only once during process instance execution. If the value of a read-only variable is modified at any time, Red Hat Process Automation Manager generates a <literal>VariableViolationException</literal> error.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>restricted</literal>: A special tag that is used with the <literal>VariableGuardProcessEventListener</literal> to indicate that permission is granted to modify the variable based on the required and the existing role.
						</simpara>
						<simpara>
							<literal>VariableGuardProcessEventListener</literal> is extended from <literal>DefaultProcessEventListener</literal> and supports two different constructors:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>VariableGuardProcessEventListener</literal>
								</simpara>
								
<programlisting language="java" linenumbering="unnumbered">public VariableGuardProcessEventListener(String requiredRole, IdentityProvider identityProvider) {
    this("restricted", requiredRole, identityProvider);
}</programlisting>
							</listitem>
							<listitem>
								<simpara>
									<literal>VariableGuardProcessEventListener</literal>
								</simpara>
								
<programlisting language="java" linenumbering="unnumbered">public VariableGuardProcessEventListener(String tag, String requiredRole, IdentityProvider identityProvider) {
    this.tag = tag;
    this.requiredRole = requiredRole;
    this.identityProvider = identityProvider;
}</programlisting>
								<simpara>
									Therefore, you must add an event listener to the session with the allowed role name and identity provider that returns the user role as shown in the following example:
								</simpara>
								
<programlisting language="java" linenumbering="unnumbered">ksession.addEventListener(new VariableGuardProcessEventListener("AdminRole", myIdentityProvider));</programlisting>
							</listitem>
						</itemizedlist>
						<simpara>
							In the previous example, the <literal>VariableGuardProcessEventListener</literal> method verifies if a variable is tagged with a security constraint tag (<literal>restricted</literal>). If the user does not have the required role, then Red Hat Process Automation Manager generates a <literal>VariableViolationException</literal> error.
						</simpara>
					</listitem>
				</itemizedlist>
				<note>
					<simpara>
						The variable tags that appear in the Business Central UI, for example <literal>internal</literal>, <literal>input</literal>, <literal>output</literal>, <literal>business-relevant</literal>, and <literal>tracked</literal> are not supported in Red Hat Process Automation Manager.
					</simpara>
				</note>
				<simpara>
					You can add the tag directly to the BPMN process source file as a <literal>customTags</literal> metadata property with the tag value defined in the format <literal>![CDATA[<emphasis>TAG_NAME</emphasis>]]</literal>.
				</simpara>
				<simpara>
					For example, the following BPMN process applies the <literal>required</literal> tag to an <literal>approver</literal> process variable:
				</simpara>
				<figure>
					<title>Example variable tagged in the BPMN modeler</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/_images/BPMN2/bpmn-variable-tags-ui.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>Image of variable tags in BPMN modeler</phrase>
						</textobject>
					</mediaobject>
				</figure>
				<formalpara>
					<title>Example variable tagged in a BPMN file</title>
					<para>
						
<programlisting language="xml" linenumbering="unnumbered">&lt;bpmn2:property id="approver" itemSubjectRef="ItemDefinition_9" name="approver"&gt;
  &lt;bpmn2:extensionElements&gt;
    &lt;tns:metaData name="customTags"&gt;
      &lt;tns:metaValue&gt;&lt;![CDATA[required]]&gt;&lt;/tns:metaValue&gt;
    &lt;/tns:metaData&gt;
  &lt;/bpmn2:extensionElements&gt;
&lt;/bpmn2:property&gt;</programlisting>
					</para>
				</formalpara>
				<simpara>
					You can use more than one tag for a variable where applicable. You can also define custom variable tags in your BPMN files to make variable data available to Red Hat Process Automation Manager process event listeners. Custom tags do not influence the Red Hat Process Automation Manager runtime as the standard variable tags do and are for informational purposes only. You define custom variable tags in the same <literal>customTags</literal> metadata property format that you use for standard Red Hat Process Automation Manager variable tags.
				</simpara>
			</section>
			<section xml:id="proc-define-global-variables_business-processes">
				<title>Defining global variables</title>
				<simpara>
					Global variables exist in a knowledge session and can be accessed and are shared by all assets in that session. They belong to the particular session of the Knowledge Base and they are used to pass information to the engine. Every global variable defines its ID and item subject reference. The ID serves as the variable name and must be unique within the process definition. The item subject reference defines the data type the variable stores.
				</simpara>
				<important>
					<simpara>
						The rules are evaluated at the moment the fact is inserted. Therefore, if you are using a global variable to constrain a fact pattern and the global is not set, the system returns a <literal>NullPointerException</literal>.
					</simpara>
				</important>
				<simpara>
					Global variables are initialized either when the process with the variable definition is added to the session or when the session is initialized with globals as its parameters.
				</simpara>
				<simpara>
					Values of global variables can typically be changed during the assignment, which is a mapping between a process variable and an activity variable. The global variable is then associated with the local activity context, local activity variable, or by a direct call to the variable from a child context.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have created a project in Business Central and it contains at least one business process asset.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Open a business process asset.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click a blank area of the process designer canvas.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the <emphasis role="strong">Properties</emphasis> icon on the upper-right side of the screen to open the <emphasis role="strong">Properties</emphasis> panel.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							If necessary, expand the <emphasis role="strong">Process</emphasis> section.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Global Variables</emphasis> sub-section, click the plus icon.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Enter a name for the variable in the <emphasis role="strong">Name</emphasis> box.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select a data type from the <emphasis role="strong">Data Type</emphasis> menu.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="proc-define-process-variables_business-processes">
				<title>Defining process variables</title>
				<simpara>
					Process variables are defined as properties in the BPMN2 definition file and are visible within the process instance. They are initialized at process creation and destroyed on process completion.
				</simpara>
				<simpara>
					A process variable is a variable that exists in a process context and can be accessed by its process or its child elements. Process variables belong to a particular process instance and cannot be accessed by other process instances. Every process variable defines its ID and item subject reference: the ID serves as the variable name and must be unique within the process definition. The item subject reference defines the data type the variable stores.
				</simpara>
				<simpara>
					Process variables are initialized when the process instance is created. Their value can be changed by the process activities using the Assignment, when the global variable is associated with the local Activity context, local Activity variable, or by a direct call to the variable from a child context.
				</simpara>
				<simpara>
					Note that process variables should be mapped to local variables.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have created a project in Business Central and it contains at least one business process asset.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Open a business process asset.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click a blank area of the process designer canvas.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the <emphasis role="strong">Properties</emphasis> icon on the upper-right side of the screen to open the <emphasis role="strong">Properties</emphasis> panel.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							If necessary, expand the <emphasis role="strong">Process Data</emphasis> section.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Process Variables</emphasis> sub-section, click the plus icon.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Enter a name for the variable in the <emphasis role="strong">Name</emphasis> box.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select a data type from the <emphasis role="strong">Data Type</emphasis> menu.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="proc-define-local-variables_business-processes">
				<title>Defining local variables</title>
				<simpara>
					Local variables are available within their process element, such as an activity. They are initialized when the element context is initialized, that is, when the execution workflow enters the node and execution of the <literal>onEntry</literal> action has finished, if applicable. They are destroyed when the element context is destroyed, that is, when the execution workflow leaves the element.
				</simpara>
				<simpara>
					Values of local variables can be mapped to global or process variables. This enables you to maintain relative independence of the parent element that accommodates the local variable. Such isolation might help prevent technical exceptions.
				</simpara>
				<simpara>
					A local variable is a variable that exists in a child element context of a process and can be accessed only from within this context. Local variables belong to the particular element of a process.
				</simpara>
				<simpara>
					For tasks, with the exception of the Script task, you can define <literal role="property">Data Input Assignments</literal> and <literal role="property">Data Output Assignments</literal> in the <emphasis role="strong">Assignments</emphasis> property. Data Input Assignment defines variables that enter the Task and therefore provide the entry data needed for the task execution. The Data Output Assignments can refer to the context of the Task after execution to acquire output data.
				</simpara>
				<simpara>
					User Tasks present data related to the actor that is executing the User Task. Additionally, User Tasks also request the actor to provide result data related to the execution.
				</simpara>
				<simpara>
					To request and provide the data, use task forms and map the data in the Data Input Assignment parameter to a variable. Map the data provided by the user in the Data Output Assignment parameter if you want to preserve the data as output.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have created a project in Business Central and it contains at least one business process asset that has at least one task that is not a script task.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Open a business process asset.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select a task that is not a script task.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the <emphasis role="strong">Properties</emphasis> icon on the upper-right side of the screen to open the <emphasis role="strong">Properties</emphasis> panel.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the box under the <emphasis role="strong">Assignments</emphasis> sub-section. The <emphasis role="strong">Task Data I/O</emphasis> dialog box opens.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Add</emphasis> next to <emphasis role="strong">Data Inputs and Assignments</emphasis> or <emphasis role="strong">Data Outputs and Assignments</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Enter a name for the local variable in the <emphasis role="strong">Name</emphasis> box.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select a data type from the <emphasis role="strong">Data Type</emphasis> menu.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select a source or target then click <emphasis role="strong">Save</emphasis>.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
		<chapter xml:id="con-action-scripts_business-processes">
			<title>Action scripts</title>
			<simpara>
				Action scripts are pieces of code that define the <literal>Script</literal> property or the interceptor action of an element. Action scripts can access the global variables, process variables, and predefined variable <literal>kcontext</literal>. kcontext is an instance of the <literal>ProcessContext</literal> interface. For more information about <literal>kcontext</literal> variable, see the <literal>ProcessContext</literal> <link xlink:href="https://docs.jboss.org/jbpm/v6.4/javadocs/org/kie/api/runtime/process/ProcessContext.html">Javadoc</link>.
			</simpara>
			<simpara>
				Java and MVEL are supported as dialects for action script definitions. MVEL accepts valid Java code and additionally provides support for nested access to parameters. For example, the MVEL call <literal>person.name</literal> is equivalent of Java call <literal>person.getName()</literal>.
			</simpara>
			<formalpara>
				<title>Example action script in Java and MVEL dialects</title>
				<para>
					
<screen>// Java dialect
System.out.println(person.getName());

// MVEL dialect
System.out.println(person.name);</screen>
				</para>
			</formalpara>
			<simpara>
				You can also use action scripts to view information about process instances. For example, use the following commands to:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						Return the ID of a process instance:
					</simpara>
					
<screen>System.out.println(kcontext.getProcessInstance().getId());</screen>
				</listitem>
				<listitem>
					<simpara>
						Return the parent process instance ID if a process instance has a parent:
					</simpara>
					
<screen>System.out.println(kcontext.getProcessInstance().getParentProcessInstanceId());</screen>
				</listitem>
				<listitem>
					<simpara>
						Return the ID of a process definition related to a process instance:
					</simpara>
					
<screen>System.out.println(kcontext.getProcessInstance().getProcessId());</screen>
				</listitem>
				<listitem>
					<simpara>
						Return the name of a process definition related to a process instance:
					</simpara>
					
<screen>System.out.println(kcontext.getProcessInstance().getProcessName());</screen>
				</listitem>
				<listitem>
					<simpara>
						Return the state of a process instance:
					</simpara>
					
<screen>System.out.println(kcontext.getProcessInstance().getState());</screen>
				</listitem>
			</itemizedlist>
			<simpara>
				To set a process variable in an action script, use <literal>kcontext.setVariable("VARIABLE_NAME", "VALUE")</literal>.
			</simpara>
		</chapter>
		<chapter xml:id="con-timer_business-processes">
			<title>Timers</title>
			<simpara>
				You can use timers to trigger logic after a certain period or to repeat specific actions at regular intervals. Timers wait for a predefined amount of time before triggering once or repeatedly.
			</simpara>
			<section remap="_configuration_of_timers_with_delay_and_period" xml:id="configuration_of_timers_with_delay_and_period">
				<title>Configuration of timers with delay and period</title>
				<simpara>
					You can set a timer with delay and a certain period. The delay specifies the waiting time after the node activation, and the period defines the time between the subsequent trigger activation. The period value <literal>0</literal> results in a one-shot timer. You can specify the delay and period expression in <literal>[#d][#h][#m][#s][#[ms]]</literal> form, indicating the number of days, hours, minutes, seconds, and milliseconds (default). For example, the expression <literal>1h</literal> indicates one hour waiting time before triggering the timer again.
				</simpara>
			</section>
			<section remap="_configuration_of_timers_with_iso_8601_date_format" xml:id="configuration_of_timers_with_iso_8601_date_format">
				<title>Configuration of timers with ISO-8601 date format</title>
				<simpara>
					You can configure timers with ISO-8601 date format that supports both one-shot timers and repeatable timers. You can define timers as date and time representation, time duration, or repeating intervals. For example:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Date <literal>2020-12-24T20:00:00.000+02:00</literal> signifies that timer is triggered exactly on Christmas at 8:00 p.m.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Duration <literal>PT1S</literal> signifies that timer is triggered once after one second.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Repeating intervals <literal>R/PT1S</literal> signifies that timer is triggered every second with any limit. Alternatively, <literal>R5/PT1S</literal> triggers the timer five times every second.
						</simpara>
					</listitem>
				</itemizedlist>
			</section>
			<section remap="_configuration_of_timers_with_process_variables" xml:id="configuration_of_timers_with_process_variables">
				<title>Configuration of timers with process variables</title>
				<simpara>
					You can also specify timers using process variables, consisting of the string representation of delay and period or ISO8601 date format. When you specify <literal>#{variable}</literal>, the engine parses the expression and replaces the expression value with the variable. In a process, you can use timers using the following ways:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Add a timer event to a process flow. The process activation starts the timer and when the timer is triggered (once or repeatedly), it activates the successor of the timer node. Subsequently, the outgoing connection of a timer with a positive period value is triggered multiple times. When a timer node is canceled, the associated timer is also canceled and no more triggers occur.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Associate timer as a boundary event with a subprocess or task.
						</simpara>
					</listitem>
				</itemizedlist>
			</section>
			<section remap="_update_timers_within_running_process_instance" xml:id="update_timers_within_running_process_instance">
				<title>Update timers within running process instance</title>
				<simpara>
					In some cases, the scheduled timer needs to be rescheduled to accommodate the new requirements, such as changing delay, period, or repeat limit. Updating a timer includes many low-level operations, therefore, Red Hat Process Automation Manager provides the following command to perform the low-level operations related to updating a timer as an atomic operation. The following command ensures that all the operations are performed within the same transaction.
				</simpara>
				<simpara>
					<literal>org.jbpm.process.instance.command.UpdateTimerCommand</literal>
				</simpara>
				<note>
					<simpara>
						Only boundary timer events and intermediate timer events are supported to update.
					</simpara>
				</note>
				<simpara>
					You can reschedule the timer by specifying the two mandatory parameters and one of the three optional parameter sets of the <literal>UpdateTimerCommand</literal> class.
				</simpara>
				<table colsep="1" frame="all" rowsep="1">
					<title>Parameters and parameter sets of <literal>UpdateTimerCommand</literal> class</title>
					<tgroup cols="2">
						<colspec colname="col_1" colwidth="50*"></colspec>
						<colspec colname="col_2" colwidth="50*"></colspec>
						<thead>
							<row>
								<entry align="left" valign="top">Parameter or parameter set</entry>
								<entry align="left" valign="top">Type</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry align="left" valign="top">
								<simpara>
									process instance ID (Mandatory)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>long</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									timer node name (Mandatory)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>String</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									delay (Optional)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>long</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									period (Optional)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>long</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									repeat limit (Optional)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>init</literal>
								</simpara>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				<formalpara>
					<title>Example rescheduling time event</title>
					<para>
						
<programlisting language="java" linenumbering="unnumbered">// Start the process instance and record its ID:
long id = kieSession.startProcess(BOUNDARY_PROCESS_NAME).getId();

// Set the timer delay to 3 seconds:
kieSession.execute(new UpdateTimerCommand(id, BOUNDARY_TIMER_ATTACHED_TO_NAME, 3));</programlisting>
					</para>
				</formalpara>
			</section>
		</chapter>
		<chapter xml:id="constraints-con_business-processes">
			<title>Constraints</title>
			<simpara>
				A constraint is a boolean expression that is evaluated when an element containing a constraint is executed. You can use constraints in various parts of your process, such as in a diverging gateway.
			</simpara>
			<simpara>
				Red Hat Process Automation Manager supports two types of constraints, including:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						<emphasis role="strong">Code constraints</emphasis>: Constraints that are defined in Java, Javascript, Drools, or MVEL. Code constraints can access the data in the working memory, including the global and process variables. The following code constraint examples contain <literal>person</literal> as a variable in a process:
					</simpara>
					<formalpara>
						<title>Example Java code constraint</title>
						<para>
							
<screen>return person.getAge() &gt; 20;</screen>
						</para>
					</formalpara>
					<formalpara>
						<title>Example MVEL code constraint</title>
						<para>
							
<screen>return person.age &gt; 20;</screen>
						</para>
					</formalpara>
					<formalpara>
						<title>Example Javascript code constraint</title>
						<para>
							
<screen>person.age &gt; 20</screen>
						</para>
					</formalpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">Rule constraints</emphasis>: Constraints that are defined in the form of DRL rule conditions. Rule constraints can access the data in the working memory, including global variables. However, rule constraints cannot access the variables directly in a process but using a process instance. To retrieve the reference of the parent process instance, use the <literal>processInstance</literal> variable of the type <literal>WorkflowProcessInstance</literal>.
					</simpara>
					<note>
						<simpara>
							You can insert a process instance into the session and update it if necessary, for example, using Java code or an on-entry, on-exit, or explicit action in your process.
						</simpara>
					</note>
					<simpara>
						The following example shows a rule constraint, searching for a person with the same name as the value of the <literal>name</literal> variable in the process.
					</simpara>
					<formalpara>
						<title>Example rule constraint with process variable assignment</title>
						<para>
							
<screen>processInstance : WorkflowProcessInstance()
Person( name == ( processInstance.getVariable("name") ) )
# add more constraints here ...</screen>
						</para>
					</formalpara>
				</listitem>
			</itemizedlist>
		</chapter>
		<chapter xml:id="deploy-bus-proc">
			<title>Deploying a business process in Business Central</title>
			<simpara>
				After you design your business process in Business Central, you can build and deploy your project in Business Central to make the process available to KIE Server.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						KIE Server is deployed and connected to Business Central. For more information about KIE Server configuration, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/installing_and_configuring_red_hat_process_automation_manager#assembly-install-on-eap"><emphasis>Installing and configuring Red Hat Process Automation Manager on Red Hat JBoss EAP 7.3</emphasis></link>.
					</simpara>
				</listitem>
			</itemizedlist>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click the project that you want to deploy.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Deploy</emphasis>.
					</simpara>
					<note>
						<simpara>
							You can also select the <emphasis role="strong">Build &amp; Install</emphasis> option to build the project and publish the KJAR file to the configured Maven repository without deploying to a KIE Server. In a development environment, you can click <emphasis role="strong">Deploy</emphasis> to deploy the built KJAR file to a KIE Server without stopping any running instances (if applicable), or click <emphasis role="strong">Redeploy</emphasis> to deploy the built KJAR file and replace all instances. The next time you deploy or redeploy the built KJAR, the previous deployment unit (KIE container) is automatically updated in the same target KIE Server. In a production environment, the <emphasis role="strong">Redeploy</emphasis> option is disabled and you can click <emphasis role="strong">Deploy</emphasis> only to deploy the built KJAR file to a new deployment unit (KIE container) on a KIE Server.
						</simpara>
						<simpara>
							To configure the KIE Server environment mode, set the <literal>org.kie.server.mode</literal> system property to <literal>org.kie.server.mode=development</literal> or <literal>org.kie.server.mode=production</literal>. To configure the deployment behavior for a corresponding project in Business Central, go to project <emphasis role="strong">Settings</emphasis> → <emphasis role="strong">General Settings</emphasis> → <emphasis role="strong">Version</emphasis> and toggle the <emphasis role="strong">Development Mode</emphasis> option. By default, KIE Server and all new projects in Business Central are in development mode. You cannot deploy a project with <emphasis role="strong">Development Mode</emphasis> turned on or with a manually added <literal>SNAPSHOT</literal> version suffix to a KIE Server that is in production mode.
						</simpara>
					</note>
					<simpara>
						To review project deployment details, click <emphasis role="strong">View deployment details</emphasis> in the deployment banner at the top of the screen or in the <emphasis role="strong">Deploy</emphasis> drop-down menu. This option directs you to the <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Deploy</emphasis> → <emphasis role="strong">Execution Servers</emphasis> page.
					</simpara>
				</listitem>
			</orderedlist>
		</chapter>
		<chapter xml:id="execute-bus-proc">
			<title>Executing a business process in Business Central</title>
			<simpara>
				After you build and deploy the project that contains your business process, you can execute the defined functionality for the business process.
			</simpara>
			<simpara>
				As an example, this procedure uses the <emphasis role="strong">Mortgage_Process</emphasis> sample project in Business Central. In this scenario, you input data into a mortgage application form acting as the mortgage broker. The <emphasis role="strong">MortgageApprovalProcess</emphasis> business process runs and determines whether or not the applicant has offered an acceptable down payment based on the decision rules defined in the project. The business process either ends the rule testing or requests that the applicant increase the down payment to proceed. If the application passes the business rule testing, the bank approver reviews the application and either approves or denies the loan.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						KIE Server is deployed and connected to Business Central. For more information about KIE Server configuration, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/installing_and_configuring_red_hat_process_automation_manager#assembly-install-on-eap"><emphasis>Installing and configuring Red Hat Process Automation Manager on Red Hat JBoss EAP 7.3</emphasis></link>.
					</simpara>
				</listitem>
			</itemizedlist>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Projects</emphasis> and select a space. The default space is MySpace.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In the upper-right corner of the window, click the arrow next to <emphasis role="strong">Add Project</emphasis> and select <emphasis role="strong">Try Samples</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select the <emphasis role="strong">Mortgage_Process</emphasis> sample and click <emphasis role="strong">Ok</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						On the project page, select <emphasis role="strong">Mortgage_Process</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						On the <emphasis role="strong">Mortgage_Process</emphasis> page, click <emphasis role="strong">Build</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						After the project has built, click <emphasis role="strong">Deploy</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Definitions</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click anywhere in the <emphasis role="strong">MortgageApprovalProcess</emphasis> row to view the process details.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click the <emphasis role="strong">Diagram</emphasis> tab to view the business process diagram in the editor.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">New Process Instance</emphasis> to open the <emphasis role="strong">Application</emphasis> form and input the following values into the form fields:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<emphasis role="strong">Down Payment</emphasis>: <literal>30000</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Years of amortization</emphasis>: <literal>10</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Name</emphasis>: <literal>Ivo</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Annual Income</emphasis>: <literal>60000</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">SSN</emphasis>: <literal>123456789</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Age of property</emphasis>: <literal>8</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Address of property</emphasis>: <literal>Brno</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Locale</emphasis>: <literal>Rural</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Property Sale Price</emphasis>: <literal>50000</literal>
							</simpara>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Submit</emphasis> to start a new process instance. After starting the process instance, the <emphasis role="strong">Instance Details</emphasis> view opens.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click the <emphasis role="strong">Diagram</emphasis> tab to view the process flow within the process diagram. The state of the process is highlighted as it moves through each task.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Tasks</emphasis>.
					</simpara>
					<simpara>
						For this example, the user or users working on the corresponding tasks are members of the following groups:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<emphasis role="strong">approver</emphasis>: For the <emphasis role="strong">Qualify</emphasis> task
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">broker</emphasis>: For the <emphasis role="strong">Correct Data</emphasis> and <emphasis role="strong">Increase Down Payment</emphasis> tasks
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">manager</emphasis>: For the <emphasis role="strong">Final Approval</emphasis> task
							</simpara>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<simpara>
						As the approver, review the <emphasis role="strong">Qualify</emphasis> task information, click <emphasis role="strong">Claim</emphasis> and then <emphasis role="strong">Start</emphasis> to start the task, and then select <emphasis role="strong">Is mortgage application in limit?</emphasis> and click <emphasis role="strong">Complete</emphasis> to complete the task flow.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In the <emphasis role="strong">Tasks</emphasis> page, click anywhere in the <emphasis role="strong">Final Approval</emphasis> row to open the <emphasis role="strong">Final Approval</emphasis> task.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Claim</emphasis> to claim responsibility for the task, and click <emphasis role="strong">Complete</emphasis> to finalize the loan approval process.
					</simpara>
				</listitem>
			</orderedlist>
			<note>
				<simpara>
					The <emphasis role="strong">Save</emphasis> and <emphasis role="strong">Release</emphasis> buttons are only used to either pause the approval process and save the instance if you are waiting on a field value, or to release the task for another user to modify.
				</simpara>
			</note>
		</chapter>
		<chapter xml:id="proc-test-bus-process_business-processes">
			<title>Testing a business process</title>
			<simpara>
				A business process can be updated dynamically, which can cause errors, therefore testing a process business is also a part of the business process life cycle similar to any other development artifact.
			</simpara>
			<simpara>
				The unit test for a business process ensures that the process behaves as expected in a specific use case. For example, you can test an output based on a particular input. To simplify unit testing, Red Hat Process Automation Manager includes the <literal>org.jbpm.test.JbpmJUnitBaseTestCase</literal> class.
			</simpara>
			<simpara>
				The <literal>JbpmJUnitBaseTestCase</literal> performs as a base test case class, which is used for Red Hat Process Automation Manager related tests. The <literal>JbpmJUnitBaseTestCase</literal> provides the following usage areas:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						JUnit life cycle methods
					</simpara>
					<table colsep="1" frame="all" rowsep="1">
						<title>JUnit life cycle methods</title>
						<tgroup cols="2">
							<colspec colname="col_1" colwidth="30*"></colspec>
							<colspec colname="col_2" colwidth="70*"></colspec>
							<thead>
								<row>
									<entry align="left" valign="top">Method</entry>
									<entry align="left" valign="top">Description</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>setUp</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										This method is annotated as <literal>@Before</literal>. It configures a data source and <literal>EntityManagerFactory</literal> and deletes the session ID of a singleton.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>tearDown</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										This method is annotated as <literal>@After</literal>. It removes history, closes <literal>EntityManagerFactory</literal> and a data source, and disposes <literal>RuntimeManager</literal> and <literal>RuntimeEngines</literal>.
									</simpara>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
				</listitem>
				<listitem>
					<simpara>
						Knowledge base and knowledge session management methods: To create a session, create <literal>RuntimeManager</literal> and <literal>RuntimeEngine</literal>. Use the following methods to create and dispose <literal>RuntimeManager</literal>:
					</simpara>
					<table colsep="1" frame="all" rowsep="1">
						<title><literal>RuntimeManager</literal> and <literal>RuntimeEngine</literal> management methods</title>
						<tgroup cols="2">
							<colspec colname="col_1" colwidth="30*"></colspec>
							<colspec colname="col_2" colwidth="70*"></colspec>
							<thead>
								<row>
									<entry align="left" valign="top">Method</entry>
									<entry align="left" valign="top">Description</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>createRuntimeManager</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Creates <literal>RuntimeManager</literal> for a given set of assets and selected strategy.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>disposeRuntimeManager</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Disposes <literal>RuntimeManager</literal> that is active in the scope of the test.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>getRuntimeEngine</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Creates new <literal>RuntimeEngine</literal> for the given context.
									</simpara>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
				</listitem>
				<listitem>
					<simpara>
						Assertions: To test the state of assets, use the following methods:
					</simpara>
					<table colsep="1" frame="all" rowsep="1">
						<title><literal>RuntimeManager</literal> and <literal>RuntimeEngine</literal> Management Methods</title>
						<tgroup cols="2">
							<colspec colname="col_1" colwidth="30*"></colspec>
							<colspec colname="col_2" colwidth="70*"></colspec>
							<thead>
								<row>
									<entry align="left" valign="top">Assertion</entry>
									<entry align="left" valign="top">Description</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>assertProcessInstanceActive(long processInstanceId, KieSession ksession)</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Verifies whether a process instance with the given <literal>processInstanceId</literal> is active.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>assertProcessInstanceCompleted(long processInstanceId)</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Verifies whether a process instance with the given <literal>processInstanceId</literal> is completed. You can use this method if session persistence is enabled, otherwise use <literal>assertProcessInstanceNotActive(long processInstanceId, KieSession ksession)</literal>.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>assertProcessInstanceAborted(long processInstanceId)</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Verifies whether a process instance with the given <literal>processInstanceId</literal> is aborted. You can use this method if session persistence is enabled, otherwise use <literal>assertProcessInstanceNotActive(long processInstanceId, KieSession ksession)</literal>.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>assertNodeExists(ProcessInstance process, String…​ nodeNames)</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Verifies whether the specified process contains the given nodes.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>assertNodeActive(long processInstanceId, KieSession ksession, String…​ name)</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Verifies whether a process instance with the given <literal>processInstanceId</literal> contains at least one active node with the specified node names.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>assertNodeTriggered(long processInstanceId, String…​ nodeNames)</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Verifies whether a node instance is triggered for each given node during the execution of the specified process instance.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>assertProcessVarExists(ProcessInstance process, String…​ processVarNames)</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Verifies whether the given process contains the specified process variables.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>assertProcessNameEquals(ProcessInstance process, String name)</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Verifies whether the given name matches the specified process name.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>assertVersionEquals(ProcessInstance process, String version)</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Verifies whether the given process version matches the specified process version.
									</simpara>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
				</listitem>
				<listitem>
					<simpara>
						Helper methods: Use following methods to create a new <literal>RuntimeManager</literal> and <literal>RuntimeEngine</literal> for a given set of processes with or without using persistence. For more information about persistence, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/developing_process_services_in_red_hat_process_automation_manager#assembly-process-engine"><emphasis>Process engine in Red Hat Process Automation Manager</emphasis></link>.
					</simpara>
					<table colsep="1" frame="all" rowsep="1">
						<title><literal>RuntimeManager</literal> and <literal>RuntimeEngine</literal> Management Methods</title>
						<tgroup cols="2">
							<colspec colname="col_1" colwidth="30*"></colspec>
							<colspec colname="col_2" colwidth="70*"></colspec>
							<thead>
								<row>
									<entry align="left" valign="top">Method</entry>
									<entry align="left" valign="top">Description</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>setupPoolingDataSource</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Configures a data source.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>getDs</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Returns the configured data source.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>getEmf</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Returns the configured <literal>EntityManagerFactory</literal>.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>getTestWorkItemHandler</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Returns a test work item handler that can be registered in addition to the default work item handler.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>clearHistory</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Clears the history log.
									</simpara>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
				</listitem>
			</itemizedlist>
			<simpara>
				The following example contains a start event, a script task, and an end event. The example JUnit test creates a new session, starts the <literal>hello.bpmn</literal> process, and verifies whether the process instance is completed and the <literal>StartProcess</literal>, <literal>Hello</literal>, and <literal>EndProcess</literal> nodes are executed.
			</simpara>
			<figure>
				<title>Example JUnit Test of <literal>hello.bpmn</literal> Process</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/_images/BPMN2/bpmn-example-junit-test-process.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>Example JUnit Test Process</phrase>
					</textobject>
				</mediaobject>
			</figure>
			
<programlisting language="java" linenumbering="unnumbered">public class ProcessPersistenceTest extends JbpmJUnitBaseTestCase {

    public ProcessPersistenceTest() {
        super(true, true);
    }

    @Test
    public void testProcess() {

        createRuntimeManager("hello.bpmn");

        RuntimeEngine runtimeEngine = getRuntimeEngine();

        KieSession ksession = runtimeEngine.getKieSession();

        ProcessInstance processInstance = ksession.startProcess("com.sample.bpmn.hello");

        assertProcessInstanceNotActive(processInstance.getId(), ksession);

        assertNodeTriggered(processInstance.getId(), "StartProcess", "Hello", "EndProcess");
    }
}</programlisting>
			<simpara>
				<literal>JbpmJUnitBaseTestCase</literal> supports all predefined <literal>RuntimeManager</literal> strategies as part of the unit testing. Therefore, it is enough to specify the strategy that is used when you create a <literal>RuntimeManager</literal> as part of a single test. The following example shows the use of the PerProcessInstance strategy in a task service to manage user tasks:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">public class ProcessHumanTaskTest extends JbpmJUnitBaseTestCase {

    private static final Logger logger = LoggerFactory.getLogger(ProcessHumanTaskTest.class);

    public ProcessHumanTaskTest() {
        super(true, false);
    }

    @Test
    public void testProcessProcessInstanceStrategy() {
        RuntimeManager manager = createRuntimeManager(Strategy.PROCESS_INSTANCE, "manager", "humantask.bpmn");
        RuntimeEngine runtimeEngine = getRuntimeEngine(ProcessInstanceIdContext.get());
        KieSession ksession = runtimeEngine.getKieSession();
        TaskService taskService = runtimeEngine.getTaskService();

        int ksessionID = ksession.getId();
        ProcessInstance processInstance = ksession.startProcess("com.sample.bpmn.hello");

        assertProcessInstanceActive(processInstance.getId(), ksession);
        assertNodeTriggered(processInstance.getId(), "Start", "Task 1");

        manager.disposeRuntimeEngine(runtimeEngine);
        runtimeEngine = getRuntimeEngine(ProcessInstanceIdContext.get(processInstance.getId()));

        ksession = runtimeEngine.getKieSession();
        taskService = runtimeEngine.getTaskService();

        assertEquals(ksessionID, ksession.getId());

        // let John execute Task 1
        List&lt;TaskSummary&gt; list = taskService.getTasksAssignedAsPotentialOwner("john", "en-UK");
        TaskSummary task = list.get(0);
        logger.info("John is executing task {}", task.getName());
        taskService.start(task.getId(), "john");
        taskService.complete(task.getId(), "john", null);

        assertNodeTriggered(processInstance.getId(), "Task 2");

        // let Mary execute Task 2
        list = taskService.getTasksAssignedAsPotentialOwner("mary", "en-UK");
        task = list.get(0);
        logger.info("Mary is executing task {}", task.getName());
        taskService.start(task.getId(), "mary");
        taskService.complete(task.getId(), "mary", null);

        assertNodeTriggered(processInstance.getId(), "End");
        assertProcessInstanceNotActive(processInstance.getId(), ksession);
    }
}</programlisting>
			<section xml:id="proc-test-external-services_business-processes">
				<title>Testing integration with external services</title>
				<simpara>
					Business processes often include the invocation of external services. Unit testing of a business process enables you to register test handlers that verify whether the specific services are requested correctly, and also provide test responses for the requested services.
				</simpara>
				<simpara>
					To test the interaction with external services, use the default <literal>TestWorkItemHandler</literal> handler. You can register the <literal>TestWorkItemHandler</literal> to collect all the work items of a particular type. Also, <literal>TestWorkItemHandler</literal> contains data related to a task. A work item represents one unit of work, such as sending a specific email or invoking a specific service. The <literal>TestWorkItemHandler</literal> verifies whether a specific work item is requested during an execution of a process, and the associated data is correct.
				</simpara>
				<simpara>
					The following example shows how to verify an email task and whether an exception is raised if the email is not sent. The unit test uses a test handler that is executed when an email is requested and enables you to test the data related to the email, such as the sender and recipient. Once the <literal>abortWorkItem()</literal> method notifies the engine about the email delivery failure, the unit test verifies that the process handles such case by generating an error and logging the action. In this case, the process instance is eventually aborted.
				</simpara>
				<figure>
					<title>Example email process</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/_images/BPMN2/bpmn-example-email-task-process-test.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>Example email process for testing</phrase>
						</textobject>
					</mediaobject>
				</figure>
				
<programlisting language="java" linenumbering="unnumbered">public void testProcess2() {

    createRuntimeManager("sample-process.bpmn");

    RuntimeEngine runtimeEngine = getRuntimeEngine();

    KieSession ksession = runtimeEngine.getKieSession();

    TestWorkItemHandler testHandler = getTestWorkItemHandler();

    ksession.getWorkItemManager().registerWorkItemHandler("Email", testHandler);

    ProcessInstance processInstance = ksession.startProcess("com.sample.bpmn.hello2");

    assertProcessInstanceActive(processInstance.getId(), ksession);
    assertNodeTriggered(processInstance.getId(), "StartProcess", "Email");

    WorkItem workItem = testHandler.getWorkItem();
    assertNotNull(workItem);
    assertEquals("Email", workItem.getName());
    assertEquals("me@mail.com", workItem.getParameter("From"));
    assertEquals("you@mail.com", workItem.getParameter("To"));

    ksession.getWorkItemManager().abortWorkItem(workItem.getId());
    assertProcessInstanceNotActive(processInstance.getId(), ksession);
    assertNodeTriggered(processInstance.getId(), "Gateway", "Failed", "Error");

}</programlisting>
			</section>
		</chapter>
		<chapter xml:id="manage-log-file-proc">
			<title>Managing log files</title>
			<simpara>
				Red Hat Process Automation Manager manages the required maintenance, runtime data that is removed, including:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						<emphasis role="strong">Process instance data</emphasis>, which is removed upon process instance completion.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">Work item data</emphasis>, which is removed upon work item completion.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">Task instance data</emphasis>, which is removed upon completion of a process to which the given task belongs.
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				Runtime data, which is not cleaned automatically includes session information data that is based on the selected runtime strategy.
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						<emphasis role="strong">Singleton strategy</emphasis> ensures that runtime data of session information is not automatically removed.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">Per request strategy</emphasis> allows automatic removal when a request is terminated.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">Per process instances</emphasis> are automatically removed when a process instance is mapped to a session that is completed or aborted.
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				In order to keep the track of process instances, Red Hat Process Automation Manager provides audit data tables. There are two ways to manage and maintain the audit data tables, including cleaning up the jobs <link linkend="setup-auto-cleanup-proc">automatically</link> and <link linkend="manual-cleanup-con">manually</link>.
			</simpara>
			<section xml:id="setup-auto-cleanup-proc">
				<title>Setting up automatic cleanup job</title>
				<simpara>
					You can set up an automatic cleanup job in Business Central.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Manage</emphasis> &gt; <emphasis role="strong">Jobs</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">New Job</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Enter values for <emphasis role="strong">Business Key</emphasis>, <emphasis role="strong">Due On</emphasis>, and <emphasis role="strong">Retries</emphasis> fields.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Enter the following command into the <emphasis role="strong">Type</emphasis> field.
						</simpara>
						
<screen>org.jbpm.executor.commands.LogCleanupCommand</screen>
					</listitem>
					<listitem>
						<simpara>
							To use the parameters, complete the following steps:
						</simpara>
						<simpara>
							For full parameters list, see <xref linkend="clean-log-proc" />.
						</simpara>
						<orderedlist numeration="loweralpha">
							<listitem>
								<simpara>
									Open the <emphasis role="strong">Advanced</emphasis> tab.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Add Parameter</emphasis>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Enter a parameter in the <emphasis role="strong">Key</emphasis> column and enter a parameter value in the <emphasis role="strong">Value</emphasis> column.
								</simpara>
							</listitem>
						</orderedlist>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Create</emphasis>.
						</simpara>
					</listitem>
				</orderedlist>
				<simpara>
					The automatic cleanup job is created.
				</simpara>
			</section>
			<section xml:id="manual-cleanup-con">
				<title>Manual cleanup</title>
				<simpara>
					To perform manual cleanup, you can use the audit API. The audit API is divided into the following areas:
				</simpara>
				<table colsep="1" frame="all" rowsep="1">
					<title>Audit API areas</title>
					<tgroup cols="2">
						<colspec colname="col_1" colwidth="33*"></colspec>
						<colspec colname="col_2" colwidth="67*"></colspec>
						<thead>
							<row>
								<entry align="left" valign="top">Name</entry>
								<entry align="left" valign="top">Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Process audit
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									It is used to clean up process, node and variable logs that are accessible in the <literal>jbpm-audit</literal> module.
								</simpara>
								<simpara>
									For example, you can access the module as follows: <literal>org.jbpm.process.audit.JPAAuditLogService</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Task audit
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									It is used to clean up tasks and events that are accessible in the <literal>jbpm-human-task-audit</literal> module.
								</simpara>
								<simpara>
									For example, you can access the module as follows: <literal>org.jbpm.services.task.audit.service.TaskJPAAuditService</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Executor jobs
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									It is used to clean up executor jobs and errors that are accessible in the <literal>jbpm-executor</literal> module.
								</simpara>
								<simpara>
									For example, you can access the module as follows: <literal>org.jbpm.executor.impl.jpa.ExecutorJPAAuditService</literal>
								</simpara>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</section>
			<section xml:id="clean-log-proc">
				<title>Removing logs from the database</title>
				<simpara>
					Use <literal>LogCleanupCommand</literal> executor command to clean up the data, which is using the database space. The <literal>LogCleanupCommand</literal> consists of logic to automatically clean up all or selected data.
				</simpara>
				<simpara>
					There are several configuration options that you can use with the <literal>LogCleanupCommand</literal>:
				</simpara>
				<table colsep="1" frame="all" rowsep="1" xml:id="logcleanupcommand_parameters_business-processes">
					<title>LogCleanupCommand parameters table</title>
					<tgroup cols="3">
						<colspec colname="col_1" colwidth="25*"></colspec>
						<colspec colname="col_2" colwidth="50*"></colspec>
						<colspec colname="col_3" colwidth="25*"></colspec>
						<thead>
							<row>
								<entry align="left" valign="top">Name</entry>
								<entry align="left" valign="top">Description</entry>
								<entry align="left" valign="top">Is Exclusive</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>SkipProcessLog</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Indicates whether process and node instances, and process variables log cleanup is skipped when the command runs. The default value is <literal>false</literal>.
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									No, it is used with other parameters.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>SkipTaskLog</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Indicates if the task audit and event log cleanup are skipped. The default value is <literal>false</literal>.
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									No, it is used with other parameters.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>SkipExecutorLog</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Indicates if Red Hat Process Automation Manager executor entries cleanup is skipped. The default value is <literal>false</literal>.
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									No, it is used with other parameters.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>SingleRun</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Indicates if a job routine runs only once. The default value is <literal>false</literal>.
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									No, it is used with other parameters.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>NextRun</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Schedules the next job execution. The default value is <literal>24h</literal>.
								</simpara>
								<simpara>
									For example, set to <literal>12h</literal> for jobs to be executed every 12 hours. The schedule is ignored if you set <emphasis role="strong">SingleRun</emphasis> to <literal>true</literal>, unless you set both <emphasis role="strong">SingleRun</emphasis> and <emphasis role="strong">NextRun</emphasis>. If both are set, the <emphasis role="strong">NextRun</emphasis> schedule takes priority. The ISO format can be used to set the precise date.
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									No, it is used with other parameters.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>OlderThan</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Logs that are older than the specified date are removed. The date format is <literal>YYYY-MM-DD</literal>. Usually, this parameter is used for single run jobs.
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Yes, it is not used with <literal>OlderThanPeriod</literal> parameter.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>OlderThanPeriod</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Logs that are older than the specified timer expression are removed. For example, set <literal>30d</literal> to remove logs, which are older than 30 days.
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Yes, it is not used with <literal>OlderThan</literal> parameter.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>ForProcess</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Specifies process definition ID for logs that are removed.
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									No, it is used with other parameters.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>ForDeployment</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Specifies deployment ID of the logs that are removed.
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									No, it is used with other parameters.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>EmfName</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Persistence unit name that is used to perform delete operation.
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Not applicable
								</simpara>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				<note>
					<simpara>
						<literal>LogCleanupCommand</literal> does not remove any active instances, such as running process instances, task instances, or executor jobs.
					</simpara>
				</note>
			</section>
		</chapter>
		<chapter xml:id="process-definitions-and-instances-con-business-processes">
			<title>Process definitions and process instances in Business Central</title>
			<simpara>
				A process definition is a Business Process Model and Notation (BPMN) 2.0 file that serves as a container for a process and its BPMN diagram. The process definition shows all of the available information about the business process, such as any associated subprocesses or the number of users and groups that are participating in the selected definition.
			</simpara>
			<simpara>
				A process definition also defines the <literal>import</literal> entry for imported processes that the process definition uses, and the <literal>relationship</literal> entries.
			</simpara>
			<formalpara>
				<title>BPMN2 source of a process definition</title>
				<para>
					
<screen>&lt;definitions id="Definition"
               targetNamespace="http://www.jboss.org/drools"
               typeLanguage="http://www.java.com/javaTypes"
               expressionLanguage="http://www.mvel.org/2.0"
               xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"Rule Task
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd"
               xmlns:g="http://www.jboss.org/drools/flow/gpd"
               xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI"
               xmlns:dc="http://www.omg.org/spec/DD/20100524/DC"
               xmlns:di="http://www.omg.org/spec/DD/20100524/DI"
               xmlns:tns="http://www.jboss.org/drools"&gt;

    &lt;process&gt;
      PROCESS
    &lt;/process&gt;

    &lt;bpmndi:BPMNDiagram&gt;
     BPMN DIAGRAM DEFINITION
    &lt;/bpmndi:BPMNDiagram&gt;

    &lt;/definitions&gt;</screen>
				</para>
			</formalpara>
			<simpara>
				After you have created, configured, and deployed your project that includes your business processes, you can view the list of all the process definitions in Business Central <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Definitions</emphasis>. You can refresh the list of deployed process definitions at any time by clicking the refresh button in the upper-right corner.
			</simpara>
			<simpara>
				The process definition list shows all the available process definitions that are deployed into the platform. Click any of the process definitions listed to show the corresponding process definition details. This displays information about the process definition, such as if there is a sub-process associated with it, or how many users and groups exist in the process definition. The <emphasis role="strong">Diagram</emphasis> tab in the process definition details page contains the BPMN2-based diagram of the process definition.
			</simpara>
			<simpara>
				Within each selected process definition, you can start a new process instance for the process definition by clicking the <emphasis role="strong">New Process Instance</emphasis> button in the upper-right corner. Process instances that you start from the available process definitions are listed in <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis>.
			</simpara>
			<simpara>
				You can also define the default pagination option for all users under the <emphasis role="strong">Manage</emphasis> drop-down menu (<emphasis role="strong">Process Definition</emphasis>, <emphasis role="strong">Process Instances</emphasis>, <emphasis role="strong">Tasks</emphasis>, <emphasis role="strong">Jobs</emphasis>, and <emphasis role="strong">Execution Errors</emphasis>) and in <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
			</simpara>
			<simpara>
				For more information about process and task administration in Business Central, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/developing_process_services_in_red_hat_process_automation_manager#assembly-managing-and-monitoring-business-processes"><emphasis>Managing and monitoring business processes in Business Central</emphasis></link>.
			</simpara>
			<section xml:id="starting-process-instance-from-definition-proc_business-processes">
				<title>Starting a process instance from the process definitions page</title>
				<simpara>
					You can start a process instance in <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Definitions</emphasis>. This is useful for environments where you are working with several projects or process definitions at the same time.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							A project with a process definition has been deployed in Business Central.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Definitions</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select the process definition for which you want to start a new process instance from the list. The details page of the definition opens.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">New Process Instance</emphasis> in the upper-right corner to start a new process instance.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Provide any required information for the process instance.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Submit</emphasis> to create the process instance.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							View the new process instance in <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis>.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="starting-process-instance-from-instances-proc_business-processes">
				<title>Starting a process instance from the process instances page</title>
				<simpara>
					You can create new process instances or view the list of all the running process instances in <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis>.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							A project with a process definition has been deployed in Business Central.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">New Process Instance</emphasis> in the upper-right corner and select the process definition for which you want to start a new process instance from the drop-down list.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Provide any information required to start a new process instance.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Start</emphasis> to create the process instance.
						</simpara>
						<simpara>
							The new process instance appears in the <emphasis role="strong">Manage Process Instances</emphasis> list.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="define-proc-xml">
				<title>Process definitions in XML</title>
				<simpara>
					You can create processes directly in XML format using the BPMN 2.0 specifications. The syntax of these XML processes is defined using the BPMN 2.0 XML Schema Definition.
				</simpara>
				<simpara>
					A process XML file consists of the following core sections:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<literal>process</literal>: This is the top part of the process XML that contains the definition of the different nodes and their properties. The process XML file consists of exactly one <literal>&lt;process&gt;</literal> element. This element contains parameters related to the process (its type, name, ID, and package name), and consists of three subsections: a header section where process-level information such as variables, globals, imports, and lanes are defined, a nodes section that defines each of the nodes in the process, and a connections section that contains the connections between all the nodes in the process.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>BPMNDiagram</literal>: This is the lower part of the process XML file that contains all graphical information, such as the location of the nodes. The nodes section contains a specific element for each node and defines the various parameters and any sub-elements for that node type.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					The following process XML file fragment shows a simple process that contains a sequence of a start event, a script task that prints <literal>"Hello World"</literal> to the console, and an end event:
				</simpara>
				
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;definitions
  id="Definition"
  targetNamespace="http://www.jboss.org/drools"
  typeLanguage="http://www.java.com/javaTypes"
  expressionLanguage="http://www.mvel.org/2.0"
  xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd"
  xmlns:g="http://www.jboss.org/drools/flow/gpd"
  xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI"
  xmlns:dc="http://www.omg.org/spec/DD/20100524/DC"
  xmlns:di="http://www.omg.org/spec/DD/20100524/DI"
  xmlns:tns="http://www.jboss.org/drools"&gt;

  &lt;process processType="Private" isExecutable="true" id="com.sample.hello" name="Hello Process"&gt;
    &lt;!-- nodes --&gt;
    &lt;startEvent id="_1" name="Start" /&gt;

    &lt;scriptTask id="_2" name="Hello"&gt;
      &lt;script&gt;System.out.println("Hello World");&lt;/script&gt;
    &lt;/scriptTask&gt;

    &lt;endEvent id="_3" name="End" &gt;
      &lt;terminateEventDefinition/&gt;
    &lt;/endEvent&gt;

    &lt;!-- connections --&gt;

    &lt;sequenceFlow id="_1-_2" sourceRef="_1" targetRef="_2" /&gt;
    &lt;sequenceFlow id="_2-_3" sourceRef="_2" targetRef="_3" /&gt;
  &lt;/process&gt;

  &lt;bpmndi:BPMNDiagram&gt;
    &lt;bpmndi:BPMNPlane bpmnElement="com.sample.hello" &gt;

      &lt;bpmndi:BPMNShape bpmnElement="_1" &gt;
        &lt;dc:Bounds x="16" y="16" width="48" height="48" /&gt;
      &lt;/bpmndi:BPMNShape&gt;

      &lt;bpmndi:BPMNShape bpmnElement="_2" &gt;
        &lt;dc:Bounds x="96" y="16" width="80" height="48" /&gt;
      &lt;/bpmndi:BPMNShape&gt;

      &lt;bpmndi:BPMNShape bpmnElement="_3" &gt;
        &lt;dc:Bounds x="208" y="16" width="48" height="48" /&gt;
      &lt;/bpmndi:BPMNShape&gt;

      &lt;bpmndi:BPMNEdge bpmnElement="_1-_2" &gt;
        &lt;di:waypoint x="40" y="40" /&gt;
        &lt;di:waypoint x="136" y="40" /&gt;
      &lt;/bpmndi:BPMNEdge&gt;

      &lt;bpmndi:BPMNEdge bpmnElement="_2-_3" &gt;
        &lt;di:waypoint x="136" y="40" /&gt;
        &lt;di:waypoint x="232" y="40" /&gt;
      &lt;/bpmndi:BPMNEdge&gt;

    &lt;/bpmndi:BPMNPlane&gt;
  &lt;/bpmndi:BPMNDiagram&gt;

&lt;/definitions&gt;</programlisting>
			</section>
		</chapter>
		<chapter xml:id="business-process-forms_business-processes">
			<title>Forms in Business Central</title>
			<simpara>
				A form is a layout definition for a page, defined as HTML, that is displayed as a dialog window to the user during process and task instantiation. Task forms acquire data from a user for both the process and task instance execution, whereas process forms take input and output from process variables.
			</simpara>
			<simpara>
				The input is then mapped to the task using the data input assignment, which you can use inside of a task. When the task is completed, the data is mapped as a data output assignment to provide the data to the parent process instance.
			</simpara>
			<section xml:id="form-modeler-con">
				<title>Form Modeler</title>
				<simpara>
					Red Hat Process Automation Manager provides a custom editor for defining forms called Form Modeler. With Form Modeler, you can generate forms for data objects, task forms, and process start forms without writing code. Form Modeler includes a widget library for binding multiple data types and a callback mechanism to send notifications when form values change. Form Modeler uses bean-based validation and supports binding form fields to static or dynamic models.
				</simpara>
				<simpara>
					Form Modeler includes the following features:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Form modeling user interface for forms
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Form auto-generation from the data model or Java objects
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Data binding for Java objects
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Formula and expressions
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Customized forms layouts
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Forms embedding
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Form Modeler comes with predefined field types that you place onto the canvas to create a form.
				</simpara>
				<figure>
					<title>Example mortgage loan application form</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/_images/processes/5011.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>5011</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</section>
			<section xml:id="create-process-task-forms-proc">
				<title>Generating process and task forms in Business Central</title>
				<simpara>
					You can generate a process form from your business process that is displayed at process instantiation to the user who instantiated the process. You can also generate a task form from your business process that is displayed at user task instantiation, when the execution flow reaches the task, to the actor of the user task.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the project name to open the asset view and then click the business process name.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the process designer, click the process task that you want to create a form for (if applicable).
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the upper-right toolbar, click the <emphasis role="strong">Form Generation</emphasis> icon and select the forms that you want to generate:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">Generate process form</emphasis>: Generates the form for the entire process. This is the initial form that a user must complete when the process instance is started.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Generate all forms</emphasis>: Generates the form for the entire process and for all user tasks.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Generate forms for selection</emphasis>: Generates the forms for the selected user task nodes.
								</simpara>
							</listitem>
						</itemizedlist>
						<figure>
							<title>Form generation menu</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/processes/auto-form-create.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>auto form create</phrase>
								</textobject>
							</mediaobject>
						</figure>
						<simpara>
							The forms are created in the root directory of your project.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Go to the root directory of your project in Business Central, click the new form name, and use the Form Modeler to customize the form to meet your requirements.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="create-forms">
				<title>Manually creating forms in Business Central</title>
				<simpara>
					You can create task and process forms manually from your project asset view. This is another way to generate a form without selecting to generate forms from your business process. For example, the Form Modeler now supports creating forms from external data objects.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis> and click the project name.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Add Asset</emphasis> → <emphasis role="strong">Form</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Provide the following information in the <emphasis role="strong">Create new Form</emphasis> window:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									Form name (must be unique)
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Package name
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Model type: Select either <emphasis role="strong">Business Process</emphasis> or <emphasis role="strong">Data Object</emphasis>.
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											For the <emphasis role="strong">Business Process</emphasis> model type, select your business process from the <emphasis role="strong">Select Process</emphasis> drop-down menu, and then select the form that you want to create from the <emphasis role="strong">Select Form</emphasis> drop-down menu.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											For the <emphasis role="strong">Data Object</emphasis> model type, select one of your project data objects from the <emphasis role="strong">Select Data Object from Project</emphasis> drop-down menu.
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Ok</emphasis> to open the Form Modeler.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Components</emphasis> view on the left side of the Form Modeler, expand the <emphasis role="strong">Model Fields</emphasis> and <emphasis role="strong">Form Controls</emphasis> menus and create a new form by dragging your required fields and form controls to the canvas.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Save</emphasis> to save your changes.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="doc-attachments-con">
				<title>Document attachments in a form or process</title>
				<simpara>
					Red Hat Process Automation Manager supports document attachments in forms using the <literal>Document</literal> form field. With the <literal>Document</literal> form field, you can upload documents that are required as part of a form or process.
				</simpara>
				<simpara>
					To enable document attachments in forms and processes, complete the following procedures:
				</simpara>
				<orderedlist numeration="arabic">
					<listitem>
						<simpara>
							Set the document marshalling strategy.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Create a document variable in the business process.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Map the task inputs and outputs to the document variable.
						</simpara>
					</listitem>
				</orderedlist>
				<section xml:id="set-doc-marshalling">
					<title>Setting the document marshalling strategy</title>
					<simpara>
						The document marshalling strategy for your project determines where documents are stored for use with forms and processes. The default document marshalling strategy in Red Hat Process Automation Manager is <literal>org.jbpm.document.marshalling.DocumentMarshallingStrategy</literal>. This strategy uses a <literal>DocumentStorageServiceImpl</literal> class that stores documents locally in your <literal><emphasis>PROJECT_HOME</emphasis>/.docs</literal> folder. You can set this document marshalling strategy or a custom document marshalling strategy for your project in Business Central or in the <literal>kie-deployment-descriptor.xml</literal> file.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Select a project. The project <emphasis role="strong">Assets</emphasis> window opens.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click the <emphasis role="strong">Settings</emphasis> tab.
							</simpara>
							<figure>
								<title>Settings tab</title>
								<mediaobject>
									<imageobject>
										<imagedata fileref="images/_images/processes/settings-tab.png" format="PNG" />
									</imageobject>
									<textobject>
										<phrase>Selecting the settings tab</phrase>
									</textobject>
								</mediaobject>
							</figure>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Deployments</emphasis> → <emphasis role="strong">Marshalling Strategies</emphasis>→ <emphasis role="strong">Add Marshalling Strategy</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								In the <emphasis role="strong">Name</emphasis> field, enter the identifier of a document marshalling strategy, and in the <emphasis role="strong">Resolver</emphasis> drop-down menu, select the corresponding resolver type:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										For single documents: Enter <literal>org.jbpm.document.marshalling.DocumentMarshallingStrategy</literal> as the document marshalling strategy and set the resolver type to <emphasis role="strong">Reflection</emphasis>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										For multiple documents: Enter <literal>new org.jbpm.document.marshalling.DocumentCollectionImplMarshallingStrategy(new org.jbpm.document.marshalling.DocumentMarshallingStrategy())</literal> as the document marshalling strategy and set the resolver type to <emphasis role="strong">MVEL</emphasis>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										For custom document support: Enter the identifier of the custom document marshalling strategy and select the relevant resolver type.
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Test</emphasis> to validate your deployment descriptor file.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Deploy</emphasis> to build and deploy the updated project.
							</simpara>
							<simpara>
								Alternatively, if you are not using Business Central, you can navigate to <literal><emphasis>PROJECT_HOME</emphasis>/src/main/resources/META_INF/kie-deployment-descriptor.xml</literal> (if applicable) and edit the deployment descriptor file with the required <literal>&lt;marshalling-strategies&gt;</literal> elements.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Save</emphasis>.
							</simpara>
						</listitem>
					</orderedlist>
					<formalpara>
						<title>Example deployment descriptor file with document marshalling strategy for multiple documents</title>
						<para>
							
<programlisting language="xml" linenumbering="unnumbered">&lt;deployment-descriptor
    xsi:schemaLocation="http://www.jboss.org/jbpm deployment-descriptor.xsd"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;persistence-unit&gt;org.jbpm.domain&lt;/persistence-unit&gt;
  &lt;audit-persistence-unit&gt;org.jbpm.domain&lt;/audit-persistence-unit&gt;
  &lt;audit-mode&gt;JPA&lt;/audit-mode&gt;
  &lt;persistence-mode&gt;JPA&lt;/persistence-mode&gt;
  &lt;runtime-strategy&gt;SINGLETON&lt;/runtime-strategy&gt;
  &lt;marshalling-strategies&gt;
    &lt;marshalling-strategy&gt;
      &lt;resolver&gt;mvel&lt;/resolver&gt;
      &lt;identifier&gt;new org.jbpm.document.marshalling.DocumentCollectionImplMarshallingStrategy(new org.jbpm.document.marshalling.DocumentMarshallingStrategy());&lt;/identifier&gt;
    &lt;/marshalling-strategy&gt;
  &lt;/marshalling-strategies&gt;</programlisting>
						</para>
					</formalpara>
					<section xml:id="cust-marshalling-cms">
						<title>Using a custom document marshalling strategy for a content management system (CMS)</title>
						<simpara>
							The document marshalling strategy for your project determines where documents are stored for use with forms and processes. The default document marshalling strategy in Red Hat Process Automation Manager is <literal>org.jbpm.document.marshalling.DocumentMarshallingStrategy</literal>. This strategy uses a <literal>DocumentStorageServiceImpl</literal> class that stores documents locally in your <literal><emphasis>PROJECT_HOME</emphasis>/.docs</literal> folder. If you want to store form and process documents in a custom location, such as in a centralized content management system (CMS), add a custom document marshalling strategy to your project. You can set this document marshalling strategy in Business Central or in the <literal>kie-deployment-descriptor.xml</literal> file directly.
						</simpara>
						<orderedlist numeration="arabic">
							<title>Procedure</title>
							<listitem>
								<simpara>
									Create a custom marshalling strategy <literal>.java</literal> file that includes an implementation of the <literal>org.kie.api.marshalling.ObjectMarshallingStrategy</literal> interface. This interface enables you to implement the variable persistence required for your custom document marshalling strategy.
								</simpara>
								<simpara>
									The following methods in this interface help you create your strategy:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<literal>boolean accept(Object object)</literal>: Determines if the specified object can be marshalled by the strategy
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<literal>byte[] marshal(Context context, ObjectOutputStream os, Object object)</literal>: Marshals the specified object and returns the marshalled object as <literal>byte[]</literal>
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<literal>Object unmarshal(Context context, ObjectInputStream is, byte[] object, ClassLoader classloader)</literal>: Reads the object received as <literal>byte[]</literal> and returns the unmarshalled object
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<literal>void write(ObjectOutputStream os, Object object)</literal>: Same as the <literal>marshal</literal> method, provided for backward compatibility
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<literal>Object read(ObjectInputStream os)</literal>: Same as the <literal>unmarshal</literal> method, provided for backward compatibility
										</simpara>
									</listitem>
								</itemizedlist>
								<simpara>
									The following code sample is an example <literal>ObjectMarshallingStrategy</literal> implementation for storing and retrieving data from a Content Management Interoperability Services (CMIS) system:
								</simpara>
								<formalpara>
									<title>Example implementation for storing and retrieving data from a CMIS system</title>
									<para>
										
<programlisting language="java" linenumbering="unnumbered">package org.jbpm.integration.cmis.impl;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.HashMap;

import org.apache.chemistry.opencmis.client.api.Folder;
import org.apache.chemistry.opencmis.client.api.Session;
import org.apache.chemistry.opencmis.commons.data.ContentStream;
import org.apache.commons.io.IOUtils;
import org.drools.core.common.DroolsObjectInputStream;
import org.jbpm.document.Document;
import org.jbpm.integration.cmis.UpdateMode;

import org.kie.api.marshalling.ObjectMarshallingStrategy;

public class OpenCMISPlaceholderResolverStrategy extends OpenCMISSupport implements ObjectMarshallingStrategy {

	private String user;
	private String password;
	private String url;
	private String repository;
	private String contentUrl;
	private UpdateMode mode = UpdateMode.OVERRIDE;

	public OpenCMISPlaceholderResolverStrategy(String user, String password, String url, String repository) {
		this.user = user;
		this.password = password;
		this.url = url;
		this.repository = repository;
	}

	public OpenCMISPlaceholderResolverStrategy(String user, String password, String url, String repository, UpdateMode mode) {
		this.user = user;
		this.password = password;
		this.url = url;
		this.repository = repository;
		this.mode = mode;
	}

	   public OpenCMISPlaceholderResolverStrategy(String user, String password, String url, String repository, String contentUrl) {
	        this.user = user;
	        this.password = password;
	        this.url = url;
	        this.repository = repository;
	        this.contentUrl = contentUrl;
	    }

	    public OpenCMISPlaceholderResolverStrategy(String user, String password, String url, String repository, String contentUrl, UpdateMode mode) {
	        this.user = user;
	        this.password = password;
	        this.url = url;
	        this.repository = repository;
	        this.contentUrl = contentUrl;
	        this.mode = mode;
	    }

	public boolean accept(Object object) {
		if (object instanceof Document) {
			return true;
		}
		return false;
	}

	public byte[] marshal(Context context, ObjectOutputStream os, Object object) throws IOException {
		Document document = (Document) object;
		Session session = getRepositorySession(user, password, url, repository);
		try {
			if (document.getContent() != null) {
				String type = getType(document);
				if (document.getIdentifier() == null || document.getIdentifier().isEmpty()) {
					String location = getLocation(document);

					Folder parent = findFolderForPath(session, location);
					if (parent == null) {
						parent = createFolder(session, null, location);
					}
					org.apache.chemistry.opencmis.client.api.Document doc = createDocument(session, parent, document.getName(), type, document.getContent());
					document.setIdentifier(doc.getId());
					document.addAttribute("updated", "true");
				} else {
					if (document.getContent() != null &amp;&amp; "true".equals(document.getAttribute("updated"))) {
						org.apache.chemistry.opencmis.client.api.Document doc = updateDocument(session, document.getIdentifier(), type, document.getContent(), mode);

						document.setIdentifier(doc.getId());
						document.addAttribute("updated", "false");
					}
				}
			}
			ByteArrayOutputStream buff = new ByteArrayOutputStream();
	        ObjectOutputStream oos = new ObjectOutputStream( buff );
	        oos.writeUTF(document.getIdentifier());
	        oos.writeUTF(object.getClass().getCanonicalName());
	        oos.close();
	        return buff.toByteArray();
		} finally {
			session.clear();
		}
	}

	public Object unmarshal(Context context, ObjectInputStream ois, byte[] object, ClassLoader classloader) throws IOException, ClassNotFoundException {
		DroolsObjectInputStream is = new DroolsObjectInputStream( new ByteArrayInputStream( object ), classloader );
		String objectId = is.readUTF();
		String canonicalName = is.readUTF();
		Session session = getRepositorySession(user, password, url, repository);
		try {
			org.apache.chemistry.opencmis.client.api.Document doc = (org.apache.chemistry.opencmis.client.api.Document) findObjectForId(session, objectId);
			Document document = (Document) Class.forName(canonicalName).newInstance();
			document.setAttributes(new HashMap&lt;String, String&gt;());

			document.setIdentifier(objectId);
			document.setName(doc.getName());
			document.setLastModified(doc.getLastModificationDate().getTime());
			document.setSize(doc.getContentStreamLength());
			document.addAttribute("location", getFolderName(doc.getParents()) + getPathAsString(doc.getPaths()));
			if (doc.getContentStream() != null &amp;&amp; contentUrl == null) {
				ContentStream stream = doc.getContentStream();
				document.setContent(IOUtils.toByteArray(stream.getStream()));
				document.addAttribute("updated", "false");
				document.addAttribute("type", stream.getMimeType());
			} else {
			    document.setLink(contentUrl + document.getIdentifier());
			}
			return document;
		} catch(Exception e) {
			throw new RuntimeException("Cannot read document from CMIS", e);
		} finally {
			is.close();
			session.clear();
		}
	}

	public Context createContext() {
		return null;
	}

	// For backward compatibility with previous serialization mechanism
	public void write(ObjectOutputStream os, Object object) throws IOException {
		Document document = (Document) object;
		Session session = getRepositorySession(user, password, url, repository);
		try {
			if (document.getContent() != null) {
				String type = document.getAttribute("type");
				if (document.getIdentifier() == null) {
					String location = document.getAttribute("location");

					Folder parent = findFolderForPath(session, location);
					if (parent == null) {
						parent = createFolder(session, null, location);
					}
					org.apache.chemistry.opencmis.client.api.Document doc = createDocument(session, parent, document.getName(), type, document.getContent());
					document.setIdentifier(doc.getId());
					document.addAttribute("updated", "false");
				} else {
					if (document.getContent() != null &amp;&amp; "true".equals(document.getAttribute("updated"))) {
						org.apache.chemistry.opencmis.client.api.Document doc = updateDocument(session, document.getIdentifier(), type, document.getContent(), mode);

						document.setIdentifier(doc.getId());
						document.addAttribute("updated", "false");
					}
				}
			}
			ByteArrayOutputStream buff = new ByteArrayOutputStream();
	        ObjectOutputStream oos = new ObjectOutputStream( buff );
	        oos.writeUTF(document.getIdentifier());
	        oos.writeUTF(object.getClass().getCanonicalName());
	        oos.close();
		} finally {
			session.clear();
		}
	}

	public Object read(ObjectInputStream os) throws IOException, ClassNotFoundException {
		String objectId = os.readUTF();
		String canonicalName = os.readUTF();
		Session session = getRepositorySession(user, password, url, repository);
		try {
			org.apache.chemistry.opencmis.client.api.Document doc = (org.apache.chemistry.opencmis.client.api.Document) findObjectForId(session, objectId);
			Document document = (Document) Class.forName(canonicalName).newInstance();

			document.setIdentifier(objectId);
			document.setName(doc.getName());
			document.addAttribute("location", getFolderName(doc.getParents()) + getPathAsString(doc.getPaths()));
			if (doc.getContentStream() != null) {
				ContentStream stream = doc.getContentStream();
				document.setContent(IOUtils.toByteArray(stream.getStream()));
				document.addAttribute("updated", "false");
				document.addAttribute("type", stream.getMimeType());
			}
			return document;
		} catch(Exception e) {
			throw new RuntimeException("Cannot read document from CMIS", e);
		} finally {
			session.clear();
		}
	}

}</programlisting>
									</para>
								</formalpara>
							</listitem>
							<listitem>
								<simpara>
									In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click the project name and click <emphasis role="strong">Settings</emphasis>.
								</simpara>
								<figure>
									<title>Settings tab</title>
									<mediaobject>
										<imageobject>
											<imagedata fileref="images/_images/processes/settings-tab.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>Selecting the settings tab</phrase>
										</textobject>
									</mediaobject>
								</figure>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Deployments</emphasis> → <emphasis role="strong">Marshalling Strategies</emphasis>→ <emphasis role="strong">Add Marshalling Strategy</emphasis>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									In the <emphasis role="strong">Name</emphasis> field, enter the identifier of the custom document marshalling strategy, such as <literal>org.jbpm.integration.cmis.impl.OpenCMISPlaceholderResolverStrategy</literal> in this example.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Select the relevant option from the <emphasis role="strong">Resolver</emphasis> drop-down menu, such as <emphasis role="strong">Reflection</emphasis> in this example.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Test</emphasis> to validate your deployment descriptor file.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Deploy</emphasis> to build and deploy the updated project.
								</simpara>
								<simpara>
									Alternatively, if you are not using Business Central, you can navigate to <literal><emphasis>PROJECT_HOME</emphasis>/src/main/resources/META_INF/kie-deployment-descriptor.xml</literal> (if applicable) and edit the deployment descriptor file with the required <literal>&lt;marshalling-strategies&gt;</literal> elements.
								</simpara>
								<formalpara>
									<title>Example deployment descriptor file with custom document marshalling strategy</title>
									<para>
										
<programlisting language="xml" linenumbering="unnumbered">&lt;deployment-descriptor
    xsi:schemaLocation="http://www.jboss.org/jbpm deployment-descriptor.xsd"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;persistence-unit&gt;org.jbpm.domain&lt;/persistence-unit&gt;
  &lt;audit-persistence-unit&gt;org.jbpm.domain&lt;/audit-persistence-unit&gt;
  &lt;audit-mode&gt;JPA&lt;/audit-mode&gt;
  &lt;persistence-mode&gt;JPA&lt;/persistence-mode&gt;
  &lt;runtime-strategy&gt;SINGLETON&lt;/runtime-strategy&gt;
  &lt;marshalling-strategies&gt;
    &lt;marshalling-strategy&gt;
      &lt;resolver&gt;reflection&lt;/resolver&gt;
      &lt;identifier&gt;
        org.jbpm.integration.cmis.impl.OpenCMISPlaceholderResolverStrategy
      &lt;/identifier&gt;
    &lt;/marshalling-strategy&gt;
  &lt;/marshalling-strategies&gt;</programlisting>
									</para>
								</formalpara>
							</listitem>
							<listitem>
								<simpara>
									To enable documents stored in a custom location to be attached to forms and processes, create a document variable in the relevant processes and map task inputs and outputs to that document variable in Business Central.
								</simpara>
							</listitem>
						</orderedlist>
					</section>
				</section>
				<section xml:id="create-doc-var">
					<title>Creating a document variable in a business process</title>
					<simpara>
						After you set a document marshalling strategy, create a document variable in the related process to upload documents to a human task and for the document or documents to be visible in the <emphasis role="strong">Process Instances</emphasis> view in Business Central.
					</simpara>
					<itemizedlist>
						<title>Prerequisites</title>
						<listitem>
							<simpara>
								You have set a document marshalling strategy as described in <xref linkend="set-doc-marshalling" />.
							</simpara>
						</listitem>
					</itemizedlist>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click the project name to open the asset view and click the business process name.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click the canvas and click 
								<inlinemediaobject>
									<imageobject>
										<imagedata fileref="images/_images/getting-started/diagram_properties.png" format="PNG" />
									</imageobject>
									<textobject>
										<phrase>diagram properties</phrase>
									</textobject>
								</inlinemediaobject>
								 on the right side of the window to open the <emphasis role="strong">Properties</emphasis> panel.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Expand <emphasis role="strong">Process Data</emphasis> and click 
								<inlinemediaobject>
									<imageobject>
										<imagedata fileref="images/_images/getting-started/6176.png" format="PNG" />
									</imageobject>
									<textobject>
										<phrase>6176</phrase>
									</textobject>
								</inlinemediaobject>
								 and enter the following values:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										<emphasis role="strong">Name</emphasis>: <literal>document</literal>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Custom Type</emphasis>: <literal>org.jbpm.document.Document</literal> for a single document or <literal>org.jbpm.document.DocumentCollection</literal> for multiple documents
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
					</orderedlist>
				</section>
				<section xml:id="map-task-vars">
					<title>Mapping task inputs and outputs to the document variable</title>
					<simpara>
						If you want to view or modify the attachments inside of task forms, create assignments inside of the task inputs and outputs.
					</simpara>
					<itemizedlist>
						<title>Prerequisties</title>
						<listitem>
							<simpara>
								You have a project that contains a business process asset that has at least one user task.
							</simpara>
						</listitem>
					</itemizedlist>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click the project name to open the asset view and click the business process name.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click a user task and click 
								<inlinemediaobject>
									<imageobject>
										<imagedata fileref="images/_images/getting-started/diagram_properties.png" format="PNG" />
									</imageobject>
									<textobject>
										<phrase>diagram properties</phrase>
									</textobject>
								</inlinemediaobject>
								 on the right side of the window to open the <emphasis role="strong">Properties</emphasis> panel.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Expand <emphasis role="strong">Implementation/Execution</emphasis> and next to <emphasis role="strong">Assignments</emphasis>, click 
								<inlinemediaobject>
									<imageobject>
										<imagedata fileref="images/_images/getting-started/btn_assign.png" format="PNG" />
									</imageobject>
									<textobject>
										<phrase>btn assign</phrase>
									</textobject>
								</inlinemediaobject>
								 to open the <emphasis role="strong">Data I/O</emphasis> window.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Next to <emphasis role="strong">Data Inputs and Assignments</emphasis>, click <emphasis role="strong">Add</emphasis> and enter the following values:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										<emphasis role="strong">Name</emphasis>: <literal>taskdoc_in</literal>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Data Type</emphasis>: <literal>org.jbpm.document.Document</literal> for a single document or <literal>org.jbpm.document.DocumentCollection</literal> for multiple documents
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Source</emphasis>: <literal>document</literal>
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								Next to <emphasis role="strong">Data Outputs and Assignments</emphasis>, click <emphasis role="strong">Add</emphasis> and enter the following values:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										<emphasis role="strong">Name</emphasis>: <literal>taskdoc_out</literal>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Data Type</emphasis>: <literal>org.jbpm.document.Document</literal> for a single document or <literal>org.jbpm.document.DocumentCollection</literal> for multiple documents
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Target</emphasis>: <literal>document</literal>
									</simpara>
								</listitem>
							</itemizedlist>
							<simpara>
								The <literal>Source</literal> and <literal>Target</literal> fields contain the name of the process variable you created earlier.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Save</emphasis>.
							</simpara>
						</listitem>
					</orderedlist>
				</section>
			</section>
		</chapter>
		<chapter remap="_advanced_process_concepts_and_tasks" xml:id="advanced_process_concepts_and_tasks">
			<title>Advanced process concepts and tasks</title>
			<section xml:id="dmn-execution-business-process">
				<title>Invoking a Decision Model and Notation (DMN) service in a business process</title>
				<simpara>
					You can use Decision Model and Notation (DMN) to model a decision service graphically in a decision requirements diagram (DRD) in Business Central and then invoke that DMN service as part of a business process in Business Central. Business processes interact with DMN services by identifying the DMN service and mapping business data between DMN inputs and the business process properties.
				</simpara>
				<simpara>
					As an illustration, this procedure uses an example <emphasis role="strong">TrainStation</emphasis> project that defines train routing logic. This example project contains the following data object and DMN components designed in Business Central for the routing decision logic:
				</simpara>
				<formalpara>
					<title>Example <literal>Train</literal> object</title>
					<para>
						
<programlisting language="java" linenumbering="unnumbered">public class Train {

     private String departureStation;

     private String destinationStation;

     private BigDecimal railNumber;

     // Getters and setters
}</programlisting>
					</para>
				</formalpara>
				<figure>
					<title>Example <literal>Compute Rail</literal> DMN model</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/_images/dmn/dmn-execution-graph.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>dmn execution graph</phrase>
						</textobject>
					</mediaobject>
				</figure>
				<figure>
					<title>Example <literal>Rail</literal> DMN decision table</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/_images/dmn/dmn-execution-expression.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>dmn execution expression</phrase>
						</textobject>
					</mediaobject>
				</figure>
				<figure>
					<title>Example <literal>tTrain</literal> DMN data type</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/_images/dmn/dmn-execution-data-type.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>dmn execution data type</phrase>
						</textobject>
					</mediaobject>
				</figure>
				<simpara>
					For more information about creating DMN models in Business Central, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/developing_decision_services_in_red_hat_process_automation_manager#assembly-dmn-models"><emphasis>Designing a decision service using DMN models</emphasis></link>.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							All required data objects and DMN model components are defined in the project.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis> and click the project name.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select or create the business process asset in which you want to invoke the DMN service.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the process designer, use the left toolbar to drag and drop BPMN components as usual to define your overall business process logic, connections, events, tasks, or other elements.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							To incorporate a DMN service in the business process, add a <emphasis role="strong">Business Rule</emphasis> task from the left toolbar or from the start-node options and insert the task in the relevant location in the process flow.
						</simpara>
						<simpara>
							For this example, the following <literal>Accept Train</literal> business process incorporates the DMN service in the <literal>Route To Rail</literal> node:
						</simpara>
						<figure>
							<title>Example <literal>Accept Train</literal> business process with a DMN service</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/dmn/dmn-execution-business-process.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>dmn execution business process</phrase>
								</textobject>
							</mediaobject>
						</figure>
					</listitem>
					<listitem>
						<simpara>
							Select the business rule task node that you want to use for the DMN service, click <emphasis role="strong">Properties</emphasis> in the upper-right corner of the process designer, and under <emphasis role="strong">Implementation/Execution</emphasis>, define the following fields:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">Rule Language</emphasis>: Select <literal>DMN</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Namespace</emphasis>: Enter the unique namespace from the DMN model file. Example: <literal>https://www.drools.org/kie-dmn</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Decision Name</emphasis>: Enter the name of the DMN decision node that you want to invoke in the selected process node. Example: <literal>Rail</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">DMN Model Name</emphasis>: Enter the DMN model name. Example: <literal>Compute Rail</literal>
								</simpara>
								<important>
									<simpara>
										When you explore the root node, ensure that the <emphasis role="strong">Namespace</emphasis> and <emphasis role="strong">DMN Model Name</emphasis> fields consist of the same value in BPMN as DMN diagram.
									</simpara>
								</important>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							Under <emphasis role="strong">Data Assignments</emphasis> → <emphasis role="strong">Assignments</emphasis>, click the <emphasis role="strong">Edit</emphasis> icon and add the DMN input and output data to define the mapping between the DMN service and the process data.
						</simpara>
						<simpara>
							For the <literal>Route To Rail</literal> DMN service node in this example, you add an input assignment for <literal>Train</literal> that corresponds to the input node in the DMN model, and add an output assignment for <literal>Rail</literal> that corresponds to the decision node in the DMN model. The <emphasis role="strong">Data Type</emphasis> must match the type that you set for that node in the DMN model, and the <emphasis role="strong">Source</emphasis> and <emphasis role="strong">Target</emphasis> definition is the relevant variable or field for the specified object.
						</simpara>
						<figure>
							<title>Example input and output mapping for the <literal>Route To Rail</literal> DMN service node</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/dmn/dmn-execution-io-mapping.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>dmn execution io mapping</phrase>
								</textobject>
							</mediaobject>
						</figure>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Save</emphasis> to save the data input and output data.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Define the remainder of your business process according to how you want the completed DMN service to be handled.
						</simpara>
						<simpara>
							For this example, the <emphasis role="strong">Properties</emphasis> → <emphasis role="strong">Implementation/Execution</emphasis> → <emphasis role="strong">On Exit Action</emphasis> value is set to the following code to store the rail number after the <literal>Route To Rail</literal> DMN service is complete:
						</simpara>
						<formalpara>
							<title>Example code for <literal>On Exit Action</literal></title>
							<para>
								
<programlisting language="java" linenumbering="unnumbered">train.setRailNumber(rail);</programlisting>
							</para>
						</formalpara>
						<simpara>
							If the rail number is not computed, the process reaches a <literal>No Appropriate Rail</literal> end error node that is defined with the following condition expression:
						</simpara>
						<figure>
							<title>Example condition for <literal>No Appropriate Rail</literal> end error node</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/dmn/dmn-execution-negative-condition.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>dmn execution negative condition</phrase>
								</textobject>
							</mediaobject>
						</figure>
						<simpara>
							If the rail number is computed, the process reaches an <literal>Accept Train</literal> script task that is defined with the following condition expression:
						</simpara>
						<figure>
							<title>Example condition for <literal>Accept Train</literal> script task node</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/dmn/dmn-execution-positive-condition.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>dmn execution positive condition</phrase>
								</textobject>
							</mediaobject>
						</figure>
						<simpara>
							The <literal>Accept Train</literal> script task also uses the following script in <emphasis role="strong">Properties</emphasis> → <emphasis role="strong">Implementation/Execution</emphasis> → <emphasis role="strong">Script</emphasis> to print a message about the train route and current rail:
						</simpara>
						
<programlisting language="java" linenumbering="unnumbered">com.myspace.trainstation.Train t =
    (com.myspace.trainstation.Train) kcontext.getVariable("train");
System.out.println("Train from: " + t.getDepartureStation() +
                   ", to: " + t.getDestinationStation() +
                   ",  is on rail: " + t.getRailNumber());</programlisting>
					</listitem>
					<listitem>
						<simpara>
							After you define your business process with the incorporated DMN service, save your process in the process designer, deploy the project, and run the corresponding process definition to invoke the DMN service.
						</simpara>
						<simpara>
							For this example, when you deploy the <emphasis role="strong">TrainStation</emphasis> project and run the corresponding process definition, you open the process instance form for the <literal>Accept Train</literal> process definition and set the <literal>departure station</literal> and <literal>destination station</literal> fields to test the execution:
						</simpara>
						<figure>
							<title>Example process instance form for the <literal>Accept Train</literal> process definition</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/dmn/dmn-execution-process-instance-form.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>dmn execution process instance form</phrase>
								</textobject>
							</mediaobject>
						</figure>
						<simpara>
							After the process is executed, a message appears in the server log with the train route that you specified:
						</simpara>
						<formalpara>
							<title>Example server log output for the <literal>Accept Train</literal> process</title>
							<para>
								
<screen>Train from: Zagreb, to: Belgrade,  is on rail: 1</screen>
							</para>
						</formalpara>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
		<chapter remap="_additional_resources" xml:id="additional_resources">
			<title>Additional resources</title>
			<itemizedlist>
				<listitem>
					<simpara>
						<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/getting_started_with_red_hat_process_automation_manager#assembly-getting-started-process-services"><emphasis>Getting started with business processes</emphasis></link>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/developing_process_services_in_red_hat_process_automation_manager#assembly-managing-and-monitoring-business-processes"><emphasis>Managing and monitoring business processes in Business Central</emphasis></link>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/developing_process_services_in_red_hat_process_automation_manager#assembly-interacting-with-processes"><emphasis>Interacting with processes and tasks</emphasis></link>
					</simpara>
				</listitem>
			</itemizedlist>
		</chapter>
	</part>
	<part xml:id="assembly-interacting-with-processes">
		<title>Interacting with processes and tasks</title>
		<partintro>
			<simpara>
				As a knowledge worker, you use Business Central in Red Hat Process Automation Manager to run processes and tasks of the business process application developed by citizen developers. A business process is a series of steps that are executed as defined in the process flow. To effectively interact with processes and tasks, you must have a clear understanding of the business process and be able to determine the current step of a process or task. You can start and stop tasks; search and filter tasks and process instances; delegate, claim, and release tasks; set a due date and priority of tasks; view and add comments to tasks; and view the task history log.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						Red Hat Process Automation Manager is installed. For installation options, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/installing_and_configuring_red_hat_process_automation_manager#assembly-planning"><emphasis>Planning a Red Hat Process Automation Manager installation</emphasis></link>.
					</simpara>
				</listitem>
			</itemizedlist>
		</partintro>
		<chapter remap="_interacting_with_processes_overview_con" xml:id="interacting_with_processes_overview_con">
			<title>Business processes in Business Central</title>
			<simpara>
				A business process application created by a citizen developer in Business Central depicts the flow of the business process as a series of steps. Each step executes according to the process flow chart. A process can consist of one or more smaller discrete tasks. As a knowledge worker, you work on processes and tasks that occur during business process execution.
			</simpara>
			<simpara>
				As an example, using Red Hat Process Automation Manager, the mortgage department of a financial institution can automate the complete business process for a mortgage loan. When a new mortgage request comes in, a new process instance is created in the mortgage application. Because all requests follow the same set of rules for processing, consistency in every step is ensured. This results in an efficient process that reduces processing time and effort.
			</simpara>
			<section xml:id="interacting-with-processes-user-definition-con">
				<title>Knowledge worker user</title>
				<simpara>
					Consider the example of a customer account representative processing mortgage loan requests at a financial institution. As a customer account representative, you can perform the following tasks:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Accept and decline mortgage requests
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Search and filter through requests
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Delegate, claim, and release requests
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Set a due date and priority on requests
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							View and comment on requests
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							View the request history log
						</simpara>
					</listitem>
				</itemizedlist>
			</section>
		</chapter>
		<chapter remap="_interacting-with-processes-knowledge-worker-tasks-con" xml:id="interacting-with-processes-knowledge-worker-tasks-con">
			<title>Knowledge worker tasks in Business Central</title>
			<simpara>
				A task is a part of the business process flow that a given user can claim and perform. You can handle tasks in <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis> in Business Central. It displays the task list for the logged-in user. A task can be assigned to a particular user, multiple users, or to a group of users. If a task is assigned to multiple users or a group of users, it is visible in the task lists of all the users and any user can claim the task. When a task is claimed by a user, it is removed from the task list of other users.
			</simpara>
			<section xml:id="interacting-with-processes-starting-tasks-proc">
				<title>Starting a task</title>
				<simpara>
					You can start user tasks in <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Tasks</emphasis> and in <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis> in Business Central.
				</simpara>
				<note>
					<simpara>
						Ensure that you are logged in and have appropriate permissions for starting and stopping tasks.
					</simpara>
				</note>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Task Inbox</emphasis> page, click the task to open it.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Work</emphasis> tab of the task page, click <emphasis role="strong">Start</emphasis>. Once you start a task, its status changes to <emphasis role="strong">InProgress</emphasis>.
						</simpara>
						<simpara>
							You can view the status of tasks on the <emphasis role="strong">Task Inbox</emphasis> as well as on the <emphasis role="strong">Manage Tasks</emphasis> page.
						</simpara>
					</listitem>
				</orderedlist>
				<note>
					<simpara>
						Only users with the <literal>process-admin</literal> role can view the task list on the <emphasis role="strong">Manage Tasks</emphasis> page. Users with the <literal>admin</literal> role can access the <emphasis role="strong">Manage Tasks</emphasis> page, however they see only an empty task list.
					</simpara>
				</note>
			</section>
			<section xml:id="interacting-with-processes-stopping-tasks-proc">
				<title>Stopping a task</title>
				<simpara>
					You can stop user tasks from the <emphasis role="strong">Tasks</emphasis> and <emphasis role="strong">Task Inbox</emphasis> page.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Task Inbox</emphasis> page, click the task to open it.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Work</emphasis> tab of the task page, click <emphasis role="strong">Complete</emphasis>.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="interacting-with-processes-delegating-tasks-proc">
				<title>Delegating a task</title>
				<simpara>
					After tasks are created in Business Central, you can delegate them to others.
				</simpara>
				<note>
					<simpara>
						A user assigned with any role can delegate, claim, or release tasks visible to the user. On the <emphasis role="strong">Task Inbox</emphasis> page, the <emphasis role="strong">Actual Owner</emphasis> column displays the name of the current owner of the task.
					</simpara>
				</note>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Task Inbox</emphasis> page, click the task to open it.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the task page, click the <emphasis role="strong">Assignments</emphasis> tab.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">User</emphasis> field, enter the name of the user or group you want to delegate the task to.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Delegate</emphasis>. Once a task is delegated, the owner of the task changes.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="interacting-with-processes-claiming-tasks-proc">
				<title>Claiming a task</title>
				<simpara>
					After tasks are created in Business Central, you can claim the released tasks. A user can claim a task from the <emphasis role="strong">Task Inbox</emphasis> page only if the task is assigned to a group the user belongs to.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Task Inbox</emphasis> page, click the task to open it.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Work</emphasis> tab of the task page, click <emphasis role="strong">Claim</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							To claim the released task from the <emphasis role="strong">Task Inbox</emphasis> page, do any of the following tasks:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Claim</emphasis> from the three dots in the <emphasis role="strong">Actions</emphasis> column.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Claim and Work</emphasis> from the three dots in the <emphasis role="strong">Actions</emphasis> column to open, view, and modify the details of a task.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
				</orderedlist>
				<simpara>
					The user who claims a task becomes the owner of the task.
				</simpara>
			</section>
			<section xml:id="interacting-with-processes-releasing-tasks-proc">
				<title>Releasing a task</title>
				<simpara>
					After tasks are created in Business Central, you can release your tasks for others to claim.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Task Inbox</emphasis> page, click the task to open it.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the task page, click <emphasis role="strong">Release</emphasis>. A released task has no owner.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="interacting-with-processes-bulk-actions-on-tasks-con">
				<title>Bulk actions on tasks</title>
				<simpara>
					In the <emphasis role="strong">Tasks</emphasis> and <emphasis role="strong">Task Inbox</emphasis> pages in Business Central, you can perform bulk actions over multiple tasks in a single operation.
				</simpara>
				<note>
					<simpara>
						If a specified bulk action is not permitted based on the task status, a notification is displayed and the operation is not executed on that particular task.
					</simpara>
				</note>
				<section xml:id="interacting-with-processes-claiming-tasks-in-bulk-proc">
					<title>Claiming tasks in bulk</title>
					<simpara>
						After you create tasks in Business Central, you can claim the available tasks in bulk.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								In Business Central, complete one of the following steps:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										To view the <emphasis role="strong">Task Inbox</emphasis> page, select <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										To view the <emphasis role="strong">Tasks</emphasis> page, select <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Tasks</emphasis>.
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								To claim the tasks in bulk, on the <emphasis role="strong">Task Inbox</emphasis> page or the <emphasis role="strong">Manage Tasks</emphasis> page, select two or more tasks from the <emphasis role="strong">Task</emphasis> table.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								From the <emphasis role="strong">Bulk Actions</emphasis> drop-down list, select <emphasis role="strong">Bulk Claim</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To confirm, click <emphasis role="strong">Claim</emphasis> on the <emphasis role="strong">Claim selected tasks</emphasis> window.
							</simpara>
						</listitem>
					</orderedlist>
					<simpara>
						For each task selected, a notification is displayed showing the result.
					</simpara>
				</section>
				<section xml:id="interacting-with-processes-releasing-tasks-in-bulk-proc">
					<title>Releasing tasks in bulk</title>
					<simpara>
						You can release your owned tasks in bulk for others to claim.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								In Business Central, complete one of the following steps:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										To view the <emphasis role="strong">Task Inbox</emphasis> page, select <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										To view the <emphasis role="strong">Tasks</emphasis> page, select <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Tasks</emphasis>.
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								To release the tasks in bulk, on the <emphasis role="strong">Task Inbox</emphasis> page or the <emphasis role="strong">Manage Tasks</emphasis> page, select two or more tasks from the <emphasis role="strong">Task</emphasis> table.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								From the <emphasis role="strong">Bulk Actions</emphasis> drop-down list, select <emphasis role="strong">Bulk Release</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To confirm, click <emphasis role="strong">Release</emphasis> on the <emphasis role="strong">Release selected tasks</emphasis> window .
							</simpara>
						</listitem>
					</orderedlist>
					<simpara>
						For each task selected, a notification is displayed showing the result.
					</simpara>
				</section>
				<section xml:id="interacting-with-processes-resuming-tasks-in-bulk-proc">
					<title>Resuming tasks in bulk</title>
					<simpara>
						If there are suspended tasks in Business Central, you can resume them in bulk.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								In Business Central, complete one of the following steps:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										To view the <emphasis role="strong">Task Inbox</emphasis> page, select <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										To view the <emphasis role="strong">Tasks</emphasis> page, select <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Tasks</emphasis>.
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								To resume the tasks in bulk, on the <emphasis role="strong">Task Inbox</emphasis> page or the <emphasis role="strong">Manage Tasks</emphasis> page, select two or more tasks from the <emphasis role="strong">Task</emphasis> table.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								From the <emphasis role="strong">Bulk Actions</emphasis> drop-down list, select <emphasis role="strong">Bulk Resume</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To confirm, click <emphasis role="strong">Resume</emphasis> on the <emphasis role="strong">Resume selected tasks</emphasis> window.
							</simpara>
						</listitem>
					</orderedlist>
					<simpara>
						For each task selected, a notification is displayed showing the result.
					</simpara>
				</section>
				<section xml:id="interacting-with-processes-suspending-tasks-in-bulk-proc">
					<title>Suspending tasks in bulk</title>
					<simpara>
						After you create tasks in Business Central, you can suspend the tasks in bulk.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								In Business Central, complete one of the following steps:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										To view the <emphasis role="strong">Task Inbox</emphasis> page, select <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										To view the <emphasis role="strong">Tasks</emphasis> page, select <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Tasks</emphasis>.
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								To suspend the tasks in bulk, on the <emphasis role="strong">Task Inbox</emphasis> page or the <emphasis role="strong">Manage Tasks</emphasis> page, select two or more tasks from the <emphasis role="strong">Task</emphasis> table.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								From the <emphasis role="strong">Bulk Actions</emphasis> drop-down list, select <emphasis role="strong">Bulk Suspend</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To confirm, click <emphasis role="strong">Suspend</emphasis> on the <emphasis role="strong">Suspend selected tasks</emphasis> window .
							</simpara>
						</listitem>
					</orderedlist>
					<simpara>
						For each task selected, a notification is displayed showing the result.
					</simpara>
				</section>
				<section xml:id="interacting-with-processes-reassigning-tasks-in-bulk-proc">
					<title>Reassigning tasks in bulk</title>
					<simpara>
						After you create tasks in Business Central, you can reassign your tasks in bulk and delegate them to others.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								In Business Central, complete one of the following steps:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										To view the <emphasis role="strong">Task Inbox</emphasis> page, select <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										To view the <emphasis role="strong">Tasks</emphasis> page, select <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Tasks</emphasis>.
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								To reassign the tasks in bulk, on the <emphasis role="strong">Task Inbox</emphasis> page or the <emphasis role="strong">Manage Tasks</emphasis> page, select two or more tasks from the <emphasis role="strong">Task</emphasis> table.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								From the <emphasis role="strong">Bulk Actions</emphasis> drop-down list, select <emphasis role="strong">Bulk Reassign</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								In the <emphasis role="strong">Tasks reassignment</emphasis> window, enter the user ID of the user to whom you want to reassign the tasks.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Delegate</emphasis>.
							</simpara>
						</listitem>
					</orderedlist>
					<simpara>
						For each task selected, a notification is displayed showing the result.
					</simpara>
				</section>
			</section>
		</chapter>
		<chapter xml:id="interacting-with-processes-filter-tasks-con">
			<title>Task filtering in Business Central</title>
			<simpara>
				Business Central provides built-in filters to help you search tasks. You can filter tasks by attributes such as <emphasis role="strong">Status</emphasis>, <emphasis role="strong">Filter By</emphasis>, <emphasis role="strong">Process Definition Id</emphasis>, and <emphasis role="strong">Created On</emphasis>. It is also possible to create custom task filters using the <emphasis role="strong">Advanced Filters</emphasis> option. The newly created custom filter is added to the <emphasis role="strong">Saved Filters</emphasis> pane, which is accessible by clicking on the star icon on the left of the <emphasis role="strong">Task Inbox</emphasis> page.
			</simpara>
			<section xml:id="task-inbox-columns-proc">
				<title>Managing task list columns</title>
				<simpara>
					In the task list on the <emphasis role="strong">Task Inbox</emphasis> and <emphasis role="strong">Manage Tasks</emphasis> windows, you can specify what columns to view and you can change the order of columns to better manage task information.
				</simpara>
				<note>
					<simpara>
						Only users with the <literal>process-admin</literal> role can view the task list on the <emphasis role="strong">Manage Tasks</emphasis> page. Users with the <literal>admin</literal> role can access the <emphasis role="strong">Manage Tasks</emphasis> page, however they see only an empty task list.
					</simpara>
				</note>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Tasks</emphasis> or <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Manage Task</emphasis> or <emphasis role="strong">Task Inbox</emphasis> page, click the <emphasis role="strong">Show/hide columns</emphasis> icon to the right of <emphasis role="strong">Bulk Actions</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select or deselect columns to display. As you make changes to the list, columns in the task list appear or disapper.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							To rearrange the columns, drag the column heading to a new position. Note that your pointer must change to the icon shown in the following illustration before you can drag the column:
						</simpara>
						<informalfigure>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/processes/column-icon.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>column icon</phrase>
							</textobject>
						</mediaobject>
						</informalfigure>
					</listitem>
					<listitem>
						<simpara>
							To save your changes as a filter, click <emphasis role="strong">Save Filters</emphasis>, enter a name, and click <emphasis role="strong">Save</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							To use your new filter, click the <emphasis role="strong">Saved Filters</emphasis> icon (star) on the left of the screen and select your filter from the list.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="interacting-with-processes-tasks-basic-filters-proc">
				<title>Filtering tasks using basic filters</title>
				<simpara>
					Business Central provides basic filters for filtering and searching through tasks based on their attributes such as <emphasis role="strong">Status</emphasis>, <emphasis role="strong">Filter By</emphasis>, <emphasis role="strong">Process Definition Id</emphasis>, and <emphasis role="strong">Created On</emphasis>.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Task Inbox</emphasis> page, click the filter icon on the left of the page to expand the <emphasis role="strong">Filters</emphasis> pane and select the filters you want to use:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">Status</emphasis>: Filter tasks based on their status.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Filter By</emphasis>: Filter tasks based on <emphasis role="strong">Id</emphasis>, <emphasis role="strong">Task</emphasis>, <emphasis role="strong">Correlation Key</emphasis>, <emphasis role="strong">Actual Owner</emphasis>, or <emphasis role="strong">Process Instance Description</emphasis> attribute.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Process Definition Id</emphasis>: Filter tasks based on process definition ids.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Created On</emphasis>: Filter tasks based on their creation date.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
				</orderedlist>
				<simpara>
					You can use the <emphasis role="strong">Advanced Filters</emphasis> option to create custom filters in Business Central.
				</simpara>
			</section>
			<section xml:id="interacting-with-processes-tasks-advanced-filters-proc">
				<title>Filtering tasks using advanced filters</title>
				<simpara>
					You can create custom task filters using the <emphasis role="strong">Advanced Filters</emphasis> option in Business Central.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Task Inbox</emphasis> page, click the advanced filters icon on the left of the page to expand the <emphasis role="strong">Advanced Filters</emphasis> panel.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Advanced Filters</emphasis> panel, enter the filter name and description, and click <emphasis role="strong">Add New</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select an attribute from the <emphasis role="strong">Select column</emphasis> drop-down list, such as <emphasis role="strong">Name</emphasis>. The content of the drop-down changes to <emphasis role="strong">Name != value1</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the drop-down again and choose the required logical query. For the <emphasis role="strong">Name</emphasis> attribute, choose <emphasis role="strong">equals to</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Change the value of the text field to the name of the task you want to filter.
						</simpara>
						<note>
							<simpara>
								The name must match the value defined in the business process of the project.
							</simpara>
						</note>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Save</emphasis> and the tasks are filtered according to the filter definition.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the star icon to open the <emphasis role="strong">Saved Filters</emphasis> pane.
						</simpara>
						<simpara>
							In the <emphasis role="strong">Saved Filters</emphasis> pane, you can view the saved advanced filters.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="interacting-with-processes-tasks-default-filters-proc">
				<title>Managing tasks using default filter</title>
				<simpara>
					You can set a task filter as a default filter using the <emphasis role="strong">Saved Filter</emphasis> option in Business Central. A default filter will be executed every time when the page is open by the user.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis> or go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Tasks</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Task Inbox</emphasis> page or the <emphasis role="strong">Manage Tasks</emphasis> page, click the star icon on the left of the page to expand the <emphasis role="strong">Saved Filters</emphasis> panel.
						</simpara>
						<simpara>
							In the <emphasis role="strong">Saved Filters</emphasis> panel, you can view the saved advanced filters.
						</simpara>
						<formalpara>
							<title>Default filter selection for Tasks or Task Inbox</title>
							<para>
								<inlinemediaobject>
									<imageobject>
										<imagedata fileref="images/_images/processes/task-default-filters.png" format="PNG" />
									</imageobject>
									<textobject>
										<phrase>Default filter selection for Tasks or Task Inbox</phrase>
									</textobject>
								</inlinemediaobject>
							</para>
						</formalpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Saved Filters</emphasis> panel, set a saved task filter as the default filter.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="interacting-with-processes-viewing-task-variables-basic-filters-proc">
				<title>Viewing task variables using basic filters</title>
				<simpara>
					Business Central provides basic filters to view task variables in <emphasis role="strong">Manage Tasks</emphasis> and <emphasis role="strong">Task Inbox</emphasis>. You can view the task variables of the task as columns using <emphasis role="strong">Show/hide columns</emphasis>.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Tasks</emphasis> or go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Task Inbox</emphasis> page, click the filter icon on the left of the page to expand the <emphasis role="strong">Filters</emphasis> panel
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Filters</emphasis> panel, select the <emphasis role="strong">Task Name</emphasis>.
						</simpara>
						<simpara>
							The filter is applied to the current task list.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Show/hide columns</emphasis> on the upper right of the tasks list and the task variables of the specified task id will be displayed.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the star icon to open the <emphasis role="strong">Saved Filters</emphasis> panel.
						</simpara>
						<simpara>
							In the <emphasis role="strong">Saved Filters</emphasis> panel, you can view all the saved advanced filters.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="interacting-with-processes-viewing-task-variables-advanced-filters-proc">
				<title>Viewing task variables using advanced filters</title>
				<simpara>
					You can use the <emphasis role="strong">Advanced Filters</emphasis> option in Business Central to view task variables in <emphasis role="strong">Manage Tasks</emphasis> and <emphasis role="strong">Task Inbox</emphasis>. When you create a filter with the task defined, you can view the task variables of the task as columns using <emphasis role="strong">Show/hide columns</emphasis>.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Tasks</emphasis> or go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Manage Tasks</emphasis> page or the <emphasis role="strong">Task Inbox</emphasis> page, click the advanced filters icon to expand the <emphasis role="strong">Advanced Filters</emphasis> panel.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Advanced Filters</emphasis> panel, enter the name and description of the filter, and click <emphasis role="strong">Add New</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							From the <emphasis role="strong">Select column</emphasis> list, select the <literal>name</literal> attribute. The value will change to <emphasis role="strong">name != value1</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							From the <emphasis role="strong">Select column</emphasis> list, select <emphasis role="strong">equals to</emphasis> for the logical query.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the text field, enter the name of the task.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Save</emphasis> and the filter is applied on the current task list.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Show/hide columns</emphasis> on the upper right of the tasks list and the task variables of the specified task id will be displayed.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the star icon to open the <emphasis role="strong">Saved Filters</emphasis> panel.
						</simpara>
						<simpara>
							In the <emphasis role="strong">Saved Filters</emphasis> panel, you can view all the saved advanced filters.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
		<chapter xml:id="interacting-with-processes-process-instances-filters-con">
			<title>Process instance filtering in Business Central</title>
			<simpara>
				Business Central now provides you with basic and advanced filters to help you filter and search through process instances. You can filter processes by attributes such as <emphasis role="strong">State</emphasis>, <emphasis role="strong">Errors</emphasis>, <emphasis role="strong">Filter By</emphasis>, <emphasis role="strong">Name</emphasis>, <emphasis role="strong">Start Date</emphasis>, and <emphasis role="strong">Last update</emphasis>. You can also create custom filters using the <emphasis role="strong">Advanced Filters</emphasis> option. The newly created custom filter is added to the <emphasis role="strong">Saved Filters</emphasis> pane, which is accessible by clicking on the star icon on the left of the <emphasis role="strong">Manage Process Instances</emphasis> page.
			</simpara>
			<note>
				<simpara>
					All users except those with <literal>manager</literal> or <literal>rest-all</literal> roles can access and filter process instances in Business Central.
				</simpara>
			</note>
			<section xml:id="interacting-with-processes-process-instances-basic-filters-proc">
				<title>Filtering process instances using basic filters</title>
				<simpara>
					Business Central provides basic filters for filtering and searching through process instances based on their attributes such as <emphasis role="strong">State</emphasis>, <emphasis role="strong">Errors</emphasis>, <emphasis role="strong">Filter By</emphasis>, <emphasis role="strong">Name</emphasis>, <emphasis role="strong">Start Date</emphasis>, and <emphasis role="strong">Last update</emphasis>.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Manage Process Instances</emphasis> page, click the filter icon on the left of the page to expand the <emphasis role="strong">Filters</emphasis> pane and select the filters you want to use:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">State</emphasis>: Filter process instances based on their state (<emphasis role="strong">Active</emphasis>, <emphasis role="strong">Aborted</emphasis>, <emphasis role="strong">Completed</emphasis>, <emphasis role="strong">Pending</emphasis>, and <emphasis role="strong">Suspended</emphasis>).
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Errors</emphasis>: Filter process instances that contain at least one or no errors.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Filter By</emphasis>: Filter process instances based on <emphasis role="strong">Id</emphasis>, <emphasis role="strong">Initiator</emphasis>, <emphasis role="strong">Correlation Key</emphasis>, or <emphasis role="strong">Description</emphasis> attribute.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Name</emphasis>: Filter process instances based on process definition name.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Definition ID</emphasis>: The ID of the instance definition.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Deployment ID</emphasis>: The ID of the instance deployment.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">SLA Compliance</emphasis>: SLA compliance status (<emphasis role="strong">Aborted</emphasis>, <emphasis role="strong">Met</emphasis>, <emphasis role="strong">N/A</emphasis>, <emphasis role="strong">Pending</emphasis>, and <emphasis role="strong">Violated</emphasis>).
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Parent Process ID</emphasis>: The ID of the parent process instance.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Start Date</emphasis>: Filter process instances based on their creation date.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Last update</emphasis>: Filter process instances based on their last modified date.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
				</orderedlist>
				<simpara>
					You can also use the <emphasis role="strong">Advanced Filters</emphasis> option to create custom filters in Business Central.
				</simpara>
			</section>
			<section xml:id="interacting-with-processes-process-instances-advanced-filters-proc">
				<title>Filtering process instances using advanced filters</title>
				<simpara>
					You can create custom process instance filters using the <emphasis role="strong">Advanced Filters</emphasis> option in Business Central.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, click <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Manage Process Instances</emphasis> page, click the <emphasis role="strong">Advanced Filters</emphasis> icon.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Advanced Filters</emphasis> pane, enter the name and description of the filter, and click <emphasis role="strong">Add New</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select an attribute from the <emphasis role="strong">Select column</emphasis> drop-down list, for example, <emphasis role="strong">processName</emphasis>. The content of the drop-down changes to <emphasis role="strong">processName != value1</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the drop-down again and choose the required logical query. For the <emphasis role="strong">processName</emphasis> attribute, choose <emphasis role="strong">equals to</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Change the value of the text field to the name of the process you want to filter.
						</simpara>
						<note>
							<simpara>
								The <literal>processName</literal> must match the value defined in the business process of the project.
							</simpara>
						</note>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Save</emphasis> and the processes are filtered according to the filter definition.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the star icon to open the <emphasis role="strong">Saved Filters</emphasis> pane.
						</simpara>
						<simpara>
							In the <emphasis role="strong">Saved Filters</emphasis> pane, you can view all the saved advanced filters.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="interacting-with-processes-process-instances-default-filters-proc">
				<title>Managing process instances using default filter</title>
				<simpara>
					You can set a process instance filter as a default filter using the <emphasis role="strong">Saved Filter</emphasis> option in Business Central. A default filter will be executed every time when the page is open by the user.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Manage Process Instances</emphasis> page, click the star icon on the left of the page to expand the <emphasis role="strong">Saved Filters</emphasis> panel.
						</simpara>
						<simpara>
							In the <emphasis role="strong">Saved Filters</emphasis> panel, you can view the saved advanced filters.
						</simpara>
						<formalpara>
							<title>Default filter selection for Process Instances</title>
							<para>
								<inlinemediaobject>
									<imageobject>
										<imagedata fileref="images/_images/processes/process-instance-default-filters.png" format="PNG" />
									</imageobject>
									<textobject>
										<phrase>Default filter selection for Process Instances</phrase>
									</textobject>
								</inlinemediaobject>
							</para>
						</formalpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Saved Filters</emphasis> panel, set a saved process instance filter as the default filter.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="interacting-with-processes-viewing-process-instances-variables-basic-filters-proc">
				<title>Viewing process instance variables using basic filters</title>
				<simpara>
					Business Central provides basic filters to view process instance variables. You can view the process instance variables of the process as columns using <emphasis role="strong">Show/hide columns</emphasis>.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Manage Process Instances</emphasis> page, click the filter icon on the left of the page to expand the <emphasis role="strong">Filters</emphasis> panel.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Filters</emphasis> panel, select the <emphasis role="strong">Definition Id</emphasis>.
						</simpara>
						<simpara>
							The filter is applied on the current process instance list.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Show/hide columns</emphasis> on the upper right of the process instances list and the process instance variables of the specified process id will be displayed.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the star icon to open the <emphasis role="strong">Saved Filters</emphasis> panel.
						</simpara>
						<simpara>
							In the <emphasis role="strong">Saved Filters</emphasis> panel, you can view all the saved advanced filters.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="interacting-with-processes-viewing-process-instances-variables-advanced-filters-proc">
				<title>Viewing process instance variables using advanced filters</title>
				<simpara>
					You can use the <emphasis role="strong">Advanced Filters</emphasis> option in Business Central to view process instance variables. When you create a filter over the column <literal>processId</literal>, you can view the process instance variables of the process as columns using <emphasis role="strong">Show/hide columns</emphasis>.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Manage Process Instances</emphasis> page, click the advanced filters icon to expand the <emphasis role="strong">Advanced Filters</emphasis> panel.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Advanced Filters</emphasis> panel, enter the name and description of the filter, and click <emphasis role="strong">Add New</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							From the <emphasis role="strong">Select column</emphasis> list, select the <literal>processId</literal> attribute. The value will change to <emphasis role="strong">processId != value1</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							From the <emphasis role="strong">Select column</emphasis> list, select <emphasis role="strong">equals to</emphasis> for the logical query.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the text field, enter the name of the process id.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Save</emphasis> and the filter is applied on the current process instance list.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Show/hide columns</emphasis> on the upper right of the process instances list and the process instance variables of the specified process id will be displayed.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the star icon to open the <emphasis role="strong">Saved Filters</emphasis> panel.
						</simpara>
						<simpara>
							In the <emphasis role="strong">Saved Filters</emphasis> panel, you can view all the saved advanced filters.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
		<chapter xml:id="configuring-emails-in-task-notification-proc">
			<title>Configuring emails in task notification</title>
			<simpara>
				Earlier it was possible to send notifications only to users or group of users in Business Central. Now you can directly add any email addresses as well.
			</simpara>
			<formalpara>
				<title>Prerequisites</title>
				<para>
					You have created a project in Business Central.
				</para>
			</formalpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						Create a business process.
					</simpara>
					<simpara>
						For more information about creating a business process in Business Central, see <xref linkend="design-bus-proc" />.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Create a user task.
					</simpara>
					<simpara>
						For more information about creating a user task in Business Central, see <xref linkend="create-user-task-proc" />.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In the upper-right corner of the screen, click the <emphasis role="strong">Properties</emphasis> icon.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Expand <emphasis role="strong">Implementation/Execution</emphasis> and click 
						<inlinemediaobject>
							<imageobject>
								<imagedata fileref="images/_images/getting-started/btn_assign.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>btn assign</phrase>
							</textobject>
						</inlinemediaobject>
						 next to <emphasis role="strong">Notifications</emphasis>, to open the <emphasis role="strong">Notifications</emphasis> window.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Add</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In the <emphasis role="strong">Notifications</emphasis> window, enter an email address in the <emphasis role="strong">To: email(s)</emphasis> field to set the recipients of the task notification emails.
					</simpara>
					<simpara>
						You can add multiple email addresses separated by comma.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Enter the subject and body of the email.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Ok</emphasis>.
					</simpara>
					<simpara>
						You can see the added email addresses in the <emphasis role="strong">To: email(s)</emphasis> column in the <emphasis role="strong">Notifications</emphasis> window.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Ok</emphasis>.
					</simpara>
				</listitem>
			</orderedlist>
		</chapter>
		<chapter xml:id="interacting-with-processes-setting-date-priority-proc">
			<title>Setting the due date and priority of a task</title>
			<simpara>
				You can set the priority, due date, and time of a task in Business Central from the <emphasis role="strong">Task Inbox</emphasis> page. Note that all users may not have permissions for setting priority and the due date of a task.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						On the <emphasis role="strong">Task Inbox</emphasis> page, click the task to open it.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						On the task page, click the <emphasis role="strong">Details</emphasis> tab.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In the <emphasis role="strong">Due Date</emphasis> field, select the required date from the calendar and the due time from the drop-down list.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In the <emphasis role="strong">Priority</emphasis> field, select the required priority.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Update</emphasis>.
					</simpara>
				</listitem>
			</orderedlist>
		</chapter>
		<chapter xml:id="interacting-with-processes-viewing-adding-comments-proc">
			<title>Viewing and adding comments to a task</title>
			<simpara>
				You can add comments to a task and also view the existing comments of a task in Business Central.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						On the <emphasis role="strong">Task Inbox</emphasis> page, click the task to open it.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						On the task page, click the <emphasis role="strong">Work</emphasis> tab or the <emphasis role="strong">Comments</emphasis> tab.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In the <emphasis role="strong">Comment</emphasis> field, enter the task related comment and click <emphasis role="strong">Add Comment</emphasis> icon.
					</simpara>
					<simpara>
						All task related comments are displayed in a tabular form in the <emphasis role="strong">Work</emphasis> as well as <emphasis role="strong">Comments</emphasis> tab.
					</simpara>
				</listitem>
			</orderedlist>
			<note>
				<simpara>
					To select or clear the <emphasis role="strong">Show task comments at work tab</emphasis> check box, go to the Business Central home page, click the <emphasis role="strong">Settings</emphasis> icon and select the <emphasis role="strong">Process Administration</emphasis> option. Only users with the <literal>admin</literal> role have access to enable or disable this feature.
				</simpara>
			</note>
		</chapter>
		<chapter xml:id="interacting-with-processes-viewing-task-history-log-proc">
			<title>Viewing the history log of a task</title>
			<simpara>
				You can view the history log of a task in Business Central from the <emphasis role="strong">Logs</emphasis> tab of task. The history log lists all the events in the "Date Time: Task event" format.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						On the <emphasis role="strong">Task Inbox</emphasis> page, click the task to open it.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						On the task page, click the <emphasis role="strong">Logs</emphasis> tab.
					</simpara>
					<simpara>
						All events that take place during the task life cycle is listed in the <emphasis role="strong">Logs</emphasis> tab.
					</simpara>
				</listitem>
			</orderedlist>
		</chapter>
		<chapter xml:id="interacting-with-processes-viewing-process-instance-history-log-proc_interacting-with-processes">
			<title>Viewing the history log of a process instance</title>
			<simpara>
				You can view the history log of a process instance in Business Central from its <emphasis role="strong">Logs</emphasis> tab. The log lists all the events in the <literal>Date Time: Event Node Type: Event Type</literal> format.
			</simpara>
			<simpara>
				You can filter the logs based on <emphasis role="strong">Event Node Type</emphasis> and <emphasis role="strong">Event Type</emphasis>. You can also view the details of the human nodes in the logs.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						On the <emphasis role="strong">Process Instances</emphasis> page, click the process instance whose log you want to view.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						On the instance page, click the <emphasis role="strong">Logs</emphasis> tab.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select the required check boxes from <emphasis role="strong">Event Node Type</emphasis> and <emphasis role="strong">Event Type</emphasis> pane to filter the log as per your need.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						To view additional information regarding human nodes, expand <emphasis role="strong">Details</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Reset</emphasis> to revert to the default filter selection.
					</simpara>
					<simpara>
						All events that occur in a process instance life cycle are listed in the <emphasis role="strong">Logs</emphasis> tab.
					</simpara>
				</listitem>
			</orderedlist>
		</chapter>
	</part>
	<part xml:id="assembly-managing-and-monitoring-business-processes">
		<title>Managing and monitoring business processes in Business Central</title>
		<partintro>
			<simpara>
				As a process administrator, you can use Business Central in Red Hat Process Automation Manager to manage and monitor process instances and tasks running on a number of projects. From Business Central you can start a new process instance, verify the state of all process instances, and abort processes. You can view the list of jobs and tasks associated with your processes, as well as understand and communicate any process errors.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						Red Hat JBoss Enterprise Application Platform 7.3 is installed. For more information, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.2/html-single/installation_guide/"><emphasis>Red Hat JBoss Enterprise Application Platform 7.3 Installation Guide</emphasis></link>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Red Hat Process Automation Manager is installed. For more information, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/installing_and_configuring_red_hat_process_automation_manager#assembly-planning"><emphasis>Planning a Red Hat Process Automation Manager installation</emphasis></link>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Red Hat Process Automation Manager is running and you can log in to Business Central with the <literal>process-admin</literal> role. For more information, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/installing_and_configuring_red_hat_process_automation_manager#assembly-planning"><emphasis>Planning a Red Hat Process Automation Manager installation</emphasis></link>.
					</simpara>
				</listitem>
			</itemizedlist>
		</partintro>
		<chapter xml:id="monitor-project-managing-and-monitoring-processes">
			<title>Process monitoring</title>
			<simpara>
				Red Hat Process Automation Manager provides real-time monitoring for your business processes and includes the following capabilities:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						Business managers can monitor processes in real time.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Customers can monitor the current status of their requests.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Administrators can easily monitor any errors related to process execution.
					</simpara>
				</listitem>
			</itemizedlist>
		</chapter>
		<chapter xml:id="process-definitions-and-instances-con-managing-and-monitoring-processes">
			<title>Process definitions and process instances in Business Central</title>
			<simpara>
				A process definition is a Business Process Model and Notation (BPMN) 2.0 file that serves as a container for a process and its BPMN diagram. The process definition shows all of the available information about the business process, such as any associated subprocesses or the number of users and groups that are participating in the selected definition.
			</simpara>
			<simpara>
				A process definition also defines the <literal>import</literal> entry for imported processes that the process definition uses, and the <literal>relationship</literal> entries.
			</simpara>
			<formalpara>
				<title>BPMN2 source of a process definition</title>
				<para>
					
<screen>&lt;definitions id="Definition"
               targetNamespace="http://www.jboss.org/drools"
               typeLanguage="http://www.java.com/javaTypes"
               expressionLanguage="http://www.mvel.org/2.0"
               xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"Rule Task
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd"
               xmlns:g="http://www.jboss.org/drools/flow/gpd"
               xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI"
               xmlns:dc="http://www.omg.org/spec/DD/20100524/DC"
               xmlns:di="http://www.omg.org/spec/DD/20100524/DI"
               xmlns:tns="http://www.jboss.org/drools"&gt;

    &lt;process&gt;
      PROCESS
    &lt;/process&gt;

    &lt;bpmndi:BPMNDiagram&gt;
     BPMN DIAGRAM DEFINITION
    &lt;/bpmndi:BPMNDiagram&gt;

    &lt;/definitions&gt;</screen>
				</para>
			</formalpara>
			<simpara>
				After you have created, configured, and deployed your project that includes your business processes, you can view the list of all the process definitions in Business Central <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Definitions</emphasis>. You can refresh the list of deployed process definitions at any time by clicking the refresh button in the upper-right corner.
			</simpara>
			<simpara>
				The process definition list shows all the available process definitions that are deployed into the platform. Click any of the process definitions listed to show the corresponding process definition details. This displays information about the process definition, such as if there is a sub-process associated with it, or how many users and groups exist in the process definition. The <emphasis role="strong">Diagram</emphasis> tab in the process definition details page contains the BPMN2-based diagram of the process definition.
			</simpara>
			<simpara>
				Within each selected process definition, you can start a new process instance for the process definition by clicking the <emphasis role="strong">New Process Instance</emphasis> button in the upper-right corner. Process instances that you start from the available process definitions are listed in <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis>.
			</simpara>
			<simpara>
				You can also define the default pagination option for all users under the <emphasis role="strong">Manage</emphasis> drop-down menu (<emphasis role="strong">Process Definition</emphasis>, <emphasis role="strong">Process Instances</emphasis>, <emphasis role="strong">Tasks</emphasis>, <emphasis role="strong">Jobs</emphasis>, and <emphasis role="strong">Execution Errors</emphasis>) and in <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
			</simpara>
			<section xml:id="starting-process-instance-from-definition-proc_managing-and-monitoring-processes">
				<title>Starting a process instance from the process definitions page</title>
				<simpara>
					You can start a process instance in <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Definitions</emphasis>. This is useful for environments where you are working with several projects or process definitions at the same time.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							A project with a process definition has been deployed in Business Central.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Definitions</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select the process definition for which you want to start a new process instance from the list. The details page of the definition opens.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">New Process Instance</emphasis> in the upper-right corner to start a new process instance.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Provide any required information for the process instance.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Submit</emphasis> to create the process instance.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							View the new process instance in <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis>.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="starting-process-instance-from-instances-proc_managing-and-monitoring-processes">
				<title>Starting a process instance from the process instances page</title>
				<simpara>
					You can create new process instances or view the list of all the running process instances in <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis>.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							A project with a process definition has been deployed in Business Central.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">New Process Instance</emphasis> in the upper-right corner and select the process definition for which you want to start a new process instance from the drop-down list.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Provide any information required to start a new process instance.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Start</emphasis> to create the process instance.
						</simpara>
						<simpara>
							The new process instance appears in the <emphasis role="strong">Manage Process Instances</emphasis> list.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="generate-process-docs-proc_managing-and-monitoring-processes">
				<title>Generating process documentation in Business Central</title>
				<simpara>
					In the process designer in Business Central, you can view and print a report of the process definition. The process documentation summarizes the components, data, and visual flow of the process in a format (PDF) that you can print and share more easily.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, navigate to a project that contains a business process and select the process.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the process designer, click the <emphasis role="strong">Documentation</emphasis> tab to view the summary of the process file, and click <emphasis role="strong">Print</emphasis> in the top-right corner of the window to print the PDF report.
						</simpara>
						<figure>
							<title>Generate process documentation</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/processes/generate-process-docs.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>Project-level service task settings</phrase>
								</textobject>
							</mediaobject>
						</figure>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
		<chapter xml:id="process-instance-details-con-managing-and-monitoring-processes">
			<title>Process instance management</title>
			<simpara>
				To view process instances, in Business Central, click <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis>. Each row in the <emphasis role="strong">Manage Process Instances</emphasis> list represents a process instance from a particular process definition. Each execution is differentiated from all the others by the internal state of the information that the process is manipulating. Click on a process instance to view the corresponding tabs with runtime information related to the process.
			</simpara>
			<figure>
				<title>Process instance tab view</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/_images/admin-and-config/instance-tabs.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>Process instance tab view</phrase>
					</textobject>
				</mediaobject>
			</figure>
			<itemizedlist>
				<listitem>
					<simpara>
						<emphasis role="strong">Instance Details</emphasis>: Provides an overview about what is going on inside the process. It displays the current state of the instance and the current activity that is being executed.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">Process Variables</emphasis>: Displays all of the process variables that are being manipulated by the instance, with the exception of the variables that contain documents. You can edit the process variable value and view its history.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">Documents</emphasis>: Displays process documents if the process contains a variable of the type <emphasis role="strong">org.jbpm.Document</emphasis>. This enables access, download, and manipulation of the attached documents.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">Logs</emphasis>: Displays process instance logs for the end users. For more information, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/developing_process_services_in_red_hat_process_automation_manager#interacting-with-processes-viewing-process-instance-history-log-proc_interacting-with-processes"><emphasis>Interacting with processes and tasks</emphasis></link>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">Diagram</emphasis>: Tracks the progress of the process instance through the BPMN2 diagram. The node or nodes of the process flow that are in progress are highlighted in red. Reusable subprocesses appear collapsed within the parent process. Double-click on the reusable subprocess node to open its diagram from the parent process diagram.
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				For information on user credentials and conditions to be met to access KIE Server runtime data, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/installing_and_configuring_red_hat_process_automation_manager#assembly-planning"><emphasis>Planning a Red Hat Process Automation Manager installation</emphasis></link>.
			</simpara>
			<section xml:id="sect-process-instance-filtering-managing-and-monitoring-processes">
				<title>Process instance filtering</title>
				<simpara>
					For process instances in <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis>, you can use the <emphasis role="strong">Filters</emphasis> and <emphasis role="strong">Advanced Filters</emphasis> panels to sort process instances as needed.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Manage Process Instances</emphasis> page, click the <emphasis role="strong">Filters</emphasis> icon on the left of the page to select the filters that you want to use:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">State</emphasis>: Filter process instances based on their state (<emphasis role="strong">Active</emphasis>, <emphasis role="strong">Aborted</emphasis>, <emphasis role="strong">Completed</emphasis>, <emphasis role="strong">Pending</emphasis>, and <emphasis role="strong">Suspended</emphasis>).
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Errors</emphasis>: Filter process instances that contain at least one or no errors.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Filter By</emphasis>: Filter process instances based on the following attributes:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<emphasis role="strong">Id</emphasis>: Filter by process instance ID.
										</simpara>
										<simpara>
											Input: <literal>Numeric</literal>
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<emphasis role="strong">Initiator</emphasis>: Filter by the user ID of the process instance initiator.
										</simpara>
										<simpara>
											The user ID is a unique value, and depends on the ID management system.
										</simpara>
										<simpara>
											Input: <literal>String</literal>
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<emphasis role="strong">Correlation key</emphasis>: Filter by correlation key.
										</simpara>
										<simpara>
											Input: <literal>String</literal>
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<emphasis role="strong">Description</emphasis>: Filter by process instance description.
										</simpara>
										<simpara>
											Input: <literal>String</literal>
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Name</emphasis>: Filter process instances based on process definition name.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Definition ID</emphasis>: The ID of the instance definition.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Deployment ID</emphasis>: The ID of the instance deployment.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">SLA Compliance</emphasis>: SLA compliance status (<emphasis role="strong">Aborted</emphasis>, <emphasis role="strong">Met</emphasis>, <emphasis role="strong">N/A</emphasis>, <emphasis role="strong">Pending</emphasis>, and <emphasis role="strong">Violated</emphasis>).
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Parent Process ID</emphasis>: The ID of the parent process.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Start Date</emphasis>: Filter process instances based on their creation date.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Last update</emphasis>: Filter process instances based on their last modified date.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
				</orderedlist>
				<simpara>
					You can also use the <emphasis role="strong">Advanced Filters</emphasis> option to create custom filters in Business Central.
				</simpara>
			</section>
			<section xml:id="creating-creating-new-process-instance-list-proc-managing-and-monitoring-processes">
				<title>Creating a custom process instance list</title>
				<simpara>
					You can view the list of all the running process instances in <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis> in Business Central. From this page, you can manage the instances during run time and monitor their execution. You can customize which columns are displayed, the number of rows displayed per page, and filter the results. You can also create a custom process instance list.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							A project with a process definition has been deployed in Business Central.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Manage Process Instances</emphasis> page, click the advanced filters icon on the left to open the list of process instance <emphasis role="strong">Advanced Filters</emphasis> options.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Advanced Filters</emphasis> panel, enter the name and description of the filter that you want to use for your custom process instance list, and click <emphasis role="strong">Add New</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							From the list of filter values, select the parameters and values to configure the custom process instance list, and click <emphasis role="strong">Save</emphasis>.
						</simpara>
						<simpara>
							A new filter is created and immediately applied to the process instances list. The filter is also saved in the <emphasis role="strong">Saved Filters</emphasis> list. You can access saved filters by clicking the star icon on the left side of the <emphasis role="strong">Manage Process Instances</emphasis> page.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="process-instances-default-filters-proc">
				<title>Managing process instances using a default filter</title>
				<simpara>
					You can set a process instance filter as a default filter using the <emphasis role="strong">Saved Filter</emphasis> option in Business Central. A default filter will be executed every time when the page is open by the user.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Manage Process Instances</emphasis> page, click the star icon on the left of the page to expand the <emphasis role="strong">Saved Filters</emphasis> panel.
						</simpara>
						<simpara>
							In the <emphasis role="strong">Saved Filters</emphasis> panel, you can view the saved advanced filters.
						</simpara>
						<formalpara>
							<title>Default filter selection for Process Instances</title>
							<para>
								<inlinemediaobject>
									<imageobject>
										<imagedata fileref="images/_images/admin-and-config/default-filters-process-instance.png" format="PNG" />
									</imageobject>
									<textobject>
										<phrase>Default filter selection for Process Instances</phrase>
									</textobject>
								</inlinemediaobject>
							</para>
						</formalpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Saved Filters</emphasis> panel, set a saved process instance filter as the default filter.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="viewing-process-instances-variables-basic-filters-in-bc-proc">
				<title>Viewing process instance variables using basic filters</title>
				<simpara>
					Business Central provides basic filters to view process instance variables. You can view the process instance variables of the process as columns using <emphasis role="strong">Show/hide columns</emphasis>.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Manage Process Instances</emphasis> page, click the filter icon on the left of the page to expand the <emphasis role="strong">Filters</emphasis> panel.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Filters</emphasis> panel, select the <emphasis role="strong">Definition Id</emphasis> and select a definition ID from the list.
						</simpara>
						<simpara>
							The filter is applied to the current process instance list.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click columns icon (to the right of <emphasis role="strong">Bulk Actions)</emphasis> in the upper-right of the screen to diplay or hide columns in the process instances table.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the star icon to open the <emphasis role="strong">Saved Filters</emphasis> panel.
						</simpara>
						<simpara>
							In the <emphasis role="strong">Saved Filters</emphasis> panel, you can view all the saved advanced filters.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="viewing-process-instances-variables-advanced-filters-in-bc-proc">
				<title>Viewing process instance variables using advanced filters</title>
				<simpara>
					You can use the <emphasis role="strong">Advanced Filters</emphasis> option in Business Central to view process instance variables. When you create a filter over the column <literal>processId</literal>, you can view the process instance variables of the process as columns using <emphasis role="strong">Show/hide columns</emphasis>.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Manage Process Instances</emphasis> page, click the advanced filters icon to expand the <emphasis role="strong">Advanced Filters</emphasis> panel.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Advanced Filters</emphasis> panel, enter the name and description of the filter, and click <emphasis role="strong">Add New</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							From the <emphasis role="strong">Select column</emphasis> list, select the <literal>processId</literal> attribute. The value will change to <emphasis role="strong">processId != value1</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							From the <emphasis role="strong">Select column</emphasis> list, select <emphasis role="strong">equals to</emphasis> for the query.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the text field, enter the name of the process id.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Save</emphasis> and the filter is applied on the current process instance list.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the columns icon (to the right of <emphasis role="strong">Bulk Actions</emphasis>) in the upper-right of the process instances list and the process instance variables of the specified process ID will be displayed.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the star icon to open the <emphasis role="strong">Saved Filters</emphasis> panel.
						</simpara>
						<simpara>
							In the <emphasis role="strong">Saved Filters</emphasis> panel, you can view all the saved advanced filters.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="aborting-a-process-instance-from-central-proc-managing-and-monitoring-processes">
				<title>Aborting a process instance using Business Central</title>
				<simpara>
					If a process instance becomes obsolete, you can abort the process instance in Business Central.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis> to view the list of available process instances.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select the process instance you want to abort from the list.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the process details page, click the <emphasis role="strong">Abort</emphasis> button in the upper-right corner.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="signalling-process-instances-from-central-proc-managing-and-monitoring-processes">
				<title>Signaling process instances from Business Central</title>
				<simpara>
					You can signal a process instance from Business Central.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							A project with a process definition has been deployed in Business Central.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Locate the required process instance, click the 
							<inlinemediaobject>
								<imageobject>
									<imagedata fileref="images/_images/processes/dotdotdotbutton.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>Actions</phrase>
								</textobject>
							</inlinemediaobject>
							 button and select <emphasis role="strong">Signal</emphasis> from the drop-down menu.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Fill the following fields:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">Signal Name</emphasis>: Corresponds to the <literal>SignalRef</literal> or <literal>MessageRef</literal> attributes of the signal. This field is required.
								</simpara>
								<note>
									<simpara>
										You can also send a <literal>Message</literal> event to the process by adding the <literal>Message-</literal> prefix in front of the <literal>MessageRef</literal> value.
									</simpara>
								</note>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Signal Data</emphasis>: Corresponds to data accompanying the signal. This field is optional.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
				</orderedlist>
				<note>
					<simpara>
						When using the Business Central user interface, you can only signal Signal intermediate catch events.
					</simpara>
				</note>
			</section>
			<section xml:id="asynchronous-signal-events-con">
				<title>Asynchronous signal events</title>
				<simpara>
					When several process instances from different process definitions are waiting for the same signal, they are executed sequentially in the same thread. But, if one of those process instances throws a runtime exception, all the other process instances are affected and usually result in a rolled back transaction. To avoid this situation, Red Hat Process Automation Manager supports using asynchronous signals events for:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Throwing intermediate signal events
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							End events
						</simpara>
					</listitem>
				</itemizedlist>
				<section xml:id="asynchronous-signal-intermediate-events-proc">
					<title>Configuring asynchronous signals for intermediate events</title>
					<simpara>
						Intermediate events drive the flow of a business process. Intermediate events are used to either catch or throw an event during the execution of the business process. An intermediate event handles a particular situation that occurs during process execution. A throwing signal intermediate event produces a signal object based on the defined properties.
					</simpara>
					<simpara>
						You can configure an asynchronous signal for intermediate events in Business Central.
					</simpara>
					<itemizedlist>
						<title>Prerequisites</title>
						<listitem>
							<simpara>
								You have created a project in Business Central and it contains at least one business process asset.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								A project with a process definition has been deployed in Business Central.
							</simpara>
						</listitem>
					</itemizedlist>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								Open a business process asset.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								In the process designer canvas, drag and drop the <emphasis role="strong">Intermediate Signal</emphasis> from the left toolbar.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								In the upper-right corner, click 
								<inlinemediaobject>
									<imageobject>
										<imagedata fileref="images/_images/getting-started/diagram_properties.png" format="PNG" />
									</imageobject>
									<textobject>
										<phrase>diagram properties</phrase>
									</textobject>
								</inlinemediaobject>
								 to open the <emphasis role="strong">Properties</emphasis> panel.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Expand <emphasis role="strong">Data Assignments</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click the box under the <emphasis role="strong">Assignments</emphasis> sub-section. The <emphasis role="strong">Task Data I/O</emphasis> dialog box opens.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Add</emphasis> next to <emphasis role="strong">Data Inputs and Assignments</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Enter a name of the throw event as <emphasis role="strong">async</emphasis> in the <emphasis role="strong">Name</emphasis> field.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Leave the <emphasis role="strong">Data Type</emphasis> and <emphasis role="strong">Source</emphasis> fields blank.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">OK</emphasis>.
							</simpara>
						</listitem>
					</orderedlist>
					<simpara>
						It will automatically set the executor service on each session. This ensures that each process instance is signaled in a different transaction.
					</simpara>
				</section>
				<section xml:id="asynchronous-signal-end-events-proc">
					<title>Configuring asynchronous signals for end events</title>
					<simpara>
						End events indicate the completion of a business process. All end events, with the exception of the none and terminate end events, are throw events. A throwing signal end event is used to finish a process or subprocess flow. When the execution flow enters the element, the execution flow finishes and produces a signal identified by its <literal>SignalRef</literal> property.
					</simpara>
					<simpara>
						You can configure an asynchronous signal for end events in Business Central.
					</simpara>
					<itemizedlist>
						<title>Prerequisites</title>
						<listitem>
							<simpara>
								You have created a project in Business Central and it contains at least one business process asset.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								A project with a process definition has been deployed in Business Central.
							</simpara>
						</listitem>
					</itemizedlist>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								Open a business process asset.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								In the process designer canvas, drag and drop the <emphasis role="strong">End Signal</emphasis> from the left toolbar.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								In the upper-right corner, click 
								<inlinemediaobject>
									<imageobject>
										<imagedata fileref="images/_images/getting-started/diagram_properties.png" format="PNG" />
									</imageobject>
									<textobject>
										<phrase>diagram properties</phrase>
									</textobject>
								</inlinemediaobject>
								 to open the <emphasis role="strong">Properties</emphasis> panel.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Expand <emphasis role="strong">Data Assignments</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click the box under the <emphasis role="strong">Assignments</emphasis> sub-section. The <emphasis role="strong">Task Data I/O</emphasis> dialog box opens.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Add</emphasis> next to <emphasis role="strong">Data Inputs and Assignments</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Enter a name of the throw event as <emphasis role="strong">async</emphasis> in the <emphasis role="strong">Name</emphasis> field.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Leave the <emphasis role="strong">Data Type</emphasis> and <emphasis role="strong">Source</emphasis> fields blank.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">OK</emphasis>.
							</simpara>
						</listitem>
					</orderedlist>
					<simpara>
						It will automatically set the executor service on each session. This ensures that each process instance is signaled in a different transaction.
					</simpara>
				</section>
			</section>
			<section xml:id="process-instance-admin-con">
				<title>Process instance operations</title>
				<simpara>
					Process instance administration API exposes the following operations for the process engine and the individual process instance.
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<emphasis role="strong">get process nodes - by process instance id</emphasis>: Returns all nodes, including all embedded subprocesses that exist in the process instance. You must retrieve the nodes from the specified process instance to ensure that the node exists and includes a valid ID so that it can be used by other administration operations.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">cancel node instance - by process instance id and node instance id</emphasis>: Cancels a node instance within a process instance using the process and node instance IDs.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">retrigger node instance - by process instance id and node instance id</emphasis>: Re-triggers a node instance by canceling the active node instance and creates a new node instance of the same type using the process and node instance IDs.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">update timer - by process instance id and timer id</emphasis>: Updates the timer expiration of an active timer based on the time elapsed since the timer was scheduled. For example, if a timer was initially created with delay of one hour and after thirty minutes you set it to update in two hours, it expires in one and a half hours from the time it was updated.
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">delay</emphasis>: The duration after the timer expires.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">period</emphasis>: The interval between the timer expiration for cycle timers.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">repeat limit</emphasis>: Limits the expiration for a specified number for cycle timers.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">update timer relative to current time - by process instance id and timer id</emphasis>: Updates the timer expiration of an active timer based on the current time. For example, if a timer was initially created with delay of one hour and after thirty minutes you set it to update in two hours, it expires in two hours from the time it was updated.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">list timer instances - by process instance id</emphasis>: Returns all active timers for a specified process instance.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">trigger node - by process instance id and node id</emphasis>: Triggers any node in a process instance at any time.
						</simpara>
					</listitem>
				</itemizedlist>
			</section>
		</chapter>
		<chapter xml:id="manage-tasks-con-managing-and-monitoring-processes">
			<title>Task management</title>
			<simpara>
				Tasks that are assigned to the current user appear in <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis> in Business Central. You can click a task to open and begin working on it.
			</simpara>
			<simpara>
				A user task can be assigned to a particular user, multiple users, or to a group. If assigned to multiple users or a group it appears in the task lists of all assigned users and any of the possible actors can claim the task. When a task is assigned to another user it no longer appears in your <emphasis role="strong">Task Inbox</emphasis>.
			</simpara>
			<informalfigure>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/_images/admin-and-config/task-inbox.png" format="PNG" />
				</imageobject>
				<textobject>
					<phrase>Task inbox</phrase>
				</textobject>
			</mediaobject>
			</informalfigure>
			<simpara>
				Business administrators can view and manage all user tasks from the <emphasis role="strong">Tasks</emphasis> page in Business Central, located under <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Tasks</emphasis>. Users with the <literal>admin</literal> or <literal>process-admin</literal> role can access the <emphasis role="strong">Tasks</emphasis> page but do not have access rights to view and manage tasks by default.
			</simpara>
			<simpara>
				To manage all the tasks, a user must be specified as a process administrator by defining any of the following conditions:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						User is specified as <literal>task admin user</literal>. The default value is <literal>Administrator</literal>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						User belongs to the task administrators group. The default value is <literal>Administrators</literal>.
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				You can configure the user and user group assignment with the <literal>org.jbpm.ht.admin.user</literal> and <literal>org.jbpm.ht.admin.group</literal> system properties.
			</simpara>
			<simpara>
				You can open, view, and modify the details of a task, such as the due date, the priority, or the task description, by clicking a task in the list. The following tabs are available in the task page:
			</simpara>
			<informalfigure>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/_images/admin-and-config/task-details.png" format="PNG" />
				</imageobject>
				<textobject>
					<phrase>Task details</phrase>
				</textobject>
			</mediaobject>
			</informalfigure>
			<itemizedlist>
				<listitem>
					<simpara>
						<emphasis role="strong">Work</emphasis>: Displays basic details about the task and the task owner. You can click the <emphasis role="strong">Claim</emphasis> button to claim the task. To undo the claim process, click the <emphasis role="strong">Release</emphasis> button.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">Details</emphasis>: Displays information such as task description, status, and due date.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">Assignments</emphasis>: Displays the current owner of the task and enables you to delegate the task to another person or group.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">Comments</emphasis>: Displays comments added by task user(s). You can delete an existing comment and add a new comment.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">Admin</emphasis>: Displays the potential owner of the task and enables you to to forward the task to another person or group. It also displays the actual owner of the task and you can send a reminder to the actual owner of the task.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">Logs</emphasis>: Displays task logs containing task life cycle events (such as task started, claimed, completed), updates made to task fields (such as task due date and priority).
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				You can filter the tasks based on the filter parameters available by clicking the <emphasis role="strong">Filters</emphasis> icon on the left side of the page. For more information about filtering, see <xref linkend="sect-task-filtering-managing-and-monitoring-processes" />.
			</simpara>
			<simpara>
				In addition to these, you can create custom filters to filter tasks based on the query parameters you define. For more information about custom tasks filters, see <xref linkend="creating_custom_tasks_filters-managing-and-monitoring-processes" />.
			</simpara>
			<section xml:id="sect-task-filtering-managing-and-monitoring-processes">
				<title>Task filtering</title>
				<simpara>
					For tasks in <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Tasks</emphasis> and in <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>, you can use the <emphasis role="strong">Filters</emphasis> and <emphasis role="strong">Advanced Filters</emphasis> panels to sort tasks as needed.
				</simpara>
				<figure>
					<title>Filtering Tasks - Default View</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/_images/admin-and-config/TaskAdminSearchSmall.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>Filtering Tasks - Default View</phrase>
						</textobject>
					</mediaobject>
				</figure>
				<simpara>
					The <emphasis role="strong">Manage Tasks</emphasis> page is only available to administrators and process administrators.
				</simpara>
				<simpara>
					You can filter tasks by the following attributes in the <emphasis role="strong">Filters</emphasis> panel:
				</simpara>
				<variablelist>
					<varlistentry>
						<term>Status</term>
						<listitem>
							<simpara>
								Filter by task status. You can select more than one status to display results that meet any of the selected states. Removing the status filter displays all processes, regardless of status.
							</simpara>
							<simpara>
								The following filter states are available:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										Completed
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Created
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Error
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Exited
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Failed
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										InProgress
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Obsolete
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Ready
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Reserved
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Suspended
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Id</term>
						<listitem>
							<simpara>
								Filter by process instance ID.
							</simpara>
							<simpara>
								Input: <literal>Numeric</literal>
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Task</term>
						<listitem>
							<simpara>
								Filter by task name.
							</simpara>
							<simpara>
								Input: <literal>String</literal>
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Correlation key</term>
						<listitem>
							<simpara>
								Filter by correlation key.
							</simpara>
							<simpara>
								Input: <literal>String</literal>
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Actual Owner</term>
						<listitem>
							<simpara>
								Filter by the task owner.
							</simpara>
							<simpara>
								The actual owner refers to the user responsible for executing the task. The search is based on user ID, which is a unique value and depends on the ID management system.
							</simpara>
							<simpara>
								Input: <literal>String</literal>
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Process Instance Description</term>
						<listitem>
							<simpara>
								Filter by process instance description.
							</simpara>
							<simpara>
								Input: <literal>String</literal>
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Task Name</term>
						<listitem>
							<simpara>
								Filter by task name.
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Process Definition Id</term>
						<listitem>
							<simpara>
								Filter by process definition Id.
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>SLA Compliance</term>
						<listitem>
							<simpara>
								Filter by SLA compliance state.
							</simpara>
							<simpara>
								The following filter states are available:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										Aborted
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Met
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										N/A
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Pending
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Violated
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Created On</term>
						<listitem>
							<simpara>
								Filtering by date or time.
							</simpara>
							<simpara>
								This filter has the following quick filter options:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										Last Hour
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Today
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Last 24 Hours
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Last 7 Days
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Last 30 Days
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Custom
									</simpara>
									<simpara>
										Selecting <emphasis role="strong">Custom</emphasis> date and time filtering opens a calendar tool for selecting a date and time range.
									</simpara>
									<figure>
										<title>Search by Date</title>
										<mediaobject>
											<imageobject>
												<imagedata fileref="images/_images/admin-and-config/DateRangeSearch.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>Search by Date Range</phrase>
											</textobject>
										</mediaobject>
									</figure>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			<section remap="_creating_custom_tasks_filters-managing-and-monitoring-processes" xml:id="creating_custom_tasks_filters-managing-and-monitoring-processes">
				<title>Creating custom task filters</title>
				<simpara>
					You can create a custom task filter based on a provided query in <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Tasks</emphasis>, or in <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis> for tasks assigned to the current user.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Tasks</emphasis>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Manage Tasks</emphasis> page, click the advanced filters icon on the left to open the list of <emphasis role="strong">Advanced Filters</emphasis> options.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Advanced Filters</emphasis> panel, enter the name and description of the filter, and click <emphasis role="strong">Add New</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Select column</emphasis> drop-down menu, choose <emphasis role="strong">name</emphasis>.
						</simpara>
						<simpara>
							The content of the drop-down menu changes to <literal>name != value1</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the drop-down menu again and choose <emphasis role="strong">equals to</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Rewrite the value of the text field to the name of the task you want to filter. Note that the name must match the value defined in the associated business process:
						</simpara>
						<informalfigure>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/admin-and-config/task-name.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>task name</phrase>
							</textobject>
						</mediaobject>
						</informalfigure>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Ok</emphasis> to save the custom task filter.
						</simpara>
						<informalfigure>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/admin-and-config/new-fl-final.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>new fl final</phrase>
							</textobject>
						</mediaobject>
						</informalfigure>
						<simpara>
							After you apply the filter with a specified restriction, the set of configurable columns is based on the specific custom task filter and contains the following column options:
						</simpara>
						<informalfigure>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/admin-and-config/in_name-column-new.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>in name column new</phrase>
							</textobject>
						</mediaobject>
						</informalfigure>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="tasks-default-filters-proc">
				<title>Managing tasks using a default filter</title>
				<simpara>
					You can set a task filter as a default filter using the <emphasis role="strong">Saved Filter</emphasis> option in Business Central. A default filter will be executed every time when the page is open by the user.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis> or go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Tasks</emphasis>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Task Inbox</emphasis> page or the <emphasis role="strong">Manage Tasks</emphasis> page, click the star icon on the left of the page to expand the <emphasis role="strong">Saved Filters</emphasis> panel.
						</simpara>
						<simpara>
							In the <emphasis role="strong">Saved Filters</emphasis> panel, you can view the saved advanced filters.
						</simpara>
						<formalpara>
							<title>Default filter selection for Tasks or Task Inbox</title>
							<para>
								<inlinemediaobject>
									<imageobject>
										<imagedata fileref="images/_images/admin-and-config/default-filters-task.png" format="PNG" />
									</imageobject>
									<textobject>
										<phrase>Default filter selection for Tasks or Task Inbox</phrase>
									</textobject>
								</inlinemediaobject>
							</para>
						</formalpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Saved Filters</emphasis> panel, set a saved task filter as the default filter.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="viewing-task-variables-basic-filters-in-bc-proc">
				<title>Viewing task variables using basic filters</title>
				<simpara>
					Business Central provides basic filters to view task variables in <emphasis role="strong">Manage Tasks</emphasis> and <emphasis role="strong">Task Inbox</emphasis>. You can view the task variables of the task as columns using <emphasis role="strong">Show/hide columns</emphasis>.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Tasks</emphasis> or go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Task Inbox</emphasis> page, click the filter icon on the left of the page to expand the <emphasis role="strong">Filters</emphasis> panel
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Filters</emphasis> panel, select the <emphasis role="strong">Task Name</emphasis>.
						</simpara>
						<simpara>
							The filter is applied on the current task list.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Show/hide columns</emphasis> on the upper right of the tasks list and the task variables of the specified task id will be displayed.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the star icon to open the <emphasis role="strong">Saved Filters</emphasis> panel.
						</simpara>
						<simpara>
							In the <emphasis role="strong">Saved Filters</emphasis> panel, you can view all the saved advanced filters.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="viewing-task-variables-advanced-filters-in-bc-proc">
				<title>Viewing task variables using advanced filters</title>
				<simpara>
					You can use the <emphasis role="strong">Advanced Filters</emphasis> option in Business Central to view task variables in <emphasis role="strong">Manage Tasks</emphasis> and <emphasis role="strong">Task Inbox</emphasis>. When you create a filter with the task defined, you can view the task variables of the task as columns using <emphasis role="strong">Show/hide columns</emphasis>.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Tasks</emphasis> or go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Manage Tasks</emphasis> page or the <emphasis role="strong">Task Inbox</emphasis> page, click the advanced filters icon to expand the <emphasis role="strong">Advanced Filters</emphasis> panel.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Advanced Filters</emphasis> panel, enter the name and description of the filter, and click <emphasis role="strong">Add New</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							From the <emphasis role="strong">Select column</emphasis> list, select the <literal>name</literal> attribute. The value will change to <emphasis role="strong">name != value1</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							From the <emphasis role="strong">Select column</emphasis> list, select <emphasis role="strong">equals to</emphasis> for the logical query.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the text field, enter the name of the task.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Save</emphasis> and the filter is applied on the current task list.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Show/hide columns</emphasis> on the upper right of the tasks list and the task variables of the specified task id will be displayed.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the star icon to open the <emphasis role="strong">Saved Filters</emphasis> panel.
						</simpara>
						<simpara>
							In the <emphasis role="strong">Saved Filters</emphasis> panel, you can view all the saved advanced filters.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="manage-service-tasks-proc_managing-and-monitoring-processes">
				<title>Managing custom tasks in Business Central</title>
				<simpara>
					Custom tasks (work items) are tasks that you can customize and reuse across multiple business processes or across all projects in Business Central. Red Hat Process Automation Manager provides a set of custom tasks within the custom task repository in Business Central. You can enable or disable the default custom tasks and upload custom tasks into Business Central to implement the tasks in the relevant processes.
				</simpara>
				<note>
					<simpara>
						Red Hat Process Automation Manager includes a limited set of supported custom tasks. Custom tasks that are not included in Red Hat Process Automation Manager are not supported.
					</simpara>
				</note>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, click 
							<inlinemediaobject>
								<imageobject>
									<imagedata fileref="images/_images/project-data/gear-icon.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>gear icon</phrase>
								</textobject>
							</inlinemediaobject>
							 in the upper-right corner and select <emphasis role="strong">Custom Tasks Administration</emphasis>.
						</simpara>
						<simpara>
							This page lists the custom task installation settings and available custom tasks for processes in projects throughout Business Central. The custom tasks that you enable on this page become available in the project-level settings where you can then install each custom task to be used in processes. The way in which the custom tasks are installed in a project is determined by the global settings that you enable or disable under <emphasis role="strong">Settings</emphasis> on this <emphasis role="strong">Custom Tasks Administration</emphasis> page.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Under <emphasis role="strong">Settings</emphasis>, enable or disable each setting to determine how the available custom tasks are implemented when a user installs them at the project level.
						</simpara>
						<simpara>
							The following custom task settings are available:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">Install as Maven artifact</emphasis>: Uploads the custom task JAR file to the Maven repository that is configured with Business Central, if the file is not already present.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Install custom task dependencies into project</emphasis>: Adds any custom task dependencies to the <literal>pom.xml</literal> file of the project where the task is installed.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Use version range when installing custom task into project</emphasis>: Uses a version range instead of a fixed version of a custom task that is added as a project dependency. Example: <literal>[7.16,)</literal> instead of <literal>7.16.0.Final</literal>
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							Enable or disable (set to <emphasis role="strong">ON</emphasis> or <emphasis role="strong">OFF</emphasis>) any available custom tasks as needed. Custom tasks that you enable are displayed in project-level settings for all projects in Business Central.
						</simpara>
						<figure>
							<title>Enable custom tasks and custom task settings</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/admin-and-config/manage-service-tasks.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>Custom Tasks Administration page</phrase>
								</textobject>
							</mediaobject>
						</figure>
					</listitem>
					<listitem>
						<simpara>
							To add a custom task, click <emphasis role="strong">Add Custom Task</emphasis>, browse to the relevant JAR file, and click the <emphasis role="strong">Upload</emphasis> icon. The JAR file must contain work item handler implementations annotated with <literal>@Wid</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Optional: To remove a custom task, click <emphasis role="strong">remove</emphasis> on the row of the custom task you want to remove and click <emphasis role="strong">Ok</emphasis> to confirm removal.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							After you configure all required custom tasks, navigate to a project in Business Central and go to the project <emphasis role="strong">Settings</emphasis> → <emphasis role="strong">Custom Tasks</emphasis> page to view the available custom tasks that you enabled.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							For each custom task, click <emphasis role="strong">Install</emphasis> to make the task available to the processes in that project or click <emphasis role="strong">Uninstall</emphasis> to exclude the task from the processes in the project.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							If you are prompted for additional information when you install a custom task, enter the required information and click <emphasis role="strong">Install</emphasis> again.
						</simpara>
						<simpara>
							The required parameters for the custom task depend on the type of task. For example, rule and decision tasks require artifact GAV information (Group ID, Artifact ID, Version), email tasks require host and port access information, and REST tasks require API credentials. Other custom tasks might not require any additional parameters.
						</simpara>
						<figure>
							<title>Install custom tasks for use in processes</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/admin-and-config/manage-service-tasks-project.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>Project-level custom task settings</phrase>
								</textobject>
							</mediaobject>
						</figure>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Save</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Return to the project page, select or add a business process in the project, and in the process designer palette, select the <emphasis role="strong">Custom Tasks</emphasis> option to view the available custom tasks that you enabled and installed:
						</simpara>
						<figure>
							<title>Access installed custom tasks in process designer</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/admin-and-config/manage-service-tasks-process.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>Custom tasks in process designer</phrase>
								</textobject>
							</mediaobject>
						</figure>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="user-task-admin-con">
				<title>User task administration</title>
				<simpara>
					User tasks enable you to include human actions as input to the business processes that you create. User task administration provides methods to manipulate user and group task assignments, data handling, time-based automatic notifications, and reassignments.
				</simpara>
				<simpara>
					The following user task operations are available in Business Central:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<emphasis role="strong">add/remove potential owners - by task id</emphasis>: Adds or removes users and groups using the task ID.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">add/remove excluded owners - by task id</emphasis>: Adds or removes excluded owners using the task ID.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">add/remove business administrators - by task id</emphasis>: Adds or removes business administrators using the task ID.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">add task inputs - by task id</emphasis>: Provides a way to modify task input content after a task is created using the task ID.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">remove task inputs - by task id</emphasis>: Removes task input variables using the task ID.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">remove task output - by task id</emphasis>: Removes task output variables using the task ID.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">schedules new reassignment to given users/groups after given time elapses - by task id</emphasis>: Schedules automatic reassignment based on the time expression and the state of the task:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">reassign if not started</emphasis>: Used if the task was not moved to the <literal>InProgress</literal> state.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">reassign if not completed</emphasis>: Used if the task was not moved to the <literal>Completed</literal> state.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">schedules new email notification to given users/groups after given time elapses - by task id</emphasis>: Schedules automatic email notification based on the time expression and the state of the task:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">notify if not started</emphasis>: Used if the task was not moved to the <literal>InProgress</literal> state.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">notify if not completed</emphasis>: Used if the task was not moved to the <literal>Completed</literal> state.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">list scheduled task notifications - by task id</emphasis>: Returns all active task notifications using the task ID.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">list scheduled task reassignments - by task id</emphasis>: Returns all active tasks reassignments using the task ID.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">cancel task notification - by task id and notification id</emphasis>: Cancels and unschedules task notification using the task ID.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">cancel task reassignment - by task id and reassignment id</emphasis>: Cancels and unschedules task reassignment using the task ID.
						</simpara>
					</listitem>
				</itemizedlist>
			</section>
			<section xml:id="managing-business-processes-bulk-actions-on-tasks-con">
				<title>Bulk actions on tasks</title>
				<simpara>
					In the <emphasis role="strong">Tasks</emphasis> and <emphasis role="strong">Task Inbox</emphasis> pages in Business Central, you can perform bulk actions over multiple tasks in a single operation.
				</simpara>
				<note>
					<simpara>
						If a specified bulk action is not permitted based on the task status, a notification is displayed and the operation is not executed on that particular task.
					</simpara>
				</note>
				<section xml:id="managing-business-processes-claiming-tasks-in-bulk-proc">
					<title>Claiming tasks in bulk</title>
					<simpara>
						After you create tasks in Business Central, you can claim the available tasks in bulk.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								In Business Central, complete one of the following steps:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										To view the <emphasis role="strong">Task Inbox</emphasis> page, select <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										To view the <emphasis role="strong">Tasks</emphasis> page, select <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Tasks</emphasis>.
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								To claim the tasks in bulk, on the <emphasis role="strong">Task Inbox</emphasis> page or the <emphasis role="strong">Manage Tasks</emphasis> page, select two or more tasks from the <emphasis role="strong">Task</emphasis> table.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								From the <emphasis role="strong">Bulk Actions</emphasis> drop-down list, select <emphasis role="strong">Bulk Claim</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To confirm, click <emphasis role="strong">Claim</emphasis> on the <emphasis role="strong">Claim selected tasks</emphasis> window.
							</simpara>
						</listitem>
					</orderedlist>
					<simpara>
						For each task selected, a notification is displayed showing the result.
					</simpara>
				</section>
				<section xml:id="managing-business-processes-releasing-tasks-in-bulk-proc">
					<title>Releasing tasks in bulk</title>
					<simpara>
						You can release your owned tasks in bulk for others to claim.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								In Business Central, complete one of the following steps:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										To view the <emphasis role="strong">Task Inbox</emphasis> page, select <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										To view the <emphasis role="strong">Tasks</emphasis> page, select <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Tasks</emphasis>.
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								To release the tasks in bulk, on the <emphasis role="strong">Task Inbox</emphasis> page or the <emphasis role="strong">Manage Tasks</emphasis> page, select two or more tasks from the <emphasis role="strong">Task</emphasis> table.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								From the <emphasis role="strong">Bulk Actions</emphasis> drop-down list, select <emphasis role="strong">Bulk Release</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To confirm, click <emphasis role="strong">Release</emphasis> on the <emphasis role="strong">Release selected tasks</emphasis> window .
							</simpara>
						</listitem>
					</orderedlist>
					<simpara>
						For each task selected, a notification is displayed showing the result.
					</simpara>
				</section>
				<section xml:id="managing-business-processes-resuming-tasks-in-bulk-proc">
					<title>Resuming tasks in bulk</title>
					<simpara>
						If there are suspended tasks in Business Central, you can resume them in bulk.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								In Business Central, complete one of the following steps:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										To view the <emphasis role="strong">Task Inbox</emphasis> page, select <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										To view the <emphasis role="strong">Tasks</emphasis> page, select <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Tasks</emphasis>.
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								To resume the tasks in bulk, on the <emphasis role="strong">Task Inbox</emphasis> page or the <emphasis role="strong">Manage Tasks</emphasis> page, select two or more tasks from the <emphasis role="strong">Task</emphasis> table.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								From the <emphasis role="strong">Bulk Actions</emphasis> drop-down list, select <emphasis role="strong">Bulk Resume</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To confirm, click <emphasis role="strong">Resume</emphasis> on the <emphasis role="strong">Resume selected tasks</emphasis> window.
							</simpara>
						</listitem>
					</orderedlist>
					<simpara>
						For each task selected, a notification is displayed showing the result.
					</simpara>
				</section>
				<section xml:id="managing-business-processes-suspending-tasks-in-bulk-proc">
					<title>Suspending tasks in bulk</title>
					<simpara>
						After you create tasks in Business Central, you can suspend the tasks in bulk.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								In Business Central, complete one of the following steps:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										To view the <emphasis role="strong">Task Inbox</emphasis> page, select <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										To view the <emphasis role="strong">Tasks</emphasis> page, select <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Tasks</emphasis>.
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								To suspend the tasks in bulk, on the <emphasis role="strong">Task Inbox</emphasis> page or the <emphasis role="strong">Manage Tasks</emphasis> page, select two or more tasks from the <emphasis role="strong">Task</emphasis> table.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								From the <emphasis role="strong">Bulk Actions</emphasis> drop-down list, select <emphasis role="strong">Bulk Suspend</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To confirm, click <emphasis role="strong">Suspend</emphasis> on the <emphasis role="strong">Suspend selected tasks</emphasis> window .
							</simpara>
						</listitem>
					</orderedlist>
					<simpara>
						For each task selected, a notification is displayed showing the result.
					</simpara>
				</section>
				<section xml:id="managing-business-processes-reassigning-tasks-in-bulk-proc">
					<title>Reassigning tasks in bulk</title>
					<simpara>
						After you create tasks in Business Central, you can reassign your tasks in bulk and delegate them to others.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								In Business Central, complete one of the following steps:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										To view the <emphasis role="strong">Task Inbox</emphasis> page, select <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										To view the <emphasis role="strong">Tasks</emphasis> page, select <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Tasks</emphasis>.
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								To reassign the tasks in bulk, on the <emphasis role="strong">Task Inbox</emphasis> page or the <emphasis role="strong">Manage Tasks</emphasis> page, select two or more tasks from the <emphasis role="strong">Task</emphasis> table.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								From the <emphasis role="strong">Bulk Actions</emphasis> drop-down list, select <emphasis role="strong">Bulk Reassign</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								In the <emphasis role="strong">Tasks reassignment</emphasis> window, enter the user ID of the user to whom you want to reassign the tasks.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Delegate</emphasis>.
							</simpara>
						</listitem>
					</orderedlist>
					<simpara>
						For each task selected, a notification is displayed showing the result.
					</simpara>
				</section>
			</section>
		</chapter>
		<chapter xml:id="execution-error-management-con_managing-and-monitoring-processes">
			<title>Execution error management</title>
			<simpara>
				When an execution error occurs for a business process, the process stops and reverts to the most recent stable state (the closest safe point) and continues its execution. If an error of any kind is not handled by the process the entire transaction rolls back, leaving the process instance in the previous wait state. Any trace of this is only visible in the logs, and usually displayed to the caller who sent the request to the process engine.
			</simpara>
			<simpara>
				Users with process administrator (<literal>process-admin</literal>) or administrator (<literal>admin</literal>) roles are able to access error messages in Business Central. Execution error messaging provides the following primary benefits:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						Better traceability
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Visibility in case of critical processes
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Reporting and analytics based on error situations
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						External system error handling and compensation
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				Configurable error handling is responsible for receiving any technical errors thrown throughout the process engine execution (including task service). The following technical exceptions apply:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						Anything that extends <literal>java.lang.Throwable</literal>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Process level error handling and any other exceptions not previously handled
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				There are several components that make up the error handling mechanism and allow a pluggable approach to extend its capabilities.
			</simpara>
			<simpara>
				The process engine entry point for error handling is the <literal>ExecutionErrorManager</literal>. This is integrated with <literal>RuntimeManager</literal>, which is then responsible for providing it to the underlying <literal>KieSession</literal> and <literal>TaskService</literal>.
			</simpara>
			<simpara>
				From an API point of view, <literal>ExecutionErrorManager</literal> provides access to the following components:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						<literal>ExecutionErrorHandler</literal>: The primary mechanism for error handling
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<literal>ExecutionErrorStorage</literal>: Pluggable storage for execution error information
					</simpara>
				</listitem>
			</itemizedlist>
			<section xml:id="view-process-instance-errors-proc-managing-and-monitoring-processes">
				<title>Viewing process execution errors in Business Central</title>
				<simpara>
					You can view process errors in two locations in Business Central:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Execution Errors</emphasis>
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					In the <emphasis role="strong">Manage Process Instances</emphasis> page, the <emphasis role="strong">Errors</emphasis> column displays the number of errors, if any, for the current process instance.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							An error has occurred while running a process in Business Central.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis> and hover over the number shown in the <emphasis role="strong">Errors</emphasis> column.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the number of errors shown in the <emphasis role="strong">Errors</emphasis> column to navigate to the <emphasis role="strong">Manage Execution Errors</emphasis> page.
						</simpara>
						<simpara>
							The <emphasis role="strong">Manage Execution Errors</emphasis> page shows a list of errors for all process instances.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="manage-execution-errors-proc-managing-and-monitoring-processes">
				<title>Managing execution errors</title>
				<simpara>
					By definition, every process error that is detected and stored is unacknowledged and must be handled by someone or something (in case of automatic error recovery). Errors are filtered on the basis of whether or not they have been acknowledged. Acknowledging an error saves the user information and time stamp for traceability. You can access the <emphasis role="strong">Error Management</emphasis> view at any time.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Execution Errors</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select an error from the list to open the <emphasis role="strong">Details</emphasis> tab. This displays information about the error or errors.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the <emphasis role="strong">Acknowledge</emphasis> button to acknowledge and clear the error. You can view the error later by selecting <emphasis role="strong">Yes</emphasis> on the <emphasis role="strong">Acknowledged</emphasis> filter in the <emphasis role="strong">Manage Execution Errors</emphasis> page.
						</simpara>
						<simpara>
							If the error was related to a task, a <emphasis role="strong">Go to Task</emphasis> button is displayed.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the <emphasis role="strong">Go to Task</emphasis> button, if applicable, to view the associated job information in the <emphasis role="strong">Manage Tasks</emphasis> page.
						</simpara>
						<simpara>
							In the <emphasis role="strong">Manage Tasks</emphasis> page, you can restart, reschedule, or retry the corresponding task.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="filtering-errors-proc-managing-and-monitoring-processes">
				<title>Error filtering</title>
				<simpara>
					For execution errors in <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Execution Errors</emphasis>, you can use the <emphasis role="strong">Filters</emphasis> and <emphasis role="strong">Advanced Filters</emphasis> panels to sort errors as needed.
				</simpara>
				<figure>
					<title>Filtering Errors - Default View</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/_images/admin-and-config/ErrorsSearchSmall.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>Filtering Errors</phrase>
						</textobject>
					</mediaobject>
				</figure>
				<simpara>
					You can filter execution errors by the following attributes in the <emphasis role="strong">Filters</emphasis> panel:
				</simpara>
				<variablelist>
					<varlistentry>
						<term>Type</term>
						<listitem>
							<simpara>
								Filter by errors by type. You can select multiple type filters. Removing the status filter displays all processes, regardless of status.
							</simpara>
							<simpara>
								The following filter states are available:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										DB
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Task
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Process
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Job
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Process Instance Id</term>
						<listitem>
							<simpara>
								Filter by process instance ID.
							</simpara>
							<simpara>
								Input: <literal>Numeric</literal>
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Job Id</term>
						<listitem>
							<simpara>
								Filter by job ID. The job id is created automatically when the job is created.
							</simpara>
							<simpara>
								Input: <literal>Numeric</literal>
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Id</term>
						<listitem>
							<simpara>
								Filter by process instance ID.
							</simpara>
							<simpara>
								Input: <literal>Numeric</literal>
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Acknowledged</term>
						<listitem>
							<simpara>
								Filter errors that have been or have not been acknowledged.
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Error Date</term>
						<listitem>
							<simpara>
								Filtering by the date or time that the error occurred.
							</simpara>
							<simpara>
								This filter has the following quick filter options:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										Last Hour
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Today
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Last 24 Hours
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Last 7 Days
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Last 30 Days
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Custom
									</simpara>
									<simpara>
										Selecting <emphasis role="strong">Custom</emphasis> date and time filtering opens a calendar tool for selecting a date and time range.
									</simpara>
									<figure>
										<title>Search by Date</title>
										<mediaobject>
											<imageobject>
												<imagedata fileref="images/_images/admin-and-config/DateRangeSearch.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>Search by Date Range</phrase>
											</textobject>
										</mediaobject>
									</figure>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</chapter>
		<chapter xml:id="process-instance-migration-con">
			<title>Process instance migration</title>
			<simpara>
				Process instance migration (PIM) is a standalone service containing a user interface and a back-end. It is packaged as a Thorntail uber-JAR. You can use the PIM service to define the migration between two different process definitions, known as a migration plan. The user can then apply the migration plan to the running process instance in a specific KIE Server.
			</simpara>
			<simpara>
				For more information about the PIM service, see <link xlink:href="https://github.com/kiegroup/droolsjbpm-integration/tree/master/process-migration-service">Process Instance Migration Service</link> in <link xlink:href="https://github.com/kiegroup"><emphasis>KIE (Drools, OptaPlanner and jBPM )</emphasis></link>.
			</simpara>
			<section xml:id="process-instance-migration-installing-service-proc">
				<title>Installing the process instance migration service</title>
				<simpara>
					You can use the process instance migration (PIM) service to create, export and execute migration plans. The PIM service is provided through a GitHub repository. To install the PIM service, clone the GitHub repository, then run the service and access it in a web browser.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have defined processes in a backup-ed Red Hat Process Automation Manager development environment.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Download the <literal>rhpam-7.10.0-add-ons.zip</literal> file from the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?downloadType=distributions&amp;product=rhpam&amp;productChanged=yes">Software Downloads</link> page for Red Hat Process Automation Manager 7.10.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Unzip the downloaded archive.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Move the <literal>rhpam-7.10.0-process-migration-service-standalone.jar</literal> file from the add-ons archive to a desired location.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the location, create a YAML file containing the kieserver and Thorntail configuration, for example:
						</simpara>
						
<screen>thorntail:
  deployment:
    process-migration.war:
      jaxrs:
        application-path: /rest
      web:
        login-config:
          auth-method: BASIC
          security-domain: pim
        security-constraints:
          - url-pattern: /*
            roles: [ admin ]
          - url-pattern: /health/*
  datasources:
    data-sources:
      pimDS:
        driver-name: h2
        connection-url: jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
        user-name: DS_USERNAME
        password: DS_PASSWORD
  security:
    security-domains:
      pim:
        classic-authentication:
          login-modules:
            UsersRoles:
              code: UsersRoles
              flag: required
              module-options:
                usersProperties: application-users.properties
                rolesProperties: application-roles.properties
kieservers:
  - host: http://localhost:8080/kie-server/services/rest/server
    username: KIESERVER_USERNAME
    password: KIESERVER_PASSWORD
  - host: http://localhost:8280/kie-server/services/rest/server
    username: KIESERVER_USERNAME
    password: KIESERVER_PASSWORD1</screen>
					</listitem>
					<listitem>
						<simpara>
							Start the PIM service:
						</simpara>
						
<screen>$ java -jar rhpam-7.10.0-process-migration-service-standalone.jar -s./config.yml</screen>
					</listitem>
					<listitem>
						<simpara>
							After the PIM service is up and running, enter <literal>http://localhost:8080</literal> in a web browser.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="process-instance-migration-creating-plan-proc">
				<title>Creating a migration plan</title>
				<simpara>
					You can define the migration between two different process definitions, known as a migration plan, in the process instance migration (PIM) service web UI.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have defined processes in a backup-ed Red Hat Process Automation Manager development environment.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							The process instance migration service is running.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Enter <literal>http://localhost:8080</literal> in a web browser.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Log in to the PIM service.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the upper right corner of the <emphasis role="strong">Process Instance Migration</emphasis> page, from the KIE Service list select the KIE Service you want to add a migration plan for.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Add Plan</emphasis>. The <emphasis role="strong">Add Migration Plan Wizard</emphasis> window opens.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Name</emphasis> field, enter a name for the migration plan.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Optional: In the <emphasis role="strong">Description</emphasis> field, enter a description for the migration plan.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Next</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Source ContainerID</emphasis> field, enter the source container ID.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Source ProcessId</emphasis> field, enter the source process ID.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Copy Source To Target</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Target ContainerID</emphasis> field, update the target container ID.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Retrieve Definition from backend</emphasis> and click <emphasis role="strong">Next</emphasis>.
						</simpara>
						<informalfigure>
						<mediaobject>
							<imageobject>
								<imagedata align="center" fileref="images/_images/processes/pim-migration-wizard.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>pim migration wizard</phrase>
							</textobject>
						</mediaobject>
						</informalfigure>
					</listitem>
					<listitem>
						<simpara>
							From the <emphasis role="strong">Source Nodes</emphasis> list, select the source node you want to map.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							From the <emphasis role="strong">Target Nodes</emphasis> list, select the target node you want to map.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							If the <emphasis role="strong">Source Process Definition Diagram</emphasis> pane is not displayed, click <emphasis role="strong">Show Source Diagram</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							If the <emphasis role="strong">Target Process Definition Diagram</emphasis> pane is not displayed, click <emphasis role="strong">Show Target Diagram</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Optional: To modify the view in the diagram panes, perform any of the following tasks:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									To select text, select the 
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/processes/pim-selection-icon.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>pim selection icon</phrase>
										</textobject>
									</inlinemediaobject>
									 icon.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									To pan, select the 
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/processes/pim-pan-icon.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>pim pan icon</phrase>
										</textobject>
									</inlinemediaobject>
									 icon.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									To zoom in, select the 
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/processes/pim-zoom-in-icon.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>pim zoom in icon</phrase>
										</textobject>
									</inlinemediaobject>
									 icon.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									To zoom out, select the 
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/processes/pim-zoom-out-icon.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>pim zoom out icon</phrase>
										</textobject>
									</inlinemediaobject>
									 icon.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									To fit to viewer, select the 
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/processes/pim-fit-to-icon.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>pim fit to icon</phrase>
										</textobject>
									</inlinemediaobject>
									 icon.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Map these two nodes</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Next</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Optional: To export as a <literal>JSON</literal> file, click <emphasis role="strong">Export</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Review &amp; Submit</emphasis> tab, review the plan and click <emphasis role="strong">Submit Plan</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Optional: To export as a <literal>JSON</literal> file, click <emphasis role="strong">Export</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Review the response and click <emphasis role="strong">Close</emphasis>.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="process-instance-migration-editing-plan-proc">
				<title>Editing a migration plan</title>
				<simpara>
					You can edit a migration plan in the process instance migration (PIM) service web UI. You can modify the migration plan name, description, specified nodes, and process instances.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have defined processes in a backup-ed Red Hat Process Automation Manager development environment.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							The PIM service is running.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Enter <literal>http://localhost:8080</literal> in a web browser.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Log in to the PIM service.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Process Instance Migration</emphasis> page, select the <emphasis role="strong">Edit Migration Plan</emphasis> <inlinemediaobject>
								<imageobject>
									<imagedata fileref="images/_images/processes/pim-edit-icon.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>pim edit icon</phrase>
								</textobject>
							</inlinemediaobject>
							 icon on the row of the migration plan you want to edit. The <emphasis role="strong">Edit Migration Plan</emphasis> window opens.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On each tab, modify the details you want to change.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Next</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Optional: To export as a <literal>JSON</literal> file, click <emphasis role="strong">Export</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Review &amp; Submit</emphasis> tab, review the plan and click <emphasis role="strong">Submit Plan</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Optional: To export as a <literal>JSON</literal> file, click <emphasis role="strong">Export</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Review the response and click <emphasis role="strong">Close</emphasis>.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="process-instance-migration-exporting-plan-proc">
				<title>Exporting a migration plan</title>
				<simpara>
					You can export migration plans as a JSON file using the process instance migration (PIM) service web UI.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have defined processes in a backup-ed Red Hat Process Automation Manager development environment.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							The PIM service is running.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Enter <literal>http://localhost:8080</literal> in a web browser.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Log in to the PIM service.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Process Instance Migration</emphasis> page, select the <emphasis role="strong">Export Migration Plan</emphasis> <inlinemediaobject>
								<imageobject>
									<imagedata fileref="images/_images/processes/pim-export-icon.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>pim export icon</phrase>
								</textobject>
							</inlinemediaobject>
							 icon on the row of the migration plan you want to execute. The <emphasis role="strong">Export Migration Plan</emphasis> window opens.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Review and click <emphasis role="strong">Export</emphasis>.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="process-instance-migration-executing-plan-proc">
				<title>Executing a migration plan</title>
				<simpara>
					You can execute the migration plan in the process instance migration (PIM) service web UI.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have defined processes in a backup-ed Red Hat Process Automation Manager development environment.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							The PIM service is running.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Enter <literal>http://localhost:8080</literal> in a web browser.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Log in to the PIM service.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Process Instance Migration</emphasis> page, select the <emphasis role="strong">Execute Migration Plan</emphasis> <inlinemediaobject>
								<imageobject>
									<imagedata fileref="images/_images/processes/pim-execute-icon.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>pim execute icon</phrase>
								</textobject>
							</inlinemediaobject>
							 icon on the row of the migration plan you want to execute. The <emphasis role="strong">Execute Migration Plan Wizard</emphasis> window opens.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							From the migration plan table, select the check box on the row of each running process instance you want to migrate, and click <emphasis role="strong">Next</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Callback URL</emphasis> field, enter the callback URL.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							To the right of <emphasis role="strong">Run migration</emphasis>, perform one of the following tasks:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									To execute the migration immediately, select <emphasis role="strong">Now</emphasis>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									To schedule the migration, select <emphasis role="strong">Schedule</emphasis> and in the text field, enter the date and time, for example <literal>06/20/2019 10:00 PM</literal>.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Next</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Optional: To export as a <literal>JSON</literal> file, click <emphasis role="strong">Export</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Execute Plan</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Optional: To export as a <literal>JSON</literal> file, click <emphasis role="strong">Export</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Check the response and click <emphasis role="strong">Close</emphasis>.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="process-instance-migration-deleting-plan-proc">
				<title>Deleting a migration plan</title>
				<simpara>
					You can delete a migration plan in the process instance migration (PIM) service web UI.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have defined processes in a backup-ed Red Hat Process Automation Manager development environment.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							The PIM service is running.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Enter <literal>http://localhost:8080</literal> in a web browser.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Log in to the PIM service.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							On the <emphasis role="strong">Process Instance Migration</emphasis> page, select the <emphasis role="strong">Delete</emphasis> <inlinemediaobject>
								<imageobject>
									<imagedata fileref="images/_images/processes/pim-delete-icon.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>pim delete icon</phrase>
								</textobject>
							</inlinemediaobject>
							 icon on the row of the migration plan you want to delete. The <emphasis role="strong">Delete Migration Plan</emphasis> window opens.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Delete</emphasis> to confirm deletion.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
	</part>
	<part xml:id="assembly-designing-and-building-cases">
		<title>Designing and building cases for case management</title>
		<partintro>
			<simpara>
				As a developer, you can use Business Central to configure Red Hat Process Automation Manager assets for case management.
			</simpara>
			<simpara>
				Case management differs from Business Process Management (BPM). It focuses more on the actual data being handled throughout the case rather than on the sequence of steps taken to complete a goal. Case data is the most important piece of information in automated case handling, while business context and decision-making are in the hands of the human case worker.
			</simpara>
			<simpara>
				Red Hat Process Automation Manager includes the <emphasis role="strong">IT_Orders</emphasis> sample project in Business Central. This document refers to the sample project to explain case management concepts and provide examples.
			</simpara>
			<simpara>
				The <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/getting_started_with_red_hat_process_automation_manager#assembly-getting-started-case-management"><emphasis>Getting started with case management</emphasis></link> tutorial describes how to create and test a new <literal>IT_Orders</literal> project in Business Central. After reviewing the concepts in this guide, follow the procedures in the tutorial to ensure that you are able to successfully create, deploy, and test your own case project.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						Red Hat JBoss Enterprise Application Platform 7.3 is installed. For information about installing Red Hat JBoss Enterprise Application Platform 7.3, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/installation_guide/"><emphasis>Red Hat JBoss Enterprise Application Platform 7.3 Installation Guide</emphasis></link>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Red Hat Process Automation Manager is installed. For information about installing Red Hat Process Automation Manager, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/installing_and_configuring_red_hat_process_automation_manager#assembly-planning"><emphasis>Planning a Red Hat Process Automation Manager installation</emphasis></link>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Red Hat Process Automation Manager is running and you can log in to Business Central with the <literal>user</literal> role. For information about users and permissions, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/installing_and_configuring_red_hat_process_automation_manager#assembly-planning"><emphasis>Planning a Red Hat Process Automation Manager installation</emphasis></link>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						The Showcase application is deployed. For information about how to install and log in to the Showcase application, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/developing_process_services_in_red_hat_process_automation_manager#assembly-showcase-application"><emphasis>Using the Showcase application for case management</emphasis></link>.
					</simpara>
				</listitem>
			</itemizedlist>
		</partintro>
		<chapter xml:id="case-management-overview-con_case-management-design">
			<title>Case management</title>
			<simpara>
				Case management is an extension of Business Process Management (BPM) that enables you to manage adaptable business processes.
			</simpara>
			<simpara>
				BPM is a management practice used to automate tasks that are repeatable and have a common pattern, with a focus on optimization by perfecting a process. Business processes are usually modeled with clearly defined paths leading to a business goal. This requires a lot of predictability, usually based on mass-production principles. However, many real-world applications cannot be described completely from start to finish (including all possible paths, deviations, and exceptions). Using a process-oriented approach in certain cases can lead to complex solutions that are hard to maintain.
			</simpara>
			<simpara>
				Case management provides problem resolution for non-repeatable, unpredictable processes as opposed to the efficiency-oriented approach of BPM for routine, predictable tasks. It manages one-off situations when the process cannot be predicted in advance. A case definition usually consists of loosely coupled process fragments that can be connected directly or indirectly to lead to certain milestones and ultimately a business goal, while the process is managed dynamically in response to changes that occur during run time.
			</simpara>
			<simpara>
				In Red Hat Process Automation Manager, case management includes the following core process engine features:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						Case file instance
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						A per case runtime strategy
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Case comments
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Milestones
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Stages
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Ad hoc fragments
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Dynamic tasks and processes
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Case identifier (correlation key)
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Case lifecycle (close, reopen, cancel, destroy)
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				A case definition is always an ad hoc process definition and does not require an explicit start node. The case definition is the main entry point for the business use case.
			</simpara>
			<simpara>
				A process definition is introduced as a supporting construct of the case and can be invoked either as defined in the case definition or dynamically to bring in additional processing when required. A case definition defines the following new objects:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						Activities (required)
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Case file (required)
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Milestones
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Roles
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Stages
					</simpara>
				</listitem>
			</itemizedlist>
		</chapter>
		<chapter xml:id="case-management-cmmn-con-case-management-design">
			<title>Case Management Model and Notation</title>
			<simpara>
				You can use Business Central to import, view, and modify the content of Case Management Model and Notation (CMMN) files. When authoring a project, you can import your case management model and then select it from the asset list to view or modify it in a standard XML editor.
			</simpara>
			<simpara>
				The following CMMN constructs are currently available:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						Tasks (human task, process task, decision task, case task)
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Discretionary tasks (same as above)
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Stages
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Milestones
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Case file items
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Sentries (entry and exit)
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				The following tasks are not supported:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						Required
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Repeat
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Manual activation
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				Sentries for individual tasks are limited to entry criteria while entry and exit criteria are supported for stages and milestones. Decision tasks map by default to a DMN decision. Event listeners are not supported.
			</simpara>
			<simpara>
				Red Hat Process Automation Manager does not provide any modeling capabilities for CMMN and focuses solely on the execution of the model.
			</simpara>
		</chapter>
		<chapter xml:id="case-management-case-file-con-case-management-design">
			<title>Case files</title>
			<simpara>
				A case instance is a single instance of a case definition and encapsulates the business context. All case instance data is stored in the case file, which is accessible to all process instances that might participate in the particular case instance. Each case instance and its case file are completely isolated from the other cases. Only case instance participants can access the case file.
			</simpara>
			<simpara>
				A case file is used in case management as a repository of data for the entire case instance. It contains all roles, data objects, the data map, and any other data. The case can be closed and reopened at a later date with the same case file attached. A case instance can be closed at any time and does not require a specific resolution to be completed.
			</simpara>
			<simpara>
				The case file can also include embedded documentation, references, PDF attachments, web links, and other options.
			</simpara>
			<section xml:id="case-management-case-key-prefix-proc-case-management-design">
				<title>Configuring case ID prefixes</title>
				<simpara>
					The <literal>caseId</literal> parameter is a string value that is the identifier of the case instance. You can configure the <emphasis role="strong">Case ID Prefix</emphasis> in Red Hat Process Automation Manager designer to distinguish different types of cases.
				</simpara>
				<simpara>
					The following procedures uses the <emphasis role="strong">IT_Orders</emphasis> sample project to demonstrate how to create unique case ID prefixes for specific business needs.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							The <emphasis role="strong">IT_Orders</emphasis> sample project is open in Business Central.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis>. If there are existing projects, you can access the samples by clicking the <emphasis role="strong">MySpace</emphasis> default space and selecting <emphasis role="strong">Try Samples</emphasis> from the <emphasis role="strong">Add Project</emphasis> drop-down menu. If there are no existing projects, click <emphasis role="strong">Try samples</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select <emphasis role="strong">IT_Orders</emphasis> and click <emphasis role="strong">Ok</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Assets</emphasis> window, click the <emphasis role="strong">orderhardware</emphasis> business process to open the designer.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click on an empty space on the canvas and in the upper-right corner, click the <emphasis role="strong">Properties</emphasis> <inlinemediaobject>
								<imageobject>
									<imagedata fileref="images/_images/getting-started/diagram_properties.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>diagram properties</phrase>
								</textobject>
							</inlinemediaobject>
							 icon.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Scroll down and expand <emphasis role="strong">Case Management</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Case ID Prefix</emphasis> field, enter an ID value. The ID format is internally defined as <literal>ID-XXXXXXXXXX</literal>, where <literal>XXXXXXXXXX</literal> is a generated number that provides a unique ID for the case instance.
						</simpara>
						<simpara>
							If a prefix is not provided, the default prefix is <literal>CASE</literal> with the following identifiers:
						</simpara>
						<simpara>
							<literal>CASE-0000000001</literal>
						</simpara>
						<simpara>
							<literal>CASE-0000000002</literal>
						</simpara>
						<simpara>
							<literal>CASE-0000000003</literal>
						</simpara>
						<simpara>
							You can specify any prefix. For example, if you specify the prefix <literal>IT</literal>, the following identifiers are generated:
						</simpara>
						<simpara>
							<literal>IT-0000000001</literal>
						</simpara>
						<simpara>
							<literal>IT-0000000002</literal>
						</simpara>
						<simpara>
							<literal>IT-0000000003</literal>
						</simpara>
						<figure>
							<title>Case ID Prefix field</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/cases/case-prefix.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>case prefix</phrase>
								</textobject>
							</mediaobject>
						</figure>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="case-management-case-key-expression-proc-case-management-design">
				<title>Configuring case ID expressions</title>
				<simpara>
					The following procedures uses the <emphasis role="strong">IT_Orders</emphasis> sample project to demonstrate how set metadata attribute keys to customize expressions for generating the <literal>caseId</literal>.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							The <emphasis role="strong">IT_Orders</emphasis> sample project is open in Business Central.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis>. If there are existing projects, you can access the samples by clicking the <emphasis role="strong">MySpace</emphasis> default space and selecting <emphasis role="strong">Try Samples</emphasis> from the <emphasis role="strong">Add Project</emphasis> drop-down menu. If there are no existing projects, click <emphasis role="strong">Try samples</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select <emphasis role="strong">IT_Orders</emphasis> and click <emphasis role="strong">Ok</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Assets</emphasis> window, click the <emphasis role="strong">orderhardware</emphasis> business process to open the designer.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click on an empty space on the canvas and in the upper-right corner, click the <emphasis role="strong">Properties</emphasis> <inlinemediaobject>
								<imageobject>
									<imagedata fileref="images/_images/getting-started/diagram_properties.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>diagram properties</phrase>
								</textobject>
							</inlinemediaobject>
							 icon.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Expand the <emphasis role="strong">Advanced</emphasis> menu to access the <emphasis role="strong">Metadata Attributes</emphasis> fields.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Specify one of the following functions for the <literal>customCaseIdPrefix</literal> metadata attribute:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">LPAD</emphasis>: Left padding
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">RPAD</emphasis>: Right padding
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">TRUNCATE</emphasis>: Truncate
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">UPPER</emphasis>: Upper case
								</simpara>
							</listitem>
						</itemizedlist>
						<figure>
							<title>Setting the UPPER function for the customCaseIdPrefix metadata attribute</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/cases/expressions.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>expressions</phrase>
								</textobject>
							</mediaobject>
						</figure>
						<simpara>
							In this example, <literal>type</literal> is a variable set in the <emphasis role="strong">Case File Variables</emphasis> field, which during runtime a user may define to it the value <literal>type1</literal>. <literal>UPPER</literal> is a pre-built function to uppercase a variable, and <literal>IT-</literal> is a static prefix. The results are dynamic case IDs such as <literal>IT-TYPE1-0000000001</literal>, <literal>IT-TYPE1-0000000002</literal>, and <literal>IT-TYPE1-0000000003</literal>.
						</simpara>
						<figure>
							<title>Case File Variables</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/cases/case-vars.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>case vars</phrase>
								</textobject>
							</mediaobject>
						</figure>
						<simpara>
							If the <literal>customCaseIdPrefixIsSequence</literal> case metadata attribute is set to <literal>false</literal> (default value is <literal>true</literal>), the case instance will not create any sequence and the <literal>caseIdPrefix</literal> expression is the case ID. For example, if generating case IDs based on social security numbers, no specific sequence or instance identifiers are required.
						</simpara>
						<simpara>
							The <literal>customCaseIdPrefixIsSequence</literal> metadata attribute is optionally added and set to <literal>false</literal> (default value is <literal>true</literal>) to disable the numeric sequences for the case IDs. This is useful if an expression used for custom case IDs already contains a case file variable to express unique business identifiers instead of the generic sequence values. For example, if generating case IDs based on social security numbers, no specific sequence or instance identifiers are required. For the example below, <literal>SOCIAL_SECURITY_NUMBER</literal> is also a variable declared as a case file variable.
						</simpara>
						<figure>
							<title>customCaseIdPrefixIsSequence metadata attribute</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/cases/prefix-false.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>prefix false</phrase>
								</textobject>
							</mediaobject>
						</figure>
						<simpara>
							The <literal>IS_PREFIX_SEQUENCE</literal> case file variable is optionally added as a flag during runtime to disable or enable the sequence generation for case IDs. For example, there is no need to create a sequence suffix for medical insurance coverage for an individual. For a multi-family insurance policy, the company might set the <literal>IS_PREFIX_SEQUENCE</literal> case variable to <literal>true</literal> to aggregate a sequence number for each member of the family.
						</simpara>
						<simpara>
							The result of using the <literal>customCaseIdPrefixIsSequence</literal> metadata attribute statically as <literal>false</literal> or using the <literal>IS_PREFIX_SEQUENCE</literal> case file variable and setting during runtime for it the value <literal>false</literal>, is the same.
						</simpara>
						<figure>
							<title>IS_PREFIX_SEQUENCE case variable</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/cases/prefix-sequence.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>prefix sequence</phrase>
								</textobject>
							</mediaobject>
						</figure>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
		<chapter xml:id="case-management-subcases-concase-management-design">
			<title>Subcases</title>
			<simpara>
				Subcases provide the flexibility to compose complex cases that consist of other cases. This means that you can split large and complex cases into multiple layers of abstraction and even multiple case projects. This is similar to splitting a process into multiple subprocesses.
			</simpara>
			<simpara>
				A subcase is another case definition that is invoked from within another case instance or a regular process instance. It has all of the capabilities of a regular case instance:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						It has a dedicated case file.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						It is isolated from any other case instance.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						It has its own set of case roles.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						It has its own case prefix.
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				You can use the process designer to add subcases to your case definition. A subcase is a case within your case project, similar to having a subprocess within your process. Subcases can also be added to a regular business process. Doing this enables you to start a case from within a process instance.
			</simpara>
			<simpara>
				For more information about adding a subcase to your case definition, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/getting_started_with_red_hat_process_automation_manager#assembly-getting-started-case-management"><emphasis>Getting started with case management</emphasis></link>.
			</simpara>
			<simpara>
				The <emphasis role="strong">Sub Case Data I/O</emphasis> window supports the following set of input parameters that enable you to configure and start the subcase:
			</simpara>
			<informalfigure>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/_images/cases/case-management-subcase-dataio.png" format="PNG" />
				</imageobject>
				<textobject>
					<phrase>case management subcase dataio</phrase>
				</textobject>
			</mediaobject>
			</informalfigure>
			<variablelist>
				<varlistentry>
					<term>Independent</term>
					<listitem>
						<simpara>
							Optional indicator that tells the process engine whether or not the case instance is independent. If it is independent, the main case instance does not wait for its completion. The value of this property is <literal>false</literal> by default.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>GroupRole_XXX</term>
					<listitem>
						<simpara>
							Optional group to case role mapping. The role names belonging to this case instance can be referenced here, meaning that participants of the main case can be mapped to participants of the subcase. This means that the group assigned to the main case is automatically assigned to the subcase, where <literal>XXX</literal> is the role name and the value of the property is the value of the group role assignment.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>DataAccess_XXX</term>
					<listitem>
						<simpara>
							Optional data access restrictions where <literal>XXX</literal> is the name of the data item and the value of the property is the access restrictions.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>DestroyOnAbort</term>
					<listitem>
						<simpara>
							Optional indicator that tells the process engine whether to cancel or destroy the subcase when the subcase activity is aborted. The default value is <literal>true</literal>.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>UserRole_XXX</term>
					<listitem>
						<simpara>
							Optional user to case role mapping. You can reference the case instance role names here, meaning that an owner of the main case can be mapped to an owner of the subcase. The person assigned to the main case is automatically assigned to the subcase, where <literal>XXX</literal> is the role name and the value of the property is the value of the user role assignment.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Data_XXX</term>
					<listitem>
						<simpara>
							Optional data mapping from this case instance or business process to a subcase, where <literal>XXX</literal> is the name of the data in the subcase being targeted. This parameter can be provided as many times as needed.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>DeploymentId</term>
					<listitem>
						<simpara>
							Optional deployment ID (or container ID in the context of KIE Server) that indicates where the targeted case definition is located.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>CaseDefinitionId</term>
					<listitem>
						<simpara>
							The mandatory case definition ID to be started.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>CaseId</term>
					<listitem>
						<simpara>
							The case instance ID of the subcase after it is started.
						</simpara>
					</listitem>
				</varlistentry>
			</variablelist>
		</chapter>
		<chapter xml:id="case-management-adhoc-con-case-management-design">
			<title>Ad hoc and dynamic tasks</title>
			<simpara>
				You can use case management to carry out tasks ad hoc, rather than following a strict end-to-end process. You can also add tasks to a case dynamically during run time.
			</simpara>
			<simpara>
				Ad hoc tasks are defined in the case modeling phase. Ad hoc tasks that are not configured as <literal>AdHoc Autostart</literal> are optional and might not be used during a case. Therefore, they must be triggered by a signal event or by a Java API.
			</simpara>
			<simpara>
				Dynamic tasks are defined during the case execution and are not present in the case definition model. Dynamic tasks address specific needs that arise during the case. They can be added to the case and worked on at any time using a case application, as demonstrated in the Red Hat Process Automation Manager Showcase application. Dynamic tasks can also be added by Java and Remote API calls.
			</simpara>
			<simpara>
				Dynamic tasks can be user or service activities, while ad hoc tasks can be any type of task. For more information about task types, see "BPMN2 tasks in process designer" in <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/developing_process_services_in_red_hat_process_automation_manager#assembly-designing-business-processes"><emphasis>Designing business processes using BPMN models</emphasis></link>.
			</simpara>
			<simpara>
				Dynamic processes are any reusable sub-process from a case project.
			</simpara>
			<simpara>
				Ad hoc nodes with no incoming connections are configured in the node’s <literal>AdHoc Autostart</literal> property and are triggered automatically when the case instance is started.
			</simpara>
			<simpara>
				Ad hoc tasks are optional tasks that are configured in a case definition. Because they are ad hoc, they must be triggered in some way, usually by a signal event or Java API call.
			</simpara>
		</chapter>
		<chapter xml:id="case-management-adding-dynamic-tasks-using-API-proc">
			<title>Adding dynamic tasks and processes to a case using the KIE Server REST API</title>
			<simpara>
				You can add dynamic tasks and processes to a case during run time to address unforeseen changes that can occur during the lifecycle of a case. Dynamic activities are not defined in the case definition and therefore they cannot be signaled the way that a defined ad hoc task or process can.
			</simpara>
			<simpara>
				You can add the following dynamic activities to a case:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						User tasks
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Service tasks (any type that is implemented as a work item)
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Reusable subprocesses
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				Dynamic user and service tasks are added to a case instance and immediately executed. Depending on the nature of a dynamic task, it might start and wait for completion (user task) or directly complete after execution (service task). For dynamic subprocesses, the process engine requires a KJAR containing the process definition for that dynamic process to locate the process by its ID and execute it. This subprocess belongs to the case and has access to all of the data in the case file.
			</simpara>
			<simpara>
				You can use the Swagger REST API application to create dynamic tasks and subprocesses.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						You are logged in to Business Central and a case instance has been started using the Showcase application. For more information about using Showcase, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/developing_process_services_in_red_hat_process_automation_manager#assembly-showcase-application"><emphasis>Using the Showcase application for case management</emphasis></link>.
					</simpara>
				</listitem>
			</itemizedlist>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In a web browser, open the following URL:
					</simpara>
					<simpara>
						<literal><link xlink:href="http://localhost:8080/kie-server/docs">http://localhost:8080/kie-server/docs</link></literal>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Open the list of available endpoints under <emphasis role="strong">Case instances :: Case Management</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Locate the <literal>POST</literal> method endpoints for creating dynamic activities.
					</simpara>
					<simpara>
						<literal>POST /server/containers/{id}/cases/instances/{caseId}/tasks</literal>
					</simpara>
					<simpara>
						Adds a dynamic task (user or service depending on the payload) to case instance.
					</simpara>
					<simpara>
						<literal>POST /server/containers/{id}/cases/instances/{caseId}/stages/{caseStageId}/tasks</literal>
					</simpara>
					<simpara>
						Adds a dynamic task (user or service depending on the payload) to specific stage within the case instance.
					</simpara>
					<simpara>
						<literal>POST /server/containers/{id}/cases/instances/{caseId}/processes/{pId}</literal>
					</simpara>
					<simpara>
						Adds a dynamic subprocess identified by the process ID to case instance.
					</simpara>
					<simpara>
						<literal>POST /server/containers/{id}/cases/instances/{caseId}/stages/{caseStageId}/processes/{pId}</literal>
					</simpara>
					<simpara>
						Adds a dynamic subprocess identified by process ID to stage within a case instance.
					</simpara>
					<informalfigure>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/_images/cases/swagger-case-management-dynamic.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>swagger case management dynamic</phrase>
						</textobject>
					</mediaobject>
					</informalfigure>
				</listitem>
				<listitem>
					<simpara>
						To open the documentation, click the REST endpoint required to create the dynamic task or process.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Try it out</emphasis> and enter the parameters and body required to create the dynamic activity.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Execute</emphasis> to create the dynamic task or subprocess using the REST API.
					</simpara>
				</listitem>
			</orderedlist>
			<section xml:id="case-management-dynamic-user-task-API-proc">
				<title>Creating a dynamic user task using the KIE Server REST API</title>
				<simpara>
					You can create a dynamic user task during case run time using the REST API. To create a dynamic user task, you must provide the following information:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Task name
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Task subject (optional, but recommended)
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Actors or groups (or both)
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Input data
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Use the following procedure to create a dynamic user task for the <emphasis role="strong">IT_Orders</emphasis> sample project available in Business Central using the Swagger REST API tool. The same endpoint can be used for REST API without Swagger.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You are logged in to Business Central and an IT Orders case instance has been started using the Showcase application. For more information about using Showcase, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/developing_process_services_in_red_hat_process_automation_manager#assembly-showcase-application"><emphasis>Using the Showcase application for case management</emphasis></link>.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In a web browser, open the following URL:
						</simpara>
						<simpara>
							<literal><link xlink:href="http://localhost:8080/kie-server/docs">http://localhost:8080/kie-server/docs</link></literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Open the list of available endpoints under <emphasis role="strong">Case instances :: Case Management</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click click the following <literal>POST</literal> method endpoint to open the details:
						</simpara>
						<simpara>
							<literal>/server/containers/{id}/cases/instances/{caseId}/tasks</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Try it out</emphasis> and then input the following parameters:
						</simpara>
						<table colsep="1" frame="all" rowsep="1">
							<title>Parameters</title>
							<tgroup cols="2">
								<colspec colname="col_1" colwidth="40*"></colspec>
								<colspec colname="col_2" colwidth="60*"></colspec>
								<thead>
									<row>
										<entry align="left" valign="top">Name</entry>
										<entry align="left" valign="top">Description</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>id</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>itorders</literal>
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>caseId</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>IT-0000000001</literal>
										</simpara>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</table>
						<formalpara>
							<title>Request body</title>
							<para>
								
<screen>{
 "name" : "RequestManagerApproval",
 "data" : {
   "reason" : "Fixed hardware spec",
   "caseFile_hwSpec" : "#{caseFile_hwSpec}"
  },
 "subject" : "Ask for manager approval again",
 "actors" : "manager",
 "groups" : ""
}</screen>
							</para>
						</formalpara>
					</listitem>
					<listitem>
						<simpara>
							In the Swagger application, click <emphasis role="strong">Execute</emphasis> to create the dynamic task.
						</simpara>
					</listitem>
				</orderedlist>
				<simpara>
					This procedure creates a new user task associated with case <literal>IT-000000001</literal>. The task is assigned to the person assigned to the <literal>manager</literal> case role. This task has two input variables:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<literal>reason</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>caseFile_hwSpec</literal>: defined as an expression to allow run time capturing of a process or case data.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Some tasks include a form that provides a user-friendly UI for the task, which you can locate by task name. In the IT Orders case, the <literal>RequestManagerApproval</literal> task includes the form <literal>RequestManagerApproval-taskform.form</literal> in its KJAR.
				</simpara>
				<simpara>
					After it is created, the task appears in the assignee’s <emphasis role="strong">Task Inbox</emphasis> in Business Central.
				</simpara>
			</section>
			<section xml:id="case-management-dynamic-service-task-API-proc">
				<title>Creating a dynamic service task using the KIE Server REST API</title>
				<simpara>
					Service tasks are usually less complex than user tasks, although they might need more data to execute properly. Service tasks require the following information:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<literal>name</literal>: The name of the activity
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>nodeType</literal>: The type of node that will be used to find the work item handler
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>data</literal>: The map of the data to properly deal with execution
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					During case run time, you can create a dynamic service task with the same endpoint as a user task, but with a different body payload.
				</simpara>
				<simpara>
					Use the following procedure using the Swagger REST API to create a dynamic service task for the <emphasis role="strong">IT_Orders</emphasis> sample project available in Business Central. You can use the same endpoint for REST API without Swagger.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You are logged in to Business Central and an IT Orders case instance has been started using the Showcase application. For more information about using Showcase, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/developing_process_services_in_red_hat_process_automation_manager#assembly-showcase-application"><emphasis>Using the Showcase application for case management</emphasis></link>.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In a web browser, open the following URL:
						</simpara>
						<simpara>
							<literal><link xlink:href="http://localhost:8080/kie-server/docs">http://localhost:8080/kie-server/docs</link></literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Open the list of available endpoints under <emphasis role="strong">Case instances :: Case Management</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the following <literal>POST</literal> method endpoint to open the details:
						</simpara>
						<simpara>
							<literal>/server/containers/{id}/cases/instances/{caseId}/stages/{caseStageId}/tasks</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Try it out</emphasis> and then enter the following parameters:
						</simpara>
						<table colsep="1" frame="all" rowsep="1">
							<title>Parameters</title>
							<tgroup cols="2">
								<colspec colname="col_1" colwidth="40*"></colspec>
								<colspec colname="col_2" colwidth="60*"></colspec>
								<thead>
									<row>
										<entry align="left" valign="top">Name</entry>
										<entry align="left" valign="top">Description</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>id</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>itorders</literal>
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>caseId</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>IT-0000000001</literal>
										</simpara>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</table>
						<formalpara>
							<title>Request body</title>
							<para>
								
<screen>{
 "name" : "InvokeService",
 "data" : {
   "Parameter" : "Fixed hardware spec",
   "Interface" : "org.jbpm.demo.itorders.services.ITOrderService",
   "Operation" : "printMessage",
   "ParameterType" : "java.lang.String"
  },
 "nodeType" : "Service Task"
}</screen>
							</para>
						</formalpara>
					</listitem>
					<listitem>
						<simpara>
							In the Swagger application, click <emphasis role="strong">Execute</emphasis> to create the dynamic task.
						</simpara>
					</listitem>
				</orderedlist>
				<simpara>
					In this example, a Java-based service is executed. It consists of an interface with the public class <literal>org.jbpm.demo.itorders.services.ITOrderService</literal> and the public <literal>printMessage</literal> method with a single <literal>String</literal> argument. When executed, the parameter value is passed to the method for execution.
				</simpara>
				<simpara>
					Numbers, names, and other types of data given to create service tasks depend on the implementation of a service task’s handler. In the example provided, the <literal>org.jbpm.process.workitem.bpmn2.ServiceTaskHandler</literal> handler is used.
				</simpara>
				<note>
					<simpara>
						For any custom service tasks, ensure the handler is registered in the deployment descriptor in the <emphasis role="strong">Work Item Handlers</emphasis> section, where the name is the same as the <literal>nodeType</literal> used for creating a dynamic service task.
					</simpara>
				</note>
			</section>
			<section xml:id="case-management-dynamic-subprocess-API-proc">
				<title>Creating a dynamic subprocess using the KIE Server REST API</title>
				<simpara>
					When creating a dynamic subprocess, only optional data is provided. There are no special parameters as there are when creating dynamic tasks.
				</simpara>
				<simpara>
					The following procedure describes how to use the Swagger REST API to create a dynamic subprocess task for the <emphasis role="strong">IT_Orders</emphasis> sample project available in Business Central. The same endpoint can be used for REST API without Swagger.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You are logged in to Business Central and an IT Orders case instance has been started using the Showcase application. For more information about using Showcase, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/developing_process_services_in_red_hat_process_automation_manager#assembly-showcase-application"><emphasis>Using the Showcase application for case management</emphasis></link>.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In a web browser, open the following URL:
						</simpara>
						<simpara>
							<literal><link xlink:href="http://localhost:8080/kie-server/docs">http://localhost:8080/kie-server/docs</link></literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Open the list of available endpoints under <emphasis role="strong">Case instances :: Case Management</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the following <literal>POST</literal> method endpoint to open the details:
						</simpara>
						<simpara>
							<literal>/server/containers/{id}/cases/instances/{caseId}/processes/{pId}</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Try it out</emphasis> and enter the following parameters:
						</simpara>
						<table colsep="1" frame="all" rowsep="1">
							<title>Parameters</title>
							<tgroup cols="2">
								<colspec colname="col_1" colwidth="40*"></colspec>
								<colspec colname="col_2" colwidth="60*"></colspec>
								<thead>
									<row>
										<entry align="left" valign="top">Name</entry>
										<entry align="left" valign="top">Description</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>id</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>itorders</literal>
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>caseId</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>IT-0000000001</literal>
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>pId</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>itorders-data.place-order</literal>
										</simpara>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</table>
						<simpara>
							The <literal>pId</literal> is the process ID of the subprocess to be created.
						</simpara>
						<formalpara>
							<title>Request body</title>
							<para>
								
<screen>{
 "placedOrder" : "Manually"
}</screen>
							</para>
						</formalpara>
					</listitem>
					<listitem>
						<simpara>
							In the Swagger application, click <emphasis role="strong">Execute</emphasis> to start the dynamic subprocess.
						</simpara>
					</listitem>
				</orderedlist>
				<simpara>
					In this example, the <literal>place-order</literal> subprocess has been started in the IT Orders case with the case ID <literal>IT-0000000001</literal>. You can see this process in Business Central under <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis>.
				</simpara>
				<simpara>
					If the described example has executed correctly, the <literal>place-order</literal> process appears in the list of process instances. Open the details of the process and note that the correlation key for the process includes the IT Orders case instance ID, and the <emphasis role="strong">Process Variables</emphasis> list includes the variable <literal>placedOrder</literal> with the value <literal>Manually</literal>, as delivered in the REST API body.
				</simpara>
			</section>
		</chapter>
		<chapter remap="_comments" xml:id="comments">
			<title>Comments</title>
			<simpara>
				In case management, comments facilitate collaboration within the case instance, and allow case workers to easily communicate with each other to exchange information.
			</simpara>
			<simpara>
				Comments are bound to the case instance. Case instances are part of the case file, so you can use comments to take action on the instances. Basic text-based comments can have a complete operations set, similar to CRUD (create, read, update, and delete).
			</simpara>
		</chapter>
		<chapter xml:id="case-management-roles-con-case-management-design">
			<title>Case roles</title>
			<simpara>
				Case roles provide an additional layer of abstraction for user participation in case handling. Roles, users, and groups are used for different purposes in case management.
			</simpara>
			<variablelist>
				<varlistentry>
					<term>Roles</term>
					<listitem>
						<simpara>
							Roles drive the authorization for a case instance and are used for user activity assignments. A user or one or more groups can be assigned to the owner role. The owner is whoever the case belongs to. Roles are not restricted to a single set of people or groups as part of a case definition. Use roles to specify task assignments instead of assigning a specific user or group to a task assignment to ensure that the case remains dynamic.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Groups</term>
					<listitem>
						<simpara>
							A group is a collection of users who are able to carry out a particular task or have a set of specified responsibilities. You can assign any number of people to a group and assign any group to a role. You can add or change members of a group at any time. Do not hard code a group to a particular task.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Users</term>
					<listitem>
						<simpara>
							A user is an individual who can be given a particular task when you assign them a role or add them to a group.
						</simpara>
						<note>
							<simpara>
								Do not create a user called <literal>unknown</literal> in process engine or KIE Server. The <literal>unknown</literal> user account is a reserved system name with superuser access. The <literal>unknown</literal> user account performs tasks related to the SLA violation listener when there are no users logged in.
							</simpara>
						</note>
					</listitem>
				</varlistentry>
			</variablelist>
			<simpara>
				The following example illustrates how the preceding case management concepts apply to a hotel reservation with the following information:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						<emphasis role="strong">Role</emphasis>: <literal>Guest</literal>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">Group</emphasis>: <literal>Receptionist</literal>, <literal>Maid</literal>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">User</emphasis>: <literal>Marilyn</literal>
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				The <literal>Guest</literal> role assignment affects the specific work of the associated case and is unique to all case instances. The number of users or groups that can be assigned to a role is limited by the case <literal>Cardinality</literal>, which is set during role creation in the process designer and case definition. For example, the hotel reservation case has only one guest while the <emphasis role="strong">IT_Orders</emphasis> sample project has two suppliers of IT hardware.
			</simpara>
			<simpara>
				When roles are defined, ensure that roles are not hard-coded to a single set of people or groups as part of case definition and that they can differ for each case instance. This is why case role assignments are important.
			</simpara>
			<simpara>
				Role assignments can be assigned or removed when a case starts or at any time when a case is active. Although roles are optional, use roles in case definitions to maintain an organized workflow.
			</simpara>
			<important>
				<simpara>
					Always use roles for task assignments instead of actual user or group names. This ensures that the case remains dynamic and actual user or group assignments can be made as late as required.
				</simpara>
			</important>
			<simpara>
				Roles are assigned to users or groups and authorized to perform tasks when a case instance is started.
			</simpara>
			<section xml:id="case-management-creating-roles-proc-case-management-design">
				<title>Creating case roles</title>
				<simpara>
					You can create and define case roles in the case definition when you design the case in the process designer. Case roles are configured on the case definition level to keep them separate from the actors involved in handling the case instance. Roles can be assigned to user tasks or used as contact references throughout the case lifecycle, but they are not defined in the case as a specific user or group of users.
				</simpara>
				<simpara>
					Case instances include the individuals that are actually handling the case work. Assign roles when starting a new case instance. In order to keep cases flexible, you can modify case role assignment during case run time, although doing this has no effect on tasks already created based on the previous role assignment. The actor assigned to a role is flexible but the role itself remains the same for each case.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							A case project that has a case definition exists in Business Central.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							The case definition asset is open in the process designer.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							To define the roles involved in the case, click on an empty space in the editor’s canvas, and click 
							<inlinemediaobject>
								<imageobject>
									<imagedata fileref="images/_images/getting-started/diagram_properties.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>diagram properties</phrase>
								</textobject>
							</inlinemediaobject>
							 to open the <emphasis role="strong">Properties</emphasis> menu.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Expand <emphasis role="strong">Case Management</emphasis> to add a case role.
						</simpara>
						<simpara>
							The case role requires a name for the role and a case cardinality. Case cardinality is the number of actors that are assigned to the role in any case instance. For example, the <emphasis role="strong">IT_Orders</emphasis> sample case management project includes the following roles:
						</simpara>
						<figure>
							<title>ITOrders Case Roles</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/cases/case_roles.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>Case Roles</phrase>
								</textobject>
							</mediaobject>
						</figure>
						<simpara>
							In this example, you can assign only one actor (a user or a group) as the case <literal>owner</literal> and assign only one actor to the <literal>manager</literal> role. The <literal>supplier</literal> role can have two actors assigned. Depending on the case, you can assign any number of actors to a particular role based on the configured case cardinality of the role.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="case-management-role-authorization-proc-case-management-design">
				<title>Role authorization</title>
				<simpara>
					Roles are authorized to perform specific case management tasks when starting a new case instance using the Showcase application or the REST API.
				</simpara>
				<simpara>
					Use the following procedure to start a new IT Orders case using the REST API.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							The <emphasis role="strong">IT_Orders</emphasis> sample project has been imported in Business Central and deployed to the KIE Server.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Create a <literal>POST</literal> REST API call with the following endpoint:
						</simpara>
						<simpara>
							<literal>http://host:port/kie-server/services/rest/server/containers/itorders/cases/itorders.orderhardware/instances</literal>
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>itorders</literal>: The container alias that has been deployed to the KIE Server.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>itorders.orderhardware</literal>: The name of the case definition.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							Provide the following role configuration in the request body:
						</simpara>
						
<programlisting language="java" linenumbering="unnumbered">{
  "case-data" : {  },
  "case-user-assignments" : {
    "owner" : "cami",
    "manager" : "cami"
  },
  "case-group-assignments" : {
    "supplier" : "IT"
 }
}</programlisting>
						<simpara>
							This starts a new case with defined roles, as well as autostart activities, which are started and ready to be worked on. Two of the roles are user assignments (<literal>owner</literal> and <literal>manager</literal>) and the third is a group assignment (<literal>supplier</literal>).
						</simpara>
						<simpara>
							After the case instance is successfully started, the case instance returns the <literal>IT-0000000001</literal> case ID.
						</simpara>
					</listitem>
				</orderedlist>
				<simpara>
					For information about how to start a new case instance using the Showcase application, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/developing_process_services_in_red_hat_process_automation_manager#assembly-showcase-application"><emphasis>Using the Showcase application for case management</emphasis></link>.
				</simpara>
			</section>
			<section xml:id="case-management-assign-task-to-role-proc-case-management-design">
				<title>Assigning a task to a role</title>
				<simpara>
					Case management processes need to be as flexible as possible to accommodate changes that can happen dynamically during run time. This includes changing user assignments for new case instances or for active cases. For this reason, ensure that you do not hard code roles to a single set of users or groups in the case definition. Instead, role assignments can be defined on the task nodes in the case definition, with users or groups assigned to the roles on case creation.
				</simpara>
				<simpara>
					Red Hat Process Automation Manager contains a predefined selection of node types to simplify business process creation. The predefined node panel is located on the left side of the diagram editor.
				</simpara>
				<simpara>
					<inlinemediaobject>
						<imageobject>
							<imagedata fileref="images/_images/cases/node_task_panel.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>node task panel</phrase>
						</textobject>
					</inlinemediaobject>
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							A case definition has been created with case roles configured at the case definition level. For more information about creating case roles, see <link linkend="case-management-creating-roles-proc-case-management-design">Creating case roles</link>.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Open the <emphasis role="strong">Activities</emphasis> menu in the designer palette and drag the user or service task that you want to add to your case definition onto the process designer canvas.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							With the task node selected, click 
							<inlinemediaobject>
								<imageobject>
									<imagedata fileref="images/_images/getting-started/diagram_properties.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>diagram properties</phrase>
								</textobject>
							</inlinemediaobject>
							 to open the <emphasis role="strong">Properties</emphasis> panel on the right side of the designer.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Expand <emphasis role="strong">Implementation/Execution</emphasis>, click <emphasis role="strong">Add</emphasis> below the <emphasis role="strong">Actors</emphasis> property and either select or type the name of the role to which the task will be assigned. You can use the <emphasis role="strong">Groups</emphasis> property in the same way for group assignments.
						</simpara>
						<simpara>
							For example, in the <emphasis role="strong">IT_Orders</emphasis> sample project, the <literal>Manager approval</literal> user task is assigned to the <literal>manager</literal> role:
						</simpara>
						<informalfigure>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/cases/case-management-task-assignment.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>case management task assignment</phrase>
							</textobject>
						</mediaobject>
						</informalfigure>
						<simpara>
							In this example, after the <literal>Prepare hardware spec</literal> user task has been completed, the user assigned to the <literal>manager</literal> role will receive the <literal>Manager approval</literal> task in their <emphasis role="strong">Task Inbox</emphasis> in Business Central.
						</simpara>
					</listitem>
				</orderedlist>
				<simpara>
					The user assigned to the role can be changed during the case run time, but the task itself continues to have the same role assignment. For example, the person originally assigned to the <literal>manager</literal> role might need to take time off (if they become ill, for example), or they might unexpectedly leave the company. To respond to this change in circumstances, you can edit the <literal>manager</literal> role assignment so that someone else can be assigned the tasks associated with that role.
				</simpara>
				<simpara>
					For information about how to change role assignments during case run time, see <link linkend="case-management-modifying-roles-during-runtime-proc-case-management-design">Modifying case role assignments during run time using Showcase</link> or <link linkend="case-management-modifying-roles-during-runtime-API-proc-case-management-design">Modifying case role assignments during run time using REST API</link>.
				</simpara>
			</section>
			<section xml:id="case-management-modifying-roles-during-runtime-proc-case-management-design">
				<title>Modifying case role assignments during run time using Showcase</title>
				<simpara>
					You can change case instance role assignments during case run time using the Showcase application. Roles are defined in the case definition and assigned to tasks in the case lifecycle. Roles cannot change during run time because they are predefined, but you can change the actors assigned to the roles to change who is responsible for carrying out case tasks.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							An active case instance with users or groups is already assigned to at least one case role.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In the Showcase application, click the case you want to work on in the <emphasis role="strong">Case list</emphasis> to open the case overview.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Locate the role assignment that you want to change in the <emphasis role="strong">Roles</emphasis> box in the lower-right corner of the page.
						</simpara>
						<informalfigure>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/cases/showcase-role-assignments.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>showcase role assignments</phrase>
							</textobject>
						</mediaobject>
						</informalfigure>
					</listitem>
					<listitem>
						<simpara>
							To remove a single user or group from the role assignment, click the 
							<inlinemediaobject>
								<imageobject>
									<imagedata fileref="images/_images/cases/blue-x.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase><emphasis role="strong">X</emphasis></phrase>
								</textobject>
							</inlinemediaobject>
							 next to the assignment. In the confirmation window, click <emphasis role="strong">Remove</emphasis> to remove the user or group from the role.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							To remove all role assignments from a role, click the 
							<inlinemediaobject>
								<imageobject>
									<imagedata fileref="images/_images/cases/dotdotdotbutton.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>three dots</phrase>
								</textobject>
							</inlinemediaobject>
							 next to the role and select the <emphasis role="strong">Remove all assignments</emphasis> option. In the confirmation window, click <emphasis role="strong">Remove</emphasis> to remove all user and group assignments from the role.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							To change the role assignment from one user or group to another, click the 
							<inlinemediaobject>
								<imageobject>
									<imagedata fileref="images/_images/cases/dotdotdotbutton.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>three dots</phrase>
								</textobject>
							</inlinemediaobject>
							 next to the role and select the <emphasis role="strong">Edit</emphasis> option.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Edit role assignment</emphasis> window, delete the name of the assignee that you want to remove from the role assignment. Type the name of the user you want to assign to the role into the <emphasis role="strong">User</emphasis> field or the group you want to assign in the <emphasis role="strong">Group</emphasis> field.
						</simpara>
						<simpara>
							At least one user or group must be assigned when editing a role assignment.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Assign</emphasis> to complete the role assignment.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="case-management-modifying-roles-during-runtime-API-proc-case-management-design">
				<title>Modifying case role assignments during run time using REST API</title>
				<simpara>
					You can change case instance role assignments during case run time using the REST API or Swagger application. Roles are defined in the case definition and assigned to tasks in the case life cycle. Roles cannot change during run time because they are predefined, but you can change the actors assigned to the roles to change who is responsible for carrying out case tasks.
				</simpara>
				<simpara>
					The following procedure includes examples based on the <emphasis role="strong">IT_Orders</emphasis> sample project. You can use the same REST API endpoints in the Swagger application or any other REST API client, or using Curl.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							An IT Orders case instance has been started with <literal>owner</literal>, <literal>manager</literal>, and <literal>supplier</literal> roles already assigned to actors.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Retrieve the list of current role assignments using a <literal>GET</literal> request on the following endpoint:
						</simpara>
						<simpara>
							<literal>http://localhost:8080/kie-server/services/rest/server/containers/{id}/cases/instances/{caseId}/roles</literal>
						</simpara>
						<table colsep="1" frame="all" rowsep="1">
							<title>Parameters</title>
							<tgroup cols="2">
								<colspec colname="col_1" colwidth="40*"></colspec>
								<colspec colname="col_2" colwidth="60*"></colspec>
								<thead>
									<row>
										<entry align="left" valign="top">Name</entry>
										<entry align="left" valign="top">Description</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>id</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>itorders</literal>
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>caseId</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>IT-0000000001</literal>
										</simpara>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</table>
						<simpara>
							This returns the following response:
						</simpara>
						
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;case-role-assignment-list&gt;
      &lt;role-assignments&gt;
            &lt;name&gt;owner&lt;/name&gt;
            &lt;users&gt;Aimee&lt;/users&gt;
      &lt;/role-assignments&gt;
      &lt;role-assignments&gt;
            &lt;name&gt;manager&lt;/name&gt;
            &lt;users&gt;Katy&lt;/users&gt;
      &lt;/role-assignments&gt;
      &lt;role-assignments&gt;
            &lt;name&gt;supplier&lt;/name&gt;
            &lt;groups&gt;Lenovo&lt;/groups&gt;
      &lt;/role-assignments&gt;
&lt;/case-role-assignment-list&gt;</programlisting>
					</listitem>
					<listitem>
						<simpara>
							To change the user assigned to the <literal>manager</literal> role, you must first remove the role assignment from the user <literal>Katy</literal> using <literal>DELETE</literal>.
						</simpara>
						<simpara>
							<literal>/server/containers/{id}/cases/instances/{caseId}/roles/{caseRoleName}</literal>
						</simpara>
						<simpara>
							Include the following information in the Swagger client request:
						</simpara>
						<table colsep="1" frame="all" rowsep="1">
							<title>Parameters</title>
							<tgroup cols="2">
								<colspec colname="col_1" colwidth="40*"></colspec>
								<colspec colname="col_2" colwidth="60*"></colspec>
								<thead>
									<row>
										<entry align="left" valign="top">Name</entry>
										<entry align="left" valign="top">Description</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>id</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>itorders</literal>
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>caseId</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>IT-0000000001</literal>
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>caseRoleName</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>manager</literal>
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>user</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>Katy</literal>
										</simpara>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</table>
						<simpara>
							Click <emphasis role="strong">Execute</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Execute the <literal>GET</literal> request from the first step again to check that the <literal>manager</literal> role no longer has a user assigned:
						</simpara>
						
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;case-role-assignment-list&gt;
      &lt;role-assignments&gt;
            &lt;name&gt;owner&lt;/name&gt;
            &lt;users&gt;Aimee&lt;/users&gt;
      &lt;/role-assignments&gt;
      &lt;role-assignments&gt;
            &lt;name&gt;manager&lt;/name&gt;
      &lt;/role-assignments&gt;
      &lt;role-assignments&gt;
            &lt;name&gt;supplier&lt;/name&gt;
            &lt;groups&gt;Lenovo&lt;/groups&gt;
      &lt;/role-assignments&gt;
&lt;/case-role-assignment-list&gt;</programlisting>
					</listitem>
					<listitem>
						<simpara>
							Assign the user <literal>Cami</literal> to the <literal>manager</literal> role using a <literal>PUT</literal> request on the following endpoint:
						</simpara>
						<simpara>
							<literal>/server/containers/{id}/cases/instances/{caseId}/roles/{caseRoleName}</literal>
						</simpara>
						<simpara>
							Include the following information in the Swagger client request:
						</simpara>
						<table colsep="1" frame="all" rowsep="1">
							<title>Parameters</title>
							<tgroup cols="2">
								<colspec colname="col_1" colwidth="40*"></colspec>
								<colspec colname="col_2" colwidth="60*"></colspec>
								<thead>
									<row>
										<entry align="left" valign="top">Name</entry>
										<entry align="left" valign="top">Description</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>id</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>itorders</literal>
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>caseId</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>IT-0000000001</literal>
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>caseRoleName</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>manager</literal>
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>user</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>Cami</literal>
										</simpara>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</table>
						<simpara>
							Click <emphasis role="strong">Execute</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Execute the <literal>GET</literal> request from the first step again to check that the <literal>manager</literal> role is now assigned to <literal>Cami</literal>:
						</simpara>
						
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;case-role-assignment-list&gt;
      &lt;role-assignments&gt;
            &lt;name&gt;owner&lt;/name&gt;
            &lt;users&gt;Aimee&lt;/users&gt;
      &lt;/role-assignments&gt;
      &lt;role-assignments&gt;
            &lt;name&gt;manager&lt;/name&gt;
            &lt;users&gt;Cami&lt;/users&gt;
      &lt;/role-assignments&gt;
      &lt;role-assignments&gt;
            &lt;name&gt;supplier&lt;/name&gt;
            &lt;groups&gt;Lenovo&lt;/groups&gt;
      &lt;/role-assignments&gt;
&lt;/case-role-assignment-list&gt;</programlisting>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
		<chapter xml:id="case-management-stages-con-case-management-design">
			<title>Stages</title>
			<simpara>
				Case management stages are a collection of tasks. A stage is an ad hoc subprocess that can be defined using the process designer and may include other case management nodes, such as a milestone. A milestone can also be configured as completed when a stage or a number of stages are completed. Therefore, a milestone may be activated or achieved by the completion of a stage, and a stage may include a milestone or a number of milestones.
			</simpara>
			<simpara>
				For example, in a patient triage case, the first stage may consist of observing and noting any obvious physical symptoms or a description from the patient of what their symptoms are, followed by a second stage for tests, and a third for diagnosis and treatment.
			</simpara>
			<simpara>
				There are three ways to complete a stage:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						By completion condition.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						By terminal end event.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						By setting the <literal>Completion Condition</literal> to <literal>autocomplete</literal>, which will automatically complete the stage when there are no active tasks left in the stage.
					</simpara>
				</listitem>
			</itemizedlist>
			<section xml:id="case-management-defining-a-stage-proc-case-management-design">
				<title>Defining a stage</title>
				<simpara>
					A stage can be modeled in BPMN2 using the process designer. Stages are a way of grouping related tasks in a way that clearly defines activities that, if the stage is activated, must complete before the next stage of the case commences. For example, the <emphasis role="strong">IT_Orders</emphasis> case definition can also be defined using stages in the following way:
				</simpara>
				<figure>
					<title><emphasis role="strong">IT_Orders</emphasis> project stages example</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/_images/cases/itorders-stages.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>IT_Orders - stages</phrase>
						</textobject>
					</mediaobject>
				</figure>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							From the predefined node panel located on the left side of the diagram editor, drag and drop an <emphasis role="strong">Adhoc</emphasis> subprocess node onto the design canvas and provide a name for the stage node.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Define how the stage is activated:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									If the stage is being activated by an incoming node, connect the stage with a sequence flow line from the incoming node.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									If the stage is instead being activated by a signal event, configure the <literal>SignalRef</literal> on the signal node with the name of the stage that you configured in the first step.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Alternatively, configure the <literal>AdHocActivationCondition</literal> property to activate the stage when the condition has been met.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							Re-size the node as required to provide room to add the task nodes for the stage.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Add the relevant tasks to the stage and configure them as required.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Optional: Configure a completion condition for the stage. As an ad hoc subprocess, stages are configured as <literal>autocomplete</literal> by default, which means that the stage will automatically complete and trigger the next activity in the case definition once all instances in the stage are no longer active.
						</simpara>
						<simpara>
							To change the completion condition, select the stage node and open the <emphasis role="strong">Properties</emphasis> panel on the right, expand <emphasis role="strong">Implementation/Execution</emphasis>, and modify the <literal>AdHocCompletionCondition</literal> property field with a free-form Drools expression for the completion condition you require. For more information about stage completion conditions, see <xref linkend="case-management-stage-activation-and-completion-conditions-proc" />.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Once the stage has been configured, connect it to the next activity in the case definition using a sequence flow line.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="case-management-stage-activation-and-completion-conditions-proc">
				<title>Configuring stage activation and completion conditions</title>
				<simpara>
					Stages can be triggered by a start node, intermediate node, or manually using an API call.
				</simpara>
				<simpara>
					You can configure stages with both activation and completion conditions using free-form Drools rules, the same way that milestone completion conditions are configured. For example, in the <emphasis role="strong">IT_Orders</emphasis> sample project, the <literal>Milestone 2: Order shipped</literal> completion condition (<literal>org.kie.api.runtime.process.CaseData(data.get("shipped") == true)</literal>) can also be used as the completion condition for the <literal>Order delivery</literal> stage represented here:
				</simpara>
				<figure>
					<title><literal>IT_Orders</literal> project stages example</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/_images/cases/itorders-stages.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>IT_Orders - stages</phrase>
						</textobject>
					</mediaobject>
				</figure>
				<simpara>
					Activation conditions can also be configured using a free-form Drools rule to configure the <literal>AdHocActivationCondition</literal> property to activate a stage.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have created a case definition in the Business Central process designer.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							You have added an ad hoc subprocess to the case definition that is to be used as a stage.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							With the stage selected, click 
							<inlinemediaobject>
								<imageobject>
									<imagedata fileref="images/_images/getting-started/diagram_properties.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>diagram properties</phrase>
								</textobject>
							</inlinemediaobject>
							 to open the <emphasis role="strong">Properties</emphasis> panel on the right side of the designer.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Expand <emphasis role="strong">Implementation/Execution</emphasis> and in the <literal>AdHocActivationCondition</literal> property editor define an activation condition for the start node. For example, set <literal>autostart: true</literal> to make the stage automatically activated when a new case instance is started.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							The <literal>AdHocCompletionCondition</literal> is set to <literal>autocomplete</literal> by default. To change this, input a completion condition using a free-form Drools expression. For example, set <literal>org.kie.api.runtime.process.CaseData(data.get("ordered") == true)</literal> to activate the second stage in the example shown previously.
						</simpara>
					</listitem>
				</orderedlist>
				<simpara>
					For more examples and information about the conditions used in the <emphasis role="strong">IT_Orders</emphasis> sample project, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/getting_started_with_red_hat_process_automation_manager#assembly-getting-started-case-management"><emphasis>Getting started with case management</emphasis></link>.
				</simpara>
			</section>
			<section xml:id="case-management-dynamic-tasks-during-stages-proc">
				<title>Adding a dynamic task to a stage</title>
				<simpara>
					Dynamic tasks can be added to a case stage during run time using a REST API request. This is similar to adding a dynamic task to a case instance, but you must also define the <literal>caseStageId</literal> of the stage to which the task is added.
				</simpara>
				<simpara>
					Use the following procedure to add a dynamic task to a stage in the <emphasis role="strong">IT_Orders</emphasis> sample project available in Business Central using the Swagger REST API tool. The same endpoint can be used for the REST API without Swagger.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							The <emphasis role="strong">IT_Orders</emphasis> sample project BPMN2 case definition has been reconfigured to use stages instead of milestones, as demonstrated in the provided example. For information about configuring stages for case management, see <xref linkend="case-management-defining-a-stage-proc-case-management-design" />.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Start a new case using the Showcase application. For more information about using Showcase, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/developing_process_services_in_red_hat_process_automation_manager#assembly-showcase-application"><emphasis>Using the Showcase application for case management</emphasis></link>.
						</simpara>
						<simpara>
							Because this case is designed using stages, the case details page shows stage tracking:
						</simpara>
						<informalfigure>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/cases/case-with-stages-showcase.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>case with stages showcase</phrase>
							</textobject>
						</mediaobject>
						</informalfigure>
						<simpara>
							The first stage starts automatically when the case instance is created.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							As a <literal>manager</literal> user, approve the hardware specification in Business Central under <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>, then check the progress of the case.
						</simpara>
						<orderedlist numeration="loweralpha">
							<listitem>
								<simpara>
									In Business Central, click <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis> and open the active case instance <literal>IT-0000000001</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Diagram</emphasis> to see the case progress.
								</simpara>
							</listitem>
						</orderedlist>
					</listitem>
					<listitem>
						<simpara>
							In a web browser, open the following URL:
						</simpara>
						<simpara>
							<literal><link xlink:href="http://localhost:8080/kie-server/docs">http://localhost:8080/kie-server/docs</link></literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Open the list of available endpoints under <emphasis role="strong">Case instances :: Case Management</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click click the following <literal>POST</literal> method endpoint to open the details:
						</simpara>
						<simpara>
							<literal>/server/containers/{id}/cases/instances/{caseId}/stages/{caseStageId}/tasks</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Try it out</emphasis> to complete the following parameters:
						</simpara>
						<table colsep="1" frame="all" rowsep="1">
							<title>Parameters</title>
							<tgroup cols="2">
								<colspec colname="col_1" colwidth="40*"></colspec>
								<colspec colname="col_2" colwidth="60*"></colspec>
								<thead>
									<row>
										<entry align="left" valign="top">Name</entry>
										<entry align="left" valign="top">Description</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>id</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>itorders</literal>
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>caseId</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>IT-0000000001</literal>
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>caseStageId</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>Order delivery</literal>
										</simpara>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</table>
						<simpara>
							The <literal>caseStageId</literal> is the name of the stage in the case definition where the dynamic task is to be created. This can be any dynamic or service task payload. See <link linkend="case-management-dynamic-subprocess-API-proc">] or xref:case-management-dynamic-service-task-API-proc[</link> for examples.
						</simpara>
					</listitem>
				</orderedlist>
				<simpara>
					After the dynamic task has been added to the stage, it must be completed in order for the stage to complete and for the case process to move on to the next item in the case flow.
				</simpara>
			</section>
		</chapter>
		<chapter xml:id="case-management-milestones-con">
			<title>Milestones</title>
			<simpara>
				Milestones are a special service task that can be configured in the case definition designer by adding the milestone node to the process designer palette. When creating a new case definition, a milestone configured as <literal>AdHoc Autostart</literal> is included on the design palette by default. Newly created milestones are not set to <literal>AdHoc Autostart</literal> by default.
			</simpara>
			<simpara>
				Case management milestones generally occur at the end of a stage, but they can also be the result of achieving other milestones. A milestone always requires a condition to be defined in order to track progress. Milestones react to case file data when data is added to a case. A milestone represents a single point of achievement within the case instance. It can be used to flag certain events, which can be useful for Key Performance Indicator (KPI) tracking or identifying the tasks that are still to be completed.
			</simpara>
			<simpara>
				Milestones can be in any of the following states during case execution:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						<literal>Active</literal>: The condition has been defined on the milestone but it has not been met.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<literal>Completed</literal>: The milestone condition has been met, the milestone has been achieved, and the case can proceed to the next task.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<literal>Terminated</literal>: The milestone is no longer a part of the case process and is no longer required.
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				While a milestone is available or completed it can be triggered manually by a signal or automatically if <literal>AdHoc Autostart</literal> is configured when a case instance starts. Milestones can be triggered as many times as required, however, it is directly achieved when the condition is met.
			</simpara>
			<section xml:id="case-management-milestone-triggering-case-management-design">
				<title>Configuring and triggering milestones</title>
				<simpara>
					Case milestones can be configured to start automatically when a case instance starts or they can triggered using a signal, which is configured manually during the case design.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							A case project has been created in Business Central.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							A case definition has been created.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							From the predefined node panel located on the left side of the diagram editor, drag and drop a <literal>Milestone</literal> object onto the palette.
						</simpara>
						<informalfigure>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/cases/milestone.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>Milestone</phrase>
							</textobject>
						</mediaobject>
						</informalfigure>
					</listitem>
					<listitem>
						<simpara>
							With the milestone selected, click 
							<inlinemediaobject>
								<imageobject>
									<imagedata fileref="images/_images/getting-started/diagram_properties.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>diagram properties</phrase>
								</textobject>
							</inlinemediaobject>
							 to open the <emphasis role="strong">Properties</emphasis> panel on the right side of the designer.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Expand <emphasis role="strong">Data Assignments</emphasis> to add a completion condition. Milestones include a <literal>Condition</literal> parameter by default.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							To define the completion condition for the milestone, select <literal>Constant</literal> from the <emphasis role="strong">Source</emphasis> list. The condition must be provided using the Drools syntax.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Expand <emphasis role="strong">Implementation/Execution</emphasis> to configure the <literal>AdHoc Autostart</literal> property.
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									Click the check box to set this property to <literal>true</literal> for milestones that are required to start automatically when a case instance starts.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Leave the check box empty to set this property to <literal>false</literal> for milestones that are to be triggered by a signal event.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							Optional: Configure a signal event to trigger a milestone once a case goal has been reached.
						</simpara>
						<orderedlist numeration="loweralpha">
							<listitem>
								<simpara>
									With the signal event selected in the case design palette, open the <emphasis role="strong">Properties</emphasis> panel on the right.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Set the <literal>Signal Scope</literal> property to <literal>Process Instance</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Open the <literal>SignalRef</literal> expression editor and type the name of the milestone to be triggered.
								</simpara>
								<informalfigure>
								<mediaobject>
									<imageobject>
										<imagedata fileref="images/_images/cases/milestone-trigger-expression.png" format="PNG" />
									</imageobject>
									<textobject>
										<phrase>Milestone trigger expression</phrase>
									</textobject>
								</mediaobject>
								</informalfigure>
							</listitem>
						</orderedlist>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Save</emphasis>.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
		<chapter xml:id="case-management-variable-tags-con">
			<title>Variable tags</title>
			<simpara>
				Variables store data that is used during runtime. For greater control over variable behavior, you can tag case variables and local variables in the BPMN case file. Tags are simple string values that you add as metadata to a specific variable.
			</simpara>
			<simpara>
				Red Hat Process Automation Manager supports the following tags for case and local variables:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						<emphasis role="strong">required</emphasis>: Sets the variable as a requirement in order to start a case. If a case starts without the required variable, Red Hat Process Automation Manager generates a <literal>VariableViolationException</literal> error.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">readonly</emphasis>: Indicates that the variable is for informational purposes only and can be set only once during case execution. If the value of a read-only variable is modified at any time, Red Hat Process Automation Manager generates a <literal>VariableViolationException</literal> error.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">restricted</emphasis>: A tag that is used with the <literal>VariableGuardProcessEventListener</literal> to indicate that permission is granted to modify the variable based on the existing role. The <emphasis role="strong">restricted</emphasis> tag can be replaced by any other tag name if using the second constructor that passes the new tag name.
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				The <literal>VariableGuardProcessEventListener</literal> class is extended from the <literal>DefaultProcessEventListener</literal> class and supports two different constructors:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						<literal>VariableGuardProcessEventListener</literal>
					</simpara>
					
<programlisting language="java" linenumbering="unnumbered">public VariableGuardProcessEventListener(String requiredRole, IdentityProvider identityProvider) {
    this("restricted", requiredRole, identityProvider);
}</programlisting>
				</listitem>
				<listitem>
					<simpara>
						<literal>VariableGuardProcessEventListener</literal>
					</simpara>
					
<programlisting language="java" linenumbering="unnumbered">public VariableGuardProcessEventListener(String tag, String requiredRole, IdentityProvider identityProvider) {
    this.tag = tag;
    this.requiredRole = requiredRole;
    this.identityProvider = identityProvider;
}</programlisting>
					<simpara>
						Therefore, you must add an event listener to the session with the allowed role name and identity provider that returns the user role as shown in the following example:
					</simpara>
					
<programlisting language="java" linenumbering="unnumbered">ksession.addEventListener(new VariableGuardProcessEventListener("AdminRole", myIdentityProvider));</programlisting>
					<simpara>
						In the previous example, the <literal>VariableGuardProcessEventListener</literal> method verifies if a variable is tagged with a security constraint tag (<literal>restricted</literal>). If the user does not have the required role (for example, <literal>AdminRole</literal>), then Red Hat Process Automation Manager generates a <literal>VariableViolationException</literal> error. NOTE: The variable tags that appear in the Business Central UI, for example <literal>internal</literal>, <literal>input</literal>, <literal>output</literal>, <literal>business-relevant</literal>, and <literal>tracked</literal> are not supported in Red Hat Process Automation Manager.
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				You can add the tag directly to the BPMN process source file as a <literal>customTags</literal> metadata property with the tag value defined in the format <literal>![CDATA[<emphasis>TAG_NAME</emphasis>]]</literal>.
			</simpara>
			<simpara>
				For example, the following BPMN process applies the <literal>required</literal> tag to an <literal>approved</literal> process variable:
			</simpara>
			<figure>
				<title>Example variable tagged in the BPMN modeler</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/_images/cases/variable-tags.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>Image of variable tags in BPMN modeler</phrase>
					</textobject>
				</mediaobject>
			</figure>
			<formalpara>
				<title>Example variable tagged in a BPMN file</title>
				<para>
					
<programlisting language="xml" linenumbering="unnumbered">&lt;bpmn2:property id="approved" itemSubjectRef="ItemDefinition_9" name="approved"&gt;
  &lt;bpmn2:extensionElements&gt;
    &lt;tns:metaData name="customTags"&gt;
      &lt;tns:metaValue&gt;&lt;![CDATA[required]]&gt;&lt;/tns:metaValue&gt;
    &lt;/tns:metaData&gt;
  &lt;/bpmn2:extensionElements&gt;
&lt;/bpmn2:property&gt;</programlisting>
				</para>
			</formalpara>
			<simpara>
				You can use more than one tag for a variable where applicable. You can also define custom variable tags in your BPMN files to make variable data available to Red Hat Process Automation Manager process event listeners. Custom tags do not influence the Red Hat Process Automation Manager runtime as the standard variable tags do and are for informational purposes only. You define custom variable tags in the same <literal>customTags</literal> metadata property format that you use for standard Red Hat Process Automation Manager variable tags.
			</simpara>
		</chapter>
		<chapter xml:id="case-management-case-listener-con">
			<title>Case event listener</title>
			<simpara>
				The <literal>CaseEventListener</literal> listener is used to initiate notifications for case-related events and operations that are invoked on a case instance. Implement the case event listener by overriding the methods as needed for your particular use case.
			</simpara>
			<simpara>
				You can configure the listener using the deployment descriptors located in Business Central in <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong"><emphasis>PROJECT_NAME</emphasis></emphasis> → <emphasis role="strong">Settings</emphasis> → <emphasis role="strong">Deployments</emphasis>.
			</simpara>
			<simpara>
				When a new project is created, a <literal>kie-deployment-descriptor.xml</literal> file is generated with default values.
			</simpara>
			<formalpara>
				<title>CaseEventListener methods</title>
				<para>
					
<programlisting language="java" linenumbering="unnumbered">public interface CaseEventListener extends EventListener {

    default void beforeCaseStarted(CaseStartEvent event) {
    };

    default void afterCaseStarted(CaseStartEvent event) {
    };

    default void beforeCaseClosed(CaseCloseEvent event) {
    };

    default void afterCaseClosed(CaseCloseEvent event) {
    };

    default void beforeCaseCancelled(CaseCancelEvent event) {
    };

    default void afterCaseCancelled(CaseCancelEvent event) {
    };

    default void beforeCaseDestroyed(CaseDestroyEvent event) {
    };

    default void afterCaseDestroyed(CaseDestroyEvent event) {
    };

    default void beforeCaseReopen(CaseReopenEvent event) {
    };

    default void afterCaseReopen(CaseReopenEvent event) {
    };

    default void beforeCaseCommentAdded(CaseCommentEvent event) {
    };

    default void afterCaseCommentAdded(CaseCommentEvent event) {
    };

    default void beforeCaseCommentUpdated(CaseCommentEvent event) {
    };

    default void afterCaseCommentUpdated(CaseCommentEvent event) {
    };

    default void beforeCaseCommentRemoved(CaseCommentEvent event) {
    };

    default void afterCaseCommentRemoved(CaseCommentEvent event) {
    };

    default void beforeCaseRoleAssignmentAdded(CaseRoleAssignmentEvent event) {
    };

    default void afterCaseRoleAssignmentAdded(CaseRoleAssignmentEvent event) {
    };

    default void beforeCaseRoleAssignmentRemoved(CaseRoleAssignmentEvent event) {
    };

    default void afterCaseRoleAssignmentRemoved(CaseRoleAssignmentEvent event) {
    };

    default void beforeCaseDataAdded(CaseDataEvent event) {
    };

    default void afterCaseDataAdded(CaseDataEvent event) {
    };

    default void beforeCaseDataRemoved(CaseDataEvent event) {
    };

    default void afterCaseDataRemoved(CaseDataEvent event) {
    };

    default void beforeDynamicTaskAdded(CaseDynamicTaskEvent event) {
    };

    default void afterDynamicTaskAdded(CaseDynamicTaskEvent event) {
    };

    default void beforeDynamicProcessAdded(CaseDynamicSubprocessEvent event) {
    };

    default void afterDynamicProcessAdded(CaseDynamicSubprocessEvent event) {
    };
}</programlisting>
				</para>
			</formalpara>
		</chapter>
		<chapter xml:id="case-management-rules-con">
			<title>Rules in case management</title>
			<simpara>
				Cases are data-driven, rather than following a sequential flow. The steps required to resolve a case rely on data, which is provided by people involved in the case, or the system can be configured to trigger further actions based on the data available. In the latter case, you can use business rules to decide what further actions are required for the case to continue or reach a resolution.
			</simpara>
			<simpara>
				Data can be inserted into the case file at any point during the case. The decision engine constantly monitors case file data, meaning that rules react to data that is contained in the case file. Using rules to monitor and respond to changes in the case file data provides a level of automation that drives cases forward.
			</simpara>
			<section xml:id="case-management-using-rules-proc">
				<title>Using rules to drive cases</title>
				<simpara>
					Refer to the case management <emphasis role="strong">IT_Orders</emphasis> sample project in Business Central.
				</simpara>
				<simpara>
					Suppose that the particular hardware specification provided by the supplier is incorrect or invalid. The supplier needs to provide a new, valid order so that the case can continue. Rather than wait for the manager to reject the invalid specification and create a new request for the supplier, you can create a business rule that will react immediately when the case data indicates that the provided specification is invalid. It can then create a new hardware specification request for the supplier.
				</simpara>
				<simpara>
					The following procedure demonstrates how to create and use a business rule to execute this scenario.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							The <emphasis role="strong">IT_Orders</emphasis> sample project is open in Business Central, but it is not deployed to the KIE Server.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							The <literal>ServiceRegistry</literal> is part of the <literal>jbpm-services-api</literal> module, and must be available on the class path.
						</simpara>
						<note>
							<simpara>
								If building the project outside of Business Central, the following dependencies must be added to the project:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										<literal>org.jbpm:jbpm-services-api</literal>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<literal>org.jbpm:jbpm-case-mgmt-api</literal>
									</simpara>
								</listitem>
							</itemizedlist>
						</note>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Create the following business rule file called <literal>validate-document.drl</literal>:
						</simpara>
						
<programlisting language="java" linenumbering="unnumbered">package defaultPackage;

import java.util.Map;
import java.util.HashMap;
import org.jbpm.casemgmt.api.CaseService;
import org.jbpm.casemgmt.api.model.instance.CaseFileInstance;
import org.jbpm.document.Document;
import org.jbpm.services.api.service.ServiceRegistry;

rule "Invalid document name - reupload"
when
    $caseData : CaseFileInstance()
    Document(name == "invalid.pdf") from $caseData.getData("hwSpec")

then

    System.out.println("Hardware specification is invalid");
    $caseData.remove("hwSpec");
    update($caseData);
    CaseService caseService = (CaseService) ServiceRegistry.get().service(ServiceRegistry.CASE_SERVICE);
    caseService.triggerAdHocFragment($caseData.getCaseId(), "Prepare hardware spec", null);
end</programlisting>
						<simpara>
							This business rule detects when a file named <literal>invalid.pdf</literal> is uploaded to the case file. It then removes the <literal>invalid.pdf</literal> document and creates a new instance of the <literal>Prepare hardware spec</literal> user task.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Deploy</emphasis> to build the <emphasis role="strong">IT_Orders</emphasis> project and deploy it to a KIE Server.
						</simpara>
						<note>
							<simpara>
								You can also select the <emphasis role="strong">Build &amp; Install</emphasis> option to build the project and publish the KJAR file to the configured Maven repository without deploying to a KIE Server. In a development environment, you can click <emphasis role="strong">Deploy</emphasis> to deploy the built KJAR file to a KIE Server without stopping any running instances (if applicable), or click <emphasis role="strong">Redeploy</emphasis> to deploy the built KJAR file and replace all instances. The next time you deploy or redeploy the built KJAR, the previous deployment unit (KIE container) is automatically updated in the same target KIE Server. In a production environment, the <emphasis role="strong">Redeploy</emphasis> option is disabled and you can click <emphasis role="strong">Deploy</emphasis> only to deploy the built KJAR file to a new deployment unit (KIE container) on a KIE Server.
							</simpara>
							<simpara>
								To configure the KIE Server environment mode, set the <literal>org.kie.server.mode</literal> system property to <literal>org.kie.server.mode=development</literal> or <literal>org.kie.server.mode=production</literal>. To configure the deployment behavior for a corresponding project in Business Central, go to project <emphasis role="strong">Settings</emphasis> → <emphasis role="strong">General Settings</emphasis> → <emphasis role="strong">Version</emphasis> and toggle the <emphasis role="strong">Development Mode</emphasis> option. By default, KIE Server and all new projects in Business Central are in development mode. You cannot deploy a project with <emphasis role="strong">Development Mode</emphasis> turned on or with a manually added <literal>SNAPSHOT</literal> version suffix to a KIE Server that is in production mode.
							</simpara>
						</note>
					</listitem>
					<listitem>
						<simpara>
							Create a file called <literal>invalid.pdf</literal> and save it locally.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Create a file called <literal>valid-spec.pdf</literal> and save it locally.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Projects</emphasis> → <emphasis role="strong">IT_Orders</emphasis> to open the <emphasis role="strong">IT_Orders</emphasis> project.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Import Asset</emphasis> in the upper-right corner of the page.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Upload the <literal>validate-document.drl</literal> file to the <literal>default</literal> package (<literal>src/main/resources</literal>) and click <emphasis role="strong">Ok</emphasis>.
						</simpara>
						<informalfigure>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/cases/case-management-validate-document-upload.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>case management validate document upload</phrase>
							</textobject>
						</mediaobject>
						</informalfigure>
						<simpara>
							The <literal>validate-document.drl</literal> rule is shown in the rule editor. Click <emphasis role="strong">Save</emphasis> or close to exit the rule editor.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Open the Showcase application by either clicking the <emphasis role="strong">Apps launcher</emphasis> (if it is installed), or go to <literal><link xlink:href="http://localhost:8080/rhpam-case-mgmt-showcase/jbpm-cm.html">http://localhost:8080/rhpam-case-mgmt-showcase/jbpm-cm.html</link></literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Start Case</emphasis> for the <emphasis role="strong">IT_Orders</emphasis> project.
						</simpara>
						<simpara>
							In this example, Aimee is the case <literal>owner</literal>, Katy is the <literal>manager</literal>, and the supplier group is <literal>supplier</literal>.
						</simpara>
						<informalfigure>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/cases/showcase-start-case.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>showcase start case</phrase>
							</textobject>
						</mediaobject>
						</informalfigure>
					</listitem>
					<listitem>
						<simpara>
							Log out of Business Central, and log back in as a user that belongs to the <literal>supplier</literal> group.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Open the <literal>Prepare hardware spec</literal> task and click <emphasis role="strong">Claim</emphasis>. This assigns the task to the logged in user.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Start</emphasis> and click 
							<inlinemediaobject>
								<imageobject>
									<imagedata fileref="images/_images/cases/choose-file-button.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>choose file</phrase>
								</textobject>
							</inlinemediaobject>
							 to locate the <literal>invalid.pdf</literal> hardware specification file. Click 
							<inlinemediaobject>
								<imageobject>
									<imagedata fileref="images/_images/cases/upload-button.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>the upload button</phrase>
								</textobject>
							</inlinemediaobject>
							 to upload the file.
						</simpara>
						<informalfigure>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/cases/case-management-invalid-spec.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>case management invalid spec</phrase>
							</textobject>
						</mediaobject>
						</informalfigure>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Complete</emphasis>.
						</simpara>
						<simpara>
							The value in the <emphasis role="strong">Task Inbox</emphasis> for the <literal>Prepare hardware spec</literal> is <literal>Ready</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In Showcase, click <emphasis role="strong">Refresh</emphasis> in the upper-right corner. Notice that a <literal>Prepare hardware task</literal> message appears in the <emphasis role="strong">Completed</emphasis> column and another appears in the <emphasis role="strong">In Progress</emphasis> column.
						</simpara>
						<informalfigure>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/cases/case-management-new-spec-task.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>case management new spec task</phrase>
							</textobject>
						</mediaobject>
						</informalfigure>
						<simpara>
							This is because the first <literal>Prepare hardware spec</literal> task has been completed with the specification file <literal>invalid.pdf</literal>. As a result, the business rule causes the task and file to be discarded, and a new user task created.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the Business Central <emphasis role="strong">Task Inbox</emphasis>, repeat the previous steps to upload the <literal>valid-spec.pdf</literal> file instead of <literal>invalid.pdf</literal>.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
		<chapter xml:id="case-management-security-con-case-management-design">
			<title>Case management security</title>
			<simpara>
				Cases are configured at the case definition level with case roles. These are generic participants that are involved in case handling. These roles can be assigned to user tasks or used as contact references. Roles are not hard-coded to specific users or groups to keep the case definition independent of the actual actors involved in any given case instance. You can modify case role assignments at any time as long as case instance is active, though modifying a role assignment does not affect tasks already created based on the previous role assignment.
			</simpara>
			<simpara>
				Case instance security is enabled by default. The case definition prevents case data from being accessed by users who do not belong to the case. Unless a user has a case role assignment (either assigned as user or a group member) then they are not able to access the case instance.
			</simpara>
			<simpara>
				Case security is one of the reasons why it is recommended that you assign case roles when starting a case instance, as this will prevent tasks being assigned to users who should not have access to the case.
			</simpara>
			<section xml:id="case-management-security-configuration-proc-case-management-design">
				<title>Configuring security for case management</title>
				<simpara>
					You can turn off case instance authorization by setting the following system property to <literal>false</literal>:
				</simpara>
				<simpara>
					<literal>org.jbpm.cases.auth.enabled</literal>
				</simpara>
				<simpara>
					This system property is just one of the security components for case instances. In addition, you can configure case operations at the execution server level using the <literal>case-authorization.properties</literal> file, available at the root of the class path of the execution server application (<literal>kie-server.war/WEB-INF/classes</literal>).
				</simpara>
				<simpara>
					Using a simple configuration file for all possible case definitions encourages you to think about case management as domain-specific. <literal>AuthorizationManager</literal> for case security is pluggable, which allows you to include custom code for specific security handling.
				</simpara>
				<simpara>
					You can restrict the following case instance operations to case roles:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<literal>CANCEL_CASE</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>DESTROY_CASE</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>REOPEN_CASE</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>ADD_TASK_TO_CASE</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>ADD_PROCESS_TO_CASE</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>ADD_DATA</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>REMOVE_DATA</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>MODIFY_ROLE_ASSIGNMENT</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>MODIFY_COMMENT</literal>
						</simpara>
					</listitem>
				</itemizedlist>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							The Red Hat Process Automation Manager KIE Server is not running.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Open the <literal>JBOSS_HOME/standalone/deployments/kie-server.war/WEB-INF/classes/case-authorization.properties</literal> file in your preferred editor.
						</simpara>
						<simpara>
							By default, the file contains the following operation restrictions:
						</simpara>
						
<screen>CLOSE_CASE=owner,admin
CANCEL_CASE=owner,admin
DESTROY_CASE=owner,admin
REOPEN_CASE=owner,admin</screen>
					</listitem>
					<listitem>
						<simpara>
							Add or remove role permissions for these operations as needed:
						</simpara>
						<orderedlist numeration="loweralpha">
							<listitem>
								<simpara>
									To remove permission for a role to perform an operation, remove it from the list of authorized roles for that operation in the <literal>case-authorization.properties</literal> file. For example, removing the <literal>admin</literal> role from the <literal>CLOSE_CASE</literal> operation restricts permission to close a case to the case owner for all cases.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									To give a role permission to perform a case operation, add it to the list of authorized roles for that operation in the <literal>case-authorization.properties</literal> file. For example, to allow anyone with the <literal>manager</literal> role to perform a <literal>CLOSE_CASE</literal> operation, add it to the list of roles, separated by a comma:
								</simpara>
								<simpara>
									<literal>CLOSE_CASE=owner,admin,manager</literal>
								</simpara>
							</listitem>
						</orderedlist>
					</listitem>
					<listitem>
						<simpara>
							To add role restrictions to other case operations listed in the file, remove the <literal>#</literal> from the line and list the role names in the following format:
						</simpara>
						<simpara>
							<literal>OPERATION=role1,role2,roleN</literal>
						</simpara>
						<simpara>
							Operations in the file that begin with <literal>#</literal> have restrictions ignored and can be performed by anyone involved in the case.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							When you have finished assigning role permissions, save and close the <literal>case-authorization.properties</literal> file.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Start the execution server.
						</simpara>
						<simpara>
							The case authorization settings apply to all cases on the execution server.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
		<chapter xml:id="case-management-closing-cases-ref">
			<title>Closing cases</title>
			<simpara>
				A case instance can be completed when there are no more activities to be performed and the business goal is achieved, or it can be closed prematurely. Usually the case owner closes the case when all work is completed and the case goals have been met. When you close a case, consider adding a comment about why the case instance is being closed.
			</simpara>
			<simpara>
				A closed case can be reopened later with the same case ID if required. When a case is reopened, stages that were active when the case was closed will be active when the case is reopened.
			</simpara>
			<simpara>
				You can close case instances remotely using KIE Server REST API requests or directly in the Showcase application.
			</simpara>
			<section xml:id="case-management-close-case-using-API-proc-case-management-design">
				<title>Closing a case using the KIE Server REST API</title>
				<simpara>
					You can use a REST API request to close a case instance. Red Hat Process Automation Manager includes the Swagger client, which includes endpoints and documentation for REST API requests. Alternatively, you can use the same endpoints to make API calls using your preferred client or Curl.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							A case instance has been started using Showcase.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							You are able to authenticate API requests as a user with the <literal>admin</literal> role.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Open the Swagger REST API client in a web browser:
						</simpara>
						<simpara>
							<literal><link xlink:href="http://localhost:8080/kie-server/docs">http://localhost:8080/kie-server/docs</link></literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Under <emphasis role="strong">Case Instances :: Case Management</emphasis>, open the <literal>POST</literal> request with the following endpoint:
						</simpara>
						<simpara>
							<literal>/server/containers/{id}/cases/instances/{caseId}</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Try it out</emphasis> and fill in the required parameters:
						</simpara>
						<table colsep="1" frame="all" rowsep="1">
							<title>Parameters</title>
							<tgroup cols="2">
								<colspec colname="col_1" colwidth="40*"></colspec>
								<colspec colname="col_2" colwidth="60*"></colspec>
								<thead>
									<row>
										<entry align="left" valign="top">Name</entry>
										<entry align="left" valign="top">Description</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>id</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>itorders</literal>
										</simpara>
										</entry>
									</row>
									<row>
										<entry align="left" valign="top">
										<simpara>
											<literal>caseId</literal>
										</simpara>
										</entry>
										<entry align="left" valign="top">
										<simpara>
											<literal>IT-0000000001</literal>
										</simpara>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</table>
					</listitem>
					<listitem>
						<simpara>
							Optional: Include a comment to be included in the case file. To leave a comment, type it into the <literal>body</literal> text field as a <literal>String</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Execute</emphasis> to close the case.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							To confirm the case is closed, open the Showcase application and change the case list status to <emphasis role="strong">Closed</emphasis>.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="case-management-close-case-proc-case-management-design">
				<title>Closing a case in the Showcase application</title>
				<simpara>
					A case instance is complete when no more activities need to be performed and the business goal has been achieved. After a case is complete, you can close the case to indicate that the case is complete and that no further work is required. When you close a case, consider adding a specific comment about why you are closing the case. If needed, you can reopen the case later with the same case ID.
				</simpara>
				<simpara>
					You can use the Showcase application to close a case instance at any time. From Showcase, you can easily view the details of the case or leave a comment before closing it.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You are logged in to the Showcase application and are the owner or administrator for a case instance that you want to close.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In the Showcase application, locate the case instance you want to close from the list of case instances.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							To close the case without viewing the details first, click <emphasis role="strong">Close</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							To close the case from the case details page, click the case in the list to open it.
						</simpara>
						<simpara>
							From the case overview page you can add comments to the case and verify that you are closing the correct case based on the case information.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Close</emphasis> to close the case.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Back to Case List</emphasis> in the upper-left corner of the page to return to the Showcase case list view.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click the drop-down list next to <emphasis role="strong">Status</emphasis> and select <emphasis role="strong">Canceled</emphasis> to view the list of closed and canceled cases.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
		<chapter xml:id="case-management-cancel-or-destroy-case-proc-case-management-design">
			<title>Canceling or destroying a case</title>
			<simpara>
				Cases can be canceled if they are no longer required and do not require any case work to be performed. Cases that are canceled can be reopened later with the same case instance ID and case file data. In some cases, you might want to permanently destroy a case so that it cannot be reopened.
			</simpara>
			<simpara>
				Cases can only be canceled or destroyed using an API request. Red Hat Process Automation Manager includes the Swagger client, which includes endpoints and documentation for REST API requests. Alternatively, you can use the same endpoints to make API calls using your preferred client or Curl.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						A case instance has been started using Showcase.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						You are able to authenticate API requests as a user with the <literal>admin</literal> role.
					</simpara>
				</listitem>
			</itemizedlist>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						Open the Swagger REST API client in a web browser:
					</simpara>
					<simpara>
						<literal><link xlink:href="http://localhost:8080/kie-server/docs">http://localhost:8080/kie-server/docs</link></literal>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Under <emphasis role="strong">Case Instances :: Case Management</emphasis>, open the <literal>DELETE</literal> request with the following endpoint:
					</simpara>
					<simpara>
						<literal>/server/containers/{id}/cases/instances/{caseId}</literal>
					</simpara>
					<simpara>
						You can cancel a case using the <literal>DELETE</literal> request. Optionally, you can also destroy the case using the <literal>destroy</literal> parameter.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Try it out</emphasis> and fill in the required parameters:
					</simpara>
					<table colsep="1" frame="all" rowsep="1">
						<title>Parameters</title>
						<tgroup cols="2">
							<colspec colname="col_1" colwidth="40*"></colspec>
							<colspec colname="col_2" colwidth="60*"></colspec>
							<thead>
								<row>
									<entry align="left" valign="top">Name</entry>
									<entry align="left" valign="top">Description</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>id</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<literal>itorders</literal>
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>caseId</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<literal>IT-0000000001</literal>
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>destroy</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<literal>true</literal>
									</simpara>
									<simpara>
										(Optional. Permanently destroys the case. This parameter is <literal>false</literal> by default.)
									</simpara>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Execute</emphasis> to cancel (or destroy) the case.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						To confirm the case is canceled, open the Showcase application and change the case list status to <emphasis role="strong">Canceled</emphasis>. If the case has been destroyed, it will no longer appear in any case list.
					</simpara>
				</listitem>
			</orderedlist>
			<section xml:id="case-management-clean-case-log-con">
				<title>Case log removal from the database</title>
				<simpara>
					Use the <literal>CaseLogCleanupCommand</literal> to clean up cases, such as canceled cases that are using up database space. The <literal>CaseLogCleanupCommand</literal> command contains logic to automatically clean-up all or selected cases.
				</simpara>
				<simpara>
					You can use the following configuration options with the <literal>CaseLogCleanupCommand</literal> command:
				</simpara>
				<table colsep="1" frame="all" rowsep="1">
					<title>CaseLogCleanupCommand parameters table</title>
					<tgroup cols="3">
						<colspec colname="col_1" colwidth="33*"></colspec>
						<colspec colname="col_2" colwidth="33*"></colspec>
						<colspec colname="col_3" colwidth="33*"></colspec>
						<thead>
							<row>
								<entry align="left" valign="top">Name</entry>
								<entry align="left" valign="top">Description</entry>
								<entry align="left" valign="top">Is Exclusive</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry align="left" valign="top">
								<simpara>
									SkipProcessLog
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Indicates whether or not the process and node instances, along with the process variable log clean-up will be skipped when the command runs. Default value: <literal>false</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									No, can be used with other parameters
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									SkipTaskLog
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Indicates whether or not the task audit, the task event, and the task variable log clean-up will be skipped when the command runs. Default value: <literal>false</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									No, can be used with other parameters
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									SkipExecutorLog
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Indicates if the Red Hat Process Automation Manager executor entries clean-up will be skipped when the command runs. Default value: <literal>false</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									No, can be used with other parameters
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									SingleRun
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Indicates if the job routine will run only once. Default value: <literal>false</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									No, can be used with other parameters
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									NextRun
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Schedules the next job execution. For example, set to <literal>12h</literal> for jobs to be executed every 12 hours. The schedule is ignored if you set <emphasis role="strong">SingleRun</emphasis> to <literal>true</literal>, unless you set both <emphasis role="strong">SingleRun</emphasis> and <emphasis role="strong">NextRun</emphasis>. If both are set, the <emphasis role="strong">NextRun</emphasis> schedule takes priority. The ISO format can be used to set the precise date. Default value: <literal>24h</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									No, can be used with other parameters
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									OlderThan
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Logs older than the specified date are removed. The date format is <literal>YYYY-MM-DD</literal>. Usually, this parameter is used for single run jobs.
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Yes, cannot be used when the <literal>OlderThanPeriod</literal> parameter is used
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									OlderThanPeriod
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Logs older than the specified timer expression are removed. For example, set 30d to remove logs older than 30 days.
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Yes, cannot be used when the <literal>OlderThan</literal> parameter is used
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									ForCaseDefId
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Specifies the case definition ID of the logs that are removed.
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									No, can be used with other parameters
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									ForDeployment
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Specifies the deployment ID of the logs that are removed.
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									No, can be used with other parameters
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									EmfName
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									The persistence unit name used to perform the delete operation. Default value: <literal>org.jbpm.domain</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									N/A
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									DateFormat
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Specifies the date format for time-related parameters. Default value: <literal>yyyy-MM-dd</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									No, can be used with other parameters
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									Status
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Status of the case instances of the logs that are removed.
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									No, can be used with other parameters
								</simpara>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</section>
		</chapter>
		<chapter remap="_additional_resources_2" xml:id="additional_resources_2">
			<title>Additional resources</title>
			<itemizedlist>
				<listitem>
					<simpara>
						<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/getting_started_with_red_hat_process_automation_manager#assembly-getting-started-case-management"><emphasis>Getting started with case management</emphasis></link>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/developing_process_services_in_red_hat_process_automation_manager#assembly-showcase-application"><emphasis>Using the Showcase application for case management</emphasis></link>
					</simpara>
				</listitem>
			</itemizedlist>
		</chapter>
	</part>
	<part xml:id="assembly-showcase-application">
		<title>Using the Showcase application for case management</title>
		<partintro>
			<simpara>
				As a case worker or process administrator, you can use the Showcase application to manage and monitor case management applications while case work is carried out in Business Central.
			</simpara>
			<simpara>
				Case management differs from business process management (BPM) in that it focuses on the actual data being handled throughout the case and less on the sequence of steps taken to complete a goal. Case data is the most important piece of information in case handling, while business context and decision-making is in the hands of the human case worker.
			</simpara>
			<simpara>
				Use this document to install the Showcase application and start a case instance using the <emphasis role="strong">IT_Orders</emphasis> sample case management project in Business Central. Use Business Central to complete the tasks required to complete an IT Orders case.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						Red Hat JBoss Enterprise Application Platform 7.3 is installed. For installation information, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/installation_guide/"><emphasis>Red Hat JBoss Enterprise Application Platform 7.3 Installation Guide</emphasis></link>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Red Hat Process Automation Manager is installed on Red Hat JBoss EAP and configured with KIE Server. For more information see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/installing_and_configuring_red_hat_process_automation_manager#assembly-install-on-eap"><emphasis>Installing and configuring Red Hat Process Automation Manager on Red Hat JBoss EAP 7.3</emphasis></link>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<literal>KieLoginModule</literal> is configured in <literal>standalone-full.xml</literal>. This required to connect to the KIE Server. For more information about configuring the KIE Server, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/installing_and_configuring_red_hat_process_automation_manager#assembly-planning"><emphasis>Planning a Red Hat Process Automation Manager installation</emphasis></link>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Red Hat Process Automation Manager is running and you can log in to Business Central with a user that has both <literal>kie-server</literal> and <literal>user</literal> roles. For more information about roles, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/installing_and_configuring_red_hat_process_automation_manager#assembly-planning"><emphasis>Planning a Red Hat Process Automation Manager installation</emphasis></link>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						The <emphasis role="strong">IT_Orders</emphasis> sample project has been imported in Business Central and deployed to the KIE Server. For more information about case management, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/getting_started_with_red_hat_process_automation_manager#assembly-getting-started-case-management"><emphasis>Getting started with case management</emphasis></link>.
					</simpara>
				</listitem>
			</itemizedlist>
		</partintro>
		<chapter xml:id="case-management-overview-con_case-management-showcase">
			<title>Case management</title>
			<simpara>
				Case management is an extension of Business Process Management (BPM) that enables you to manage adaptable business processes.
			</simpara>
			<simpara>
				BPM is a management practice used to automate tasks that are repeatable and have a common pattern, with a focus on optimization by perfecting a process. Business processes are usually modeled with clearly defined paths leading to a business goal. This requires a lot of predictability, usually based on mass-production principles. However, many real-world applications cannot be described completely from start to finish (including all possible paths, deviations, and exceptions). Using a process-oriented approach in certain cases can lead to complex solutions that are hard to maintain.
			</simpara>
			<simpara>
				Case management provides problem resolution for non-repeatable, unpredictable processes as opposed to the efficiency-oriented approach of BPM for routine, predictable tasks. It manages one-off situations when the process cannot be predicted in advance. A case definition usually consists of loosely coupled process fragments that can be connected directly or indirectly to lead to certain milestones and ultimately a business goal, while the process is managed dynamically in response to changes that occur during run time.
			</simpara>
			<simpara>
				In Red Hat Process Automation Manager, case management includes the following core process engine features:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						Case file instance
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						A per case runtime strategy
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Case comments
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Milestones
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Stages
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Ad hoc fragments
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Dynamic tasks and processes
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Case identifier (correlation key)
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Case lifecycle (close, reopen, cancel, destroy)
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				A case definition is always an ad hoc process definition and does not require an explicit start node. The case definition is the main entry point for the business use case.
			</simpara>
			<simpara>
				A process definition is introduced as a supporting construct of the case and can be invoked either as defined in the case definition or dynamically to bring in additional processing when required. A case definition defines the following new objects:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						Activities (required)
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Case file (required)
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Milestones
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Roles
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Stages
					</simpara>
				</listitem>
			</itemizedlist>
		</chapter>
		<chapter xml:id="case-management-showcase-application-con-case-management-showcase">
			<title>Case management Showcase application</title>
			<simpara>
				The Showcase application is included in the Red Hat Process Automation Manager distribution to demonstrate the capabilities of case management in an application environment. Showcase is intended to be used as a proof of concept that aims to show the interaction between business process management (BPM) and case management. You can use the application to start, close, monitor, and interact with cases.
			</simpara>
			<simpara>
				Showcase must be installed in addition to the Business Central application and KIE Server. The Showcase application is required to start new case instances, however the case work is still performed in Business Central.
			</simpara>
			<simpara>
				After a case instance is created and is being worked on, you can monitor the case in the Showcase application by clicking the case in the <emphasis role="strong">Case List</emphasis> to open the case <emphasis role="strong">Overview</emphasis> page.
			</simpara>
			<bridgehead remap="_showcase_support" renderas="sect2" xml:id="showcase_support">Showcase Support</bridgehead>
			<simpara>
				The Showcase application is not an integral part of Red Hat Process Automation Manager and is intended for demonstration purposes for case management. Showcase is provided to encourage customers to adopt and modify it to work for their specific needs. The content of the application itself does not carry product-specific Service Level Agreements (SLAs). We encourage you to report issues, request for enhancements, and any other feedback for consideration in Showcase updates.
			</simpara>
			<simpara>
				Red Hat Support will provide guidance on the use of this template on a commercially reasonable basis for its intended use, excluding the provided example UI code provided within.
			</simpara>
			<note>
				<simpara>
					<link xlink:href="https://access.redhat.com/support/offerings/production/soc">Production support</link> is limited to the Red Hat Process Automation Manager distribution.
				</simpara>
			</note>
		</chapter>
		<chapter xml:id="case-management-install-and-login-to-showcase-proc-case-management-showcase">
			<title>Installing and logging in to the Showcase application</title>
			<simpara>
				The Showcase application is included with the Red Hat Process Automation Manager 7.10 distribution in the add-ons Zip file. The purpose of this application is to demonstrate the functionality of case management in Red Hat Process Automation Manager and enable you to interact with cases created in Business Central. You can install the Showcase application in a Red Hat JBoss Enterprise Application Platform instance or on OpenShift. This procedure describes how to install the Showcase application in Red Hat JBoss EAP.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						Business Central and KIE Server are installed in an Red Hat JBoss EAP instance.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						You have created a user with <literal>kie-server</literal> and <literal>user</literal> roles. Only users with the <literal>user</literal> role are able to log in to the Showcase application. Users also require the <literal>kie-server</literal> role to perform remote operations on the running KIE Server.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Business Central is not running.
					</simpara>
				</listitem>
			</itemizedlist>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						Navigate to the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html">Software Downloads</link> page in the Red Hat Customer Portal (login required), and select the product and version from the drop-down options:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								Product: Red Hat Process Automation Manager
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Version: 7.10
							</simpara>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<simpara>
						Download <emphasis role="strong">Red Hat Process Automation Manager 7.10 Add Ons</emphasis> (<literal>rhpam-7.10.0-add-ons.zip</literal>).
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Extract the (<literal>rhpam-7.10.0-add-ons.zip</literal>). file. The (<literal>rhpam-7.10-case-mgmt-showcase-eap7-deployable.zip</literal>). file is in the unzipped directory.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Extract the (<literal>rhpam-7.10-case-mgmt-showcase-eap7-deployable.zip</literal>). archive to a temporary directory. In the following examples this directory is called <literal><emphasis>TEMP_DIR</emphasis></literal>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Copy the contents of the <literal>_TEMP_DIR/rhpam-7.10-case-mgmt-showcase-eap7-deployable/jboss-eap-7.3</literal> directory to <literal><emphasis>EAP_HOME</emphasis></literal>.
					</simpara>
					<simpara>
						When asked to overwrite files or merge directories, select <emphasis role="strong">Yes</emphasis>.
					</simpara>
					<warning>
						<simpara>
							Ensure the names of the Red Hat Process Automation Manager deployments you copy do not conflict with your existing deployments in the Red Hat JBoss EAP instance.
						</simpara>
					</warning>
				</listitem>
				<listitem>
					<simpara>
						Add the following system property to your deployment’s <literal>7.3/jboss-eap-7.3/standalone/configuration/standalone-full.xml</literal> file:
					</simpara>
					<simpara>
						<literal>&lt;property name="org.jbpm.casemgmt.showcase.url" value="/rhpam-case-mgmt-showcase"/&gt;</literal>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In a terminal application, navigate to <emphasis role="strong"><emphasis>EAP_HOME</emphasis>/bin</emphasis> and run the standalone configuration to start Business Central:
					</simpara>
					<simpara>
						<literal>./standalone.sh -c standalone-full.xml</literal>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In a web browser, enter <literal>localhost:8080/business-central</literal>.
					</simpara>
					<simpara>
						If Red Hat Process Automation Manager has been configured to run from a domain name, replace <literal>localhost</literal> with the domain name, for example:
					</simpara>
					<simpara>
						<literal><link xlink:href="http://www.example.com:8080/business-central">http://www.example.com:8080/business-central</link></literal>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In the upper-right corner in Business Central, click the <emphasis role="strong">Apps launcher</emphasis> button to launch the <emphasis role="strong">Case Management Showcase</emphasis> in a new browser window.
					</simpara>
					<informalfigure>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/_images/cases/apps-launcher-showcase-button.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>apps launcher showcase button</phrase>
						</textobject>
					</mediaobject>
					</informalfigure>
				</listitem>
				<listitem>
					<simpara>
						Log in to the Showcase application using your Business Central user credentials.
					</simpara>
				</listitem>
			</orderedlist>
		</chapter>
		<chapter xml:id="case-management-roles-con-case-management-showcase">
			<title>Case roles</title>
			<simpara>
				Case roles provide an additional layer of abstraction for user participation in case handling. Roles, users, and groups are used for different purposes in case management.
			</simpara>
			<variablelist>
				<varlistentry>
					<term>Roles</term>
					<listitem>
						<simpara>
							Roles drive the authorization for a case instance and are used for user activity assignments. A user or one or more groups can be assigned to the owner role. The owner is whoever the case belongs to. Roles are not restricted to a single set of people or groups as part of a case definition. Use roles to specify task assignments instead of assigning a specific user or group to a task assignment to ensure that the case remains dynamic.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Groups</term>
					<listitem>
						<simpara>
							A group is a collection of users who are able to carry out a particular task or have a set of specified responsibilities. You can assign any number of people to a group and assign any group to a role. You can add or change members of a group at any time. Do not hard code a group to a particular task.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Users</term>
					<listitem>
						<simpara>
							A user is an individual who can be given a particular task when you assign them a role or add them to a group.
						</simpara>
						<note>
							<simpara>
								Do not create a user called <literal>unknown</literal> in process engine or KIE Server. The <literal>unknown</literal> user account is a reserved system name with superuser access. The <literal>unknown</literal> user account performs tasks related to the SLA violation listener when there are no users logged in.
							</simpara>
						</note>
					</listitem>
				</varlistentry>
			</variablelist>
			<simpara>
				The following example illustrates how the preceding case management concepts apply to a hotel reservation with the following information:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						<emphasis role="strong">Role</emphasis>: <literal>Guest</literal>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">Group</emphasis>: <literal>Receptionist</literal>, <literal>Maid</literal>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">User</emphasis>: <literal>Marilyn</literal>
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				The <literal>Guest</literal> role assignment affects the specific work of the associated case and is unique to all case instances. The number of users or groups that can be assigned to a role is limited by the case <literal>Cardinality</literal>, which is set during role creation in the process designer and case definition. For example, the hotel reservation case has only one guest while the <emphasis role="strong">IT_Orders</emphasis> sample project has two suppliers of IT hardware.
			</simpara>
			<simpara>
				When roles are defined, ensure that roles are not hard-coded to a single set of people or groups as part of case definition and that they can differ for each case instance. This is why case role assignments are important.
			</simpara>
			<simpara>
				Role assignments can be assigned or removed when a case starts or at any time when a case is active. Although roles are optional, use roles in case definitions to maintain an organized workflow.
			</simpara>
			<important>
				<simpara>
					Always use roles for task assignments instead of actual user or group names. This ensures that the case remains dynamic and actual user or group assignments can be made as late as required.
				</simpara>
			</important>
			<simpara>
				Roles are assigned to users or groups and authorized to perform tasks when a case instance is started.
			</simpara>
		</chapter>
		<chapter xml:id="case-management-dynamic-tasks-proc">
			<title>Starting dynamic tasks and processes</title>
			<simpara>
				You can add dynamic tasks and processes to a case during run time. Dynamic actions are a way to address changing situations, where an unanticipated change during the case requires a new task or process to be incorporated into the case.
			</simpara>
			<simpara>
				Use a case application to add a dynamic task during run time. For demonstration purposes, the Business Central distribution includes a Showcase application where you can start a new dynamic task or process for the IT Orders application.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						KIE Server is deployed and connected to Business Central.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						The IT Orders project is deployed to KIE Server.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						The Showcase application <literal>.war</literal> file has been deployed alongside Business Central.
					</simpara>
				</listitem>
			</itemizedlist>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						With the <emphasis role="strong">IT_Orders_New</emphasis> project deployed and running in the KIE Server, in a web browser, navigate to the Showcase login page <literal><link xlink:href="http://localhost:8080/rhpam-case-mgmt-showcase/">http://localhost:8080/rhpam-case-mgmt-showcase/</link></literal>.
					</simpara>
					<simpara>
						Alternatively, if you have configured Business Central to display the <emphasis role="strong">Apps launcher</emphasis> button, use it to open a new browser window with the Showcase login page.
					</simpara>
					<informalfigure>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/_images/cases/apps-launcher-showcase-button.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>apps launcher showcase button</phrase>
						</textobject>
					</mediaobject>
					</informalfigure>
				</listitem>
				<listitem>
					<simpara>
						Log in to the Showcase application using your Business Central login credentials.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select an active case instance from the list to open it.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Under <emphasis role="strong">Overview</emphasis> → <emphasis role="strong">Actions</emphasis> → <emphasis role="strong">Available</emphasis>, click the 
						<inlinemediaobject>
							<imageobject>
								<imagedata fileref="images/_images/cases/dotdotdotbutton.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>dotdotdotbutton</phrase>
							</textobject>
						</inlinemediaobject>
						 button next to <emphasis role="strong">New user task</emphasis> or <emphasis role="strong">New process task</emphasis> to add a new task or process task.
					</simpara>
					<figure>
						<title>Showcase dynamic actions</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/cases/showcase-dynamic-actions.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>showcase dynamic actions</phrase>
							</textobject>
						</mediaobject>
					</figure>
					<itemizedlist>
						<listitem>
							<simpara>
								To create a dynamic user task, start a <emphasis role="strong">New user task</emphasis> and complete the required information:
							</simpara>
							<informalfigure>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/cases/showcase-dynamic-user-task.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>showcase dynamic user task</phrase>
								</textobject>
							</mediaobject>
							</informalfigure>
						</listitem>
						<listitem>
							<simpara>
								To create a dynamic process task, start a <emphasis role="strong">New process task</emphasis> and complete the required information:
							</simpara>
							<informalfigure>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/cases/showcase-dynamic-process-task.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>showcase dynamic process task</phrase>
								</textobject>
							</mediaobject>
							</informalfigure>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<simpara>
						To view a dynamic user task in Business Central, click <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>. The user task that was added dynamically using the Showcase application appears in the <emphasis role="strong">Task Inbox</emphasis> of users assigned to the task during task creation.
					</simpara>
					<informalfigure>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/_images/cases/task-inbox-dynamic-task.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>task inbox dynamic task</phrase>
						</textobject>
					</mediaobject>
					</informalfigure>
					<orderedlist numeration="loweralpha">
						<listitem>
							<simpara>
								Click the dynamic task in the <emphasis role="strong">Task Inbox</emphasis> to open the task. A number of action tabs are available from this page.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Using the actions available under the task tabs, you can begin working on the task.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								In the Showcase application, click the refresh button in the upper-right corner. Case tasks and processes that are in progress appear under <emphasis role="strong">Overview</emphasis> → <emphasis role="strong">Actions</emphasis> → <emphasis role="strong">In progress</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								When you have completed working on the task, click the <emphasis role="strong">Complete</emphasis> button under the <emphasis role="strong">Work</emphasis> tab.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								In the Showcase application, click the refresh button in the upper-right corner. The completed task appears under <emphasis role="strong">Overview</emphasis> → <emphasis role="strong">Actions</emphasis> → <emphasis role="strong">Completed</emphasis>.
							</simpara>
						</listitem>
					</orderedlist>
				</listitem>
				<listitem>
					<simpara>
						To view a dynamic process task in Business Central, click <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis>.
					</simpara>
					<informalfigure>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/_images/cases/dynamic-process-instance.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>dynamic process instance</phrase>
						</textobject>
					</mediaobject>
					</informalfigure>
					<orderedlist numeration="loweralpha">
						<listitem>
							<simpara>
								Click the dynamic process instance in the list of available process instances to view information about the process instance.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								In the Showcase application, click the refresh button in the upper-right corner. Case tasks and processes that are in progress appear under <emphasis role="strong">Overview</emphasis> → <emphasis role="strong">Actions</emphasis> → <emphasis role="strong">In progress</emphasis>.
							</simpara>
						</listitem>
					</orderedlist>
				</listitem>
			</orderedlist>
		</chapter>
		<chapter xml:id="case-management-starting-itorders-in-showcase-proc-case-management-showcase">
			<title>Starting an IT Orders case in the Showcase application</title>
			<simpara>
				You can start a new case instance for the IT Orders sample case management project in the Showcase application.
			</simpara>
			<simpara>
				The IT Orders sample case management project includes the following roles:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						<literal>owner</literal>: The employee who is making the hardware order request. There can be only one of these roles.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<literal>manager</literal>: The employee’s manager; the person who will approve or deny the requested hardware. There is only one manager in the IT Orders project.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<literal>supplier</literal>: The available suppliers of IT hardware in the system. There is usually more than one supplier.
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				These roles are configured at the case definition level:
			</simpara>
			<figure>
				<title>ITOrders Case Roles</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/_images/cases/case_roles-2.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>Case Roles</phrase>
					</textobject>
				</mediaobject>
			</figure>
			<simpara>
				Assign users or groups to these roles when starting a new case file instance.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						You have imported and deployed the IT Orders sample project in Business Central.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						You have installed and logged in to the Showcase application as instructed in <xref linkend="case-management-install-and-login-to-showcase-proc-case-management-showcase" />.
					</simpara>
				</listitem>
			</itemizedlist>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In the Showcase application, start a new case instance by clicking the <emphasis role="strong">Start Case</emphasis> button.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select the <literal>Order for IT hardware</literal> case name from the list and complete the role information as shown:
					</simpara>
					<informalfigure>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/_images/cases/showcase-start-case.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>showcase start case</phrase>
						</textobject>
					</mediaobject>
					</informalfigure>
					<simpara>
						In this example, Aimee is the case <literal>owner</literal>, Katy is the <literal>manager</literal>, and the supplier group is <literal>supplier</literal>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Start</emphasis> to start the case instance.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select the case from the <emphasis role="strong">Case List</emphasis>. The <emphasis role="strong">Overview</emphasis> page opens.
					</simpara>
					<simpara>
						From the <emphasis role="strong">Overview</emphasis> page, you can monitor the case progress, add comments, start new dynamic tasks and processes, and complete and close cases.
					</simpara>
					<informalfigure>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/_images/cases/case-management-showcase-overview.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>case management showcase overview</phrase>
						</textobject>
					</mediaobject>
					</informalfigure>
				</listitem>
			</orderedlist>
			<note>
				<simpara>
					Cases can be started and closed using the Showcase application, but they cannot be reopened using this application. You can only reopen a case using a JMS or REST API call.
				</simpara>
			</note>
		</chapter>
		<chapter xml:id="case-management-showcase-completing-itorders-proc">
			<title>Completing the <emphasis role="strong">IT_Orders</emphasis> case using Showcase and Business Central</title>
			<simpara>
				When a case instance is started using the Showcase application, tasks that are configured as <literal>AdHoc Autostart</literal> in the case definition are automatically assigned and made available to users with the role assignment for each task. Case workers can then work on the tasks in Business Central and complete them to move the case forward.
			</simpara>
			<simpara>
				In the <emphasis role="strong">IT_Orders</emphasis> case project, the following case definition nodes are configured with the <literal>AdHoc Autostart</literal> property:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						<literal>Prepare hardware spec</literal>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<literal>Hardware spec ready</literal>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<literal>Manager decision</literal>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<literal>Milestone 1: Order placed</literal>
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				Of these, the only user task is <literal>Prepare hardware spec</literal>, which is assigned to the <literal>supplier</literal> group. This is the first human task to be completed in the IT Orders case. When this task is complete, the <literal>Manager approval</literal> task becomes available to the user assigned to the <literal>manager</literal> role, and after the rest of the case work is finished, the <literal>Customer satisfaction survey</literal> task is assigned to the case owner for completion.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						As the <literal>wbadmin</literal> user, you have started an <emphasis role="strong">IT_Orders</emphasis> case in the Showcase application.
					</simpara>
				</listitem>
			</itemizedlist>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						Log out of Business Central and log back in as a user that belongs to the <literal>supplier</literal> group.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Open the <literal>Prepare hardware spec</literal> task and click <emphasis role="strong">Claim</emphasis>. This assigns the task to the logged in user.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Start</emphasis> and click 
						<inlinemediaobject>
							<imageobject>
								<imagedata fileref="images/_images/cases/choose-file-button.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>choose file</phrase>
							</textobject>
						</inlinemediaobject>
						 to locate the hardware specification file. Click 
						<inlinemediaobject>
							<imageobject>
								<imagedata fileref="images/_images/cases/upload-button.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>the upload button</phrase>
							</textobject>
						</inlinemediaobject>
						 to upload the file.
					</simpara>
					<informalfigure>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/_images/cases/case-management-valid-spec.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>case management valid spec</phrase>
						</textobject>
					</mediaobject>
					</informalfigure>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Complete</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						In Showcase, click <emphasis role="strong">Refresh</emphasis> in the upper-right corner. Notice that the <literal>Prepare hardware task</literal> user task and the <literal>Hardware spec ready</literal> milestone appear in the <emphasis role="strong">Completed</emphasis> column.
					</simpara>
					<informalfigure>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/_images/cases/case-management-ordered.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>case management ordered</phrase>
						</textobject>
					</mediaobject>
					</informalfigure>
				</listitem>
				<listitem>
					<simpara>
						In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>. Open the <literal>Manager approval</literal> task for <emphasis role="strong">wbadmin</emphasis>.
					</simpara>
					<orderedlist numeration="loweralpha">
						<listitem>
							<simpara>
								Click <emphasis role="strong">Claim</emphasis> and then click <emphasis role="strong">Start</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Check the <literal>approve</literal> box for the task that includes the <literal>valid-spec.pdf</literal> file, then click <emphasis role="strong">Complete</emphasis>.
							</simpara>
						</listitem>
					</orderedlist>
				</listitem>
				<listitem>
					<simpara>
						Go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis> and open the <emphasis role="strong">Order for IT hardware</emphasis> process instance.
					</simpara>
					<orderedlist numeration="loweralpha">
						<listitem>
							<simpara>
								Open the <emphasis role="strong">Diagram</emphasis> tab. Note that the <literal>Place order</literal> task is complete.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Refresh the Showcase page to see that the <literal>Manager approval</literal> task and the <literal>Manager decision</literal> milestone are in the <emphasis role="strong">Completed</emphasis> column. The <emphasis role="strong">Milestones</emphasis> pane in the lower-left corner of the Showcase overview page also shows the completed and pending milestones.
							</simpara>
							<informalfigure>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/cases/showcase-milestones-ordered.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>showcase milestones ordered</phrase>
								</textobject>
							</mediaobject>
							</informalfigure>
						</listitem>
					</orderedlist>
				</listitem>
				<listitem>
					<simpara>
						In Business Central go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Tasks</emphasis>. Click the <literal>Place order</literal> task to open it.
					</simpara>
					<orderedlist numeration="loweralpha">
						<listitem>
							<simpara>
								Click <emphasis role="strong">Claim</emphasis> and then click <emphasis role="strong">Start</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Select the <literal>Is order placed</literal> check box and click <emphasis role="strong">Complete</emphasis>.
							</simpara>
							<informalfigure>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/cases/itorders-order-placed.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>itorders order placed</phrase>
								</textobject>
							</mediaobject>
							</informalfigure>
							<simpara>
								The process instance diagram now shows the <emphasis role="strong">Milestones 2: Order shipped</emphasis> case progress:
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Refresh the Showcase page to view the case progress.
							</simpara>
						</listitem>
					</orderedlist>
				</listitem>
				<listitem>
					<simpara>
						Go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis> and open the <emphasis role="strong">Order for IT hardware</emphasis>.
					</simpara>
					<orderedlist numeration="loweralpha">
						<listitem>
							<simpara>
								Open the <emphasis role="strong">Process Variables</emphasis> tab. Locate the <literal>caseFile_shipped</literal> variable and click <emphasis role="strong">Edit</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								In the <emphasis role="strong">Edit</emphasis> window, type <literal>true</literal> and click <emphasis role="strong">Save</emphasis>.
							</simpara>
							<informalfigure>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/cases/itorders-shipped-variable.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>itorders shipped variable</phrase>
								</textobject>
							</mediaobject>
							</informalfigure>
						</listitem>
						<listitem>
							<simpara>
								Refresh the Showcase page. Note that the <literal>Milestone 2: Order shipped</literal> milestone is shown as <emphasis role="strong">Completed</emphasis>.
							</simpara>
							<simpara>
								The final milestone, <literal>Milestone 3: Delivered to customer</literal> is <emphasis role="strong">In progress</emphasis>.
							</simpara>
						</listitem>
					</orderedlist>
				</listitem>
				<listitem>
					<simpara>
						Go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis> and open the <emphasis role="strong">Order for IT hardware</emphasis>.
					</simpara>
					<orderedlist numeration="loweralpha">
						<listitem>
							<simpara>
								Open the <emphasis role="strong">Process Variables</emphasis> tab. Locate the <literal>caseFile_delivered</literal> variable and click <emphasis role="strong">Edit</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								In the <emphasis role="strong">Edit</emphasis> window, type <literal>true</literal> and click <emphasis role="strong">Save</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Refresh the Showcase page. Note that the <literal>Milestone 3: Delivered to customer</literal> milestone is shown as <emphasis role="strong">Completed</emphasis>. All milestones under the <emphasis role="strong">Milestones</emphasis> pane in the lower-left corner are shown as complete.
							</simpara>
							<simpara>
								The final task of the IT Orders case, <literal>Customer satisfaction survey</literal> is shown under <emphasis role="strong">In progress</emphasis>.
							</simpara>
							<informalfigure>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/cases/itorders-customer-survey.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>itorders customer survey</phrase>
								</textobject>
							</mediaobject>
							</informalfigure>
						</listitem>
					</orderedlist>
				</listitem>
				<listitem>
					<simpara>
						In Business Central go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Track</emphasis> → <emphasis role="strong">Task Inbox</emphasis>. Click the <literal>Customer satisfaction survey</literal> task to open it.
					</simpara>
					<simpara>
						This task is already reserved for <emphasis role="strong">wbadmin</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Start</emphasis> and fill out the survey.
					</simpara>
					<informalfigure>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/_images/cases/itorders-complete-survey.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>itorders complete survey</phrase>
						</textobject>
					</mediaobject>
					</informalfigure>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Complete</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Manage</emphasis> → <emphasis role="strong">Process Instances</emphasis> and open the <emphasis role="strong">Order for IT hardware</emphasis> process instance.
					</simpara>
					<orderedlist numeration="loweralpha">
						<listitem>
							<simpara>
								Open the <emphasis role="strong">Diagram</emphasis> tab. This shows that all required case process nodes are complete and there is nothing left to do for this case instance.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Refresh the Showcase page and note that there are no actions under <emphasis role="strong">In progress</emphasis>.
							</simpara>
						</listitem>
					</orderedlist>
				</listitem>
				<listitem>
					<simpara>
						In Showcase, type a comment in to the field under <emphasis role="strong">Comments</emphasis>. Click 
						<inlinemediaobject>
							<imageobject>
								<imagedata fileref="images/_images/cases/round-plus-button.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>round plus</phrase>
							</textobject>
						</inlinemediaobject>
						 to add the comment to the case file.
					</simpara>
					<informalfigure>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/_images/cases/itorders-comment.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>itorders comment</phrase>
						</textobject>
					</mediaobject>
					</informalfigure>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Close</emphasis> in the upper-right corner of the Showcase page to complete and close the case.
					</simpara>
				</listitem>
			</orderedlist>
		</chapter>
		<chapter remap="_additional_resources_3" xml:id="additional_resources_3">
			<title>Additional resources</title>
			<itemizedlist>
				<listitem>
					<simpara>
						<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/developing_process_services_in_red_hat_process_automation_manager#assembly-designing-and-building-cases"><emphasis>Designing and building cases for case management</emphasis></link>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/getting_started_with_red_hat_process_automation_manager#assembly-getting-started-case-management"><emphasis>Getting started with case management</emphasis></link>
					</simpara>
				</listitem>
			</itemizedlist>
		</chapter>
	</part>
	<part xml:id="assembly-custom-tasks-and-work-item-handlers">
		<title>Custom tasks and work item handlers in Business Central</title>
		<partintro>
			<simpara>
				As a business rules developer, you can create custom tasks and work item handlers in Business Central to execute custom code within your process flows and extend the operations available for use in Red Hat Process Automation Manager. You can use custom tasks to develop operations that Red Hat Process Automation Manager does not directly provide and include them in process diagrams.
			</simpara>
			<simpara>
				In Business Central, each task in a process diagram has a <literal>WorkItem</literal> Java class with an associated <literal>WorkItemHandler</literal> Java class. The work item handler contains Java code registered with Business Central and implements <literal>org.kie.api.runtime.process.WorkItemHandler</literal>.
			</simpara>
			<simpara>
				The Java code of the work item handler is executed when the task is triggered. You can customize and register a work item handler to execute your own Java code in custom tasks.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						Business Central is deployed and is running on a web or application server.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						You are logged in to Business Central.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Maven is installed.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						The host has access to the Internet. The build process uses the Internet for downloading Maven packages from external repositories.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Your system has access to the Red Hat Maven repository either locally or online
					</simpara>
				</listitem>
			</itemizedlist>
		</partintro>
		<chapter xml:id="manage-service-tasks-proc_custom-tasks">
			<title>Managing custom tasks in Business Central</title>
			<simpara>
				Custom tasks (work items) are tasks that you can customize and reuse across multiple business processes or across all projects in Business Central. Red Hat Process Automation Manager provides a set of custom tasks within the custom task repository in Business Central. You can enable or disable the default custom tasks and upload custom tasks into Business Central to implement the tasks in the relevant processes.
			</simpara>
			<note>
				<simpara>
					Red Hat Process Automation Manager includes a limited set of supported custom tasks. Custom tasks that are not included in Red Hat Process Automation Manager are not supported.
				</simpara>
			</note>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In Business Central, click 
						<inlinemediaobject>
							<imageobject>
								<imagedata fileref="images/_images/project-data/gear-icon.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>gear icon</phrase>
							</textobject>
						</inlinemediaobject>
						 in the upper-right corner and select <emphasis role="strong">Custom Tasks Administration</emphasis>.
					</simpara>
					<simpara>
						This page lists the custom task installation settings and available custom tasks for processes in projects throughout Business Central. The custom tasks that you enable on this page become available in the project-level settings where you can then install each custom task to be used in processes. The way in which the custom tasks are installed in a project is determined by the global settings that you enable or disable under <emphasis role="strong">Settings</emphasis> on this <emphasis role="strong">Custom Tasks Administration</emphasis> page.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Under <emphasis role="strong">Settings</emphasis>, enable or disable each setting to determine how the available custom tasks are implemented when a user installs them at the project level.
					</simpara>
					<simpara>
						The following custom task settings are available:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<emphasis role="strong">Install as Maven artifact</emphasis>: Uploads the custom task JAR file to the Maven repository that is configured with Business Central, if the file is not already present.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Install custom task dependencies into project</emphasis>: Adds any custom task dependencies to the <literal>pom.xml</literal> file of the project where the task is installed.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Use version range when installing custom task into project</emphasis>: Uses a version range instead of a fixed version of a custom task that is added as a project dependency. Example: <literal>[7.16,)</literal> instead of <literal>7.16.0.Final</literal>
							</simpara>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<simpara>
						Enable or disable (set to <emphasis role="strong">ON</emphasis> or <emphasis role="strong">OFF</emphasis>) any available custom tasks as needed. Custom tasks that you enable are displayed in project-level settings for all projects in Business Central.
					</simpara>
					<figure>
						<title>Enable custom tasks and custom task settings</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/admin-and-config/manage-service-tasks.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>Custom Tasks Administration page</phrase>
							</textobject>
						</mediaobject>
					</figure>
				</listitem>
				<listitem>
					<simpara>
						To add a custom task, click <emphasis role="strong">Add Custom Task</emphasis>, browse to the relevant JAR file, and click the <emphasis role="strong">Upload</emphasis> icon. The JAR file must contain work item handler implementations annotated with <literal>@Wid</literal>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Optional: To remove a custom task, click <emphasis role="strong">remove</emphasis> on the row of the custom task you want to remove and click <emphasis role="strong">Ok</emphasis> to confirm removal.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						After you configure all required custom tasks, navigate to a project in Business Central and go to the project <emphasis role="strong">Settings</emphasis> → <emphasis role="strong">Custom Tasks</emphasis> page to view the available custom tasks that you enabled.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						For each custom task, click <emphasis role="strong">Install</emphasis> to make the task available to the processes in that project or click <emphasis role="strong">Uninstall</emphasis> to exclude the task from the processes in the project.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						If you are prompted for additional information when you install a custom task, enter the required information and click <emphasis role="strong">Install</emphasis> again.
					</simpara>
					<simpara>
						The required parameters for the custom task depend on the type of task. For example, rule and decision tasks require artifact GAV information (Group ID, Artifact ID, Version), email tasks require host and port access information, and REST tasks require API credentials. Other custom tasks might not require any additional parameters.
					</simpara>
					<figure>
						<title>Install custom tasks for use in processes</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/admin-and-config/manage-service-tasks-project.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>Project-level custom task settings</phrase>
							</textobject>
						</mediaobject>
					</figure>
				</listitem>
				<listitem>
					<simpara>
						Click <emphasis role="strong">Save</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Return to the project page, select or add a business process in the project, and in the process designer palette, select the <emphasis role="strong">Custom Tasks</emphasis> option to view the available custom tasks that you enabled and installed:
					</simpara>
					<figure>
						<title>Access installed custom tasks in process designer</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/admin-and-config/manage-service-tasks-process.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>Custom tasks in process designer</phrase>
							</textobject>
						</mediaobject>
					</figure>
				</listitem>
			</orderedlist>
		</chapter>
		<chapter xml:id="custom-tasks-creating-work-item-handler-projects-proc-custom-tasks">
			<title>Creating work item handler projects</title>
			<simpara>
				Create the software project to contain all configurations, mappings, and executable code for the custom task.
			</simpara>
			<simpara>
				You can create a work item handler from scratch or use a Maven archetype to create an example project. Red Hat Process Automation Manager provides the <literal>jbpm-workitems-archetype</literal> from the Red Hat Maven repository for this purpose.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						Open the command line and create a directory where you will build your work item handler such as <literal>workitem-home</literal>:
					</simpara>
					
<screen>$ mkdir workitem-home</screen>
				</listitem>
				<listitem>
					<simpara>
						Check the Maven <literal>settings.xml</literal> file and ensure that the Red Hat Maven repository is included in the repository list.
					</simpara>
					<note>
						<simpara>
							Setting up Maven is outside the scope of this guide.
						</simpara>
					</note>
					<simpara>
						For example, to add the online Red Hat Maven repository to your Maven <literal>settings.xml</literal> file:
					</simpara>
					
<screen>&lt;settings&gt;
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;my-profile&lt;/id&gt;
      &lt;activation&gt;
        &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;
      &lt;/activation&gt;
      &lt;repositories&gt;
        &lt;repository&gt;
          &lt;id&gt;redhat-ga&lt;/id&gt;
          &lt;url&gt;http://maven.repository.redhat.com/ga/&lt;/url&gt;
          &lt;snapshots&gt;
            &lt;enabled&gt;false&lt;/enabled&gt;
          &lt;/snapshots&gt;
          &lt;releases&gt;
            &lt;enabled&gt;true&lt;/enabled&gt;
          &lt;/releases&gt;
        &lt;/repository&gt;
        ...
      &lt;/repositories&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
  ...
&lt;/settings&gt;</screen>
				</listitem>
				<listitem>
					<simpara>
						Find the Red Hat library version and perform one of the following tasks:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								To find the library version online, see <link xlink:href="https://access.redhat.com/solutions/3405361">What is the mapping between Red Hat Process Automation Manager and the Maven library version?</link>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To find the library version offline, check <literal>Implementation-Version</literal> in <literal>business-central.war/META-INF/MANIFEST.MF</literal> or <literal>Implementation-Version</literal> in <literal>kie-server.war/META-INF/MANIFEST.MF</literal>.
							</simpara>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<simpara>
						In the <literal>workitem-home</literal> directory, execute the following command:
					</simpara>
					
<screen>$ mvn archetype:generate \
-DarchetypeGroupId=org.jbpm \
-DarchetypeArtifactId=jbpm-workitems-archetype \
-DarchetypeVersion=&lt;redhat-library-version&gt; \
-Dversion=1.0.0-SNAPSHOT \
-DgroupId=com.redhat \
-DartifactId=myworkitem \
-DclassPrefix=MyWorkItem</screen>
					<table colsep="1" frame="all" rowsep="1">
						<title>Parameter descriptions</title>
						<tgroup cols="2">
							<colspec colname="col_1" colwidth="40*"></colspec>
							<colspec colname="col_2" colwidth="60*"></colspec>
							<thead>
								<row>
									<entry align="left" valign="top">Parameter</entry>
									<entry align="left" valign="top">Description</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>-DarchetypeGroupId</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Specific to the archetype and must remain unchanged.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>-DarchetypeArtifactId</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Specific to the archetype and must remain unchanged.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>-DarchetypeVersion</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Red Hat library version that is searched for when Maven attempts to download the <literal>jbpm-workitems-archetype</literal> artifact.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>-Dversion</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Version of your specific project. For example, <literal>1.0.0-SNAPSHOT</literal>.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>-DgroupId</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Maven group of your specific project. For example, <literal>com.redhat</literal>.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>-DartifactId</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Maven ID of your specific project. For example, <literal>myworkitem</literal>.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>-DclassPrefix</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										String added to the beginning of Java classes when Maven generates the classes for easier identification. For example, <literal>MyWorkItem</literal>.
									</simpara>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
					<simpara>
						A <literal>myworkitem</literal> folder is created in the <literal>workitem-home</literal> directory. For example:
					</simpara>
					
<screen>assembly/
  assembly.xml
src/
  main/
    java/
      com/
        redhat/
          MyWorkItemWorkItemHandler.java
    repository/
    resources/
  test/
    java/
      com/
        redhat/
          MyWorkItemWorkItemHandlerTest.java
          MyWorkItemWorkItemIntegrationTest.java
    resources/
      com/
        redhat/
pom.xml</screen>
				</listitem>
				<listitem>
					<simpara>
						Add any Maven dependencies required by the work item handler class to the <literal>pom.xml</literal> file.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						To create a deployable JAR for this project, in the parent project folder where the pom.xml file is located, execute the following command:
					</simpara>
					
<screen>$ mvn clean package</screen>
					<simpara>
						Several files are created in the <literal>target/</literal> directory which include the following two main files:
					</simpara>
					<table colsep="1" frame="all" rowsep="1">
						<title>File descriptions</title>
						<tgroup cols="2">
							<colspec colname="col_1" colwidth="40*"></colspec>
							<colspec colname="col_2" colwidth="60*"></colspec>
							<thead>
								<row>
									<entry align="left" valign="top">Parameter</entry>
									<entry align="left" valign="top">Description</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>myworkitems-&lt;version&gt;.jar</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Used for direct deployment to Red Hat Process Automation Manager.
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>myworkitems-&lt;version&gt;.zip</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Used for deployment using a service repository.
									</simpara>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
				</listitem>
			</orderedlist>
		</chapter>
		<chapter xml:id="custom-tasks-work-item-handler-project-customization-con-custom-tasks">
			<title>Work item handler project customization</title>
			<simpara>
				You can customize the code of a work item handler project. There are two Java methods required by a work item handler, <literal>executeWorkItem</literal> and <literal>abortWorkItem</literal>.
			</simpara>
			<table colsep="1" frame="all" rowsep="1">
				<title>Java method descriptions</title>
				<tgroup cols="2">
					<colspec colname="col_1" colwidth="40*"></colspec>
					<colspec colname="col_2" colwidth="60*"></colspec>
					<thead>
						<row>
							<entry align="left" valign="top">Java Method</entry>
							<entry align="left" valign="top">Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry align="left" valign="top">
							<simpara>
								<literal>executeWorkItem(WorkItem workItem, WorkItemManager manager)</literal>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Executed by default when the work item handler is run.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								<literal>abortWorkItem(WorkItem workItem, WorkItemManager manager)</literal>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Executed when the work item is aborted.
							</simpara>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
			<simpara>
				In both methods, the <literal>WorkItem</literal> parameter contains any of the parameters entered into the custom task through a GUI or API call, and the <literal>WorkItemManager</literal> parameter is responsible for tracking the state of the custom task.
			</simpara>
			<formalpara>
				<title>Example code structure</title>
				<para>
					
<programlisting language="java" linenumbering="unnumbered">public class MyWorkItemWorkItemHandler extends AbstractLogOrThrowWorkItemHandler {

  public void executeWorkItem(WorkItem workItem, WorkItemManager manager) {
    try {
      RequiredParameterValidator.validate(this.getClass(), workItem);

      // sample parameters
      String sampleParam = (String) workItem.getParameter("SampleParam");
      String sampleParamTwo = (String) workItem.getParameter("SampleParamTwo");

      // complete workitem impl...

      // return results
      String sampleResult = "sample result";
      Map&lt;String, Object&gt; results = new HashMap&lt;String, Object&gt;();
      results.put("SampleResult", sampleResult);
      manager.completeWorkItem(workItem.getId(), results);
    } catch(Throwable cause) {
      handleException(cause);
    }
	}

	@Override
	public void abortWorkItem(WorkItem workItem, WorkItemManager manager) {
    // similar
	}
}</programlisting>
				</para>
			</formalpara>
			<table colsep="1" frame="all" rowsep="1">
				<title>Parameter descriptions</title>
				<tgroup cols="2">
					<colspec colname="col_1" colwidth="40*"></colspec>
					<colspec colname="col_2" colwidth="60*"></colspec>
					<thead>
						<row>
							<entry align="left" valign="top">Parameter</entry>
							<entry align="left" valign="top">Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry align="left" valign="top">
							<simpara>
								<literal>RequiredParameterValidator.validate(this.getClass(), workItem);</literal>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Checks that all parameters marked “required” are present. If they are not, an <literal>IllegalArgumentException</literal> is thrown.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								<literal>String sampleParam = (String) workItem.getParameter("SampleParam");</literal>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Example of getting a parameter from the <literal>WorkItem</literal> class. The name is always a string. For example, <literal>WorkItem</literal>. In the example, <literal>SampleParam</literal> is always a string but the object associated with it can be many things and require a cast in order to avoid errors.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								<literal>// complete workitem impl…</literal>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Executes the custom Java code when a parameter is received.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								<literal>results.put("SampleResult", sampleResult);</literal>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Passes results to the custom task. The results are placed in the data output areas of the custom task.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								<literal>manager.completeWorkItem(workItem.getId(), results);</literal>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Marks the work item handler as complete. The <literal>WorkItemManager</literal> controls the state of the work item and is responsible for getting the <literal>WorkItem</literal> ID and associate the results with the correct custom task.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								<literal>abortWorkItem()</literal>
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Aborts the custom Java code. May be left blank if the work item is not designed to be aborted
							</simpara>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
			<note>
				<simpara>
					Red Hat Process Automation Manager includes a limited set of supported custom tasks. Custom tasks that are not included in Red Hat Process Automation Manager are not supported.
				</simpara>
			</note>
		</chapter>
		<chapter xml:id="custom-tasks-work-item-definitions-con-custom-tasks">
			<title>Work item definitions</title>
			<simpara>
				Red Hat Process Automation Manager requires a work item definition (WID) file to identify the data fields to show in Business Central and accept API calls. The WID file is a mapping between user interactions with Red Hat Process Automation Manager and the data that is passed to the work item handler. The WID file also handles the UI details such as the name of the custom task, the category it is displayed as on the palette in Business Central, the icon used to designate the custom task, and the work item handler the custom task will map to.
			</simpara>
			<simpara>
				In Red Hat Process Automation Manager you can create a WID file in two ways:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						Use a <literal>@Wid</literal> annotation when coding the work item handler.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Create a <literal>.wid</literal> text file. For example, <literal>definitions-example.wid</literal>.
					</simpara>
				</listitem>
			</itemizedlist>
			<section remap="_wid_annotation" xml:id="wid_annotation">
				<title>@Wid Annotation</title>
				<simpara>
					The <literal>@Wid</literal> annotation is automatically created when you generate a work item handler project using the Maven archetype. You can also add the annotation manually.
				</simpara>
				<formalpara>
					<title>@Wid Example</title>
					<para>
						
<screen>@Wid(widfile="MyWorkItemDefinitions.wid",
    name="MyWorkItemDefinitions",
    displayName="MyWorkItemDefinitions",
    icon="",
    defaultHandler="mvel: new com.redhat.MyWorkItemWorkItemHandler()",
    documentation = "myworkitem/index.html",
    parameters={
      @WidParameter(name="SampleParam", required = true),
      @WidParameter(name="SampleParamTwo", required = true)
    },
    results={
      @WidResult(name="SampleResult")
    },
    mavenDepends={
      @WidMavenDepends(group="com.redhat",
      artifact="myworkitem",
      version="7.26.0.Final-example-00004")
    },
    serviceInfo={
      @WidService(category = "myworkitem",
      description = "${description}",
      keywords = "",
      action = @WidAction(title = "Sample Title"),
      authinfo = @WidAuth(required = true,
      params = {"SampleParam", "SampleParamTwo"},
      paramsdescription = {"SampleParam", "SampleParamTwo"},
      referencesite = "referenceSiteURL"))
    }
)</screen>
					</para>
				</formalpara>
				<table colsep="1" frame="all" rowsep="1">
					<title>@Wid descriptions</title>
					<tgroup cols="2">
						<colspec colname="col_1" colwidth="30*"></colspec>
						<colspec colname="col_2" colwidth="70*"></colspec>
						<thead>
							<row>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>@Wid</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Top-level annotation to auto-generate WID files.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>widfile</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Name of the file that is automatically created for the custom task when it is deployed in Red Hat Process Automation Manager.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>name</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Name of the custom task, used internally. This name must be unique to custom tasks deployed in Red Hat Process Automation Manager.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>displayName</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Displayed name of the custom task. This name is displayed in the palette in Business Central.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>icon</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Path from <literal>src/main/resources/</literal> to an icon located in the current project. The icon is displayed in the palette in Business Central. The icon, if specified, must be a PNG or GIF file and 16x16 pixels. This value can be left blank to use a default “Service Task” icon.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>description</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Description of the custom task.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>defaultHandler</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									The work item handler Java class that is linked to the custom task. This entry is in the format <literal>&lt;language&gt; : &lt;class&gt;</literal>. Red Hat Process Automation Manager recommends using <literal>mvel</literal> as the language value for this attribute but <literal>java</literal> can also be used. For more information about mvel, see <link xlink:href="http://mvel.documentnode.com/">MVEL Documentation</link>.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>documentation</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Path to an HTML file in the current project that contains a description of the custom task.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>@WidParameter</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Child annotation of <literal>@Wid</literal>. Specifies values that will be populated in the Business Central GUI or expected by API calls as data inputs for the custom task. More than one parameter can be specified:
								</simpara>
								<simpara>
									<literal>name</literal> - A name for the parameter.
								</simpara>
								<note>
									<simpara>
										Due to the possibility of this name being used in API calls over transfer methods such as REST or SOAP, this name should not contain spaces or special characters.
									</simpara>
								</note>
								<simpara>
									<literal>required</literal> - Boolean value indicating whether the parameter is required for the custom task to execute.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>@WidResult</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Child annotation of <literal>@Wid</literal>. Specifies values that will be populated in the Business Central GUI or expected by API calls as data outputs for the custom task. You can specify more than one result:
								</simpara>
								<simpara>
									<literal>name</literal> - A name for the result.
								</simpara>
								<note>
									<simpara>
										Due to the possibility of this name being used in API calls over transfer methods such as REST or SOAP, this name should not contain spaces or special characters.
									</simpara>
								</note>
								<simpara>
									<literal>@WidMavenDepends</literal> - Child annotation of <literal>@Wid</literal>. Specifies Maven dependencies that will be required for the correct functioning of the work item handler. You can specify more than one dependency:
								</simpara>
								<simpara>
									<literal>group</literal> - Maven group ID of the dependency.
								</simpara>
								<simpara>
									<literal>artifact</literal> - Maven artifact ID of the dependency.
								</simpara>
								<simpara>
									<literal>version</literal> - Maven version number of the dependency.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>@WidService</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Child annotation of <literal>@Wid</literal>. Specifies values that will be populated in the service repository.
								</simpara>
								<simpara>
									<literal>category</literal> - The UI palette category that the handler will be placed. This value should match the <literal>category</literal> field of the <literal>@Wid</literal> annotation.
								</simpara>
								<simpara>
									<literal>description</literal> - Description of the handler that will be displayed in the service repository.
								</simpara>
								<simpara>
									<literal>keywords</literal> - Comma-separated list of keywords that apply to the handler. Note: Currently not used by the Business Central service repository.
								</simpara>
								<simpara>
									<literal>action</literal> - The <literal>@WidAction</literal> object. Contains the fields <literal>title</literal> and <literal>description</literal>.
								</simpara>
								<simpara>
									<literal>authinfo</literal> - The <literal>@WidAuth</literal> object. Optional. Contains the fields <literal>required</literal>, <literal>params</literal>, <literal>paramsdescription</literal>, <literal>referencesite</literal>.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>@WidAction</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Object of <literal>@WidService</literal> that describes the handler purpose.
								</simpara>
								<simpara>
									<literal>title</literal> - The title for the handler action.
								</simpara>
								<simpara>
									<literal>description</literal> - The description for the handler action.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>@WidAuth</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Object of <literal>@WidService</literal> that defines the authentication required by the handler.
								</simpara>
								<simpara>
									<literal>required</literal> - The boolean value that determines whether authentication is required.
								</simpara>
								<simpara>
									<literal>params</literal> - The array containing the authentication parameters required.
								</simpara>
								<simpara>
									<literal>paramsdescription</literal> - The array containing the descriptions for each authentication parameter.
								</simpara>
								<simpara>
									<literal>referencesite</literal> - The URL to where the handler documentation can be found. Note: Currently not used by the Business Central service repository.
								</simpara>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</section>
			<section remap="_text_file" xml:id="text_file">
				<title>Text File</title>
				<simpara>
					A global <literal>WorkDefinitions</literal> WID text file is automatically generated by new projects when a business process is added. The WID text file is similar to the JSON format but is not a completely valid JSON file. You can open this file in Business Central. You can create additional WID files by selecting <emphasis role="strong">Add Asset</emphasis> &gt; <emphasis role="strong">Work item definitions</emphasis> from an existing project.
				</simpara>
				<formalpara>
					<title>Text file example</title>
					<para>
						
<programlisting language="json" linenumbering="unnumbered">[
  [
    "name" : "MyWorkItemDefinitions",
    "displayName" : "MyWorkItemDefinitions",
    "category" : "",
    "description" : "",
    "defaultHandler" : "mvel: new com.redhat.MyWorkItemWorkItemHandler()",
    "documentation" : "myworkitem/index.html",
    "parameters" : [
      "SampleParam" : new StringDataType(),
      "SampleParamTwo" : new StringDataType()
    ],
    "results" : [
      "SampleResult" : new StringDataType()
    ],
    "mavenDependencies" : [
      "com.redhat:myworkitem:7.26.0.Final-example-00004"
    ],
    "icon" : ""
  ]
]</programlisting>
					</para>
				</formalpara>
				<simpara>
					The file is structured as a plain-text file using a JSON-like structure. The filename extension is <literal>.wid</literal>.
				</simpara>
				<table colsep="1" frame="all" rowsep="1">
					<title>Text file descriptions</title>
					<tgroup cols="2">
						<colspec colname="col_1" colwidth="30*"></colspec>
						<colspec colname="col_2" colwidth="70*"></colspec>
						<thead>
							<row>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>name</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Name of the custom task, used internally. This name must be unique to custom tasks deployed in Red Hat Process Automation Manager.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>displayName</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Displayed name of the custom task. This name is displayed in the palette in Business Central.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>icon</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Path from <literal>src/main/resources/</literal> to an icon located in the current project. The icon is displayed in the palette in Business Central. The icon, if specified, must be a PNG or GIF file and 16x16 pixels. This value can be left blank to use a default “Service Task” icon.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>category</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Name of a category within the Business Central palette under which this custom task is displayed.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>description</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Description of the custom task.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>defaultHandler</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									The work item handler Java class that is linked to the custom task. This entry is in the format <literal>&lt;language&gt; : &lt;class&gt;</literal>. Red Hat Process Automation Manager recommends using <literal>mvel</literal> as the language value for this attribute but <literal>java</literal> can also be used. For more information about mvel, see <link xlink:href="http://mvel.documentnode.com/">MVEL Documentation</link>.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>documentation</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Path to an HTML file in the current project that contains a description of the custom task.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>parameters</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Specifies the values to be populated in the Business Central GUI or expected by API calls as data inputs for the custom task. Parameters use the <literal>&lt;key&gt; : &lt;DataType&gt;</literal> format. Accepted data types are <literal>StringDataType()</literal>, <literal>IntegerDataType()</literal>, and <literal>ObjectDataType()</literal>. More than one parameter can be specified.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>results</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Specifies the values to be populated in the Business Central GUI or expected by API calls as data outputs for the custom task. Results use the <literal>&lt;key&gt; : &lt;DataType&gt;</literal> format. Accepted data types are <literal>StringDataType()</literal>, <literal>IntegerDataType()</literal>, and <literal>ObjectDataType()</literal>. More than one result can be specified.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>mavenDependencies</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Optional: Specifies Maven dependencies required for the correct functioning of the work item handler. Dependencies can also be specified in the work item handler <literal>pom.xml</literal> file. Dependencies are in the format <literal>&lt;group&gt;:&lt;artifact&gt;:&lt;version&gt;</literal>. More than one dependency may be specified
								</simpara>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				<simpara>
					Red Hat Process Automation Manager tries to locate a <literal>*.wid</literal> file in two locations by default:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Within Business Central in the project’s top-level <literal>global/</literal> directory. This is the location of the default <literal>WorkDefinitions.wid</literal> file that is created automatically when a project first adds a business process asset.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Within Business Central in the project’s <literal>src/main/resources/</literal> directory. This is where WID files created within a project in Business Central will be placed. A WID file may be created at any level of a Java package, so a WID file created at a package location of <literal>&lt;default&gt;</literal> will be created directly inside <literal>src/main/resources/</literal> while a WID file created at a package location of <literal>com.redhat</literal> will be created at <literal>src/main/resources/com/redhat/</literal>
						</simpara>
					</listitem>
				</itemizedlist>
				<warning>
					<simpara>
						Red Hat Process Automation Manager does not validate that the value for the <literal>defaultHandler</literal> tag is executable or is a valid Java class. Specifying incorrect or invalid classes for this tag will return errors.
					</simpara>
				</warning>
			</section>
		</chapter>
		<chapter xml:id="custom-tasks-deploying-custom-tasks-proc-custom-tasks">
			<title>Deploying custom tasks</title>
			<simpara>
				Work item handlers, as custom code, are created outside of Red Hat Process Automation Manager. To use the code in your custom task, the code must be deployed to the server. Work item handler projects must be Java JAR files that can be placed into a Maven repository.
			</simpara>
			<simpara>
				In Red Hat Process Automation Manager you can deploy custom tasks using three methods:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						Within a Business Central custom task repository. For more information, see <xref linkend="manage-service-tasks-proc_custom-tasks" />.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Within Business Central where you can use both the legacy and current editors to upload the work item handler JAR to the Business Central Maven repository as an artifact.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Outside of Business Central, you can manually copy the JAR files into the Maven repository.
					</simpara>
				</listitem>
			</itemizedlist>
			<section remap="_using_a_business_central_custom_task_repository" xml:id="using_a_business_central_custom_task_repository">
				<title>Using a Business Central custom task repository</title>
				<simpara>
					You can enable, disable, and deploy custom tasks within a Business Central custom task repository. For more information, see <xref linkend="manage-service-tasks-proc_custom-tasks" />.
				</simpara>
			</section>
			<section remap="_uploading_jar_artifact_to_business_central" xml:id="uploading_jar_artifact_to_business_central">
				<title>Uploading JAR Artifact to Business Central</title>
				<simpara>
					You can upload the work item handler JAR to the Business Central Maven repository as an artifact by using the legacy and current editors.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, select the <emphasis role="strong">Admin</emphasis> icon in the top-right corner of the screen and select <emphasis role="strong">Artifacts</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Upload</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Artifact Upload</emphasis> window, click the <emphasis role="strong">Choose File</emphasis> icon.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Navigate to the location of the work item handler JAR, select the file and click <emphasis role="strong">Open</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the pop-up dialog, click the <emphasis role="strong">Upload</emphasis> icon.
						</simpara>
						<simpara>
							The artifact is uploaded and can now be viewed on the <emphasis role="strong">Artifacts</emphasis> page and referenced.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section remap="_manually_copying_work_item_definitions_to_business_central_maven_repository" xml:id="manually_copying_work_item_definitions_to_business_central_maven_repository">
				<title>Manually copying work item definitions to Business Central Maven repository</title>
				<simpara>
					Business Central automatically creates or reuses the Maven repository folder. By default the location is based on the location of the user launched Red Hat JBoss EAP. For example, the full default path would be <literal>&lt;startup location&gt;/repositories/kie/global</literal>. It is possible to replicate a standard Maven repository folder layout of <literal>&lt;groupId&gt;/&lt;artifactId&gt;/&lt;versionId&gt;/</literal> in this folder and copy work item handler JAR files to this location. For example:
				</simpara>
				
<screen>&lt;startup location&gt;/repositories/kie/global/com/redhat/myworkitem/1.0.0-SNAPSHOT/myworkitems-1.0.0-SNAPSHOT.jar</screen>
				<simpara>
					Any artifacts copied in this fashion are available to Red Hat Process Automation Manager without a server restart. Viewing the artifact in the Business Central <emphasis role="strong">Artifacts</emphasis> page requires clicking <emphasis role="strong">Refresh</emphasis>.
				</simpara>
			</section>
		</chapter>
		<chapter xml:id="registering-custom-tasks-proc-custom-tasks">
			<title>Registering custom tasks</title>
			<simpara>
				Red Hat Process Automation Manager must know how to associate a custom task work item with the code executed by the work item handler. The work item definition file links the custom task with the work item handler by name and Java class. The work item handler’s Java class has to be registered as usable in Red Hat Process Automation Manager.
			</simpara>
			<note>
				<simpara>
					Service repositories contain domain-specific services that provide integration of your processes with different types of systems. Registering a custom task is not necessary when using a service repository because the import process registers the custom task.
				</simpara>
			</note>
			<simpara>
				Red Hat Process Automation Manager creates a WID file by default for projects that contain at least one business process. You can create a WID file when registering a work item handler or edit the default WID file. For more information about WID file locations or formatting, see <xref linkend="custom-tasks-work-item-definitions-con-custom-tasks" />.
			</simpara>
			<simpara>
				For non-service repository deployments, work item handlers can be registered in two ways:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						Registering using the deployment descriptor.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Registering using the spring component registration.
					</simpara>
				</listitem>
			</itemizedlist>
			<section remap="_registering_custom_tasks_using_the_deployment_descriptor_inside_business_central" xml:id="registering_custom_tasks_using_the_deployment_descriptor_inside_business_central">
				<title>Registering custom tasks using the deployment descriptor inside Business Central</title>
				<simpara>
					You can register a custom task work item with the work item handler using the deployment descriptor in Business Central.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis> and select the project name.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the project pane, select <emphasis role="strong">Settings</emphasis> → <emphasis role="strong">Deployments</emphasis> → <emphasis role="strong">Work Item Handlers</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Add Work Item Handler</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Name</emphasis> field, enter the display name for the custom task.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							From the <emphasis role="strong">Resolver</emphasis> list, select <emphasis role="strong">MVEL</emphasis>, <emphasis role="strong">Reflection</emphasis> or <emphasis role="strong">Spring</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the <emphasis role="strong">Value</emphasis> field, enter the value based on the resolver type:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									For MVEL, use the format <literal>new &lt;full Java package&gt;.&lt;Java work item handler class name&gt;()</literal>
								</simpara>
								<simpara>
									Example: <literal>new com.redhat.MyWorkItemWorkItemHandler()</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									For Reflection, use the format <literal>&lt;full Java package&gt;.&lt;Java work item handler class name&gt;</literal>
								</simpara>
								<simpara>
									Example: <literal>com.redhat.MyWorkItemWorkItemHandler</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									For Spring, use the format <literal>&lt;Spring bean identifier&gt;</literal>
								</simpara>
								<simpara>
									Example: <literal>workItemSpringBean</literal>
								</simpara>
							</listitem>
						</itemizedlist>
						<note>
							<simpara>
								The value fields may be filled automatically.
							</simpara>
						</note>
					</listitem>
					<listitem>
						<simpara>
							Click <emphasis role="strong">Save</emphasis> to save your changes
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section remap="_registering_custom_tasks_using_the_deployment_descriptor_outside_business_central" xml:id="registering_custom_tasks_using_the_deployment_descriptor_outside_business_central">
				<title>Registering custom tasks using the deployment descriptor outside Business Central</title>
				<simpara>
					You can register a custom task work item with the work item handler using the deployment descriptor outside Business Central.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Open the file <literal>src/main/resources/META-INF/kie-deployment-descriptor.xml</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Add the following content based on the resolver type under <literal>&lt;work-item-handlers&gt;</literal>:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									For MVEL, add the following:
								</simpara>
								
<screen>&lt;work-item-handler&gt;
  &lt;resolver&gt;mvel&lt;/resolver&gt;
  &lt;identifier&gt;new com.redhat.MyWorkItemWorkItemHandler()&lt;/identifier&gt;
  &lt;parameters/&gt;
  &lt;name&gt;MyWorkItem&lt;/name&gt;
&lt;/work-item-handler&gt;</screen>
							</listitem>
							<listitem>
								<simpara>
									For Reflections, add the following:
								</simpara>
								
<screen>&lt;work-item-handler&gt;
  &lt;resolver&gt;reflection&lt;/resolver&gt;
  &lt;identifier&gt;com.redhat.MyWorkItemWorkItemHandler&lt;/identifier&gt;
  &lt;parameters/&gt;
  &lt;name&gt;MyWorkItem&lt;/name&gt;
&lt;/work-item-handler&gt;</screen>
							</listitem>
							<listitem>
								<simpara>
									For Spring, add the following and ensure the identifier is the identifier of a Spring bean:
								</simpara>
								
<screen>&lt;work-item-handler&gt;
  &lt;resolver&gt;spring&lt;/resolver&gt;
  &lt;identifier&gt;beanIdentifier&lt;/identifier&gt;
  &lt;parameters/&gt;
  &lt;name&gt;MyWorkItem&lt;/name&gt;
&lt;/work-item-handler&gt;</screen>
								<note>
									<simpara>
										If you are using Spring to discover and configure Spring beans, it is possible to use an annotation of the <literal>org.springframework.stereotype.Component</literal> class to automatically register work item handlers.
									</simpara>
									<simpara>
										Within a work item handler, add the annotation <literal>@Component("&lt;Name&gt;")</literal> before the declaration of the work item handler class. For example: <literal>@Component("MyWorkItem") public class MyWorkItemWorkItemHandler extends AbstractLogOrThrowWorkItemHandler {</literal>
									</simpara>
								</note>
							</listitem>
						</itemizedlist>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
		<chapter xml:id="custom-tasks-placing-custom-tasks-proc-custom-tasks">
			<title>Placing custom tasks</title>
			<simpara>
				When a custom task is registered in Red Hat Process Automation Manager it appears in the process designer palette. The custom task is named and categorized according to the entries in its corresponding WID file.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						A custom task is registered in Red Hat Process Automation Manager. For information about registering custom tasks, see <xref linkend="registering-custom-tasks-proc-custom-tasks" />.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						The custom task is named and categorized according to the corresponding WID file. For more information about WID file locations or formatting, see <xref linkend="custom-tasks-work-item-definitions-con-custom-tasks" />.
					</simpara>
				</listitem>
			</itemizedlist>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis> and click a project.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select the business process that you want to add a custom task to.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Select the custom task from the palette and drag it to the BPMN2 diagram.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Optional: Change the custom task attributes. For example, change the data output and input from the corresponding WID file.
					</simpara>
				</listitem>
			</orderedlist>
			<note>
				<simpara>
					If the WID file is not visible in your project and no <literal>Work Item Definition</literal> object is visible in the <emphasis role="strong">Others</emphasis> category of your project, you must register the custom task. For more information about registering a custom task, see <xref linkend="registering-custom-tasks-proc-custom-tasks" />.
				</simpara>
			</note>
		</chapter>
	</part>
	<part xml:id="assembly-process-engine">
		<title>Process engine in Red Hat Process Automation Manager</title>
		<partintro>
			<simpara>
				As a business process analyst or developer, your understanding of the process engine in Red Hat Process Automation Manager can help you design more effective business assets and a more scalable process management architecture. The process engine implements the Business Process Management (BPM) paradigm in Red Hat Process Automation Manager and manages and executes business assets that comprise processes. This document describes concepts and functions of the process engine to consider as you create your business process management system and process services in Red Hat Process Automation Manager.
			</simpara>
		</partintro>
		<chapter xml:id="processengine-overview-con">
			<title>Process engine in Red Hat Process Automation Manager</title>
			<simpara>
				The process engine implements the Business Process Management (BPM) paradigm in Red Hat Process Automation Manager. BPM is a business methodology that enables modeling, measuring, and optimizing processes within an enterprise.
			</simpara>
			<simpara>
				In BPM, a repeatable business process is represented as a workflow diagram. The Business Process Model and Notation (BPMN) specification defines the available elements of this diagram. The process engine implements a large subset of the BPMN 2.0 specification.
			</simpara>
			<simpara>
				With the process engine, business analysts can develop the diagram itself. Developers can implement the business logic of every element of the flow in code, making an executable business process. Users can execute the business process and interact with it as necessary. Analysts can generate metrics that reflect the efficiency of the process.
			</simpara>
			<simpara>
				The workflow diagram consists of a number of nodes. The BPMN specification defines many kinds of nodes, including the following principal types:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						<emphasis>Event</emphasis>: Nodes representing something happening in the process or outside of the process. Typical events are the start and the end of a process. An event can throw messages to other processes and catch such messages. Circles on the diagram represent events.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis>Activity</emphasis>: Nodes representing an action that must be taken (whether automatically or with user involvement). Typical events are a task, which represents an action taken within the process, and a call to a subprocess. Rounded rectangles on the diagram represent activities.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis>Gateway</emphasis>: A branching or merging node. A typical gateway evaluates an expression and, depending on the result, continues to one of several execution paths. Diamond shapes on the diagram represent gateways.
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				When a user starts the process, a process instance is created. The process instance contains a set of data, or <emphasis>context</emphasis>, stored in process variables. The <emphasis>state</emphasis> of a process instance includes all the context data and also the current active node (or, in some cases, several active nodes).
			</simpara>
			<simpara>
				Some of these variables can be initialized when a user starts the process. An activity can read from process variables and write to process variables. A gateway can evaluate process variables to determine the execution path.
			</simpara>
			<simpara>
				For example, a purchase process in a shop can be a business process. The content of the user’s cart can be the initial process context. At the end of execution, the process context can contain the payment confirmation and shipment tracking details.
			</simpara>
			<simpara>
				Optionally, you can use the BPMN data modeler in Business Central to design the model for the data in process variables.
			</simpara>
			<simpara>
				The workflow diagram is represented in code by an XML <emphasis>business process definition</emphasis>. The logic of events, gateways, and subprocess calls are defined within the business process definition.
			</simpara>
			<simpara>
				Some task types (for example, script tasks and the standard decision engine rule task) are implemented in the engine. For other task types, including all custom tasks, when the task must be executed the process engine executes a call using the <emphasis>Work Item Handler API</emphasis>. Code external to the engine can implement this API, providing a flexible mechanism for implementing various tasks.
			</simpara>
			<simpara>
				The process engine includes a number of predefined types of tasks. These types include a script task that runs user Java code, a service task that calls a Java method or a Web Service, a decision task that calls a decision engine service, and other custom tasks (for example, REST and database calls).
			</simpara>
			<simpara>
				Another predefined type of task is a <emphasis>user task</emphasis>, which includes interaction with a user. User tasks in the process can be assigned to users and groups.
			</simpara>
			<simpara>
				The process engine uses the <emphasis>KIE API</emphasis> to interact with other software components. You can run business processes as services on a KIE Server and interact with them using a REST implementation of the KIE API. Alternatively, you can embed business processes in your application and interact with them using KIE API Java calls. In this case, you can run the process engine in any Java environment.
			</simpara>
			<simpara>
				Business Central includes a user interface for users executing human tasks and a form modeler for creating the web forms for human tasks. However, you can also implement a custom user interface that interacts with the process engine using the KIE API.
			</simpara>
			<simpara>
				The process engine supports the following additional features:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						Support for persistence of the process information using the JPA standard. Persistence preserves the state and context (data in process variables) of every process instance, so that they are not lost in case any components are restarted or taken offline for some time. You can use an SQL database engine to store the persistence information.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Pluggable support for transactional execution of process elements using the JTA standard. If you use a JTA transaction manager, every element of the business process starts as a transaction. If the element does not complete, the context of the process instance is restored to the state in which it was before the element started.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Support for custom extension code, including new node types and other process languages.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Support for custom listener classes that are notified about various events.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Support for migrating running process instances to a new version of their process definition
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				The process engine can also be integrated with other independent core services:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						The <emphasis>human task service</emphasis> can manage user tasks when human actors need to participate in the process. It is fully pluggable and the default implementation is based on the WS-HumanTask specification. The human task service manages the lifecycle of the tasks, task lists, task forms, and some more advanced features like escalation, delegation, and rule-based assignments.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						The <emphasis>history log</emphasis> can store all information about the execution of all the processes in the process engine. While runtime persistence stores the current state of all active process instances, you need the history log to ensure access to historic information. The history log contains all current and historic states of all active and completed process instances. You can use the log to query for any information related to the execution of process instances for monitoring and analysis.
					</simpara>
				</listitem>
			</itemizedlist>
			<itemizedlist>
				<title>Additional resources</title>
				<listitem>
					<simpara>
						<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/developing_process_services_in_red_hat_process_automation_manager#bpmn-con_business-processes"><emphasis>Designing business processes using BPMN models</emphasis></link>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/deploying_and_managing_red_hat_process_automation_manager_services#kie-server-commands-con_kie-apis"><emphasis>Interacting with Red Hat Process Automation Manager using KIE APIs</emphasis></link>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<link xlink:href="https://docs.jboss.org/drools/release/7.48.0.Final/kie-api-javadoc/index.html">Java documentation</link> for the public KIE API
					</simpara>
				</listitem>
			</itemizedlist>
		</chapter>
		<chapter xml:id="processengine-core-con_process-engine">
			<title>Core engine API for the process engine</title>
			<simpara>
				The process engine executes business processes. To define the processes, you create <emphasis>business assets</emphasis>, including process definitions and custom tasks.
			</simpara>
			<simpara>
				You can use the Core Engine API to load, execute, and manage processes in the process engine.
			</simpara>
			<simpara>
				Several levels of control are available:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						At the lowest level, you can directly create a <emphasis>KIE base</emphasis> and a <emphasis>KIE session</emphasis>. A KIE base represents all the assets in a business process. A KIE session is an entity in the process engine that runs instances of a business process. This level provides fine-grained control, but requires explicit declaration and configuration of process instances, task handlers, event handlers, and other process engine entities in your code.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						You can use the <emphasis>RuntimeManager</emphasis> class to manage sessions and processes. This class provides sessions for required process instances using a configurable strategy. It automatically configures the interaction between the KIE session and task services. It disposes of process engine entities that are no longer necessary, ensuring optimal use of resources. You can use a fluent API to instantiate <literal>RuntimeManager</literal> with the necessary business assets and to configure its environment.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						You can use the <emphasis>Services API</emphasis> to manage the execution of processes. For example, the deployment service deploys business assets into the engine, forming a <emphasis>deployment unit</emphasis>. The process service runs a process from this deployment unit.
					</simpara>
					<simpara>
						If you want to embed the process engine in your application, the Services API is the most convenient option, because it hides the internal details of configuring and managing the engine.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Finally, you can deploy a <emphasis>KIE Server</emphasis> that loads business assets from KJAR files and runs processes. The KIE Server provides a REST API for loading and managing the processes. You can also use Business Central to manage a KIE Server.
					</simpara>
					<simpara>
						If you use a KIE Server, you do not need to use the Core Engine API. For information about deploying and managing processes on a KIE Server, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/deploying_and_managing_red_hat_process_automation_manager_services#assembly-packaging-deploying"><emphasis>Packaging and deploying a Red Hat Process Automation Manager project</emphasis></link>.
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				For the full reference information for all public process engine API calls, see the <link xlink:href="https://docs.jboss.org/drools/release/7.48.0.Final/kie-api-javadoc/index.html">Java documentation</link>. Other API classes also exist in the code, but they are internal APIs that can be changed in later versions. Use public APIs in applications that you develop and maintain.
			</simpara>
			<section xml:id="kie-base-session-con_process-engine">
				<title>KIE base and KIE session</title>
				<simpara>
					A <emphasis>KIE base</emphasis> contains a reference to all process definitions and other assets relevant for a process. The engine uses this KIE base to look up all information for the process, or for several processes, whenever necessary.
				</simpara>
				<simpara>
					You can load assets into a KIE base from various sources, such as a class path, file system, or process repository. Creating a KIE base is a resource-heavy operation, as it involves loading and parsing assets from various sources. You can dynamically modify the KIE base to add or remove process definitions and other assets at run time.
				</simpara>
				<simpara>
					After you create a KIE base, you can instantiate a <emphasis>KIE session</emphasis> based on this KIE base. Use this KIE session to run processes based on the definitions in the KIE base.
				</simpara>
				<simpara>
					When you use the KIE session to start a process, a new <emphasis>process instance</emphasis> is created. This instance maintains a specific process state. Different instances in the same KIE session can use the same process definition but have different states.
				</simpara>
				<figure>
					<title>KIE base and KIE session in the process engine</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/_images/CoreEngine/KnowledgeBaseAndSession.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>KnowledgeBaseAndSession</phrase>
						</textobject>
					</mediaobject>
				</figure>
				<simpara>
					For example, if you develop an application to process sales orders, you can create one or more process definitions that determine how an order should be processed. When starting the application, you first need to create a KIE base that contains those process definitions. You can then create a session based on this KIE base. When a new sales order comes in, start a new process instance for the order. This process instance contains the state of the process for the specific sales request.
				</simpara>
				<simpara>
					You can create many KIE sessions for the same KIE base and you can create many instances of the process within the same KIE session. Creating a KIE session, and also creating a process instance within the KIE session, uses far fewer resources than creating a KIE base. If you modify a KIE base, all the KIE sessions that use it can use the modifications automatically.
				</simpara>
				<simpara>
					In most simple use cases, you can use a single KIE session to execute all processes. You can also use several sessions if needed. For example, if you want order processing for different customers to be completely independent, you can create a KIE session for each customer. You can also use multiple sessions for scalability reasons.
				</simpara>
				<simpara>
					In typical applications you do not need to create a KIE base or KIE session directly. However, when you use other levels of the process engine API, you can interact with elements of the API that this level defines.
				</simpara>
				<section xml:id="kiebase-con-process-engine">
					<title>KIE base</title>
					<simpara>
						The KIE base includes all process definitions and other assets that your application might need to execute a business process.
					</simpara>
					<simpara>
						To create a KIE base, use a <literal>KieHelper</literal> instance to load processes from various resources, such as the class path or the file system, and to create a new KIE base.
					</simpara>
					<simpara>
						The following code snippet shows how to create a KIE base consisting of only one process definition, which is loaded from from the class path.
					</simpara>
					<formalpara>
						<title>Creating a KIE base containing one process definition</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">  KieHelper kieHelper = new KieHelper();
  KieBase kieBase = kieHelper
    .addResource(ResourceFactory.newClassPathResource("MyProcess.bpmn"))
    .build();</programlisting>
						</para>
					</formalpara>
					<simpara>
						The <literal>ResourceFactory</literal> class has similar methods to load resources from a file, a URL, an InputStream, a Reader, and other sources.
					</simpara>
					<note>
						<simpara>
							This "manual" process of creating a KIE base is simpler than other alternatives, but can make an application hard to maintain. Use other methods of creating a KIE base, such as the <literal>RuntimeManager</literal> class or the Services API, for applications that you expect to develop and maintain over long periods of time.
						</simpara>
					</note>
				</section>
				<section xml:id="kiesession-con-process-engine">
					<title>KIE session</title>
					<simpara>
						After creating and loading the KIE base, you can create a KIE session to interact with the process engine. You can use this session to start and manage processes and to signal events.
					</simpara>
					<simpara>
						The following code snippet creates a session based on the KIE base that you created previously and then starts a process instance, referencing the ID in the process definition.
					</simpara>
					<formalpara>
						<title>Creating a KIE session and starting a process instance</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">KieSession ksession = kbase.newKieSession();
ProcessInstance processInstance = ksession.startProcess("com.sample.MyProcess");</programlisting>
						</para>
					</formalpara>
				</section>
				<section xml:id="processruntime-con-process-engine">
					<title>ProcessRuntime interface</title>
					<simpara>
						The <literal>KieSession</literal> class exposes the <literal>ProcessRuntime</literal> interface, which defines all the session methods for interacting with processes, as the following definition shows.
					</simpara>
					<formalpara>
						<title>Definition of the <literal>ProcessRuntime</literal> interface</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">  /**
	 * Start a new process instance.  Use the process (definition) that
	 * is referenced by the given process ID.
	 *
	 * @param processId  The ID of the process to start
	 * @return the ProcessInstance that represents the instance of the process that was started
	 */
    ProcessInstance startProcess(String processId);

    /**
	 * Start a new process instance.  Use the process (definition) that
	 * is referenced by the given process ID.  You can pass parameters
	 * to the process instance as name-value pairs, and these parameters set
	 * variables of the process instance.
   *
	 * @param processId  the ID of the process to start
   * @param parameters  the process variables to set when starting the process instance
	 * @return the ProcessInstance that represents the instance of the process that was started
     */
    ProcessInstance startProcess(String processId,
                                 Map&lt;String, Object&gt; parameters);

    /**
     * Signals the process engine that an event has occurred. The type parameter defines
     * the type of event and the event parameter can contain additional information
     * related to the event.  All process instances that are listening to this type
     * of (external) event will be notified.  For performance reasons, use this type of
     * event signaling only if one process instance must be able to notify
     * other process instances. For internal events within one process instance, use the
     * signalEvent method that also include the processInstanceId of the process instance
     * in question.
     *
     * @param type the type of event
     * @param event the data associated with this event
     */
    void signalEvent(String type,
                     Object event);

    /**
     * Signals the process instance that an event has occurred. The type parameter defines
     * the type of event and the event parameter can contain additional information
     * related to the event.  All node instances inside the given process instance that
     * are listening to this type of (internal) event will be notified.  Note that the event
     * will only be processed inside the given process instance.  All other process instances
     * waiting for this type of event will not be notified.
     *
     * @param type the type of event
     * @param event the data associated with this event
     * @param processInstanceId the id of the process instance that should be signaled
     */
    void signalEvent(String type,
                     Object event,
                     long processInstanceId);

    /**
     * Returns a collection of currently active process instances.  Note that only process
     * instances that are currently loaded and active inside the process engine are returned.
     * When using persistence, it is likely not all running process instances are loaded
     * as their state is stored persistently.  It is best practice not to use this
     * method to collect information about the state of your process instances but to use
     * a history log for that purpose.
     *
     * @return a collection of process instances currently active in the session
     */
    Collection&lt;ProcessInstance&gt; getProcessInstances();

    /**
     * Returns the process instance with the given ID.  Note that only active process instances
     * are returned. If a process instance has been completed already, this method returns
     * null.
     *
     * @param id the ID of the process instance
     * @return the process instance with the given ID, or null if it cannot be found
     */
    ProcessInstance getProcessInstance(long processInstanceId);

    /**
     * Aborts the process instance with the given ID. If the process instance has been completed
     * (or aborted), or if the process instance cannot be found, this method will throw an
     * IllegalArgumentException.
     *
     * @param id the ID of the process instance
     */
    void abortProcessInstance(long processInstanceId);

    /**
     * Returns the WorkItemManager related to this session. This object can be used to
     * register new WorkItemHandlers or to complete (or abort) WorkItems.
     *
     * @return the WorkItemManager related to this session
     */
    WorkItemManager getWorkItemManager();</programlisting>
						</para>
					</formalpara>
				</section>
				<section xml:id="correlation-keys-con_process-engine">
					<title>Correlation Keys</title>
					<simpara>
						When working with processes, you might need to assign a business identifier to a process instance and then use the identifier to reference the instance without storing the generated instance ID.
					</simpara>
					<simpara>
						To provide such capabilities, the process engine uses the <literal>CorrelationKey</literal> interface, which can define <literal>CorrelationProperties</literal>. A class that implements <literal>CorrelationKey</literal> can have either a single property describing it or a multi-property set. The value of the property or a combination of values of several properties refers to a unique instance.
					</simpara>
					<simpara>
						The <literal>KieSession</literal> class implements the <literal>CorrelationAwareProcessRuntime</literal> interface to support correlation capabilities. This interface exposes the following methods:
					</simpara>
					<formalpara>
						<title>Methods of the <literal>CorrelationAwareProcessRuntime</literal> interface</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">      /**
      * Start a new process instance.  Use the process (definition) that
      * is referenced by the given process ID.  You can pass parameters
      * to the process instance (as name-value pairs), and these parameters set
      * variables of the process instance.
      *
      * @param processId  the ID of the process to start
      * @param correlationKey custom correlation key that can be used to identify the process instance
      * @param parameters  the process variables to set when starting the process instance
      * @return the ProcessInstance that represents the instance of the process that was started
      */
      ProcessInstance startProcess(String processId, CorrelationKey correlationKey, Map&lt;String, Object&gt; parameters);

      /**
      * Create a new process instance (but do not yet start it).  Use the process
      * (definition) that is referenced by the given process ID.
      * You can pass to the process instance (as name-value pairs),
      * and these parameters set variables of the process instance.
      * Use this method if you need a reference to the process instance before actually
      * starting it.  Otherwise, use startProcess.
      *
      * @param processId  the ID of the process to start
      * @param correlationKey custom correlation key that can be used to identify the process instance
      * @param parameters  the process variables to set when creating the process instance
      * @return the ProcessInstance that represents the instance of the process that was created (but not yet started)
      */
      ProcessInstance createProcessInstance(String processId, CorrelationKey correlationKey, Map&lt;String, Object&gt; parameters);

      /**
      * Returns the process instance with the given correlationKey.  Note that only active process instances
      * are returned.  If a process instance has been completed already, this method will return
      * null.
      *
      * @param correlationKey the custom correlation key assigned when the process instance was created
      * @return the process instance identified by the key or null if it cannot be found
      */
      ProcessInstance getProcessInstance(CorrelationKey correlationKey);</programlisting>
						</para>
					</formalpara>
					<simpara>
						Correlation is usually used with long-running processes. You must enable persistence if you want to store correlation information permanently.
					</simpara>
				</section>
			</section>
			<section xml:id="runtime-manager-con_process-engine">
				<title>Runtime manager</title>
				<simpara>
					The <literal>RuntimeManager</literal> class provides a layer in the process engine API that simplifies and empowers its usage. This class encapsulates and manages the KIE base and KIE session, as well as the task service that provides handlers for all tasks in the process. The KIE session and the task service within the runtime manager are already configured to work with each other and you do not need to provide such configuration. For example, you do not need to register a human task handler and to ensure that it is connected to the required service.
				</simpara>
				<simpara>
					The runtime manager manages the KIE session according to a predefined strategy. The following strategies are available:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<emphasis>Singleton</emphasis>: The runtime manager maintains a single <literal>KieSession</literal> and uses it for all the requested processes.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis>Per Request</emphasis>: The runtime manager creates a new <literal>KieSession</literal> for every request.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis>Per Process Instance</emphasis>: The runtime manager maintains mapping between process instance and <literal>KieSession</literal> and always provides the same <literal>KieSession</literal> whenever working with a given process instance.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Regardless of the strategy, the <literal>RuntimeManager</literal> class ensures the same capabilities in initialization and configuration of the process engine components:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<literal>KieSession</literal> instances are loaded with the same factories (either in memory or JPA based).
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Work item handlers are registered on every <literal>KieSession</literal> instance (either loaded from the database or newly created).
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Event listeners (<literal>Process</literal>, <literal>Agenda</literal>, <literal>WorkingMemory</literal>) are registered on every KIE session, whether the session is loaded from the database or newly created.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							The task service is configured with the following required components:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									The JTA transaction manager
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									The same entity manager factory as the one used for <literal>KieSession</literal> instances
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									The <literal>UserGroupCallback</literal> instance that can be configured in the environment
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
				</itemizedlist>
				<simpara>
					The runtime manager also enables disposing the process engine cleanly. It provides dedicated methods to dispose a <literal>RuntimeEngine</literal> instance when it is no longer needed, releasing any resources it might have acquired.
				</simpara>
				<simpara>
					The following code shows the definition of the <literal>RuntimeManager</literal> interface:
				</simpara>
				<formalpara>
					<title>Definition of the <literal>RuntimeManager</literal> interface</title>
					<para>
						
<programlisting language="java" linenumbering="unnumbered">public interface RuntimeManager {

	/**
	 * Returns a &lt;code&gt;RuntimeEngine&lt;/code&gt; instance that is fully initialized:
	 * &lt;ul&gt;
	 * 	&lt;li&gt;KieSession is created or loaded depending on the strategy&lt;/li&gt;
	 * 	&lt;li&gt;TaskService is initialized and attached to the KIE session (through a listener)&lt;/li&gt;
	 * 	&lt;li&gt;WorkItemHandlers are initialized and registered on the KIE session&lt;/li&gt;
	 * 	&lt;li&gt;EventListeners (process, agenda, working memory) are initialized and added to the KIE session&lt;/li&gt;
	 * &lt;/ul&gt;
	 * @param context the concrete implementation of the context that is supported by given &lt;code&gt;RuntimeManager&lt;/code&gt;
	 * @return instance of the &lt;code&gt;RuntimeEngine&lt;/code&gt;
	 */
    RuntimeEngine getRuntimeEngine(Context&lt;?&gt; context);

    /**
     * Unique identifier of the &lt;code&gt;RuntimeManager&lt;/code&gt;
     * @return
     */
    String getIdentifier();

    /**
     * Disposes &lt;code&gt;RuntimeEngine&lt;/code&gt; and notifies all listeners about that fact.
     * This method should always be used to dispose &lt;code&gt;RuntimeEngine&lt;/code&gt; that is not needed
     * anymore. &lt;br/&gt;
     * Do not use KieSession.dispose() used with RuntimeManager as it will break the internal
     * mechanisms of the manager responsible for clear and efficient disposal.&lt;br/&gt;
     * Disposing is not needed if &lt;code&gt;RuntimeEngine&lt;/code&gt; was obtained within an active JTA transaction,
     * if the getRuntimeEngine method was invoked during active JTA transaction, then disposing of
     * the runtime engine will happen automatically on transaction completion.
     * @param runtime
     */
    void disposeRuntimeEngine(RuntimeEngine runtime);

    /**
     * Closes &lt;code&gt;RuntimeManager&lt;/code&gt; and releases its resources. Call this method when
     * a runtime manager is not needed anymore. Otherwise it will still be active and operational.
     */
    void close();

}</programlisting>
					</para>
				</formalpara>
				<simpara>
					The <literal>RuntimeManager</literal> class also provides the <literal>RuntimeEngine</literal> class, which includes methods to get access to underlying process engine components:
				</simpara>
				<formalpara>
					<title>Definition of the <literal>RuntimeEngine</literal> interface</title>
					<para>
						
<programlisting language="java" linenumbering="unnumbered">public interface RuntimeEngine {

	/**
	 * Returns the &lt;code&gt;KieSession&lt;/code&gt; configured for this &lt;code&gt;RuntimeEngine&lt;/code&gt;
	 * @return
	 */
    KieSession getKieSession();

    /**
	 * Returns the &lt;code&gt;TaskService&lt;/code&gt; configured for this &lt;code&gt;RuntimeEngine&lt;/code&gt;
	 * @return
	 */
    TaskService getTaskService();
}</programlisting>
					</para>
				</formalpara>
				<note>
					<simpara>
						An identifier of the <literal>RuntimeManager</literal> class is used as <literal>deploymentId</literal> during runtime execution. For example, the identifier is persisted as <literal>deploymentId</literal> of a <literal>Task</literal> when the <literal>Task</literal> is persisted. The <literal>deploymentID</literal> of a <literal>Task</literal> associates it with the <literal>RuntimeManager</literal> when the <literal>Task</literal> is completed and the process instance is resumed.
					</simpara>
					<simpara>
						The same <literal>deploymentId</literal> is also persisted as <literal>externalId</literal> in history log tables.
					</simpara>
					<simpara>
						If you don’t specify an identifier when creating a <literal>RuntimeManager</literal> instance, a default value is applied, depending on the strategy (for example, <literal>default-per-pinstance</literal> for <literal>PerProcessInstanceRuntimeManager</literal>). That means your application uses the same deployment of the <literal>RuntimeManager</literal> class in its entire lifecycle.
					</simpara>
					<simpara>
						If you maintain multiple runtime managers in your application, you must specify a unique identifier for every <literal>RuntimeManager</literal> instance.
					</simpara>
					<simpara>
						For example, the deployment service maintains multiple runtime managers and uses the GAV value of the KJAR file as an identifier. The same logic is used in Business Central and in KIE Server, because they depend on the deployment service.
					</simpara>
				</note>
				<note>
					<simpara>
						When you need to interact with the process engine or task service from within a handler or a listener, you can use the <literal>RuntimeManager</literal> interface to retrieve the <literal>RuntimeEngine</literal> instance for the given process instance, and then use the <literal>RuntimeEngine</literal> instance to retrieve the <literal>KieSession</literal> or <literal>TaskService</literal> instance. This approach ensures that the proper state of the engine, managed according to the selected strategy, is preserved.
					</simpara>
				</note>
				<section xml:id="runtime-manager-strategies-con_process-engine">
					<title>Runtime manager strategies</title>
					<simpara>
						The <literal>RuntimeManager</literal> class supports the following strategies for managing KIE sessions.
					</simpara>
					<variablelist>
						<varlistentry>
							<term>Singleton strategy</term>
							<listitem>
								<simpara>
									This strategy instructs the runtime manager to maintain a single <literal>RuntimeEngine</literal> instance (and in turn single <literal>KieSession</literal> and <literal>TaskService</literal> instances). Access to the runtime engine is synchronized and, therefore, thread safe, although it comes with a performance penalty due to synchronization.
								</simpara>
								<simpara>
									Use this strategy for simple use cases.
								</simpara>
								<simpara>
									This strategy has the following characteristics:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											It has a small memory footprint, with single instances of the runtime engine and the task service.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											It is simple and compact in design and usage.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											It is a good fit for low-to-medium load on the process engine because of synchronized access.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											In this strategy, because of the single <literal>KieSession</literal> instance, all state objects (such as facts) are directly visible to all process instances and vice versa.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											The strategy is not contextual. When you retrieve instances of <literal>RuntimeEngine</literal> from a singleton <literal>RuntimeManager</literal>, you do not need to take the <literal>Context</literal> instance into account. Usually, you can use <literal>EmptyContext.get()</literal> as the context, although a null argument is acceptable as well.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											In this strategy, the runtime manager keeps track of the ID of the <literal>KieSession</literal>, so that the same session remains in use after a <literal>RuntimeManager</literal> restart. The ID is stored as a serialized file in a temporary location in the file system that, depending on the environment, can be one of the following directories:
										</simpara>
										<itemizedlist>
											<listitem>
												<simpara>
													The value of the <literal>jbpm.data.dir</literal> system property
												</simpara>
											</listitem>
											<listitem>
												<simpara>
													The value of the <literal>jboss.server.data.dir</literal> system property
												</simpara>
											</listitem>
											<listitem>
												<simpara>
													The value of the <literal>java.io.tmpdir</literal> system property
												</simpara>
											</listitem>
										</itemizedlist>
									</listitem>
								</itemizedlist>
								<warning>
									<simpara>
										A combination of the Singleton strategy and the EJB Timer Scheduler might raise Hibernate issues under load. Do not use this combination in production applications. The EJB Timer Scheduler is the default scheduler in the KIE Server.
									</simpara>
								</warning>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>Per request strategy</term>
							<listitem>
								<simpara>
									This strategy instructs the runtime manager to provide a new instance of <literal>RuntimeEngine</literal> for every request. One or more invocations of the process engine within a single transaction are considered a single request.
								</simpara>
								<simpara>
									The same instance of <literal>RuntimeEngine</literal> must be used within a single transaction to ensure correctness of state. Otherwise, an operation completed in one call would not be visible in the next call.
								</simpara>
								<simpara>
									This strategy is stateless, as process state is preserved only within the request. When a request is completed, the <literal>RuntimeEngine</literal> instance is permanently destroyed. If persistence is used, information related to the KIE session is removed from the persistence database as well.
								</simpara>
								<simpara>
									This strategy has the following characteristics:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											It provides completely isolated process engine and task service operations for every request.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											It is completely stateless, because facts are stored only for the duration of the request.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											It is a good fit for high-load, stateless processes, where no facts or timers must be preserved between requests.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											In this strategy, the KIE session is only available during the life of a request and is destroyed at the end of the request.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											The strategy is not contextual. When you retrieve instances of <literal>RuntimeEngine</literal> from a per-request <literal>RuntimeManager</literal>, you do not need to take the <literal>Context</literal> instance into account. Usually, you can use <literal>EmptyContext.get()</literal> as the context, although a null argument is acceptable as well.
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>Per process instance strategy</term>
							<listitem>
								<simpara>
									This strategy instructs <literal>RuntimeManager</literal> to maintain a strict relationship between a KIE session and a process instance. Each <literal>KieSession</literal> is available as long as the <literal>ProcessInstance</literal> to which it belongs is active.
								</simpara>
								<simpara>
									This strategy provides the most flexible approach for using advanced capabilities of the process engine, such as rule evaluation and isolation between process instances. It maximizes performance and reduces potential bottlenecks introduced by synchronization. At the same time, unlike the request strategy, it reduces the number of KIE sessions to the actual number of process instances, rather than the total number of requests.
								</simpara>
								<simpara>
									This strategy has the following characteristics:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											It provides isolation for every process instance.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											It maintains a strict relationship between <literal>KieSession</literal> and <literal>ProcessInstance</literal> to ensure that it always delivers the same <literal>KieSession</literal> for a given <literal>ProcessInstance</literal>.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											It merges the lifecycle of <literal>KieSession</literal> with <literal>ProcessInstance</literal>, and both are disposed when the process instance completes or aborts.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											It enables maintenance of data, such as facts and timers, in the scope of the process instance. Only the process instance has access to the data.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											It introduces some overhead because of the need to look up and load the <literal>KieSession</literal> for the process instance.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											It validates every usage of a <literal>KieSession</literal> so it cannot be used for other process instances. An exception is thrown if another process instance uses the same <literal>KieSession</literal>.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											The strategy is contextual and accepts the following context instances:
										</simpara>
										<itemizedlist>
											<listitem>
												<simpara>
													<literal>EmptyContext</literal> or null: Used when starting a process instance because no process instance ID is available yet
												</simpara>
											</listitem>
											<listitem>
												<simpara>
													<literal>ProcessInstanceIdContext</literal>: Used after the process instance is created
												</simpara>
											</listitem>
											<listitem>
												<simpara>
													<literal>CorrelationKeyContext</literal>: Used as an alternative to <literal>ProcessInstanceIdContext</literal> to use a custom (business) key instead of the process instance ID
												</simpara>
											</listitem>
										</itemizedlist>
									</listitem>
								</itemizedlist>
							</listitem>
						</varlistentry>
					</variablelist>
				</section>
				<section xml:id="runtime-manager-usage-con_process-engine">
					<title>Typical usage scenario for the runtime manager</title>
					<simpara>
						The typical usage scenario for the runtime manager consists of the following stages:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								At application startup time, complete the following stage:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										Build a <literal>RuntimeManager</literal> instance and keep it for the entire lifetime of the application, as it is thread-safe and can be accessed concurrently.
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								At request time, complete the following stages:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										Get <literal>RuntimeEngine</literal> from the <literal>RuntimeManager</literal>, using the proper context instance as determined by the strategy that you configured for the <literal>RuntimeManager</literal> class.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Get the <literal>KieSession</literal> and <literal>TaskService</literal> objects from the <literal>RuntimeEngine</literal>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Use the <literal>KieSession</literal> and <literal>TaskService</literal> objects for operations such as <literal>startProcess</literal> or <literal>completeTask</literal>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										After completing processing, dispose <literal>RuntimeEngine</literal> using the <literal>RuntimeManager.disposeRuntimeEngine</literal> method.
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								At application shutdown time, complete the following stage:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										Close the <literal>RuntimeManager</literal> instance.
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
					</itemizedlist>
					<note>
						<simpara>
							When <literal>RuntimeEngine</literal> is obtained from <literal>RuntimeManager</literal> within an active JTA transaction, you do not need to dispose <literal>RuntimeEngine</literal> at the end, as <literal>RuntimeManager</literal> automatically disposes the <literal>RuntimeEngine</literal> on transaction completion (regardless of the completion status: commit or rollback).
						</simpara>
					</note>
					<simpara>
						The following example shows how you can build a <literal>RuntimeManager</literal> instance and get a <literal>RuntimeEngine</literal> instance (that encapsulates <literal>KieSession</literal> and <literal>TaskService</literal> classes) from it:
					</simpara>
					<formalpara>
						<title>Building a <literal>RuntimeManager</literal> instance and then getting <literal>RuntimeEngine</literal> and <literal>KieSession</literal></title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">    // First, configure the environment to be used by RuntimeManager
    RuntimeEnvironment environment = RuntimeEnvironmentBuilder.Factory.get()
    .newDefaultInMemoryBuilder()
    .addAsset(ResourceFactory.newClassPathResource("BPMN2-ScriptTask.bpmn2"), ResourceType.BPMN2)
    .get();

    // Next, create the RuntimeManager - in this case the singleton strategy is chosen
    RuntimeManager manager = RuntimeManagerFactory.Factory.get().newSingletonRuntimeManager(environment);

    // Then get RuntimeEngine from the runtime manager, using an empty context because singleton does not keep track
    // of runtime engine as there is only one
    RuntimeEngine runtime = manager.getRuntimeEngine(EmptyContext.get());

    // Get the KieSession from the RuntimeEngine - already initialized with all handlers, listeners, and other requirements
    // configured on the environment
    KieSession ksession = runtimeEngine.getKieSession();

    // Add invocations of the process engine here,
    // for example, ksession.startProcess(processId);

    // Finally, dispose the runtime engine
    manager.disposeRuntimeEngine(runtimeEngine);</programlisting>
						</para>
					</formalpara>
					<simpara>
						This example provides the simplest, or minimal, way of using <literal>RuntimeManager</literal> and <literal>RuntimeEngine</literal> classes. It has the following characteristics:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								The <literal>KieSession</literal> instance is created in memory, using the <literal>newDefaultInMemoryBuilder</literal> builder.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								A single process, which is added as an asset, is available for execution.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								The <literal>TaskService</literal> class is configured and attached to the <literal>KieSession</literal> instance through the <literal>LocalHTWorkItemHandler</literal> interface to support user task capabilities within processes.
							</simpara>
						</listitem>
					</itemizedlist>
				</section>
				<section xml:id="runtime-environment-con_process-engine">
					<title>Runtime environment configuration object</title>
					<simpara>
						The <literal>RuntimeManager</literal> class encapsulates internal process engine complexity, such as creating, disposing, and registering handlers.
					</simpara>
					<simpara>
						It also provides fine-grained control over process engine configuration. To set this configuration, you must create a <literal>RuntimeEnvironment</literal> object and then use it to create the <literal>RuntimeManager</literal> object.
					</simpara>
					<simpara>
						The following definition shows the methods available in the <literal>RuntimeEnvironment</literal> interface:
					</simpara>
					<formalpara>
						<title>Methods in the <literal>RuntimeEnvironment</literal> interface</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">  public interface RuntimeEnvironment {

	/**
	 * Returns &lt;code&gt;KieBase&lt;/code&gt; that is to be used by the manager
	 * @return
	 */
    KieBase getKieBase();

    /**
     * KieSession environment that is to be used to create instances of &lt;code&gt;KieSession&lt;/code&gt;
     * @return
     */
    Environment getEnvironment();

    /**
     * KieSession configuration that is to be used to create instances of &lt;code&gt;KieSession&lt;/code&gt;
     * @return
     */
    KieSessionConfiguration getConfiguration();

    /**
     * Indicates if persistence is to be used for the KieSession instances
     * @return
     */
    boolean usePersistence();

    /**
     * Delivers a concrete implementation of &lt;code&gt;RegisterableItemsFactory&lt;/code&gt; to obtain handlers and listeners
     * that is to be registered on instances of &lt;code&gt;KieSession&lt;/code&gt;
     * @return
     */
    RegisterableItemsFactory getRegisterableItemsFactory();

    /**
     * Delivers a concrete implementation of &lt;code&gt;UserGroupCallback&lt;/code&gt; that is to be registered on instances
     * of &lt;code&gt;TaskService&lt;/code&gt; for managing users and groups.
     * @return
     */
    UserGroupCallback getUserGroupCallback();

    /**
     * Delivers a custom class loader that is to be used by the process engine and task service instances
     * @return
     */
    ClassLoader getClassLoader();

    /**
     * Closes the environment, permitting closing of all dependent components such as ksession factories
     */
    void close();</programlisting>
						</para>
					</formalpara>
				</section>
				<section xml:id="runtime-environment-builder-con_process-engine">
					<title>Runtime environment builder</title>
					<simpara>
						To create an instance of <literal>RuntimeEnvironment</literal> that contains the required data, use the <literal>RuntimeEnvironmentBuilder</literal> class. This class provides a fluent API to configure a <literal>RuntimeEnvironment</literal> instance with predefined settings.
					</simpara>
					<simpara>
						The following definition shows the methods in the <literal>RuntimeEnvironmentBuilder</literal> interface:
					</simpara>
					<formalpara>
						<title>Methods in the <literal>RuntimeEnvironmentBuilder</literal> interface</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">public interface RuntimeEnvironmentBuilder {

	public RuntimeEnvironmentBuilder persistence(boolean persistenceEnabled);

	public RuntimeEnvironmentBuilder entityManagerFactory(Object emf);

	public RuntimeEnvironmentBuilder addAsset(Resource asset, ResourceType type);

	public RuntimeEnvironmentBuilder addEnvironmentEntry(String name, Object value);

	public RuntimeEnvironmentBuilder addConfiguration(String name, String value);

	public RuntimeEnvironmentBuilder knowledgeBase(KieBase kbase);

	public RuntimeEnvironmentBuilder userGroupCallback(UserGroupCallback callback);

	public RuntimeEnvironmentBuilder registerableItemsFactory(RegisterableItemsFactory factory);

	public RuntimeEnvironment get();

	public RuntimeEnvironmentBuilder classLoader(ClassLoader cl);

	public RuntimeEnvironmentBuilder schedulerService(Object globalScheduler);</programlisting>
						</para>
					</formalpara>
					<simpara>
						Use the <literal>RuntimeEnvironmentBuilderFactory</literal> class to obtain instances of <literal>RuntimeEnvironmentBuilder</literal>. Along with empty instances with no settings, you can get builders with several preconfigured sets of configuration options for the runtime manager.
					</simpara>
					<simpara>
						The following definition shows the methods in the <literal>RuntimeEnvironmentBuilderFactory</literal> interface:
					</simpara>
					<formalpara>
						<title>Methods in the <literal>RuntimeEnvironmentBuilderFactory</literal> interface</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">public interface RuntimeEnvironmentBuilderFactory {

	/**
     * Provides a completely empty &lt;code&gt;RuntimeEnvironmentBuilder&lt;/code&gt; instance to manually
     * set all required components instead of relying on any defaults.
     * @return new instance of &lt;code&gt;RuntimeEnvironmentBuilder&lt;/code&gt;
     */
    public RuntimeEnvironmentBuilder newEmptyBuilder();

    /**
     * Provides default configuration of &lt;code&gt;RuntimeEnvironmentBuilder&lt;/code&gt; that is based on:
     * &lt;ul&gt;
     * 	&lt;li&gt;DefaultRuntimeEnvironment&lt;/li&gt;
     * &lt;/ul&gt;
     * @return new instance of &lt;code&gt;RuntimeEnvironmentBuilder&lt;/code&gt; that is already preconfigured with defaults
     *
     * @see DefaultRuntimeEnvironment
     */
    public RuntimeEnvironmentBuilder newDefaultBuilder();

    /**
     * Provides default configuration of &lt;code&gt;RuntimeEnvironmentBuilder&lt;/code&gt; that is based on:
     * &lt;ul&gt;
     * 	&lt;li&gt;DefaultRuntimeEnvironment&lt;/li&gt;
     * &lt;/ul&gt;
     * but does not have persistence for the process engine configured so it will only store process instances in memory
     * @return new instance of &lt;code&gt;RuntimeEnvironmentBuilder&lt;/code&gt; that is already preconfigured with defaults
     *
     * @see DefaultRuntimeEnvironment
     */
    public RuntimeEnvironmentBuilder newDefaultInMemoryBuilder();

    /**
     * Provides default configuration of &lt;code&gt;RuntimeEnvironmentBuilder&lt;/code&gt; that is based on:
     * &lt;ul&gt;
     * 	&lt;li&gt;DefaultRuntimeEnvironment&lt;/li&gt;
     * &lt;/ul&gt;
     * This method is tailored to work smoothly with KJAR files
     * @param groupId group id of kjar
     * @param artifactId artifact id of kjar
     * @param version version number of kjar
     * @return new instance of &lt;code&gt;RuntimeEnvironmentBuilder&lt;/code&gt; that is already preconfigured with defaults
     *
     * @see DefaultRuntimeEnvironment
     */
    public RuntimeEnvironmentBuilder newDefaultBuilder(String groupId, String artifactId, String version);

    /**
     * Provides default configuration of &lt;code&gt;RuntimeEnvironmentBuilder&lt;/code&gt; that is based on:
     * &lt;ul&gt;
     * 	&lt;li&gt;DefaultRuntimeEnvironment&lt;/li&gt;
     * &lt;/ul&gt;
     * This method is tailored to work smoothly with KJAR files and use the kbase and ksession settings in the KJAR
     * @param groupId group id of kjar
     * @param artifactId artifact id of kjar
     * @param version version number of kjar
     * @param kbaseName name of the kbase defined in kmodule.xml stored in kjar
     * @param ksessionName name of the ksession define in kmodule.xml stored in kjar
     * @return new instance of &lt;code&gt;RuntimeEnvironmentBuilder&lt;/code&gt; that is already preconfigured with defaults
     *
     * @see DefaultRuntimeEnvironment
     */
    public RuntimeEnvironmentBuilder newDefaultBuilder(String groupId, String artifactId, String version, String kbaseName, String ksessionName);

    /**
     * Provides default configuration of &lt;code&gt;RuntimeEnvironmentBuilder&lt;/code&gt; that is based on:
     * &lt;ul&gt;
     * 	&lt;li&gt;DefaultRuntimeEnvironment&lt;/li&gt;
     * &lt;/ul&gt;
     * This method is tailored to work smoothly with KJAR files and use the release ID defined in the KJAR
     * @param releaseId &lt;code&gt;ReleaseId&lt;/code&gt; that described the kjar
     * @return new instance of &lt;code&gt;RuntimeEnvironmentBuilder&lt;/code&gt; that is already preconfigured with defaults
     *
     * @see DefaultRuntimeEnvironment
     */
    public RuntimeEnvironmentBuilder newDefaultBuilder(ReleaseId releaseId);

    /**
     * Provides default configuration of &lt;code&gt;RuntimeEnvironmentBuilder&lt;/code&gt; that is based on:
     * &lt;ul&gt;
     * 	&lt;li&gt;DefaultRuntimeEnvironment&lt;/li&gt;
     * &lt;/ul&gt;
		 * This method is tailored to work smoothly with KJAR files and use the kbase, ksession, and release ID settings in the KJAR
     * @param releaseId &lt;code&gt;ReleaseId&lt;/code&gt; that described the kjar
     * @param kbaseName name of the kbase defined in kmodule.xml stored in kjar
     * @param ksessionName name of the ksession define in kmodule.xml stored in kjar
     * @return new instance of &lt;code&gt;RuntimeEnvironmentBuilder&lt;/code&gt; that is already preconfigured with defaults
     *
     * @see DefaultRuntimeEnvironment
     */
    public RuntimeEnvironmentBuilder newDefaultBuilder(ReleaseId releaseId, String kbaseName, String ksessionName);

    /**
     * Provides default configuration of &lt;code&gt;RuntimeEnvironmentBuilder&lt;/code&gt; that is based on:
     * &lt;ul&gt;
     * 	&lt;li&gt;DefaultRuntimeEnvironment&lt;/li&gt;
     * &lt;/ul&gt;
     * It relies on KieClasspathContainer that requires the presence of kmodule.xml in the META-INF folder which
     * defines the kjar itself.
     * Expects to use default kbase and ksession from kmodule.
     * @return new instance of &lt;code&gt;RuntimeEnvironmentBuilder&lt;/code&gt; that is already preconfigured with defaults
     *
     * @see DefaultRuntimeEnvironment
     */
    public RuntimeEnvironmentBuilder newClasspathKmoduleDefaultBuilder();

    /**
     * Provides default configuration of &lt;code&gt;RuntimeEnvironmentBuilder&lt;/code&gt; that is based on:
     * &lt;ul&gt;
     * 	&lt;li&gt;DefaultRuntimeEnvironment&lt;/li&gt;
     * &lt;/ul&gt;
		 * It relies on KieClasspathContainer that requires the presence of kmodule.xml in the META-INF folder which
     * defines the kjar itself.
     * @param kbaseName name of the kbase defined in kmodule.xml
     * @param ksessionName name of the ksession define in kmodule.xml
     * @return new instance of &lt;code&gt;RuntimeEnvironmentBuilder&lt;/code&gt; that is already preconfigured with defaults
     *
     * @see DefaultRuntimeEnvironment
     */
    public RuntimeEnvironmentBuilder newClasspathKmoduleDefaultBuilder(String kbaseName, String ksessionName);</programlisting>
						</para>
					</formalpara>
					<simpara>
						The runtime manager also provides access to a <literal>TaskService</literal> object as an integrated component of a <literal>RuntimeEngine</literal> object, configured to communicate with the KIE session. If you use one of the default builders, the following configuration settings for the task service are present:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								The persistence unit name is set to <literal>org.jbpm.persistence.jpa</literal> (for both process engine and task service).
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								The human task handler is registered on the KIE session.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								The JPA-based history log event listener is registered on the KIE session.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								An event listener to trigger rule task evaluation (<literal>fireAllRules</literal>) is registered on the KIE session.
							</simpara>
						</listitem>
					</itemizedlist>
				</section>
				<section xml:id="registering-handlers-con_process-engine">
					<title>Registration of handlers and listeners for runtime engines</title>
					<simpara>
						If you use the runtime manager API, the runtime engine object represents the process engine.
					</simpara>
					<simpara>
						To extend runtime engines with your own handlers or listeners, you can implement the <literal>RegisterableItemsFactory</literal> interface and then include it in the runtime environment using the <literal>RuntimeEnvironmentBuilder.registerableItemsFactory()</literal> method. Then the runtime manager automatically adds the handlers or listeners to every runtime engine it creates.
					</simpara>
					<simpara>
						The following definition shows the methods in the <literal>RegisterableItemsFactory</literal> interface:
					</simpara>
					<formalpara>
						<title>Methods in the <literal>RegisterableItemsFactory</literal> interface</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">	/**
	 * Returns new instances of &lt;code&gt;WorkItemHandler&lt;/code&gt; that will be registered on &lt;code&gt;RuntimeEngine&lt;/code&gt;
	 * @param runtime provides &lt;code&gt;RuntimeEngine&lt;/code&gt; in case handler need to make use of it internally
	 * @return map of handlers to be registered - in case of no handlers empty map shall be returned.
	 */
    Map&lt;String, WorkItemHandler&gt; getWorkItemHandlers(RuntimeEngine runtime);

    /**
	 * Returns new instances of &lt;code&gt;ProcessEventListener&lt;/code&gt; that will be registered on &lt;code&gt;RuntimeEngine&lt;/code&gt;
	 * @param runtime provides &lt;code&gt;RuntimeEngine&lt;/code&gt; in case listeners need to make use of it internally
	 * @return list of listeners to be registered - in case of no listeners empty list shall be returned.
	 */
    List&lt;ProcessEventListener&gt; getProcessEventListeners(RuntimeEngine runtime);

    /**
	 * Returns new instances of &lt;code&gt;AgendaEventListener&lt;/code&gt; that will be registered on &lt;code&gt;RuntimeEngine&lt;/code&gt;
	 * @param runtime provides &lt;code&gt;RuntimeEngine&lt;/code&gt; in case listeners need to make use of it internally
	 * @return list of listeners to be registered - in case of no listeners empty list shall be returned.
	 */
    List&lt;AgendaEventListener&gt; getAgendaEventListeners(RuntimeEngine runtime);

    /**
	 * Returns new instances of &lt;code&gt;WorkingMemoryEventListener&lt;/code&gt; that will be registered on &lt;code&gt;RuntimeEngine&lt;/code&gt;
	 * @param runtime provides &lt;code&gt;RuntimeEngine&lt;/code&gt; in case listeners need to make use of it internally
	 * @return list of listeners to be registered - in case of no listeners empty list shall be returned.
	 */
    List&lt;WorkingMemoryEventListener&gt; getWorkingMemoryEventListeners(RuntimeEngine runtime);</programlisting>
						</para>
					</formalpara>
					<simpara>
						The process engine provides default implementations of <literal>RegisterableItemsFactory</literal>. You can extend these implementations to define custom handlers and listeners.
					</simpara>
					<simpara>
						The following available implementations might be useful:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<literal>org.jbpm.runtime.manager.impl.SimpleRegisterableItemsFactory</literal>: The simplest possible implementation. It does not have any predefined content and uses reflection to produce instances of handlers and listeners based on given class names.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>org.jbpm.runtime.manager.impl.DefaultRegisterableItemsFactory</literal>: An extension of the Simple implementation that introduces the same defaults as the default runtime environment builder and still provides the same capabilities as the Simple implementation.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>org.jbpm.runtime.manager.impl.cdi.InjectableRegisterableItemsFactory</literal>: An extension of the Default implementation that is tailored for CDI environments and provides a CDI style approach to finding handlers and listeners using producers.
							</simpara>
						</listitem>
					</itemizedlist>
					<section xml:id="registering-handlers-file-proc_process-engine">
						<title>Registering work item handlers using a file</title>
						<simpara>
							You can register simple work item handlers, which are stateless or rely on the <literal>KieSession</literal> state, by defining them in the <literal>CustomWorkItem.conf</literal> file and placing the file on the class path.
						</simpara>
						<orderedlist numeration="arabic">
							<title>Procedure</title>
							<listitem>
								<simpara>
									Create a file named <literal>drools.session.conf</literal> in the <literal>META-INF</literal> subdirectory of the root of the class path. For web applications the directory is <literal>WEB-INF/classes/META-INF</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Add the following line to the <literal>drools.session.conf</literal> file:
								</simpara>
								
<screen>drools.workItemHandlers = CustomWorkItemHandlers.conf</screen>
							</listitem>
							<listitem>
								<simpara>
									Create a file named <literal>CustomWorkItemHandlers.conf</literal> in the same directory.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									In the <literal>CustomWorkItemHandlers.conf</literal> file, define custom work item handlers using the MVEL style, similar to the following example:
								</simpara>
								
<screen>[
  "Log": new org.jbpm.process.instance.impl.demo.SystemOutWorkItemHandler(),
  "WebService": new org.jbpm.process.workitem.webservice.WebServiceWorkItemHandler(ksession),
  "Rest": new org.jbpm.process.workitem.rest.RESTWorkItemHandler(),
  "Service Task" : new org.jbpm.process.workitem.bpmn2.ServiceTaskHandler(ksession)
]</screen>
							</listitem>
						</orderedlist>
						<formalpara>
							<title>Result</title>
							<para>
								The work item handlers that you listed are registered for any KIE session created by the application, regardless of whether the application uses the runtime manager API.
							</para>
						</formalpara>
					</section>
					<section xml:id="registering-handlers-cdi-con_process-engine">
						<title>Registration of handlers and listeners in a CDI environment</title>
						<simpara>
							If your application uses the runtime manager API and runs in a CDI environment, your classes can implement the dedicated producer interfaces to provide custom work item handlers and event listeners to all runtime engines.
						</simpara>
						<simpara>
							To create a work item handler, you must implement the <literal>WorkItemHandlerProducer</literal> interface.
						</simpara>
						<formalpara>
							<title>Definition of the <literal>WorkItemHandlerProducer</literal> interface</title>
							<para>
								
<programlisting language="java" linenumbering="unnumbered">public interface WorkItemHandlerProducer {

    /**
     * Returns a map of work items (key = work item name, value=  work item handler instance)
     * to be registered on the KieSession
     * &lt;br/&gt;
     * The following parameters are accepted:
     * &lt;ul&gt;
     *  &lt;li&gt;ksession&lt;/li&gt;
     *  &lt;li&gt;taskService&lt;/li&gt;
     *  &lt;li&gt;runtimeManager&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @param identifier - identifier of the owner - usually RuntimeManager that allows the producer to filter out
     * and provide valid instances for given owner
     * @param params - the owner might provide some parameters, usually KieSession, TaskService, RuntimeManager instances
     * @return map of work item handler instances (recommendation is to always return new instances when this method is invoked)
     */
    Map&lt;String, WorkItemHandler&gt; getWorkItemHandlers(String identifier, Map&lt;String, Object&gt; params);
}</programlisting>
							</para>
						</formalpara>
						<simpara>
							To create an event listener, you must implement the <literal>EventListenerProducer</literal> interface. Annotate the event listener producer with the proper qualifier to indicate the type of listeners that it provides. Use one of the following annotations:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>@Process</literal> for <literal>ProcessEventListener</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>@Agenda</literal> for <literal>AgendaEventListener</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>@WorkingMemory</literal> for <literal>WorkingMemoryEventListener</literal>
								</simpara>
							</listitem>
						</itemizedlist>
						<formalpara>
							<title>Definition of the <literal>EventListenerProducer</literal> interface</title>
							<para>
								
<programlisting language="java" linenumbering="unnumbered">public interface EventListenerProducer&lt;T&gt; {

    /**
     * Returns a list of instances for given (T) type of listeners
     * &lt;br/&gt;
     * The following parameters are accepted:
     * &lt;ul&gt;
     *  &lt;li&gt;ksession&lt;/li&gt;
     *  &lt;li&gt;taskService&lt;/li&gt;
     *  &lt;li&gt;runtimeManager&lt;/li&gt;
     * &lt;/ul&gt;
     * @param identifier - identifier of the owner - usually RuntimeManager that allows the producer to filter out
     * and provide valid instances for given owner
     * @param params - the owner might provide some parameters, usually KieSession, TaskService, RuntimeManager instances
     * @return list of listener instances (recommendation is to always return new instances when this method is invoked)
     */
    List&lt;T&gt; getEventListeners(String identifier, Map&lt;String, Object&gt;  params);
}</programlisting>
							</para>
						</formalpara>
						<simpara>
							Package your implementations of these interfaces as a bean archive by including <literal>beans.xml</literal> in the <literal>META-INF</literal> subdirectory. Place the bean archive on the application class path, for example, in <literal>WEB-INF/lib</literal> for a web application. The CDI-based runtime manager discovers the packages and registers the work item handlers and event listeners in every <literal>KieSession</literal> that it creates or loads from the data store.
						</simpara>
						<simpara>
							The process engine provides certain parameters to the producers to enable stateful and advanced operation. For example, the handlers or listeners can use the parameters to signal the process engine or the process instance in case of an error. The process engine provides the following components as parameters:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>KieSession</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>TaskService</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>RuntimeManager</literal>
								</simpara>
							</listitem>
						</itemizedlist>
						<simpara>
							In addition, the identifier of the <literal>RuntimeManager</literal> class instance is provided as a parameter. You can apply filtering to the identifier to decide whether this <literal>RuntimeManager</literal> instance receives the handlers and listeners.
						</simpara>
					</section>
				</section>
			</section>
			<section xml:id="services-con_process-engine">
				<title>Services in the process engine</title>
				<simpara>
					The process engine provides a set of high-level services, running on top of the runtime manager API.
				</simpara>
				<simpara>
					The services provide the most convenient way to embed the process engine in your application. The KIE Server also uses these services internally.
				</simpara>
				<simpara>
					When you use services, you do not need to implement your own handling of the runtime manager, runtime engines, sessions, and other process engine entities. However, you can access the underlying <literal>RuntimeManager</literal> objects through the services when necessary.
				</simpara>
				<note>
					<simpara>
						If you use the EJB remote client for the services API, the <literal>RuntimeManager</literal> objects are not available, because they would not operate correctly on the client side after serialization.
					</simpara>
				</note>
				<section xml:id="services-modules-ref_process-engine">
					<title>Modules for process engine services</title>
					<simpara>
						The process engine services are provided as a set of modules. These modules are grouped by their framework dependencies. You can choose the suitable modules and use only these modules, without making your application dependent on the frameworks that other modules use.
					</simpara>
					<simpara>
						The following modules are available:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<literal>jbpm-services-api</literal>: Only API classes and interfaces
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>jbpm-kie-services</literal>: A code implementation of the services API in pure Java without any framework dependencies
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>jbpm-services-cdi</literal>: A CDI wrapper on top of the core services implementation
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>jbpm-services-ejb-api</literal>: An extension of the services API to support EJB requirements
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>jbpm-services-ejb-impl</literal>: EJB wrappers on top of the core services implementation
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>jbpm-services-ejb-timer</literal>: A scheduler service based on the EJB timer service to support time-based operations, such as timer events and deadlines
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>jbpm-services-ejb-client</literal>: An EJB remote client implementation, currently supporting only Red Hat JBoss EAP
							</simpara>
						</listitem>
					</itemizedlist>
				</section>
				<section xml:id="service-deployment-con_process-engine">
					<title>Deployment service</title>
					<simpara>
						The deployment service deploys and undeploys units in the process engine.
					</simpara>
					<simpara>
						A <emphasis>deployment unit</emphasis> represents the contents of a KJAR file. A deployment unit includes business assets, such as process definitions, rules, forms, and data models. After deploying the unit you can execute the processes it defines. You can also query the available deployment units.
					</simpara>
					<simpara>
						Every deployment unit has a unique identifier string, <literal>deploymentId</literal>, also known as <literal>deploymentUnitId</literal>. You can use this identifier to apply any service actions to the deployment unit.
					</simpara>
					<simpara>
						In a typical use case for this service, you can load and unload multiple KJARs at the same time and, when necessary, execute processes simultaneously.
					</simpara>
					<simpara>
						The following code sample shows simple use of the deployment service.
					</simpara>
					<formalpara>
						<title>Using the deployment service</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">// Create deployment unit by providing the GAV of the KJAR
DeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);
// Get the deploymentId for the deployed unit
String deploymentId = deploymentUnit.getIdentifier();
// Deploy the unit
deploymentService.deploy(deploymentUnit);
// Retrieve the deployed unit
DeployedUnit deployed = deploymentService.getDeployedUnit(deploymentId);
// Get the runtime manager
RuntimeManager manager = deployed.getRuntimeManager();</programlisting>
						</para>
					</formalpara>
					<simpara>
						The following definition shows the complete <literal>DeploymentService</literal> interface:
					</simpara>
					<formalpara>
						<title>Definition of the <literal>DeploymentService</literal> interface</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">public interface DeploymentService {

    void deploy(DeploymentUnit unit);

    void undeploy(DeploymentUnit unit);

    RuntimeManager getRuntimeManager(String deploymentUnitId);

    DeployedUnit getDeployedUnit(String deploymentUnitId);

    Collection&lt;DeployedUnit&gt; getDeployedUnits();

    void activate(String deploymentId);

    void deactivate(String deploymentId);

    boolean isDeployed(String deploymentUnitId);
}</programlisting>
						</para>
					</formalpara>
				</section>
				<section xml:id="service-definition-con_process-engine">
					<title>Definition service</title>
					<simpara>
						When you deploy a process definition using the deployment service, the definition service automatically scans the definition, parses the process, and extracts the information that the process engine requires.
					</simpara>
					<simpara>
						You can use the definition service API to retrieve information about the process definition. The service extracts this information directly from the BPMN2 process definition. The following information is available:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<emphasis>Process definition</emphasis> such as ID, name, and description
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis>Process variables</emphasis> including the name and type of every variable
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis>Reusable subprocesses</emphasis> used in the process (if any)
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis>Service tasks</emphasis> that represent domain-specific activities
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis>User tasks</emphasis> including assignment information
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis>Task data</emphasis> with input and output information
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						The following code sample shows simple use of the definition service. The <literal>processID</literal> must correspond to the ID of a process definition in a KJAR file that you already deployed using the deployment service.
					</simpara>
					<formalpara>
						<title>Using the definition service</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">String processId = "org.jbpm.writedocument";

Collection&lt;UserTaskDefinition&gt; processTasks =
bpmn2Service.getTasksDefinitions(deploymentUnit.getIdentifier(), processId);

Map&lt;String, String&gt; processData =
bpmn2Service.getProcessVariables(deploymentUnit.getIdentifier(), processId);

Map&lt;String, String&gt; taskInputMappings =
bpmn2Service.getTaskInputMappings(deploymentUnit.getIdentifier(), processId, "Write a Document" );</programlisting>
						</para>
					</formalpara>
					<simpara>
						You can also use the definition service to scan a definition that you provide as BPMN2-compliant XML content, without the use of a KJAR file. The <literal>buildProcessDefinition</literal> method provides this capability.
					</simpara>
					<simpara>
						The following definition shows the complete <literal>DefinitionService</literal> interface:
					</simpara>
					<formalpara>
						<title>Definition of the <literal>DefinitionService</literal> interface</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">public interface DefinitionService {

    ProcessDefinition buildProcessDefinition(String deploymentId, String bpmn2Content, ClassLoader classLoader, boolean cache) throws IllegalArgumentException;

    ProcessDefinition getProcessDefinition(String deploymentId, String processId);

    Collection&lt;String&gt; getReusableSubProcesses(String deploymentId, String processId);

    Map&lt;String, String&gt; getProcessVariables(String deploymentId, String processId);

    Map&lt;String, String&gt; getServiceTasks(String deploymentId, String processId);

    Map&lt;String, Collection&lt;String&gt;&gt; getAssociatedEntities(String deploymentId, String processId);

    Collection&lt;UserTaskDefinition&gt; getTasksDefinitions(String deploymentId, String processId);

    Map&lt;String, String&gt; getTaskInputMappings(String deploymentId, String processId, String taskName);

    Map&lt;String, String&gt; getTaskOutputMappings(String deploymentId, String processId, String taskName);

}</programlisting>
						</para>
					</formalpara>
				</section>
				<section xml:id="service-process-con_process-engine">
					<title>Process service</title>
					<simpara>
						The deployment and definition services prepare process data in the process engine. To execute processes based on this data, use the process service. The process service supports interaction with the process engine execution environment, including the following actions:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								Starting a new process instance
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Working with an existing process instance, for example, signalling events, getting information details, and setting values of variables
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Working with work items
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						The process service is also a command executor. You can use it to execute commands on the KIE session to extend its capabilities.
					</simpara>
					<important>
						<simpara>
							The process service is optimized for runtime operations. Use it when you need to alter the process instance, for example, signal events or change variables. For read operations, for example, showing available process instances, use the runtime data service.
						</simpara>
					</important>
					<simpara>
						The following code sample shows deploying and running a process:
					</simpara>
					<formalpara>
						<title>Deploying and runing a process using the deployment and process services</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">KModuleDeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);

deploymentService.deploy(deploymentUnit);

long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), "customtask");

ProcessInstance pi = processService.getProcessInstance(processInstanceId);</programlisting>
						</para>
					</formalpara>
					<simpara>
						The <literal>startProcess</literal> method expects <literal>deploymentId</literal> as the first argument. Using this argument, you can start processes in a certain deployment when your application might have multiple deployments.
					</simpara>
					<simpara>
						For example, you might deploy different versions of the same process from different KJAR files. You can then start the required version using the correct <literal>deploymentId</literal>.
					</simpara>
					<simpara>
						The following definition shows the complete <literal>ProcessService</literal> interface:
					</simpara>
					<formalpara>
						<title>Definition of the <literal>ProcessService</literal> interface</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">public interface ProcessService {

	/**
	 * Starts a process with no variables
	 *
	 * @param deploymentId deployment identifier
	 * @param processId process identifier
	 * @return process instance IDentifier
	 * @throws RuntimeException in case of encountered errors
	 * @throws DeploymentNotFoundException in case a deployment with the given deployment identifier does not exist
	 * @throws DeploymentNotActiveException in case the deployment with the given deployment identifier is not active
	 */
	Long startProcess(String deploymentId, String processId);

	/**
	 * Starts a process and sets variables
	 *
	 * @param deploymentId deployment identifier
	 * @param processId process identifier
	 * @param params process variables
	 * @return process instance IDentifier
	 * @throws RuntimeException in case of encountered errors
	 * @throws DeploymentNotFoundException in case a deployment with the given deployment identifier does not exist
	 * @throws DeploymentNotActiveException in case the deployment with the given deployment identifier is not active
	 */
    Long startProcess(String deploymentId, String processId, Map&lt;String, Object&gt; params);

	/**
	 * Starts a process with no variables and assigns a correlation key
	 *
	 * @param deploymentId deployment identifier
	 * @param processId process identifier
	 * @param correlationKey correlation key to be assigned to the process instance - must be unique
	 * @return process instance IDentifier
	 * @throws RuntimeException in case of encountered errors
	 * @throws DeploymentNotFoundException in case a deployment with the given deployment identifier does not exist
     * @throws DeploymentNotActiveException in case the deployment with the given deployment identifier is not active
	 */
	Long startProcess(String deploymentId, String processId, CorrelationKey correlationKey);

	/**
	 * Starts a process, sets variables, and assigns a correlation key
	 *
	 * @param deploymentId deployment identifier
	 * @param processId process identifier
	 * @param correlationKey correlation key to be assigned to the process instance - must be unique
	 * @param params process variables
	 * @return process instance IDentifier
	 * @throws RuntimeException in case of encountered errors
	 * @throws DeploymentNotFoundException in case a deployment with the given deployment identifier does not exist
     * @throws DeploymentNotActiveException in case the deployment with the given deployment identifier is not active
	 */
    Long startProcess(String deploymentId, String processId, CorrelationKey correlationKey, Map&lt;String, Object&gt; params);

    /**
     * Starts a process at the listed nodes, instead of the normal starting point.
     * This method can be used for restarting a process that was aborted. However,
     * it does not restore the context of a previous process instance. You must
     * supply all necessary variables when calling this method.
     * This method does not guarantee that the process is started in a valid state.
     *
     * @param deploymentId deployment identifier
     * @param processId process identifier
     * @param params process variables
     * @param nodeIds list of BPMN node identifiers where the process must start
     * @return process instance IDentifier
     * @throws RuntimeException in case of encountered errors
     * @throws DeploymentNotFoundException in case a deployment with the given deployment identifier does not exist
     * @throws DeploymentNotActiveException in case the deployment with the given deployment identifier is not active
     */
    Long startProcessFromNodeIds(String deploymentId, String processId, Map&lt;String, Object&gt; params, String... nodeIds);

    /**
    * Starts a process at the listed nodes, instead of the normal starting point,
    * and assigns a correlation key.
    * This method can be used for restarting a process that was aborted. However,
    * it does not restore the context of a previous process instance. You must
    * supply all necessary variables when calling this method.
    * This method does not guarantee that the process is started in a valid state.
     *
     * @param deploymentId deployment identifier
     * @param processId process identifier
     * @param key correlation key (must be unique)
     * @param params process variables
     * @param nodeIds list of BPMN node identifiers where the process must start.
     * @return process instance IDentifier
     * @throws RuntimeException in case of encountered errors
     * @throws DeploymentNotFoundException in case a deployment with the given deployment identifier does not exist
     * @throws DeploymentNotActiveException in case the deployment with the given deployment identifier is not active
     */
    Long startProcessFromNodeIds(String deploymentId, String processId, CorrelationKey key, Map&lt;String, Object&gt; params, String... nodeIds);

    /**
     * Aborts the specified process
     *
     * @param processInstanceId process instance unique identifier
     * @throws DeploymentNotFoundException in case the deployment unit was not found
     * @throws ProcessInstanceNotFoundException in case a process instance with the given ID was not found
     */
    void abortProcessInstance(Long processInstanceId);

    /**
     * Aborts the specified process
     *
     * @param deploymentId deployment to which the process instance belongs
     * @param processInstanceId process instance unique identifier
     * @throws DeploymentNotFoundException in case the deployment unit was not found
     * @throws ProcessInstanceNotFoundException in case a process instance with the given ID was not found
     */
    void abortProcessInstance(String deploymentId, Long processInstanceId);

    /**
	 * Aborts all specified processes
	 *
	 * @param processInstanceIds list of process instance unique identifiers
	 * @throws DeploymentNotFoundException in case the deployment unit was not found
	 * @throws ProcessInstanceNotFoundException in case a process instance with the given ID was not found
	 */
    void abortProcessInstances(List&lt;Long&gt; processInstanceIds);

    /**
     * Aborts all specified processes
     *
     * @param deploymentId deployment to which the process instance belongs
     * @param processInstanceIds list of process instance unique identifiers
     * @throws DeploymentNotFoundException in case the deployment unit was not found
     * @throws ProcessInstanceNotFoundException in case a process instance with the given ID was not found
     */
    void abortProcessInstances(String deploymentId, List&lt;Long&gt; processInstanceIds);

    /**
	 * Signals an event to a single process instance
	 *
	 * @param processInstanceId the process instance unique identifier
	 * @param signalName the ID of the signal in the process
	 * @param event the event object to be passed with the event
	 * @throws DeploymentNotFoundException in case the deployment unit was not found
	 * @throws ProcessInstanceNotFoundException in case a process instance with the given ID was not found
	 */
    void signalProcessInstance(Long processInstanceId, String signalName, Object event);

    /**
     * Signals an event to a single process instance
     *
     * @param deploymentId deployment to which the process instance belongs
     * @param processInstanceId the process instance unique identifier
     * @param signalName the ID of the signal in the process
     * @param event the event object to be passed with the event
     * @throws DeploymentNotFoundException in case the deployment unit was not found
     * @throws ProcessInstanceNotFoundException in case a process instance with the given ID was not found
     */
    void signalProcessInstance(String deploymentId, Long processInstanceId, String signalName, Object event);

    /**
	 * Signal an event to a list of process instances
	 *
	 * @param processInstanceIds list of process instance unique identifiers
	 * @param signalName the ID of the signal in the process
	 * @param event the event object to be passed with the event
	 * @throws DeploymentNotFoundException in case the deployment unit was not found
	 * @throws ProcessInstanceNotFoundException in case a process instance with the given ID was not found
	 */
    void signalProcessInstances(List&lt;Long&gt; processInstanceIds, String signalName, Object event);

    /**
     * Signal an event to a list of process instances
     *
     * @param deploymentId deployment to which the process instances belong
     * @param processInstanceIds list of process instance unique identifiers
     * @param signalName the ID of the signal in the process
     * @param event the event object to be passed with the event
     * @throws DeploymentNotFoundException in case the deployment unit was not found
     * @throws ProcessInstanceNotFoundException in case a process instance with the given ID was not found
     */
    void signalProcessInstances(String deploymentId, List&lt;Long&gt; processInstanceIds, String signalName, Object event);

		/**
     * Signal an event to a single process instance by correlation key
     *
     * @param correlationKey the unique correlation key of the process instance
     * @param signalName the ID of the signal in the process
     * @param event the event object to be passed in with the event
     * @throws DeploymentNotFoundException in case the deployment unit was not found
     * @throws ProcessInstanceNotFoundException in case a process instance with the given key was not found
     */
    void signalProcessInstanceByCorrelationKey(CorrelationKey correlationKey, String signalName, Object event);

		/**
		 * Signal an event to a single process instance by correlation key
		 *
		 * @param deploymentId deployment to which the process instance belongs
		 * @param correlationKey the unique correlation key of the process instance
		 * @param signalName the ID of the signal in the process
		 * @param event the event object to be passed in with the event
		 * @throws DeploymentNotFoundException in case the deployment unit was not found
		 * @throws ProcessInstanceNotFoundException in case a process instance with the given key was not found
		 */
		void signalProcessInstanceByCorrelationKey(String deploymentId, CorrelationKey correlationKey, String signalName, Object event);

		/**
		 * Signal an event to given list of correlation keys
		 *
		 * @param correlationKeys list of unique correlation keys of process instances
		 * @param signalName the ID of the signal in the process
		 * @param event the event object to be passed in with the event
		 * @throws DeploymentNotFoundException in case the deployment unit was not found
		 * @throws ProcessInstanceNotFoundException in case a process instance with one of the given keys was not found
		 */
		void signalProcessInstancesByCorrelationKeys(List&lt;CorrelationKey&gt; correlationKeys, String signalName, Object event);

		/**
		 * Signal an event to given list of correlation keys
		 *
		 * @param deploymentId deployment to which the process instances belong
		 * @param correlationKeys list of unique correlation keys of process instances
		 * @param signalName the ID of the signal in the process
		 * @param event the event object to be passed in with the event
		 * @throws DeploymentNotFoundException in case the deployment unit was not found
		 * @throws ProcessInstanceNotFoundException in case a process instance with one of the given keys was not found
		 */
		void signalProcessInstancesByCorrelationKeys(String deploymentId, List&lt;CorrelationKey&gt; correlationKeys, String signalName, Object event);

		/**
		 * Signal an event to a any process instance that listens to give signal that belongs to given deployment
		 *
		 * @param deployment information for the process's kjar
		 * @param signalName the signal's id in the process
		 * @param event the event object to be passed in with the event
		 * @throws DeploymentNotFoundException in case deployment unit was not found
		 */


    /**
     * Signal an event to a any process instance that listens to a given signal and belongs to a given deployment
     *
     * @param deployment identifier of the deployment
     * @param signalName the ID of the signal in the process
     * @param event the event object to be passed with the event
     * @throws DeploymentNotFoundException in case the deployment unit was not found
     */
    void signalEvent(String deployment, String signalName, Object event);

    /**
	 * Returns process instance information. Will return null if no
	 * active process with the ID is found
	 *
	 * @param processInstanceId The process instance unique identifier
	 * @return Process instance information
	 * @throws DeploymentNotFoundException in case the deployment unit was not found
	 */
    ProcessInstance getProcessInstance(Long processInstanceId);

    /**
     * Returns process instance information. Will return null if no
     * active process with the ID is found
     *
     * @param deploymentId deployment to which the process instance belongs
     * @param processInstanceId The process instance unique identifier
     * @return Process instance information
     * @throws DeploymentNotFoundException in case the deployment unit was not found
     */
    ProcessInstance getProcessInstance(String deploymentId, Long processInstanceId);

    /**
	 * Returns process instance information. Will return null if no
	 * active process with that correlation key is found
	 *
	 * @param correlationKey correlation key assigned to the process instance
	 * @return Process instance information
	 * @throws DeploymentNotFoundException in case the deployment unit was not found
	 */
    ProcessInstance getProcessInstance(CorrelationKey correlationKey);

    /**
     * Returns process instance information. Will return null if no
     * active process with that correlation key is found
     *
     * @param deploymentId deployment to which the process instance belongs
     * @param correlationKey correlation key assigned to the process instance
     * @return Process instance information
     * @throws DeploymentNotFoundException in case the deployment unit was not found
     */
    ProcessInstance getProcessInstance(String deploymentId, CorrelationKey correlationKey);

    /**
	 * Sets a process variable.
	 * @param processInstanceId The process instance unique identifier
	 * @param variableId The variable ID to set
	 * @param value The variable value
	 * @throws DeploymentNotFoundException in case the deployment unit was not found
	 * @throws ProcessInstanceNotFoundException in case a process instance with the given ID was not found
	 */
    void setProcessVariable(Long processInstanceId, String variableId, Object value);

    /**
     * Sets a process variable.
     *
     * @param deploymentId deployment to which the process instance belongs
     * @param processInstanceId The process instance unique identifier
     * @param variableId The variable id to set.
     * @param value The variable value.
     * @throws DeploymentNotFoundException in case the deployment unit was not found
     * @throws ProcessInstanceNotFoundException in case a process instance with the given ID was not found
     */
    void setProcessVariable(String deploymentId, Long processInstanceId, String variableId, Object value);

    /**
	 * Sets process variables.
	 *
	 * @param processInstanceId The process instance unique identifier
	 * @param variables map of process variables (key = variable name, value = variable value)
	 * @throws DeploymentNotFoundException in case the deployment unit was not found
	 * @throws ProcessInstanceNotFoundException in case a process instance with the given ID was not found
	 */
    void setProcessVariables(Long processInstanceId, Map&lt;String, Object&gt; variables);

    /**
     * Sets process variables.
     *
     * @param deploymentId deployment to which the process instance belongs
     * @param processInstanceId The process instance unique identifier
     * @param variables map of process variables (key = variable name, value = variable value)
     * @throws DeploymentNotFoundException in case the deployment unit was not found
     * @throws ProcessInstanceNotFoundException in case a process instance with the given ID was not found
     */
    void setProcessVariables(String deploymentId, Long processInstanceId, Map&lt;String, Object&gt; variables);

    /**
	 * Gets a process instance variable.
	 *
	 * @param processInstanceId the process instance unique identifier
	 * @param variableName the variable name to get from the process
	 * @throws DeploymentNotFoundException in case the deployment unit was not found
	 * @throws ProcessInstanceNotFoundException in case a process instance with the given ID was not found
	*/
    Object getProcessInstanceVariable(Long processInstanceId, String variableName);

    /**
     * Gets a process instance variable.
     *
     * @param deploymentId deployment to which the process instance belongs
     * @param processInstanceId the process instance unique identifier
     * @param variableName the variable name to get from the process
     * @throws DeploymentNotFoundException in case the deployment unit was not found
     * @throws ProcessInstanceNotFoundException in case a process instance with the given ID was not found
    */
    Object getProcessInstanceVariable(String deploymentId, Long processInstanceId, String variableName);

	/**
	 * Gets a process instance variable values.
	 *
	 * @param processInstanceId The process instance unique identifier
	 * @throws DeploymentNotFoundException in case the deployment unit was not found
	 * @throws ProcessInstanceNotFoundException in case a process instance with the given ID was not found
	*/
	Map&lt;String, Object&gt; getProcessInstanceVariables(Long processInstanceId);

	/**
     * Gets a process instance variable values.
     *
     * @param deploymentId deployment to which the process instance belongs
     * @param processInstanceId The process instance unique identifier
     * @throws DeploymentNotFoundException in case the deployment unit was not found
     * @throws ProcessInstanceNotFoundException in case a process instance with the given ID was not found
    */
    Map&lt;String, Object&gt; getProcessInstanceVariables(String deploymentId, Long processInstanceId);

	/**
	 * Returns all signals available in current state of given process instance
	 *
	 * @param processInstanceId process instance ID
	 * @return list of available signals or empty list if no signals are available
	 */
    Collection&lt;String&gt; getAvailableSignals(Long processInstanceId);

    /**
     * Returns all signals available in current state of given process instance
     *
     * @param deploymentId deployment to which the process instance belongs
     * @param processInstanceId process instance ID
     * @return list of available signals or empty list if no signals are available
     */
    Collection&lt;String&gt; getAvailableSignals(String deploymentId, Long processInstanceId);

	/**
	 * Completes the specified WorkItem with the given results
	 *
	 * @param id workItem ID
	 * @param results results of the workItem
	 * @throws DeploymentNotFoundException in case the deployment unit was not found
     * @throws WorkItemNotFoundException in case a work item with the given ID was not found
	 */
    void completeWorkItem(Long id, Map&lt;String, Object&gt; results);

    /**
     * Completes the specified WorkItem with the given results
     *
     * @param deploymentId deployment to which the process instance belongs
     * @param processInstanceId process instance ID to which the work item belongs
     * @param id workItem ID
     * @param results results of the workItem
     * @throws DeploymentNotFoundException in case the deployment unit was not found
     * @throws WorkItemNotFoundException in case a work item with the given ID was not found
     */
    void completeWorkItem(String deploymentId, Long processInstanceId, Long id, Map&lt;String, Object&gt; results);

    /**
     * Abort the specified workItem
     *
     * @param id workItem ID
     * @throws DeploymentNotFoundException in case the deployment unit was not found
     * @throws WorkItemNotFoundException in case a work item with the given ID was not found
     */
    void abortWorkItem(Long id);

    /**
     * Abort the specified workItem
     *
     * @param deploymentId deployment to which the process instance belongs
     * @param processInstanceId process instance ID to which the work item belongs
     * @param id workItem ID
     * @throws DeploymentNotFoundException in case the deployment unit was not found
     * @throws WorkItemNotFoundException in case a work item with the given ID was not found
     */
    void abortWorkItem(String deploymentId, Long processInstanceId, Long id);

    /**
     * Returns the specified workItem
     *
     * @param id workItem ID
     * @return The specified workItem
     * @throws DeploymentNotFoundException in case the deployment unit was not found
     * @throws WorkItemNotFoundException in case a work item with the given ID was not found
     */
    WorkItem getWorkItem(Long id);

    /**
     * Returns the specified workItem
     *
     * @param deploymentId deployment to which the process instance belongs
     * @param processInstanceId process instance ID to which the work item belongs
     * @param id workItem ID
     * @return The specified workItem
     * @throws DeploymentNotFoundException in case the deployment unit was not found
     * @throws WorkItemNotFoundException in case a work item with the given ID was not found
     */
    WorkItem getWorkItem(String deploymentId, Long processInstanceId, Long id);

    /**
     * Returns active work items by process instance ID.
     *
     * @param processInstanceId process instance ID
     * @return The list of active workItems for the process instance
     * @throws DeploymentNotFoundException in case the deployment unit was not found
	 * @throws ProcessInstanceNotFoundException in case a process instance with the given ID was not found
     */
    List&lt;WorkItem&gt; getWorkItemByProcessInstance(Long processInstanceId);

    /**
     * Returns active work items by process instance ID.
     *
     * @param deploymentId deployment to which the process instance belongs
     * @param processInstanceId process instance ID
     * @return The list of active workItems for the process instance
     * @throws DeploymentNotFoundException in case the deployment unit was not found
     * @throws ProcessInstanceNotFoundException in case a process instance with the given ID was not found
     */
    List&lt;WorkItem&gt; getWorkItemByProcessInstance(String deploymentId, Long processInstanceId);


    /**
     * Executes the provided command on the underlying command executor (usually KieSession)
     * @param deploymentId deployment identifier
     * @param command actual command for execution
     * @return results of the command execution
     * @throws DeploymentNotFoundException in case a deployment with the given deployment identifier does not exist
     * @throws DeploymentNotActiveException in case the deployment with the given deployment identifier is not active for restricted commands (for example, start process)
     */
    public &lt;T&gt; T execute(String deploymentId, Command&lt;T&gt; command);

    /**
     * Executes the provided command on the underlying command executor (usually KieSession)
     * @param deploymentId deployment identifier
     * @param context context implementation to be used to get the runtime engine
     * @param command actual command for execution
     * @return results of the command execution
     * @throws DeploymentNotFoundException in case a deployment with the given deployment identifier does not exist
     * @throws DeploymentNotActiveException in case the deployment with the given deployment identifier is not active for restricted commands (for example, start process)
     */
    public &lt;T&gt; T execute(String deploymentId, Context&lt;?&gt; context, Command&lt;T&gt; command);

}</programlisting>
						</para>
					</formalpara>
					<section xml:id="service-runtime-data-con_process-engine">
						<title>Runtime Data Service</title>
						<simpara>
							You can use the runtime data service to retrieve all runtime information about processes, such as started process instances and executed node instances.
						</simpara>
						<simpara>
							For example, you can build a list-based UI to show process definitions, process instances, tasks for a given user, and other data, based on information provided by the runtime data service.
						</simpara>
						<simpara>
							This service is optimized to be as efficient as possible while providing all required information.
						</simpara>
						<simpara>
							The following examples show various usage of this service.
						</simpara>
						<formalpara>
							<title>Retrieving all process definitions</title>
							<para>
								
<programlisting language="java" linenumbering="unnumbered">Collection definitions = runtimeDataService.getProcesses(new QueryContext());</programlisting>
							</para>
						</formalpara>
						<formalpara>
							<title>Retrieving active process instances</title>
							<para>
								
<programlisting language="java" linenumbering="unnumbered">Collection&lt;processinstancedesc&gt; instances = runtimeDataService.getProcessInstances(new QueryContext());</programlisting>
							</para>
						</formalpara>
						<formalpara>
							<title>Retrieving active nodes for a particular process instance</title>
							<para>
								
<programlisting language="java" linenumbering="unnumbered">Collection&lt;nodeinstancedesc&gt; instances = runtimeDataService.getProcessInstanceHistoryActive(processInstanceId, new QueryContext());</programlisting>
							</para>
						</formalpara>
						<formalpara>
							<title>Retrieving tasks assigned to the user <literal>john</literal></title>
							<para>
								
<programlisting language="java" linenumbering="unnumbered">List&lt;tasksummary&gt; taskSummaries = runtimeDataService.getTasksAssignedAsPotentialOwner("john", new QueryFilter(0, 10));</programlisting>
							</para>
						</formalpara>
						<simpara>
							The runtime data service methods support two important parameters, <literal>QueryContext</literal> and <literal>QueryFilter</literal>. <literal>QueryFilter</literal> is an extension of <literal>QueryContext</literal>. You can use these parameters to manage the result set, providing pagination, sorting, and ordering. You can also use them to apply additional filtering when searching for user tasks.
						</simpara>
						<simpara>
							The following definition shows the complete <literal>RuntimeDataService</literal> interface:
						</simpara>
						<formalpara>
							<title>Definition of the <literal>RuntimeDataService</literal> interface</title>
							<para>
								
<programlisting language="java" linenumbering="unnumbered">public interface RuntimeDataService {

    // Process instance information

    Collection&lt;ProcessInstanceDesc&gt; getProcessInstances(QueryContext queryContext);

    Collection&lt;ProcessInstanceDesc&gt; getProcessInstances(List&lt;Integer&gt; states, String initiator, QueryContext queryContext);

    Collection&lt;ProcessInstanceDesc&gt; getProcessInstancesByProcessId(List&lt;Integer&gt; states, String processId, String initiator, QueryContext queryContext);

    Collection&lt;ProcessInstanceDesc&gt; getProcessInstancesByProcessName(List&lt;Integer&gt; states, String processName, String initiator, QueryContext queryContext);

    Collection&lt;ProcessInstanceDesc&gt; getProcessInstancesByDeploymentId(String deploymentId, List&lt;Integer&gt; states, QueryContext queryContext);

    ProcessInstanceDesc getProcessInstanceById(long processInstanceId);

    Collection&lt;ProcessInstanceDesc&gt; getProcessInstancesByProcessDefinition(String processDefId, QueryContext queryContext);

    Collection&lt;ProcessInstanceDesc&gt; getProcessInstancesByProcessDefinition(String processDefId, List&lt;Integer&gt; states, QueryContext queryContext);


    // Node and Variable instance information

    NodeInstanceDesc getNodeInstanceForWorkItem(Long workItemId);

    Collection&lt;NodeInstanceDesc&gt; getProcessInstanceHistoryActive(long processInstanceId, QueryContext queryContext);

    Collection&lt;NodeInstanceDesc&gt; getProcessInstanceHistoryCompleted(long processInstanceId, QueryContext queryContext);

    Collection&lt;NodeInstanceDesc&gt; getProcessInstanceFullHistory(long processInstanceId, QueryContext queryContext);

    Collection&lt;NodeInstanceDesc&gt; getProcessInstanceFullHistoryByType(long processInstanceId, EntryType type, QueryContext queryContext);

    Collection&lt;VariableDesc&gt; getVariablesCurrentState(long processInstanceId);

    Collection&lt;VariableDesc&gt; getVariableHistory(long processInstanceId, String variableId, QueryContext queryContext);


    // Process information

    Collection&lt;ProcessDefinition&gt; getProcessesByDeploymentId(String deploymentId, QueryContext queryContext);

    Collection&lt;ProcessDefinition&gt; getProcessesByFilter(String filter, QueryContext queryContext);

    Collection&lt;ProcessDefinition&gt; getProcesses(QueryContext queryContext);

    Collection&lt;String&gt; getProcessIds(String deploymentId, QueryContext queryContext);

    ProcessDefinition getProcessById(String processId);

    ProcessDefinition getProcessesByDeploymentIdProcessId(String deploymentId, String processId);

	// user task query operations

    UserTaskInstanceDesc getTaskByWorkItemId(Long workItemId);

    UserTaskInstanceDesc getTaskById(Long taskId);

    List&lt;TaskSummary&gt; getTasksAssignedAsBusinessAdministrator(String userId, QueryFilter filter);

    List&lt;TaskSummary&gt; getTasksAssignedAsBusinessAdministratorByStatus(String userId, List&lt;Status&gt; statuses, QueryFilter filter);

    List&lt;TaskSummary&gt; getTasksAssignedAsPotentialOwner(String userId, QueryFilter filter);

    List&lt;TaskSummary&gt; getTasksAssignedAsPotentialOwner(String userId, List&lt;String&gt; groupIds, QueryFilter filter);

    List&lt;TaskSummary&gt; getTasksAssignedAsPotentialOwnerByStatus(String userId, List&lt;Status&gt; status, QueryFilter filter);

    List&lt;TaskSummary&gt; getTasksAssignedAsPotentialOwner(String userId, List&lt;String&gt; groupIds, List&lt;Status&gt; status, QueryFilter filter);

    List&lt;TaskSummary&gt; getTasksAssignedAsPotentialOwnerByExpirationDateOptional(String userId, List&lt;Status&gt; status, Date from, QueryFilter filter);

    List&lt;TaskSummary&gt; getTasksOwnedByExpirationDateOptional(String userId, List&lt;Status&gt; strStatuses, Date from, QueryFilter filter);

    List&lt;TaskSummary&gt; getTasksOwned(String userId, QueryFilter filter);

    List&lt;TaskSummary&gt; getTasksOwnedByStatus(String userId, List&lt;Status&gt; status, QueryFilter filter);

    List&lt;Long&gt; getTasksByProcessInstanceId(Long processInstanceId);

    List&lt;TaskSummary&gt; getTasksByStatusByProcessInstanceId(Long processInstanceId, List&lt;Status&gt; status, QueryFilter filter);

    List&lt;AuditTask&gt; getAllAuditTask(String userId, QueryFilter filter);

}</programlisting>
							</para>
						</formalpara>
					</section>
					<section xml:id="service-usertask-con_process-engine">
						<title>User Task Service</title>
						<simpara>
							The user task service covers the complete lifecycle of an individual task, and you can use the service to manage a user task from start to end.
						</simpara>
						<simpara>
							Task queries are not a part of the user task service. Use the runtime data service to query for tasks. Use the user task service for scoped operations on one task, including the following actions:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									Modification of selected properties
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Access to task variables
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Access to task attachments
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Access to task comments
								</simpara>
							</listitem>
						</itemizedlist>
						<simpara>
							The user task service is also a command executor. You can use it to execute custom task commands.
						</simpara>
						<simpara>
							The following example shows starting a process and interacting with a task in the process:
						</simpara>
						<formalpara>
							<title>Starting a process and interacting with a user task in this process</title>
							<para>
								
<programlisting language="java" linenumbering="unnumbered">long processInstanceId =
processService.startProcess(deployUnit.getIdentifier(), "org.jbpm.writedocument");

List&lt;Long&gt; taskIds =
runtimeDataService.getTasksByProcessInstanceId(processInstanceId);

Long taskId = taskIds.get(0);

userTaskService.start(taskId, "john");
UserTaskInstanceDesc task = runtimeDataService.getTaskById(taskId);

Map&lt;String, Object&gt; results = new HashMap&lt;String, Object&gt;();
results.put("Result", "some document data");
userTaskService.complete(taskId, "john", results);</programlisting>
							</para>
						</formalpara>
					</section>
				</section>
				<section xml:id="service-quartz-con_process-engine">
					<title>Quartz-based timer service</title>
					<simpara>
						The process engine provides a cluster-ready timer service using Quartz. You can use the service to dispose or load your KIE session at any time. The service can manage how long a KIE session is active in order to fire each timer appropriately.
					</simpara>
					<simpara>
						The following example shows a basic Quartz configuration file for a clustered environment:
					</simpara>
					<formalpara>
						<title>Quartz configuration file for a clustered environment</title>
						<para>
							
<programlisting language="xml" linenumbering="unnumbered">#============================================================================
# Configure Main Scheduler Properties
#============================================================================

org.quartz.scheduler.instanceName = jBPMClusteredScheduler
org.quartz.scheduler.instanceId = AUTO

#============================================================================
# Configure ThreadPool
#============================================================================

org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool
org.quartz.threadPool.threadCount = 5
org.quartz.threadPool.threadPriority = 5

#============================================================================
# Configure JobStore
#============================================================================

org.quartz.jobStore.misfireThreshold = 60000

org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreCMT
org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
org.quartz.jobStore.useProperties=false
org.quartz.jobStore.dataSource=managedDS
org.quartz.jobStore.nonManagedTXDataSource=nonManagedDS
org.quartz.jobStore.tablePrefix=QRTZ_
org.quartz.jobStore.isClustered=true
org.quartz.jobStore.clusterCheckinInterval = 20000

#=========================================================================
# Configure Datasources
#=========================================================================
org.quartz.dataSource.managedDS.jndiURL=jboss/datasources/psbpmsDS
org.quartz.dataSource.nonManagedDS.jndiURL=jboss/datasources/quartzNonManagedDS</programlisting>
						</para>
					</formalpara>
					<simpara>
						You must modify the previous example to fit your environment.
					</simpara>
				</section>
				<section xml:id="service-query-con_process-engine">
					<title>Query service</title>
					<simpara>
						The query service provides advanced search capabilities that are based on Dashbuilder data sets.
					</simpara>
					<simpara>
						With this approach, you can control how to retrieve data from underlying data store. You can use complex <literal>JOIN</literal> statements with external tables such as JPA entities tables or custom systems database tables.
					</simpara>
					<simpara>
						The query service is built around the following two sets of operations:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								Management operations:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										Register a query definition
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Replace a query definition
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Unregister (remove) a query definition
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Get a query definition
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Get all registered query definitions
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								Runtime operations:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										Simple query based on <literal>QueryParam</literal> as the filter provider
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Advanced query based on <literal>QueryParamBuilder</literal> as the filter provider
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
					</itemizedlist>
					<simpara>
						Dashbuilder data sets provide support for multiple data sources, such as CSV, SQL, and Elastic Search. However, the process engine uses a RDBMS-based backend and focuses on SQL-based data sets.
					</simpara>
					<simpara>
						Therefore, the process engine query service is a subset of Dashbuilder data set capabilities that enables efficient queries with a simple API.
					</simpara>
					<section xml:id="service-query-keyclasses-ref_process-engine">
						<title>Key classes of the query service</title>
						<simpara>
							The query service relies on the following key classes:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>QueryDefinition</literal>: Represents the definition of a data set. The definition consists of a unique name, an SQL expression (the query) and the <emphasis>source</emphasis>, the JNDI name of the data source to use when performing queries.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>QueryParam</literal>: The basic structure that represents an individual query parameter or condition. This structure consists of the column name, operator, and expected values.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>QueryResultMapper</literal>: The class that maps raw dataset data (rows and columns) to an object representation.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>QueryParamBuilder</literal>: The class that builds query filters that are applied to the query definition to invoke the query.
								</simpara>
							</listitem>
						</itemizedlist>
						<formalpara>
							<title>QueryResultMapper</title>
							<para>
								<literal>QueryResultMapper</literal> maps data taken from a database (dataset) to an object representation. It is similar to ORM providers such as <literal>hibernate</literal>, which map tables to entities.
							</para>
						</formalpara>
						<simpara>
							Many object types can be used for representing dataset results. Therefore, existing mappers might not always suit your needs. Mappers in <literal>QueryResultMapper</literal> are pluggable and you can provide your own mapper when necessary, in order to transform dataset data into any type you need.
						</simpara>
						<simpara>
							The process engine supplies the following mappers:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>org.jbpm.kie.services.impl.query.mapper.ProcessInstanceQueryMapper</literal>, registered with the name <literal>ProcessInstances</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>org.jbpm.kie.services.impl.query.mapper.ProcessInstanceWithVarsQueryMapper</literal>, registered with the name <literal>ProcessInstancesWithVariables</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>org.jbpm.kie.services.impl.query.mapper.ProcessInstanceWithCustomVarsQueryMapper</literal>, registered with the name <literal>ProcessInstancesWithCustomVariables</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>org.jbpm.kie.services.impl.query.mapper.UserTaskInstanceQueryMapper</literal>, registered with the name <literal>UserTasks</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>org.jbpm.kie.services.impl.query.mapper.UserTaskInstanceWithVarsQueryMapper</literal>, registered with the name <literal>UserTasksWithVariables</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>org.jbpm.kie.services.impl.query.mapper.UserTaskInstanceWithCustomVarsQueryMapper</literal>, registered with name <literal>UserTasksWithCustomVariables</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>org.jbpm.kie.services.impl.query.mapper.TaskSummaryQueryMapper</literal>, registered with the name <literal>TaskSummaries</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>org.jbpm.kie.services.impl.query.mapper.RawListQueryMapper</literal>, registered with the name <literal>RawList</literal>
								</simpara>
							</listitem>
						</itemizedlist>
						<simpara>
							Each <literal>QueryResultMapper</literal> is registered with a unique string name. You can look up mappers by this name instead of referencing the full class name. This feature is especially important when using EJB remote invocation of services, because it avoids relying on a particular implementation on the client side.
						</simpara>
						<simpara>
							To reference a <literal>QueryResultMapper</literal> by the string name, use <literal>NamedQueryMapper</literal>, which is a part of the <literal>jbpm-services-api</literal> module. This class acts as a delegate (lazy delegate) and looks up the actual mapper when the query is performed.
						</simpara>
						<formalpara>
							<title>Using <literal>NamedQueryMapper</literal></title>
							<para>
								
<programlisting language="java" linenumbering="unnumbered">queryService.query("my query def", new NamedQueryMapper&lt;Collection&lt;ProcessInstanceDesc&gt;&gt;("ProcessInstances"), new QueryContext());</programlisting>
							</para>
						</formalpara>
						<formalpara>
							<title>QueryParamBuilder</title>
							<para>
								<literal>QueryParamBuilder</literal> provides an advanced way of building filters for data sets.
							</para>
						</formalpara>
						<simpara>
							By default, when you use a query method of <literal>QueryService</literal> that accepts zero or more <literal>QueryParam</literal> instances, all of these parameters are joined with an <literal>AND</literal> operator, so a data entry must match all of them.
						</simpara>
						<simpara>
							However, sometimes more complicated relationships between parameters are required. You can use <literal>QueryParamBuilder</literal> to build custom builders that provide filters at the time the query is issued.
						</simpara>
						<simpara>
							One existing implementation of <literal>QueryParamBuilder</literal> is available in the process engine. It covers default <literal>QueryParams</literal> that are based on the <emphasis>core functions</emphasis>.
						</simpara>
						<simpara>
							These core functions are SQL-based conditions, including the following conditions:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>IS_NULL</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>NOT_NULL</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>EQUALS_TO</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>NOT_EQUALS_TO</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>LIKE_TO</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>GREATER_THAN</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>GREATER_OR_EQUALS_TO</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>LOWER_THAN</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>LOWER_OR_EQUALS_TO</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>BETWEEN</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>IN</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>NOT_IN</literal>
								</simpara>
							</listitem>
						</itemizedlist>
						<simpara>
							Before invoking a query, the process engine invokes the build method of the <literal>QueryParamBuilder</literal> interface as many times as necessary while the method returns a non-null value. Because of this approach, you can build up complex filter options that could not be expressed by a simple list of <literal>QueryParams</literal>.
						</simpara>
						<simpara>
							The following example shows a basic implementation of <literal>QueryParamBuilder</literal>. It relies on the DashBuilder Dataset API.
						</simpara>
						<formalpara>
							<title>Basic implementation of <literal>QueryParamBuilder</literal></title>
							<para>
								
<programlisting language="java" linenumbering="unnumbered">public class TestQueryParamBuilder implements QueryParamBuilder&lt;ColumnFilter&gt; {

    private Map&lt;String, Object&gt; parameters;
    private boolean built = false;
    public TestQueryParamBuilder(Map&lt;String, Object&gt; parameters) {
        this.parameters = parameters;
    }

    @Override
    public ColumnFilter build() {
        // return null if it was already invoked
        if (built) {
            return null;
        }

        String columnName = "processInstanceId";

        ColumnFilter filter = FilterFactory.OR(
                FilterFactory.greaterOrEqualsTo((Long)parameters.get("min")),
                FilterFactory.lowerOrEqualsTo((Long)parameters.get("max")));
        filter.setColumnId(columnName);

        built = true;
        return filter;
    }

}</programlisting>
							</para>
						</formalpara>
						<simpara>
							After implementing the builder, you can use an instance of this class when performing a query with the <literal>QueryService</literal> service, as shown in the following example:
						</simpara>
						<formalpara>
							<title>Running a query with the <literal>QueryService</literal> service</title>
							<para>
								
<programlisting language="java" linenumbering="unnumbered">queryService.query("my query def", ProcessInstanceQueryMapper.get(), new QueryContext(), paramBuilder);</programlisting>
							</para>
						</formalpara>
					</section>
					<section xml:id="service-query-using-proc_process-engine">
						<title>Using the query service in a typical scenario</title>
						<simpara>
							The following procedure outlines the typical way in which your code might use the query service.
						</simpara>
						<orderedlist numeration="arabic">
							<title>Procedure</title>
							<listitem>
								<simpara>
									Define the data set, which is a view of the data you want to use. Use the <literal>QueryDefinition</literal> class in the services API to complete this operation:
								</simpara>
								<formalpara>
									<title>Defining the data set</title>
									<para>
										
<programlisting language="java" linenumbering="unnumbered">SqlQueryDefinition query = new SqlQueryDefinition("getAllProcessInstances", "java:jboss/datasources/ExampleDS");
query.setExpression("select * from processinstancelog");</programlisting>
									</para>
								</formalpara>
								<simpara>
									This example represents the simplest possible query definition.
								</simpara>
								<simpara>
									The constructor requires the following parameters:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											A unique name that identifies the query at run time
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											A JNDI data source name to use for performing queries with this definition
										</simpara>
										<simpara>
											The parameter of the <literal>setExpression()</literal> method is the SQL statement that builds up the data set view. Queries in the query service use data from this view and filter this data as necessary.
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
							<listitem>
								<simpara>
									Register the query:
								</simpara>
								<formalpara>
									<title>Registering a query</title>
									<para>
										
<programlisting language="java" linenumbering="unnumbered">queryService.registerQuery(query);</programlisting>
									</para>
								</formalpara>
							</listitem>
							<listitem>
								<simpara>
									If required, collect all the data from the dataset, without any filtering:
								</simpara>
								<formalpara>
									<title>Collecting all the data from the dataset</title>
									<para>
										
<programlisting language="java" linenumbering="unnumbered">Collection&lt;ProcessInstanceDesc&gt; instances = queryService.query("getAllProcessInstances", ProcessInstanceQueryMapper.get(), new QueryContext());</programlisting>
									</para>
								</formalpara>
								<simpara>
									This simple query uses defaults from <literal>QueryContext</literal> for paging and sorting.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									If required, use a <literal>QueryContext</literal> object that changes the defaults of the paging and sorting:
								</simpara>
								<formalpara>
									<title>Changing defaults using a <literal>QueryContext</literal> object</title>
									<para>
										
<programlisting language="java" linenumbering="unnumbered">QueryContext ctx = new QueryContext(0, 100, "start_date", true);
         
Collection&lt;ProcessInstanceDesc&gt; instances = queryService.query("getAllProcessInstances", ProcessInstanceQueryMapper.get(), ctx);</programlisting>
									</para>
								</formalpara>
							</listitem>
							<listitem>
								<simpara>
									If required, use the query to filter data:
								</simpara>
								<formalpara>
									<title>Using a query to filter data</title>
									<para>
										
<programlisting language="java" linenumbering="unnumbered">// single filter param
Collection&lt;ProcessInstanceDesc&gt; instances = queryService.query("getAllProcessInstances", ProcessInstanceQueryMapper.get(), new QueryContext(), QueryParam.likeTo(COLUMN_PROCESSID, true, "org.jbpm%"));
 
// multiple filter params (AND)
Collection&lt;ProcessInstanceDesc&gt; instances = queryService.query("getAllProcessInstances", ProcessInstanceQueryMapper.get(), new QueryContext(),
 QueryParam.likeTo(COLUMN_PROCESSID, true, "org.jbpm%"),
 QueryParam.in(COLUMN_STATUS, 1, 3));</programlisting>
									</para>
								</formalpara>
							</listitem>
						</orderedlist>
						<simpara>
							With the query service, you can define what data to fetch and how to filter it. Limitation of the JPA provider or other similar limitations do not apply. You can tailor database queries to your environment to increase performance.
						</simpara>
					</section>
				</section>
				<section xml:id="service-advanceruntimedata-con_process-engine">
					<title>Advanced query service</title>
					<simpara>
						The advanced query service provides capabilities to search for processes and tasks, based on process and task attributes, process variables, and internal variables of user tasks. The search automatically covers all existing processes in the process engine.
					</simpara>
					<simpara>
						The names and required values of attributes and variables are defined in <literal>QueryParam</literal> objects.
					</simpara>
					<simpara>
						Process attributes include process instance ID, correlation key, process definition ID, and deployment ID. Task attributes include task name, owner, and status.
					</simpara>
					<simpara>
						The following search methods are available:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<literal>queryProcessByVariables</literal>: Search for process instances based on a list of process attributes and process variable values. To be included in the result, a process instance must have the listed attributes and the listed values in its process variables.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>queryProcessByVariablesAndTask</literal>: Search for process instances based on a list of process attributes, process variable values, and task variable values. To be included in the result, a process instance must have the listed attributes and the listed values in its process variables. It also must include a task with the listed values in its task variables.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>queryUserTasksByVariables</literal>: Search for user tasks based on a list of task attributes, task variable values, and process variable values. To be included in the result, a task must have the listed attributes and listed values in its task variables. It also must be included in a process with the listed values in its process variables.
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						The service is provided by the <literal>AdvanceRuntimeDataService</literal> class. The interface for this class also defines predefined task and process attribute names.
					</simpara>
					<formalpara>
						<title>Definition of the <literal>AdvanceRuntimeDataService</literal> interface</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">public interface AdvanceRuntimeDataService {

    String TASK_ATTR_NAME = "TASK_NAME";
    String TASK_ATTR_OWNER = "TASK_OWNER";
    String TASK_ATTR_STATUS = "TASK_STATUS";
    String PROCESS_ATTR_INSTANCE_ID = "PROCESS_INSTANCE_ID";
    String PROCESS_ATTR_CORRELATION_KEY = "PROCESS_CORRELATION_KEY";
    String PROCESS_ATTR_DEFINITION_ID = "PROCESS_DEFINITION_ID";
    String PROCESS_ATTR_DEPLOYMENT_ID = "PROCESS_DEPLOYMENT_ID";
    String PROCESS_COLLECTION_VARIABLES = "ATTR_COLLECTION_VARIABLES";

    List&lt;ProcessInstanceWithVarsDesc&gt; queryProcessByVariables(List&lt;QueryParam&gt; attributes,
      List&lt;QueryParam&gt; processVariables, QueryContext queryContext);

    List&lt;ProcessInstanceWithVarsDesc&gt; queryProcessByVariablesAndTask(List&lt;QueryParam&gt; attributes,
       List&lt;QueryParam&gt; processVariables, List&lt;QueryParam&gt; taskVariables,
       List&lt;String&gt; potentialOwners, QueryContext queryContext);

    List&lt;UserTaskInstanceWithPotOwnerDesc&gt; queryUserTasksByVariables(List&lt;QueryParam&gt; attributes,
       List&lt;QueryParam&gt; taskVariables, List&lt;QueryParam&gt; processVariables,
       List&lt;String&gt; potentialOwners, QueryContext queryContext);
}</programlisting>
						</para>
					</formalpara>
				</section>
				<section xml:id="service-migration-con_process-engine">
					<title>Process instance migration service</title>
					<simpara>
						The process instance migration service is a utility for migrating process instances from one deployment to another. Process or task variables are not affected by the migration. However, the new deployment can use a different process definition.
					</simpara>
					<simpara>
						For the simplest approach to process migration, let active process instances finish and start new process instances in the new deployment. If this approach is not suitable to your needs, consider the following issues before starting process instance migration:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								Backward compatibility
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Data change
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Need for node mapping
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						Whenever possible, create backward-compatible processes by extending process definitions. For example, removing nodes from the process definition breaks compatibility. If you make such changes, you must provide node mapping. Process instance migration uses node mapping if an active process instance is in a node that has been removed.
					</simpara>
					<simpara>
						A node map contains source node IDs from the old process definition mapped to target node IDs in the new process definition. You can map nodes of the same type only, such as a user task to a user task.
					</simpara>
					<simpara>
						Red Hat Process Automation Manager offers several implementations of the migration service:
					</simpara>
					<formalpara>
						<title>Methods in the <literal>ProcessInstanceMigrationService</literal> interface that implement the migration service</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">public interface ProcessInstanceMigrationService {
 /**
 * Migrates a given process instance that belongs to the source deployment into the target process ID that belongs to the target deployment.
 * The following rules are enforced:
 * &lt;ul&gt;
 * &lt;li&gt;the source deployment ID must point to an existing deployment&lt;/li&gt;
 * &lt;li&gt;the process instance ID must point to an existing and active process instance&lt;/li&gt;
 * &lt;li&gt;the target deployment must exist&lt;/li&gt;
 * &lt;li&gt;the target process ID must exist in the target deployment&lt;/li&gt;
 * &lt;/ul&gt;
 * Returns a migration report regardless of migration being successful or not; examine the report for the outcome of the migration.
 * @param sourceDeploymentId deployment to which the process instance to be migrated belongs
 * @param processInstanceId ID of the process instance to be migrated
 * @param targetDeploymentId ID of the deployment to which the target process belongs
 * @param targetProcessId ID of the process to which the process instance should be migrated
 * @return returns complete migration report
 */
 MigrationReport migrate(String sourceDeploymentId, Long processInstanceId, String targetDeploymentId, String targetProcessId);
 /**
 * Migrates a given process instance (with node mapping) that belongs to source deployment into the target process ID that belongs to the target deployment.
 * The following rules are enforced:
 * &lt;ul&gt;
 * &lt;li&gt;the source deployment ID must point to an existing deployment&lt;/li&gt;
 * &lt;li&gt;the process instance ID must point to an existing and active process instance&lt;/li&gt;
 * &lt;li&gt;the target deployment must exist&lt;/li&gt;
 * &lt;li&gt;the target process ID must exist in the target deployment&lt;/li&gt;
 * &lt;/ul&gt;
 * Returns a migration report regardless of migration being successful or not; examine the report for the outcome of the migration.
 * @param sourceDeploymentId deployment to which the process instance to be migrated belongs
 * @param processInstanceId ID of the process instance to be migrated
 * @param targetDeploymentId ID of the deployment to which the target process belongs
 * @param targetProcessId ID of the process to which the process instance should be migrated
 * @param nodeMapping node mapping - source and target unique IDs of nodes to be mapped - from process instance active nodes to new process nodes
 * @return returns complete migration report
 */
 MigrationReport migrate(String sourceDeploymentId, Long processInstanceId, String targetDeploymentId, String targetProcessId, Map&lt;String, String&gt; nodeMapping);
 /**
 * Migrates given process instances that belong to the source deployment into a target process ID that belongs to the target deployment.
 * The following rules are enforced:
 * &lt;ul&gt;
 * &lt;li&gt;the source deployment ID must point to an existing deployment&lt;/li&gt;
 * &lt;li&gt;the process instance ID must point to an existing and active process instance&lt;/li&gt;
 * &lt;li&gt;the target deployment must exist&lt;/li&gt;
 * &lt;li&gt;the target process ID must exist in the target deployment&lt;/li&gt;
 * &lt;/ul&gt;
 * Returns a migration report regardless of migration being successful or not; examine the report for the outcome of the migration.
 * @param sourceDeploymentId deployment to which the process instances to be migrated belong
 * @param processInstanceIds list of process instance IDs to be migrated
 * @param targetDeploymentId ID of the deployment to which the target process belongs
 * @param targetProcessId ID of the process to which the process instances should be migrated
 * @return returns complete migration report
 */
 List&lt;MigrationReport&gt; migrate(String sourceDeploymentId, List&lt;Long&gt; processInstanceIds, String targetDeploymentId, String targetProcessId);
 /**
 * Migrates given process instances (with node mapping) that belong to the source deployment into a target process ID that belongs to the target deployment.
 * The following rules are enforced:
 * &lt;ul&gt;
 * &lt;li&gt;the source deployment ID must point to an existing deployment&lt;/li&gt;
 * &lt;li&gt;the process instance ID must point to an existing and active process instance&lt;/li&gt;
 * &lt;li&gt;the target deployment must exist&lt;/li&gt;
 * &lt;li&gt;the target process ID must exist in the target deployment&lt;/li&gt;
 * &lt;/ul&gt;
 * Returns a migration report regardless of migration being successful or not; examine the report for the outcome of the migration.
 * @param sourceDeploymentId deployment to which the process instances to be migrated belong
 * @param processInstanceIds list of process instance ID to be migrated
 * @param targetDeploymentId ID of the deployment to which the target process belongs
 * @param targetProcessId ID of the process to which the process instances should be migrated
 * @param nodeMapping node mapping - source and target unique IDs of nodes to be mapped - from process instance active nodes to new process nodes
 * @return returns list of migration reports one per each process instance
 */
 List&lt;MigrationReport&gt; migrate(String sourceDeploymentId, List&lt;Long&gt; processInstanceIds, String targetDeploymentId, String targetProcessId, Map&lt;String, String&gt; nodeMapping);
}</programlisting>
						</para>
					</formalpara>
					<simpara>
						To migrate process instances on a KIE Server, use the following implementations. These methods are similar to the methods in the <literal>ProcessInstanceMigrationService</literal> interface, providing the same migration implementations for KIE Server deployments.
					</simpara>
					<formalpara>
						<title>Methods in the <literal>ProcessAdminServicesClient</literal> interface that implement the migration service for KIE Server deployments</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">public interface ProcessAdminServicesClient {

    MigrationReportInstance migrateProcessInstance(String containerId, Long processInstanceId, String targetContainerId, String targetProcessId);

    MigrationReportInstance migrateProcessInstance(String containerId, Long processInstanceId, String targetContainerId, String targetProcessId, Map&lt;String, String&gt; nodeMapping);

    List&lt;MigrationReportInstance&gt; migrateProcessInstances(String containerId, List&lt;Long&gt; processInstancesId, String targetContainerId, String targetProcessId);

    List&lt;MigrationReportInstance&gt; migrateProcessInstances(String containerId, List&lt;Long&gt; processInstancesId, String targetContainerId, String targetProcessId, Map&lt;String, String&gt; nodeMapping);
}</programlisting>
						</para>
					</formalpara>
					<simpara>
						You can migrate a single process instance or multiple process instances at once. If you migrate multiple process instances, each instance is migrated in a separate transaction to ensure that the migrations do not affect each other.
					</simpara>
					<simpara>
						After migration is completed, the <literal>migrate</literal> method returns a <literal>MigrationReport</literal> object that contains the following information:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								The start and end dates of the migration.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								The migration outcome (success or failure).
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								A log entry of the <literal>INFO</literal>, <literal>WARN</literal>, or <literal>ERROR</literal> type. The <literal>ERROR</literal> message terminates the migration.
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						The following example shows a process instance migration:
					</simpara>
					<formalpara>
						<title>Migrating a process instance in a KIE Server deployment</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">import org.kie.server.api.model.admin.MigrationReportInstance;
import org.kie.server.api.marshalling.MarshallingFormat;
import org.kie.server.client.KieServicesClient;
import org.kie.server.client.KieServicesConfiguration;

public class ProcessInstanceMigrationTest{

	private static final String SOURCE_CONTAINER = "com.redhat:MigrateMe:1.0";
  private static final String SOURCE_PROCESS_ID = "MigrateMe.MigrateMev1";
	private static final String TARGET_CONTAINER = "com.redhat:MigrateMe:2";
  private static final String TARGET_PROCESS_ID = "MigrateMe.MigrateMeV2";

	public static void main(String[] args) {

		KieServicesConfiguration config = KieServicesFactory.newRestConfiguration("http://HOST:PORT/kie-server/services/rest/server", "USERNAME", "PASSWORD");
		config.setMarshallingFormat(MarshallingFormat.JSON);
		KieServicesClient client = KieServicesFactory.newKieServicesClient(config);

		long sourcePid = client.getProcessClient().startProcess(SOURCE_CONTAINER, SOURCE_PROCESS_ID);

    // Use the 'report' object to return migration results.
		MigrationReportInstance report = client.getAdminClient().migrateProcessInstance(SOURCE_CONTAINER, sourcePid,TARGET_CONTAINER, TARGET_PROCESS_ID);

		System.out.println("Was migration successful:" + report.isSuccessful());

		client.getProcessClient().abortProcessInstance(TARGET_CONTAINER, sourcePid);

	}
}</programlisting>
						</para>
					</formalpara>
					<bridgehead remap="_known_limitations_of_process_instance_migration" renderas="sect4" xml:id="known_limitations_of_process_instance_migration">Known limitations of process instance migration</bridgehead>
					<simpara>
						The following situations can cause a failure of the migration or incorrect migration:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								A new or modified task requires inputs that are not available in the migrated process instance.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								You modify the tasks prior to the active task where the changes have an impact on further processing.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								You remove a human task that is currently active. To replace a human task, you must map it to another human task.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								You add a new task parallel to the single active task. As all branches in an <literal>AND</literal> gateway are not activated, the process gets stuck.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								You remove active timer events (these events are not changed in the database).
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								You fix or update inputs and outputs in an active task (the task data is not migrated).
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						If you apply mapping to a task node, only the task node name and description are mapped. Other task fields, including the <literal>TaskName</literal> variable, are not mapped to the new task.
					</simpara>
				</section>
				<section xml:id="deployment-versions-con_process-engine">
					<title>Deployments and different process versions</title>
					<simpara>
						The deployment service puts business assets into an execution environment. However, in some cases additional management is required to make the assets available in the correct context. Notably, if you deploy several versions of the same process, you must ensure that process instances use the correct version.
					</simpara>
					<bridgehead remap="_activation_and_deactivation_of_deployments" renderas="sect4" xml:id="activation_and_deactivation_of_deployments">Activation and Deactivation of deployments</bridgehead>
					<simpara>
						In some cases, a number of process instances are running on a deployment, and then you add a new version of the same process to the runtime environment.
					</simpara>
					<simpara>
						You might decide that new instances of this process definition must use the new version while the existing active instances should continue with the previous version.
					</simpara>
					<simpara>
						To enable this scenario, use the following methods of the deployment service:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<literal>activate</literal>: Activates a deployment so it can be available for interaction. You can list its process definitions and start new process instances for this deployment.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>deactivate</literal>: Deactivates a deployment. Disables the option to list process definitions and to start new process instances of processes in the deployment. However, you can continue working with the process instances that are already active, for example, signal events and interact with user tasks.
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						You can use this feature for smooth transition between project versions without the need for process instance migration.
					</simpara>
					<bridgehead remap="_invocation_of_the_latest_version_of_a_process" renderas="sect4" xml:id="invocation_of_the_latest_version_of_a_process">Invocation of the latest version of a process</bridgehead>
					<simpara>
						If you need to use the latest version of the project’s process, you can use the <literal>latest</literal> keyword to interact with several operations in services. This approach is supported only when the process identifier remains the same in all versions.
					</simpara>
					<simpara>
						The following example explains the feature.
					</simpara>
					<simpara>
						The initial deployment unit is <literal>org.jbpm:HR:1.0</literal>. It contains the first version of a hiring process.
					</simpara>
					<simpara>
						After several weeks, you develop a new version and deploy it to the execution server as <literal>org.jbpm:HR.2.0</literal>. It includes version 2 of the hiring process.
					</simpara>
					<simpara>
						If you want to call the process and ensure that you use the latest version, you can use the following deployment ID:
					</simpara>
					
<screen>org.jbpm.HR:latest</screen>
					<simpara>
						If you use this deployment ID, the process engine finds the latest available version of the project. It uses the following identifiers:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<literal>groupId</literal>: <literal>org.jbpm</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>artifactId</literal>: <literal>HR</literal>
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						The version numbers are compared by Maven rules to find the latest version.
					</simpara>
					<simpara>
						The following code example shows deployment of multiple versions and interacting with the latest version:
					</simpara>
					<formalpara>
						<title>Deploying multiple versions of a process and interacting with the latest version</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">KModuleDeploymentUnit deploymentUnitV1 = new KModuleDeploymentUnit("org.jbpm", "HR", "1.0");
deploymentService.deploy(deploymentUnitV1);

long processInstanceId = processService.startProcess("org.jbpm:HR:LATEST", "customtask");
ProcessInstanceDesc piDesc = runtimeDataService.getProcessInstanceById(processInstanceId);

// We have started a process with the project version 1
assertEquals(deploymentUnitV1.getIdentifier(), piDesc.getDeploymentId());

// Next we deploy version 2
KModuleDeploymentUnit deploymentUnitV2 = new KModuleDeploymentUnit("org.jbpm", "HR", "2.0");
deploymentService.deploy(deploymentUnitV2);

processInstanceId = processService.startProcess("org.jbpm:HR:LATEST", "customtask");
piDesc = runtimeDataService.getProcessInstanceById(processInstanceId);

// This time we have started a process with the project version 2
assertEquals(deploymentUnitV2.getIdentifier(), piDesc.getDeploymentId());</programlisting>
						</para>
					</formalpara>
					<note>
						<simpara>
							This feature is also available in the KIE Server REST API. When sending a request with a deployment ID, you can use <literal>LATEST</literal> as the version identifier.
						</simpara>
					</note>
					<itemizedlist>
						<title>Additional resources</title>
						<listitem>
							<simpara>
								<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/deploying_and_managing_red_hat_process_automation_manager_services#kie-server-commands-con_kie-apis"><emphasis>Interacting with Red Hat Process Automation Manager using KIE APIs</emphasis></link>
							</simpara>
						</listitem>
					</itemizedlist>
				</section>
				<section xml:id="deployment-synchronization-con_process-engine">
					<title>Deployment synchronization</title>
					<simpara>
						Process engine services include a deployment synchronizer that stores available deployments into a database, including the deployment descriptor for every deployment.
					</simpara>
					<simpara>
						The synhronizer also monitors this table to keep it in sync with other installations that might be using the same data source. This functionality is especially important when running in a cluster or when Business Central and a custom application must operate on the same artifacts.
					</simpara>
					<simpara>
						By default, when running core services, you must configure synchronization. For EJB and CDI extensions, synchronization is enabled automatically.
					</simpara>
					<simpara>
						The following code sample configures synchronization:
					</simpara>
					<formalpara>
						<title>Configuring synchronization</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">TransactionalCommandService commandService = new TransactionalCommandService(emf);

DeploymentStore store = new DeploymentStore();
store.setCommandService(commandService);

DeploymentSynchronizer sync = new DeploymentSynchronizer();
sync.setDeploymentService(deploymentService);
sync.setDeploymentStore(store);

DeploymentSyncInvoker invoker = new DeploymentSyncInvoker(sync, 2L, 3L, TimeUnit.SECONDS);
invoker.start();
....
invoker.stop();</programlisting>
						</para>
					</formalpara>
					<simpara>
						With this configuration, deployments are synchronized every three seconds with an initial delay of two seconds.
					</simpara>
				</section>
			</section>
			<section xml:id="threads-process-con_process-engine">
				<title>Threads in the process engine</title>
				<simpara>
					We can refer to two types of multi-threading: <emphasis>logical</emphasis> and <emphasis>technical</emphasis>. <emphasis>Technical multi-threading</emphasis> involves multiple threads or processes that are started, for example, by a Java or C program. <emphasis>Logical multi-threading</emphasis> happens in a BPM process, for example, after the process reaches a parallel gateway. In execution logic, the original process splits into two processes that run in a parallel fashion.
				</simpara>
				<simpara>
					Process engine code implements logical multi-threading using one technical thread.
				</simpara>
				<simpara>
					The reason for this design choice is that multiple (technical) threads must be able to communicate state information to each other if they are working on the same process. This requirement brings a number of complications. The extra logic required for safe communication between threads, as well as the extra overhead required to avoid race conditions and deadlocks, can negate any performance benefit of using such threads.
				</simpara>
				<simpara>
					In general, the process engine executes actions in series. For example, when the process engine encounters a script task in a process, it executes the script synchronously and waits for it to complete before continuing execution. In the same way, if a process encounters a parallel gateway, the process engine sequentially triggers each of the outgoing branches, one after the other.
				</simpara>
				<simpara>
					This is possible because execution is almost always instantaneous, meaning that it is extremely fast and produces almost no overhead. As a result, sequential execution does not create any effects that a user can notice.
				</simpara>
				<simpara>
					Any code in a process that you supply is also executed synchronously and the process engine waits for it to finish before continuing the process. For example, if you use a <literal>Thread.sleep(…​)</literal> as part of a custom script, the process engine thread is blocked during thre sleep period.
				</simpara>
				<simpara>
					When a process reaches a service task, the process engine also invokes the handler for the task synchronously and waits for the <literal>completeWorkItem(…​)</literal> method to return before continuing execution. If your service handler is not instantaneous, implement the asynchronous execution independently in your code.
				</simpara>
				<simpara>
					For example, your service task might invoke an external service. The delay in invoking this service remotely and waiting for the results might be significant. Therefore, invoke this service asynchronously. Your handler must only invoke the service and then return from the method, then notify the process engine later when the results are available. In the meantime, the process engine can continue execution of the process.
				</simpara>
				<simpara>
					Human tasks are a typical example of a service that needs to be invoked asynchronously. A human task requires a human actor to respond to a request, and the process engine must not wait for this response.
				</simpara>
				<simpara>
					When a human task node is triggered, the human task handler only creates a new task on the task list of the assigned actor. The process engine is then able to continue execution on the rest of the process, if necessary. The handler notifies the process engine asynchronously when the user has completed the task.
				</simpara>
			</section>
			<section xml:id="event-listeners-con_process-engine">
				<title>Event Listeners in the process engine</title>
				<simpara>
					You can develop a class that implements the <literal>ProcessEventListener</literal> interface. This class can listen to process-related events, such as starting or completing a process or entering and leaving a node.
				</simpara>
				<simpara>
					The process engine passes an event object to this class. The object provides access to related information, like the process instance and node instance linked to the event.
				</simpara>
				<simpara>
					The following list shows the different methods of the <literal>ProcessEventListener</literal> interface:
				</simpara>
				<formalpara>
					<title>Methods of the <literal>ProcessEventListener</literal> interface</title>
					<para>
						
<programlisting language="java" linenumbering="unnumbered">public interface ProcessEventListener {

  void beforeProcessStarted( ProcessStartedEvent event );
  void afterProcessStarted( ProcessStartedEvent event );
  void beforeProcessCompleted( ProcessCompletedEvent event );
  void afterProcessCompleted( ProcessCompletedEvent event );
  void beforeNodeTriggered( ProcessNodeTriggeredEvent event );
  void afterNodeTriggered( ProcessNodeTriggeredEvent event );
  void beforeNodeLeft( ProcessNodeLeftEvent event );
  void afterNodeLeft( ProcessNodeLeftEvent event );
  void beforeVariableChanged(ProcessVariableChangedEvent event);
  void afterVariableChanged(ProcessVariableChangedEvent event);

}</programlisting>
					</para>
				</formalpara>
				<simpara>
					The <literal>before</literal> and <literal>after</literal> event calls typically act like a stack. If event A directly causes event B, the following sequence of calls happens:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Before A
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Before B
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							After B
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							After A
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					For example, if leaving node X triggers node Y, all event calls related to triggering node Y occur between the <literal>beforeNodeLeft</literal> and <literal>afterNodeLeft</literal> calls for node X.
				</simpara>
				<simpara>
					In the same way, if starting a process directly causes some nodes to start, all <literal>nodeTriggered</literal> and <literal>nodeLeft</literal> event calls occur between the <literal>beforeProcessStarted</literal> and <literal>afterProcessStarted</literal> calls.
				</simpara>
				<simpara>
					This approach reflects cause and effect relationships between events. However, the timing and order of <literal>after</literal> event calls are not always intuitive. For example, an <literal>afterProcessStarted</literal> call can happen after the <literal>afterNodeLeft</literal> calls for some nodes in the process.
				</simpara>
				<simpara>
					In general, to be notified when a particular event occurs, use the <literal>before</literal> call for the event. Use an <literal>after</literal> call only if you want to make sure that all processing related to this event has ended, for example, when you want to be notified when all steps associated with starting a particular process instance have been completed.
				</simpara>
				<simpara>
					Depending on the type of node, some nodes might only generate <literal>nodeLeft</literal> calls and others might only generate <literal>nodeTriggered</literal> calls. For example, catch intermediate event nodes do not generate <literal>nodeTriggered</literal> calls, because they are not triggered by another process node. Similarly, throw intermediate event nodes do not generate <literal>nodeLeft</literal> calls, as these nodes do not have an outgoing connection to another node.
				</simpara>
				<simpara>
					The <literal>KieSession</literal> class implements the <literal>RuleRuntimeEventManager</literal> interface that provides methods for registering, removing, and listing event listeners, as shown in the following list.
				</simpara>
				<formalpara>
					<title>Methods of the <literal>RuleRuntimeEventManager</literal> interface</title>
					<para>
						
<programlisting language="java" linenumbering="unnumbered">    void addEventListener(AgendaEventListener listener);
    void addEventListener(RuleRuntimeEventListener listener);
    void removeEventListener(AgendaEventListener listener);
    void removeEventListener(RuleRuntimeEventListener listener);
    Collection&lt;AgendaEventListener&gt;	getAgendaEventListeners();
    Collection&lt;RuleRuntimeEventListener&gt; getRuleRintimeEventListeners();</programlisting>
					</para>
				</formalpara>
				<simpara>
					However, in a typical case, do not use these methods.
				</simpara>
				<simpara>
					If you are using the <literal>RuntimeManager</literal> interface, you can use the <literal>RuntimeEnvironment</literal> class to register event listeners.
				</simpara>
				<simpara>
					If you are using the Services API, you can add fully qualified class names of event listeners to the <literal>META-INF/services/org.jbpm.services.task.deadlines.NotificationListener</literal> file in your project. The Services API also registers some default listeners, including <literal>org.jbpm.services.task.deadlines.notifications.impl.email.EmailNotificationListener</literal>, which can send email notifications for events.
				</simpara>
				<simpara>
					To exclude a default listener, you can add the fully qualified name of the listener to the <literal>org.kie.jbpm.notification_listeners.exclude</literal> JVM system property.
				</simpara>
				<section xml:id="runtime-logger-listener-con_process-engine">
					<title><literal>KieRuntimeLogger</literal> event listener</title>
					<simpara>
						The <literal>KieServices</literal> package contains the <literal>KieRuntimeLogger</literal> event listener that you can add to your KIE session. You can use this listener to create an audit log. This log contains all the different events that occurred at runtime.
					</simpara>
					<note>
						<simpara>
							These loggers are intended for debugging purposes. They might be too detailed for business-level process analysis.
						</simpara>
					</note>
					<simpara>
						The listener implements the following logger types:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								Console logger: This logger writes out all the events to the console. The fully qualified class name for this logger is <literal>org.drools.core.audit.WorkingMemoryConsoleLogger</literal>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								File logger: This logger writes out all the events to a file using an XML representation. You can use the log file in an IDE to generate a tree-based visualization of the events that occurred during execution. The fully qualified class name for this logger is <literal>org.drools.core.audit.WorkingMemoryFileLogger</literal>.
							</simpara>
							<simpara>
								The file logger writes the events to disk only when closing the logger or when the number of events in the logger reaches a predefined level. Therefore, it is not suitable for debugging processes at runtime.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Threaded file logger: This logger writes the events to a file after a specified time interval. You can use this logger to visualize the progress in real time while debugging processes. The fully qualified class name for this logger is <literal>org.drools.core.audit.ThreadedWorkingMemoryFileLogger</literal>.
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						When creating a logger, you must pass the KIE session as an argument. The file loggers also require the name of the log file to be created. The threaded file logger requires the interval in milliseconds after which the events are saved.
					</simpara>
					<simpara>
						Always close the logger at the end of your application.
					</simpara>
					<simpara>
						The following example shows the use of the file logger.
					</simpara>
					<formalpara>
						<title>Using the file logger</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">  import org.kie.api.KieServices;
  import org.kie.api.logger.KieRuntimeLogger;
  ...
  KieRuntimeLogger logger = KieServices.Factory.get().getLoggers().newFileLogger(ksession, "test");
  // add invocations to the process engine here,
  // e.g. ksession.startProcess(processId);
  ...
  logger.close();</programlisting>
						</para>
					</formalpara>
					<simpara>
						The log file that is created by the file-based loggers contains an XML-based overview of all the events that occurred during the runtime of the process. You can use the <emphasis>Audit View</emphasis> in the <emphasis>Drools Eclipse plugin</emphasis> to open the file and visualize the events as a tree. Events that occur between the <literal>before</literal> and <literal>after</literal> calls of an event are shown as children of that event.
					</simpara>
					<simpara>
						The following screenshot shows a simple example. A process is started, resulting in the activation of the Start node, an Action node, and an End node, after which the process is completed.
					</simpara>
					<figure>
						<title>Audit view of a process engine runtime log</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/CoreEngine/AuditView.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>AuditView</phrase>
							</textobject>
						</mediaobject>
					</figure>
				</section>
			</section>
			<section xml:id="process-engine-configuration-ref_process-engine">
				<title>Process engine configuration</title>
				<simpara>
					You can use several control parameters available to alter the process engine default behavior to suit the requirements of your environment.
				</simpara>
				<simpara>
					Set these parameters as JVM system properties, usually with the <literal>-D</literal> option when starting a program such as an application server.
				</simpara>
				<table colsep="1" frame="all" rowsep="1">
					<title>Control parameters</title>
					<tgroup cols="4">
						<colspec colname="col_1" colwidth="25*"></colspec>
						<colspec colname="col_2" colwidth="25*"></colspec>
						<colspec colname="col_3" colwidth="25*"></colspec>
						<colspec colname="col_4" colwidth="25*"></colspec>
						<thead>
							<row>
								<entry align="left" valign="top">Name</entry>
								<entry align="left" valign="top">Possible values</entry>
								<entry align="left" valign="top">Default value</entry>
								<entry align="left" valign="top">Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>jbpm.ut.jndi.lookup</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									String
								</simpara>
								</entry>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">
								<simpara>
									Alternative JNDI name to be used when there is no access to the default name (<literal>java:comp/UserTransaction</literal>).
								</simpara>
								<simpara>
									NOTE: The name must be valid for the given runtime environment. Do not use this variable if there is no access to the default user transaction JNDI name.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>jbpm.enable.multi.con</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>true</literal>|<literal>false</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>false</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Enable multiple incoming and outgoing sequence flows support for activities
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>jbpm.business.calendar.properties</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									String
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									/<literal>jbpm.business.calendar.properties</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Alternative class path location of the business calendar configuration file
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>jbpm.overdue.timer.delay</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Long
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									2000
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Specifies the delay for overdue timers to allow proper initialization, in milliseconds
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>jbpm.process.name.comparator</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									String
								</simpara>
								</entry>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">
								<simpara>
									Alternative comparator class to enable starting a process by name, by default the <literal>NumberVersionComparator</literal> comparator is used
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>jbpm.loop.level.disabled</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>true</literal>|<literal>false</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>true</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Enable or disable loop iteration tracking for advanced loop support when using XOR gateways
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>org.kie.mail.session</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									String
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>mail</literal>/<literal>jbpmMailSession</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Alternative JNDI name for the mail session used by Task Deadlines
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>jbpm.usergroup.callback.properties</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									String
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									/<literal>jbpm.usergroup.callback.properties</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Alternative class path location for a user group callback implementation (LDAP, DB)
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>jbpm.user.group.mapping</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									String
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>${jboss.server.config.dir}/roles.properties</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Alternative location of the <literal>roles.properties</literal> file for <literal>JBossUserGroupCallbackImpl</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>jbpm.user.info.properties</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									String
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									/<literal>jbpm.user.info.properties</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Alternative class path location of the user info configuration (used by <literal>LDAPUserInfoImpl</literal>)
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>org.jbpm.ht.user.separator</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									String
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>,</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Alternative separator of actors and groups for user tasks
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>org.quartz.properties</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									String
								</simpara>
								</entry>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">
								<simpara>
									Location of the <link linkend="service-quartz-con_process-engine">Quartz configiration file</link> to activate the Quartz-based timer service
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>jbpm.data.dir</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									String
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>${jboss.server.data.dir}</literal> if available, otherwise <literal>${java.io.tmpdir}</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Location to store data files produced by the process engine
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>org.kie.executor.pool.size</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Integer
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>1</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Thread pool size for the process engine executor
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>org.kie.executor.retry.count</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Integer
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									3
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Number of retries attempted by the process engine executor in case of an error
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>org.kie.executor.interval</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Integer
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									0
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Frequency used to check for pending jobs by the process engine executor, in seconds. If the value is <literal>0</literal>, the check is run once, during the startup of the executor.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>org.kie.executor.disabled</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>true</literal>|<literal>false</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>true</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Disable the process engine executor
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>org.kie.store.services.class</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									String
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>org.drools.persistence.jpa.KnowledgeStoreServiceImpl</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Fully qualified name of the class that implements <literal>KieStoreServices</literal> that is responsible for bootstrapping <literal>KieSession</literal> instances
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>org.kie.jbpm.notification_listeners.exclude</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									String
								</simpara>
								</entry>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">
								<simpara>
									Fully qualified names of event listeners that must be excluded even if they would otherwise be used. Separate multiple names with commas. For example, you can add <literal>org.jbpm.services.task.deadlines.notifications.impl.email.EmailNotificationListener</literal> to exclude the default email notification listener.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal>org.kie.jbpm.notification_listeners.include</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									String
								</simpara>
								</entry>
								<entry align="left" valign="top"></entry>
								<entry align="left" valign="top">
								<simpara>
									Fully qualified names of event listeners that must be included. Separate multiple names with commas. If you set this property, only the listeners in this property are included and all other listeners are excluded.
								</simpara>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</section>
		</chapter>
		<chapter xml:id="persistence-con_process-engine">
			<title>Persistence and transactions in the process engine</title>
			<simpara>
				The process engine implements persistence for process states. The implementation uses the JPA framework with an SQL database backend. It can also store audit log information in the database.
			</simpara>
			<simpara>
				The process engine also enables transactional execution of processes using the JTA framework, relying on the persistence backend to support the transactions.
			</simpara>
			<section xml:id="persistence-processstate-con_process-engine">
				<title>Persistence of process runtime states</title>
				<simpara>
					The process engine supports persistent storage of the runtime state of running process instances. Because it stores the runtime states, it can continue execution of a process instance if the process engine stopped or encountered a problem at any point.
				</simpara>
				<simpara>
					The process engine also persistently stores the process definitions and the history logs of current and previous process states.
				</simpara>
				<simpara>
					You can use the <literal>persistence.xml</literal> file, specified by the JPA framework, to configure persistence in an SQL database. You can plug in different persistence strategies. For more information about the <literal>persistence.xml</literal> file, see <xref linkend="persistence-configuration-file-con_process-engine" />.
				</simpara>
				<simpara>
					By default, if you do not configure persistence in the process engine, process information, including process instance states, is not made persistent.
				</simpara>
				<simpara>
					When the process engine starts a process, it creates a <emphasis>process instance</emphasis>, which represents the execution of the process in that specific context. For example, when executing a process that processes a sales order, one process instance is created for each sales request.
				</simpara>
				<simpara>
					The process instance contains the current runtime state and context of a process, including current values of any process variables. However, it does not include information about the history of past states of the process, as this information is not required for ongoing execution of a process.
				</simpara>
				<simpara>
					When the runtime state of process instances is made persistent, you can restore the state of execution of all running processes in case the process engine fails or is stopped. You can also remove a particular process instance from memory and then restore it at a later time.
				</simpara>
				<simpara>
					If you configure the process engine to use persistence, it automatically stores the runtime state into the database. You do not need to trigger persistence in the code.
				</simpara>
				<simpara>
					When you restore the state of the process engine from a database, all instances are automatically restored to their last recorded state. Process instances automatically resume execution if they are triggered, for example, by an expired timer, the completion of a task that was requested by the process instance, or a signal being sent to the process instance. You do not need to load separate instances and trigger their execution manually.
				</simpara>
				<simpara>
					The process engine also automatically reloads process instances on demand.
				</simpara>
				<section xml:id="safepoints-con_process-engine">
					<title>Safe points for persistence</title>
					<simpara>
						The process engine saves the state of a process instance to persistent storage at <emphasis>safe points</emphasis> during the execution of the process.
					</simpara>
					<simpara>
						When a process instance is started or resumes execution from a previous wait state, the process engine continues the execution until no more actions can be performed. If no more actions can be performed, it means that the process has completed or else has reached a wait state. If the process contains several parallel paths, all the paths must reach a wait state.
					</simpara>
					<simpara>
						This point in the execution of the process is considered a safe point. At this point, the process engine stores the state of the process instance, and of any other process instances that were affected by the execution, to persistent storage.
					</simpara>
				</section>
			</section>
			<section xml:id="auditlog-con_process-engine">
				<title>The persistent audit log</title>
				<simpara>
					The process engine can store information about the execution of process instances, including the successive historical states of the instances.
				</simpara>
				<simpara>
					This information can be useful in many cases. For example, you might want to verify which actions have been executed for a particular process instance or to monitor and analyze the efficiency of a particular process.
				</simpara>
				<simpara>
					However, storing history information in the runtime database would result in the database rapidly increasing in size and would also affect the performance of the persistence layer. Therefore, history log information is stored separately.
				</simpara>
				<simpara>
					The process engine creates a log based on events that it generates during execution of processes. It uses the event listener mechanism to receive events and extract the necessary information, then persists this information to a database. The <literal>jbpm-audit</literal> module contains an event listener that stores process-related information in a database using JPA.
				</simpara>
				<simpara>
					You can use filters to limit the scope of the logged information.
				</simpara>
				<section xml:id="auditlog-datamodel-ref_process-engine">
					<title>The process engine audit log data model</title>
					<simpara>
						You can query process engine audit log information to use it in different scenarios, for example, creating a history log for one specific process instance or analyzing the performance of all instances of a specific process.
					</simpara>
					<simpara>
						The audit log data model is a default implementation. Depending on your use cases, you might also define your own data model for storing the information you require. You can use process event listeners to extract the information.
					</simpara>
					<simpara>
						The data model contains three entities: one for process instance information, one for node instance information, and one for process variable instance information.
					</simpara>
					<simpara>
						The <literal>ProcessInstanceLog</literal> table contains the basic log information about a process instance.
					</simpara>
					<table colsep="1" frame="all" rowsep="1">
						<title>ProcessInstanceLog table fields</title>
						<tgroup cols="3">
							<colspec colname="col_1" colwidth="33*"></colspec>
							<colspec colname="col_2" colwidth="33*"></colspec>
							<colspec colname="col_3" colwidth="33*"></colspec>
							<thead>
								<row>
									<entry align="left" valign="top">Field</entry>
									<entry align="left" valign="top">Description</entry>
									<entry align="left" valign="top">Nullable</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>id</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The primary key and ID of the log entity
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										NOT NULL
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>correlationKey</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The correlation of this process instance
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>duration</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Actual duration of this process instance since its start date
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>end_date</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										When applicable, the end date of the process instance
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>externalId</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Optional external identifier used to correlate to some elements, for example, a deployment ID
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>user_identity</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Optional identifier of the user who started the process instance
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>outcome</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The outcome of the process instance. This field contains the error code if the process instance was finished with an error event.
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>parentProcessInstanceId</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The process instance ID of the parent process instance, if applicable
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>processid</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The ID of the process
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>processinstanceid</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The process instance ID
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										NOT NULL
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>processname</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The name of the process
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>processtype</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The type of the instance (process or case)
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>processversion</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The version of the process
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>sla_due_date</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The due date of the process according to the service level agreement (SLA)
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>slaCompliance</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The level of compliance with the SLA
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>start_date</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The start date of the process instance
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>status</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The status of the process instance that maps to the process instance state
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
							</tbody>
						</tgroup>
					</table>
					<simpara>
						The <literal>NodeInstanceLog</literal> table contains more information about which nodes were executed inside each process instance. Whenever a node instance is entered from one of its incoming connections or is exited through one of its outgoing connections, information about the event is stored in this table.
					</simpara>
					<table colsep="1" frame="all" rowsep="1">
						<title>NodeInstanceLog table fields</title>
						<tgroup cols="3">
							<colspec colname="col_1" colwidth="33*"></colspec>
							<colspec colname="col_2" colwidth="33*"></colspec>
							<colspec colname="col_3" colwidth="33*"></colspec>
							<thead>
								<row>
									<entry align="left" valign="top">Field</entry>
									<entry align="left" valign="top">Description</entry>
									<entry align="left" valign="top">Nullable</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>id</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The primary key and ID of the log entity
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										NOT NULL
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>connection</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Actual identifier of the sequence flow that led to this node instance
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>log_date</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The date of the event
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>externalId</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Optional external identifier used to correlate to some elements, for example, a deployment ID
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>nodeid</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The node ID of the corresponding node in the process definition
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>nodeinstanceid</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The node instance ID
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>nodename</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The name of the node
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>nodetype</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The type of the node
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>processid</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The ID of the process that the process instance is executing
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>processinstanceid</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The process instance ID
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										NOT NULL
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>sla_due_date</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The due date of the node according to the service level agreement (SLA)
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>slaCompliance</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The level of compliance with the SLA
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>type</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The type of the event (0 = enter, 1 = exit)
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										NOT NULL
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>workItemId</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										(Optional, only for certain node types) The identifier of the work item
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>nodeContainerId</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The identifier of the container, if the node is inside an embedded sub-process node
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>referenceId</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The reference identifier
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
							</tbody>
						</tgroup>
					</table>
					<simpara>
						The <literal>VariableInstanceLog</literal> table contains information about changes in variable instances. By default, the process engine generates log entries after a variable changes its value. The process engine can also log entries before the changes.
					</simpara>
					<table colsep="1" frame="all" rowsep="1">
						<title>VariableInstanceLog table fields</title>
						<tgroup cols="3">
							<colspec colname="col_1" colwidth="33*"></colspec>
							<colspec colname="col_2" colwidth="33*"></colspec>
							<colspec colname="col_3" colwidth="33*"></colspec>
							<thead>
								<row>
									<entry align="left" valign="top">Field</entry>
									<entry align="left" valign="top">Description</entry>
									<entry align="left" valign="top">Nullable</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>id</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The primary key and ID of the log entity
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										NOT NULL
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>externalId</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Optional external identifier used to correlate to some elements, for example, a deployment ID
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>log_date</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The date of the event
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>processid</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The ID of the process that the process instance is executing
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>processinstanceid</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The process instance ID
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										NOT NULL
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>oldvalue</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The previous value of the variable at the time that the log is made
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>value</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The value of the variable at the time that the log is made
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>variableid</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The variable ID in the process definition
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>variableinstanceid</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The ID of the variable instance
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
							</tbody>
						</tgroup>
					</table>
					<simpara>
						The <literal>AuditTaskImpl</literal> table contains information about user tasks.
					</simpara>
					<table colsep="1" frame="all" rowsep="1">
						<title>AuditTaskImpl table fields</title>
						<tgroup cols="3">
							<colspec colname="col_1" colwidth="33*"></colspec>
							<colspec colname="col_2" colwidth="33*"></colspec>
							<colspec colname="col_3" colwidth="33*"></colspec>
							<thead>
								<row>
									<entry align="left" valign="top">Field</entry>
									<entry align="left" valign="top">Description</entry>
									<entry align="left" valign="top">Nullable</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>id</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The primary key and ID of the task log entity
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>activationTime</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Time when this task was activated
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>actualOwner</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Actual owner assigned to this task. This value is set set only when the owner claims the task.
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>createdBy</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										User who created this task
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>createdOn</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Date when the task was created
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>deploymentId</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The ID of the deployment of which this task is a part
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>description</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Description of the task
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>dueDate</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Due date set on this task
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>name</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Name of the task
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>parentId</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Parent task ID
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>priority</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Priority of the task
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>processId</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Process definition ID to which this task belongs
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>processInstanceId</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Process instance ID with which this task is associated
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>processSessionId</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										KIE session ID used to create this task
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>status</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Current status of the task
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>taskId</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Identifier of the task
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>workItemId</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Identifier of the work item assigned on the process side to this task ID
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>lastModificationDate</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The date and time when the process instance state was last recorded in the persistence database
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
							</tbody>
						</tgroup>
					</table>
					<simpara>
						The <literal>BAMTaskSummary</literal> table collects information about tasks that is used by the BAM engine to build charts and dashboards.
					</simpara>
					<table colsep="1" frame="all" rowsep="1">
						<title>BAMTaskSummary table fields</title>
						<tgroup cols="3">
							<colspec colname="col_1" colwidth="33*"></colspec>
							<colspec colname="col_2" colwidth="33*"></colspec>
							<colspec colname="col_3" colwidth="33*"></colspec>
							<thead>
								<row>
									<entry align="left" valign="top">Field</entry>
									<entry align="left" valign="top">Description</entry>
									<entry align="left" valign="top">Nullable</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>pk</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The primary key and ID of the log entity
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										NOT NULL
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>createdDate</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Date when the task was created
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>duration</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Duration since the task was created
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>endDate</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Date when the task reached an end state (complete, exit, fail, skip)
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>processinstanceid</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The process instance ID
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>startDate</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Date when the task was started
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>status</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Current status of the task
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>taskId</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Identifier of the task
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>taskName</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Name of the task
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>userId</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										User ID assigned to the task
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>optlock</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The version field that serves as its optimistic lock value
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
							</tbody>
						</tgroup>
					</table>
					<simpara>
						The <literal>TaskVariableImpl</literal> table contains information about task variable instances.
					</simpara>
					<table colsep="1" frame="all" rowsep="1">
						<title>TaskVariableImpl table fields</title>
						<tgroup cols="3">
							<colspec colname="col_1" colwidth="33*"></colspec>
							<colspec colname="col_2" colwidth="33*"></colspec>
							<colspec colname="col_3" colwidth="33*"></colspec>
							<thead>
								<row>
									<entry align="left" valign="top">Field</entry>
									<entry align="left" valign="top">Description</entry>
									<entry align="left" valign="top">Nullable</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>id</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The primary key and ID of the log entity
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										NOT NULL
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>modificationDate</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Date when the variable was modified most recently
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>name</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Name of the task
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>processid</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The ID of the process that the process instance is executing
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>processinstanceid</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The process instance ID
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>taskId</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Identifier of the task
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>type</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Type of the variable: either input or output of the task
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>value</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Variable value
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
							</tbody>
						</tgroup>
					</table>
					<simpara>
						The <literal>TaskEvent</literal> table contains information about changes in task instances. Operations such as <literal>claim</literal>, <literal>start</literal>, and <literal>stop</literal> are stored in this table to provide a timeline view of events that happened to the given task.
					</simpara>
					<table colsep="1" frame="all" rowsep="1">
						<title>TaskEvent table fields</title>
						<tgroup cols="3">
							<colspec colname="col_1" colwidth="33*"></colspec>
							<colspec colname="col_2" colwidth="33*"></colspec>
							<colspec colname="col_3" colwidth="33*"></colspec>
							<thead>
								<row>
									<entry align="left" valign="top">Field</entry>
									<entry align="left" valign="top">Description</entry>
									<entry align="left" valign="top">Nullable</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>id</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The primary key and ID of the log entity
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										NOT NULL
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>logTime</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Date when this event was saved
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>message</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Log event message
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>processinstanceid</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The process instance ID
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>taskId</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Identifier of the task
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>type</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Type of the event. Types correspond to life cycle phases of the task
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>userId</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										User ID assigned to the task
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>workItemId</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Identifier of the work item to which the task is assigned
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>optlock</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										The version field that serves as its optimistic lock value
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>correlationKey</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Correlation key of the process instance
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										<literal>processType</literal>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										Type of the process instance (process or case)
									</simpara>
									</entry>
									<entry align="left" valign="top"></entry>
								</row>
							</tbody>
						</tgroup>
					</table>
				</section>
				<section xml:id="log-to-database-con_process-engine">
					<title>Configuration for storing the process events log in a database</title>
					<simpara>
						To log process history information in a database with a default data model, you must register the logger on your session.
					</simpara>
					<formalpara>
						<title>Registering the logger on your KIE session</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">KieSession ksession = ...;
ksession.addProcessEventListener(AuditLoggerFactory.newInstance(Type.JPA, ksession, null));

// invoke methods for your session here</programlisting>
						</para>
					</formalpara>
					<simpara>
						To specify the database for storing the information, you must modify the <literal>persistence.xml</literal> file to include the audit log classes: <literal>ProcessInstanceLog</literal>, <literal>NodeInstanceLog</literal>, and <literal>VariableInstanceLog</literal>.
					</simpara>
					<formalpara>
						<title>Modified <literal>persistence.xml</literal> file that includes the audit log classes</title>
						<para>
							
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;

&lt;persistence
  version="2.0"
  xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd
  http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_2_0.xsd"
  xmlns="http://java.sun.com/xml/ns/persistence"
  xmlns:orm="http://java.sun.com/xml/ns/persistence/orm"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;

  &lt;persistence-unit name="org.jbpm.persistence.jpa" transaction-type="JTA"&gt;
    &lt;provider&gt;org.hibernate.ejb.HibernatePersistence&lt;/provider&gt;
    &lt;jta-data-source&gt;jdbc/jbpm-ds&lt;/jta-data-source&gt;
    &lt;mapping-file&gt;META-INF/JBPMorm.xml&lt;/mapping-file&gt;
    &lt;class&gt;org.drools.persistence.info.SessionInfo&lt;/class&gt;
    &lt;class&gt;org.jbpm.persistence.processinstance.ProcessInstanceInfo&lt;/class&gt;
    &lt;class&gt;org.drools.persistence.info.WorkItemInfo&lt;/class&gt;
    &lt;class&gt;org.jbpm.persistence.correlation.CorrelationKeyInfo&lt;/class&gt;
    &lt;class&gt;org.jbpm.persistence.correlation.CorrelationPropertyInfo&lt;/class&gt;
    &lt;class&gt;org.jbpm.runtime.manager.impl.jpa.ContextMappingInfo&lt;/class&gt;

    &lt;class&gt;org.jbpm.process.audit.ProcessInstanceLog&lt;/class&gt;
    &lt;class&gt;org.jbpm.process.audit.NodeInstanceLog&lt;/class&gt;
    &lt;class&gt;org.jbpm.process.audit.VariableInstanceLog&lt;/class&gt;

    &lt;properties&gt;
      &lt;property name="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"/&gt;
      &lt;property name="hibernate.max_fetch_depth" value="3"/&gt;
      &lt;property name="hibernate.hbm2ddl.auto" value="update"/&gt;
      &lt;property name="hibernate.show_sql" value="true"/&gt;
      &lt;property name="hibernate.connection.release_mode" value="after_transaction"/&gt;
      &lt;property name="hibernate.transaction.jta.platform" value="org.hibernate.service.jta.platform.internal.JBossStandAloneJtaPlatform"/&gt;
    &lt;/properties&gt;
  &lt;/persistence-unit&gt;
&lt;/persistence&gt;</programlisting>
						</para>
					</formalpara>
				</section>
				<section xml:id="log-to-jms-con_process-engine">
					<title>Configuration for sending the process events log to a JMS queue</title>
					<simpara>
						When the process engine stores events in the database with the default audit log implementation, the database operation is completed synchronously, within the same transaction as the actual execution of the process instance. This operation takes time, and on highly loaded systems it might have some impact on database performance, especially when both the history log and the runtime data are stored in the same database.
					</simpara>
					<simpara>
						As an alternative, you can use the JMS-based logger that the process engine provides. You can configure this logger to submit process log entries as messages to a JMS queue, instead of directly persisting them in the database.
					</simpara>
					<simpara>
						You can configure the JMS logger to be transactional, in order to avoid data inconsistencies if a process engine transaction is rolled back.
					</simpara>
					<formalpara>
						<title>Using the JMS audit logger</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">ConnectionFactory factory = ...;
Queue queue = ...;
StatefulKnowledgeSession ksession = ...;
Map&lt;String, Object&gt; jmsProps = new HashMap&lt;String, Object&gt;();
jmsProps.put("jbpm.audit.jms.transacted", true);
jmsProps.put("jbpm.audit.jms.connection.factory", factory);
jmsProps.put("jbpm.audit.jms.queue", queue);
ksession.addProcessEventListener(AuditLoggerFactory.newInstance(Type.JMS, ksession, jmsProps));

// invoke methods one your session here</programlisting>
						</para>
					</formalpara>
					<simpara>
						This is just one of the possible ways to configure JMS audit logger. You can use the <literal>AuditLoggerFactory</literal> class to set additional configuration parameters.
					</simpara>
				</section>
				<section xml:id="variables-auditing-con_process-engine">
					<title>Auditing of variables</title>
					<simpara>
						By default, values of process and task variables are stored in audit tables as string representations. To create string representations of non-string variable types, the process engine calls the <literal>variable.toString()</literal> method. If you use a custom class for a variable, you can implement this method for the class. In many cases this representation is sufficient.
					</simpara>
					<simpara>
						However, sometimes a string representation in the logs might not be sufficient, especially when there is a need for efficient queries by process or task variables. For example, a <literal>Person</literal> object, used as a value for a variable, might have the following structure:
					</simpara>
					<formalpara>
						<title>Example <literal>Person</literal> object, used as a process or task variable value</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">public class Person implements Serializable {

    private static final long serialVersionUID = -5172443495317321032L;
    private String name;
    private int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    @Override
    public String toString() {
        return "Person [name=" + name + ", age=" + age + "]";
    }
}</programlisting>
						</para>
					</formalpara>
					<simpara>
						The <literal>toString()</literal> method provides a human-readable format. However, it might not be sufficient for a search. A sample string value is <literal>Person [name="john", age="34"]</literal>. Searching through a large number of such strings to find people of age 34 would make a database query inefficient.
					</simpara>
					<simpara>
						To enable more efficient searching, you can audit variables using <literal>VariableIndexer</literal> objects, which extract relevant parts of the variable for storage in the audit log.
					</simpara>
					<formalpara>
						<title>Definition of the <literal>VariableIndexer</literal> interface</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">/**
 * Variable indexer that transforms a variable instance into another representation (usually string)
 * for use in log queries.
 *
 * @param &lt;V&gt; type of the object that will represent the indexed variable
 */
public interface VariableIndexer&lt;V&gt; {

    /**
     * Tests if this indexer can index a given variable
     *
     * NOTE: only one indexer can be used for a given variable
     *
     * @param variable variable to be indexed
     * @return true if the variable should be indexed with this indexer
     */
    boolean accept(Object variable);

    /**
     * Performs an index/transform operation on the variable. The result of this operation can be
     * either a single value or a list of values, to support complex type separation.
     * For example, when the variable is of the type Person that has name, address, and phone fields,
     * the indexer could build three entries out of it to represent individual fields:
     * person = person.name
     * address = person.address.street
     * phone = person.phone
     * this configuration allows advanced queries for finding relevant entries.
     * @param name name of the variable
     * @param variable actual variable value
     * @return
     */
    List&lt;V&gt; index(String name, Object variable);
}</programlisting>
						</para>
					</formalpara>
					<simpara>
						The default indexer uses the <literal>toString()</literal> method to produce a single audit entry for a single variable. Other indexers can return a list of objects from indexing a single variable.
					</simpara>
					<simpara>
						To enable efficient queries for the <literal>Person</literal> type, you can build a custom indexer that indexes a <literal>Person</literal> instance into separate audit entries, one representing the name and another representing the age.
					</simpara>
					<formalpara>
						<title>Sample indexer for the <literal>Person</literal> type</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">public class PersonTaskVariablesIndexer implements TaskVariableIndexer {

    @Override
    public boolean accept(Object variable) {
        if (variable instanceof Person) {
            return true;
        }
        return false;
    }

    @Override
    public List&lt;TaskVariable&gt; index(String name, Object variable) {

        Person person = (Person) variable;
        List&lt;TaskVariable&gt; indexed = new ArrayList&lt;TaskVariable&gt;();

        TaskVariableImpl personNameVar = new TaskVariableImpl();
        personNameVar.setName("person.name");
        personNameVar.setValue(person.getName());

        indexed.add(personNameVar);

        TaskVariableImpl personAgeVar = new TaskVariableImpl();
        personAgeVar.setName("person.age");
        personAgeVar.setValue(person.getAge()+"");

        indexed.add(personAgeVar);

        return indexed;
    }

}</programlisting>
						</para>
					</formalpara>
					<simpara>
						The process engine can use this indexer to index values when they are of the <literal>Person</literal> type, while all other variables are indexed with the default <literal>toString()</literal> method. Now, to query for process instances or tasks that refer to a person with age 34, you can use the following query:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								variable name: <literal>person.age</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								variable value: <literal>34</literal>
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						As a <literal>LIKE</literal> type query is not used, the database server can optimize the query and make it efficient on a large set of data.
					</simpara>
					<bridgehead remap="_custom_indexers" renderas="sect4" xml:id="custom_indexers">Custom indexers</bridgehead>
					<simpara>
						The process engine supports indexers for both process and task variables. However, it uses different interfaces for the indexers, because they must produce different types of objects that represent an audit view of the variable.
					</simpara>
					<simpara>
						You must implement the following interfaces to build custom indexers:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								For process variables: <literal>org.kie.internal.process.ProcessVariableIndexer</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								For task variables: <literal>org.kie.internal.task.api.TaskVariableIndexer</literal>
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						You must implement two methods for either of the interfaces:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<literal>accept</literal>: Indicates whether a type is handled by this indexer. The process engine expects that only one indexer can index a given variable value, so it uses the first indexer that accepts the type.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>index</literal>: Indexes a value, producing a object or list of objects (usually strings) for inclusion in the audit log.
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						After implementing the interface, you must package this implementation as a JAR file and list the implementation in one of the following files:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								For process variables, the <literal>META-INF/services/org.kie.internal.process.ProcessVariableIndexer</literal> file, which lists fully qualified class names of process variable indexers (single class name per line)
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								For task variables, the <literal>META-INF/services/org.kie.internal.task.api.TaskVariableIndexer</literal> file, which lists fully qualified class names of task variable indexers (single class name per line)
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						The <literal>ServiceLoader</literal> mechanism discovers the indexers using these files. When indexing a process or task variable, the process engine examines the registered indexers to find any indexer that accepts the value of the variable. If no other indexer accepts the value, the process engine applies the default indexer that uses the <literal>toString()</literal> method.
					</simpara>
				</section>
			</section>
			<section xml:id="transactions-con_process-engine">
				<title>Transactions in the process engine</title>
				<simpara>
					The process engine supports Java Transaction API (JTA) transactions.
				</simpara>
				<simpara>
					The current version of the process engine does not support pure local transactions.
				</simpara>
				<simpara>
					If you do not provide transaction boundaries inside your application, the process engine automatically executes each method invocation on the process engine in a separate transaction.
				</simpara>
				<simpara>
					Optionally, you can specify the transaction boundaries in the application code, for example, to combine multiple commands into one transaction.
				</simpara>
				<section xml:id="transaction-register-con_process-engine">
					<title>Registration of a transaction manager</title>
					<simpara>
						You must register a transaction manager in the environment to use user-defined transactions.
					</simpara>
					<simpara>
						The following sample code registers the transaction manager and uses JTA calls to specify transaction boundaries.
					</simpara>
					<formalpara>
						<title>Registering a transaction manager and using transactions</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">// Create the entity manager factory
EntityManagerFactory emf = EntityManagerFactoryManager.get().getOrCreate("org.jbpm.persistence.jpa");
TransactionManager tm = TransactionManagerServices.getTransactionManager();

// Set up the runtime environment
RuntimeEnvironment environment = RuntimeEnvironmentBuilder.Factory.get()
.newDefaultBuilder()
.addAsset(ResourceFactory.newClassPathResource("MyProcessDefinition.bpmn2"), ResourceType.BPMN2)
    .addEnvironmentEntry(EnvironmentName.TRANSACTION_MANAGER, tm)
    .get();

// Get the KIE session
RuntimeManager manager = RuntimeManagerFactory.Factory.get().newPerRequestRuntimeManager(environment);
RuntimeEngine runtime = manager.getRuntimeEngine(ProcessInstanceIdContext.get());
KieSession ksession = runtime.getKieSession();

// Start the transaction
UserTransaction ut = InitialContext.doLookup("java:comp/UserTransaction");
ut.begin();

// Perform multiple commands inside one transaction
ksession.insert( new Person( "John Doe" ) );
ksession.startProcess("MyProcess");

// Commit the transaction
ut.commit();</programlisting>
						</para>
					</formalpara>
					<simpara>
						You must provide a <literal>jndi.properties</literal> file in you root class path to create a JNDI <literal>InitialContextFactory</literal> object, because transaction-related objects like <literal>UserTransaction</literal>, <literal>TransactionManager</literal>, and <literal>TransactionSynchronizationRegistry</literal> are registered in JNDI.
					</simpara>
					<simpara>
						If your project includes the <literal>jbpm-test</literal> module, this file is already included by default.
					</simpara>
					<simpara>
						Otherwise, you must create the <literal>jndi.properties</literal> file with the following content:
					</simpara>
					<formalpara>
						<title>Content of the <literal>jndi.properties</literal> file</title>
						<para>
							
<programlisting language="properties" linenumbering="unnumbered">java.naming.factory.initial=org.jbpm.test.util.CloseSafeMemoryContextFactory
org.osjava.sj.root=target/test-classes/config
org.osjava.jndi.delimiter=/
org.osjava.sj.jndi.shared=true</programlisting>
						</para>
					</formalpara>
					<simpara>
						This configuration assumes that the <literal>simple-jndi:simple-jndi</literal> artifact is present in the class path of your project. You can also use a different JNDI implementation.
					</simpara>
					<simpara>
						By default, the Narayana JTA transaction manager is used. If you want to use a different JTA transaction manager, you can change the <literal>persistence.xml</literal> file to use the required transaction manager. For example, if your application runs on Red Hat JBoss EAP version 7 or later, you can use the JBoss transaction manager. In this case, change the transaction manager property in the <literal>persistence.xml</literal> file:
					</simpara>
					<formalpara>
						<title>Transaction manager property in the <literal>persistence.xml</literal> file for the JBoss transaction manager</title>
						<para>
							
<programlisting language="properties" linenumbering="unnumbered">&lt;property name="hibernate.transaction.jta.platform" value="org.hibernate.service.jta.platform.internal.JBossAppServerJtaPlatform" /&gt;</programlisting>
						</para>
					</formalpara>
					<warning>
						<simpara>
							Using the Singleton strategy of the <literal>RuntimeManager</literal> class with JTA transactions (<literal>UserTransaction</literal> or CMT) creates a race condition. This race condition can result in an <literal>IllegalStateException</literal> exception with a message similar to <literal>Process instance XXX is disconnected</literal>.
						</simpara>
						<simpara>
							To avoid this race condition, explicitly synchronize around the <literal>KieSession</literal> instance when invoking the transaction in the user application code.
						</simpara>
						
<programlisting language="java" linenumbering="unnumbered">synchronized (ksession) {
    try {
        tx.begin();

        // use ksession
        // application logic

        tx.commit();
    } catch (Exception e) {
        //...
    }
}</programlisting>
					</warning>
				</section>
				<section xml:id="transaction-cmt-proc_process-engine">
					<title>Configuring container-managed transactions</title>
					<simpara>
						If you embed the process engine in an application that executes in container-managed transaction (CMT) mode, for example, EJB beans, you must complete additional configuration. This configuration is especially important if the application runs on an application server that does not allow a CMT application to access a <literal>UserTransaction</literal> instance from JNDI, for example, WebSphere Application Server.
					</simpara>
					<simpara>
						The default transaction manager implementation in the process engine relies on <literal>UserTransaction</literal> to query transaction status and then uses the status to determine whether to start a transaction. In environments that prevent access to a <literal>UserTransaction</literal> instance, this implementation fails.
					</simpara>
					<simpara>
						To enable proper execution in CMT environments, the process engine provides a dedicated transaction manager implementation: <literal>org.jbpm.persistence.jta.ContainerManagedTransactionManager</literal>. This transaction manager expects that the transaction is active and always returns <literal>ACTIVE</literal> when the <literal>getStatus()</literal> method is invoked. Operations such as <literal>begin</literal>, <literal>commit</literal>, and <literal>rollback</literal> are no-op methods, because the transaction manager cannot affect these operations in container-managed transaction mode.
					</simpara>
					<note>
						<simpara>
							During process execution your code must propagate any exceptions thrown by the engine to the container to ensure that the container rolls transactions back when necessary.
						</simpara>
					</note>
					<simpara>
						To configure this transaction manager, complete the steps in this procedure.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								In your code, insert the transaction manager and persistence context manager into the environment before creating or loading a session:
							</simpara>
							<formalpara>
								<title>Inserting the transaction manager and persistence context manager into the environment</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">Environment env = EnvironmentFactory.newEnvironment();
env.set(EnvironmentName.ENTITY_MANAGER_FACTORY, emf);
env.set(EnvironmentName.TRANSACTION_MANAGER, new ContainerManagedTransactionManager());
env.set(EnvironmentName.PERSISTENCE_CONTEXT_MANAGER, new JpaProcessPersistenceContextManager(env));
env.set(EnvironmentName.TASK_PERSISTENCE_CONTEXT_MANAGER, new JPATaskPersistenceContextManager(env));</programlisting>
								</para>
							</formalpara>
						</listitem>
						<listitem>
							<simpara>
								In the <literal>persistence.xml</literal> file, configure the JPA provider. The following example uses <literal>hibernate</literal> and WebSphere Application Server.
							</simpara>
							<formalpara>
								<title>Configuring the JPA provider in the <literal>persistence.xml</literal> file</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">&lt;property name="hibernate.transaction.factory_class" value="org.hibernate.transaction.CMTTransactionFactory"/&gt;
&lt;property name="hibernate.transaction.jta.platform" value="org.hibernate.service.jta.platform.internal.WebSphereJtaPlatform"/&gt;</programlisting>
								</para>
							</formalpara>
						</listitem>
						<listitem>
							<simpara>
								To dispose a KIE session, do not dispose it directly. Instead, execute the <literal>org.jbpm.persistence.jta.ContainerManagedTransactionDisposeCommand</literal> command. This commands ensures that the session is disposed at the completion of the current transaction. In the following example, <literal>ksession</literal> is the <literal>KieSession</literal> object that you want to dispose.
							</simpara>
							<formalpara>
								<title>Disposing a KIE session using the <literal>ContainerManagedTransactionDisposeCommand</literal> command</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">ksession.execute(new ContainerManagedTransactionDisposeCommand());</programlisting>
								</para>
							</formalpara>
							<simpara>
								Directly disposing the session causes an exception at the completion of the transaction, because the process engine registers transaction synchronization to clean up the session state.
							</simpara>
						</listitem>
					</orderedlist>
				</section>
			</section>
			<section xml:id="persistence-configuration-con_process-engine">
				<title>Configuration of persistence in the process engine</title>
				<simpara>
					If you use the process engine without configuring any persistence, it does not save runtime data to any database; no in-memory database is available by default. You can use this mode if it is required for performance reasons or when you want to manage persistence yourself.
				</simpara>
				<simpara>
					To use JPA persistence in the process engine, you must configure it.
				</simpara>
				<simpara>
					Configuration usually requires adding the necessary dependencies, configuring a data source, and creating the process engine classes with persistence configured.
				</simpara>
				<section xml:id="persistence-configuration-file-con_process-engine">
					<title>Configuration in the <literal>persistence.xml</literal> file</title>
					<simpara>
						To use JPA persistence, you must add a <literal>persistence.xml</literal> persistence configuration to your class path to configure JPA to use Hibernate and the H2 database (or any other database that you prefer). Place this file in the <literal>META-INF</literal> directory of your project.
					</simpara>
					<formalpara>
						<title>Sample <literal>persistence.xml</literal> file</title>
						<para>
							
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;persistence
      version="2.0"
      xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd
      http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_2_0.xsd"
      xmlns="http://java.sun.com/xml/ns/persistence"
      xmlns:orm="http://java.sun.com/xml/ns/persistence/orm"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;

  &lt;persistence-unit name="org.jbpm.persistence.jpa" transaction-type="JTA"&gt;
    &lt;provider&gt;org.hibernate.ejb.HibernatePersistence&lt;/provider&gt;
    &lt;jta-data-source&gt;jdbc/jbpm-ds&lt;/jta-data-source&gt;
    &lt;mapping-file&gt;META-INF/JBPMorm.xml&lt;/mapping-file&gt;
    &lt;class&gt;org.drools.persistence.info.SessionInfo&lt;/class&gt;
    &lt;class&gt;org.jbpm.persistence.processinstance.ProcessInstanceInfo&lt;/class&gt;
    &lt;class&gt;org.drools.persistence.info.WorkItemInfo&lt;/class&gt;
    &lt;class&gt;org.jbpm.persistence.correlation.CorrelationKeyInfo&lt;/class&gt;
    &lt;class&gt;org.jbpm.persistence.correlation.CorrelationPropertyInfo&lt;/class&gt;
    &lt;class&gt;org.jbpm.runtime.manager.impl.jpa.ContextMappingInfo&lt;/class&gt;

    &lt;properties&gt;
      &lt;property name="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"/&gt;
      &lt;property name="hibernate.max_fetch_depth" value="3"/&gt;
      &lt;property name="hibernate.hbm2ddl.auto" value="update"/&gt;
      &lt;property name="hibernate.show_sql" value="true"/&gt;
      &lt;property name="hibernate.connection.release_mode" value="after_transaction"/&gt;
            &lt;property name="hibernate.transaction.jta.platform" value="org.hibernate.service.jta.platform.internal.JBossStandAloneJtaPlatform"/&gt;
    &lt;/properties&gt;
  &lt;/persistence-unit&gt;
&lt;/persistence&gt;</programlisting>
						</para>
					</formalpara>
					<simpara>
						The example refers to a <literal>jdbc/jbpm-ds</literal> data source. For instructions about configuring a data source, see <xref linkend="persistence-datasources-con_process-engine" />.
					</simpara>
				</section>
				<section xml:id="persistence-datasources-con_process-engine">
					<title>Configuration of data sources for process engine persistence</title>
					<simpara>
						To configure JPA persistence in the process engine, you must provide a data source, which represents a database backend.
					</simpara>
					<simpara>
						If you run your application in an application server, such as Red Hat JBoss EAP, you can use the application server to set up data sources, for example, by adding a data source configuration file in the <literal>deploy</literal> directory. For instructions about creating data sources, see the documentaion for the application server.
					</simpara>
					<simpara>
						If you deploy your application to Red Hat JBoss EAP, you can create a data source by creating a configuration file in the <literal>deploy</literal> directory:
					</simpara>
					<formalpara>
						<title>Example data source configuration file for Red Hat JBoss EAP</title>
						<para>
							
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;datasources&gt;
  &lt;local-tx-datasource&gt;
    &lt;jndi-name&gt;jdbc/jbpm-ds&lt;/jndi-name&gt;
    &lt;connection-url&gt;jdbc:h2:tcp://localhost/~/test&lt;/connection-url&gt;
    &lt;driver-class&gt;org.h2.jdbcx.JdbcDataSource&lt;/driver-class&gt;
    &lt;user-name&gt;sa&lt;/user-name&gt;
    &lt;password&gt;&lt;/password&gt;
  &lt;/local-tx-datasource&gt;
&lt;/datasources&gt;</programlisting>
						</para>
					</formalpara>
					<simpara>
						If your application runs in a plain Java environment, you can use Narayana and Tomcat DBCP by using the <literal>DataSourceFactory</literal> class from the <literal>kie-test-util</literal> module supplied by Red Hat Process Automation Manager. See the following code fragment. This example uses the H2 in-memory database in combination with Narayana and Tomcat DBCP.
					</simpara>
					<formalpara>
						<title>Example code configuring an H2 in-memory database data source</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">Properties driverProperties = new Properties();
driverProperties.put("user", "sa");
driverProperties.put("password", "sa");
driverProperties.put("url", "jdbc:h2:mem:jbpm-db;MVCC=true");
driverProperties.put("driverClassName", "org.h2.Driver");
driverProperties.put("className", "org.h2.jdbcx.JdbcDataSource");
PoolingDataSourceWrapper pdsw = DataSourceFactory.setupPoolingDataSource("jdbc/jbpm-ds", driverProperties);</programlisting>
						</para>
					</formalpara>
				</section>
				<section xml:id="persistence-dependencies-ref_process-engine">
					<title>Dependencies for persistence</title>
					<simpara>
						Persistence requires certain JAR artifact dependencies.
					</simpara>
					<simpara>
						The <literal>jbpm-persistence-jpa.jar</literal> file is always required. This file contains the code for saving the runtime state whenever necessary.
					</simpara>
					<simpara>
						Depending on the persistence solution and database you are using, you might need additional dependencies. The default configuration combination includes the following components:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								Hibernate as the JPA persistence provider
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								H2 in-memory database
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Narayana for JTA-based transaction management
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Tomcat DBCP for connection pooling capabilities
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						This configuration requires the following additional dependencies:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<literal>jbpm-persistence-jpa</literal> (<literal>org.jbpm</literal>)
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>drools-persistence-jpa</literal> (<literal>org.drools</literal>)
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>persistence-api</literal> (<literal>javax.persistence</literal>)
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>hibernate-entitymanager</literal> (<literal>org.hibernate</literal>)
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>hibernate-annotations</literal> (<literal>org.hibernate</literal>)
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>hibernate-commons-annotations</literal> (<literal>org.hibernate</literal>)
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>hibernate-core</literal> (<literal>org.hibernate</literal>)
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>commons-collections</literal> (<literal>commons-collections</literal>)
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>dom4j</literal> (<literal>org.dom4j</literal>)
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>jta</literal> (<literal>javax.transaction</literal>)
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>narayana-jta</literal> (<literal>org.jboss.narayana.jta</literal>)
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>tomcat-dbcp</literal> (<literal>org.apache.tomcat</literal>)
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>jboss-transaction-api_1.2_spec</literal> (<literal>org.jboss.spec.javax.transaction</literal>)
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>javassist</literal> (<literal>javassist</literal>)
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>slf4j-api</literal> (<literal>org.slf4j</literal>)
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>slf4j-jdk14</literal> (<literal>org.slf4j</literal>)
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>simple-jndi</literal> (<literal>simple-jndi</literal>)
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>h2</literal> (<literal>com.h2database</literal>)
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>jbpm-test</literal> (<literal>org.jbpm</literal>) only for testing, do not include this artifact in the production application
							</simpara>
						</listitem>
					</itemizedlist>
				</section>
				<section xml:id="persistence-kiesession-proc_process-engine">
					<title>Creating a KIE session with persistence</title>
					<simpara>
						If your code creates KIE sessions directly, you can use the <literal>JPAKnowledgeService</literal> class to create your KIE session. This approach provides full access to the underlying configuration.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								Create a KIE session using the <literal>JPAKnowledgeService</literal> class, based on a KIE base, a KIE session configuration (if necessary), and an environment. The environment must contain a reference to the Entity Manager Factory that you use for persistence.
							</simpara>
							<formalpara>
								<title>Creating a KIE session with persistence</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">// create the entity manager factory and register it in the environment
EntityManagerFactory emf =
    Persistence.createEntityManagerFactory( "org.jbpm.persistence.jpa" );
Environment env = KnowledgeBaseFactory.newEnvironment();
env.set( EnvironmentName.ENTITY_MANAGER_FACTORY, emf );

// create a new KIE session that uses JPA to store the runtime state
StatefulKnowledgeSession ksession = JPAKnowledgeService.newStatefulKnowledgeSession( kbase, null, env );
int sessionId = ksession.getId();

// invoke methods on your method here
ksession.startProcess( "MyProcess" );
ksession.dispose();</programlisting>
								</para>
							</formalpara>
						</listitem>
						<listitem>
							<simpara>
								To re-create a session from the database based on a specific session ID, use the <literal>JPAKnowledgeService.loadStatefulKnowledgeSession()</literal> method:
							</simpara>
							<formalpara>
								<title>Re-creating a KIE session from the persistence database</title>
								<para>
									
<programlisting language="java" linenumbering="unnumbered">// re-create the session from database using the sessionId
ksession = JPAKnowledgeService.loadStatefulKnowledgeSession(sessionId, kbase, null, env );</programlisting>
								</para>
							</formalpara>
						</listitem>
					</orderedlist>
				</section>
				<section xml:id="persistence-runtimemanager-con_process-engine">
					<title>Persistence in the runtime manager</title>
					<simpara>
						If your code uses the <literal>RuntimeManager</literal> class, use the <literal>RuntimeEnvironmentBuilder</literal> class to configure the environment for persistence. By default, the runtime manager searches for the <literal>org.jbpm.persistence.jpa</literal> persistence unit.
					</simpara>
					<simpara>
						The following example creates a <literal>KieSession</literal> with an empty context.
					</simpara>
					<formalpara>
						<title>Creating a KIE session with an empty context using the runtime manager</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">RuntimeEnvironmentBuilder builder = RuntimeEnvironmentBuilder.Factory.get()
        .newDefaultBuilder()
        .knowledgeBase(kbase);
RuntimeManager manager = RuntimeManagerFactory.Factory.get()
        .newSingletonRuntimeManager(builder.get(), "com.sample:example:1.0");
RuntimeEngine engine = manager.getRuntimeEngine(EmptyContext.get());
KieSession ksession = engine.getKieSession();</programlisting>
						</para>
					</formalpara>
					<simpara>
						The prevous example requires a KIE base as the <literal>kbase</literal> parameter. You can use a <literal>kmodule.xml</literal> KJAR descriptor on the class path to buld the KIE base.
					</simpara>
					<formalpara>
						<title>Building a KIE base from a <literal>kmodule.xml</literal> KJAR descriptor</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">KieServices ks = KieServices.Factory.get();
KieContainer kContainer = ks.getKieClasspathContainer();
KieBase kbase = kContainer.getKieBase("kbase");</programlisting>
						</para>
					</formalpara>
					<simpara>
						A <literal>kmodule.xml</literal> descriptor file can include an attribute for resource packages to scan to find and deploy process engine workflows.
					</simpara>
					<formalpara>
						<title>Sample <literal>kmodule.xml</literal> descriptor file</title>
						<para>
							
<programlisting language="xml" linenumbering="unnumbered">&lt;kmodule xmlns="http://jboss.org/kie/6.0.0/kmodule"&gt;
  &lt;kbase name="kbase" packages="com.sample"/&gt;
&lt;/kmodule&gt;</programlisting>
						</para>
					</formalpara>
					<simpara>
						To control the persistence, you can use the <literal>RuntimeEnvironmentBuilder::entityManagerFactory</literal> methods.
					</simpara>
					<formalpara>
						<title>Controlling configuration of persistence in the runtime manager</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">EntityManagerFactory emf = Persistence.createEntityManagerFactory("org.jbpm.persistence.jpa");

RuntimeEnvironment runtimeEnv = RuntimeEnvironmentBuilder.Factory
        .get()
        .newDefaultBuilder()
        .entityManagerFactory(emf)
        .knowledgeBase(kbase)
        .get();

StatefulKnowledgeSession ksession = (StatefulKnowledgeSession) RuntimeManagerFactory.Factory.get()
        .newSingletonRuntimeManager(runtimeEnv)
        .getRuntimeEngine(EmptyContext.get())
        .getKieSession();</programlisting>
						</para>
					</formalpara>
					<simpara>
						After creating the <literal>ksession</literal> KIE session in this example, you can call methods in <literal>ksession</literal>, for example, <literal>StartProcess()</literal>. The process engine persists the runtime state in the configured data source.
					</simpara>
					<simpara>
						You can restore a process instance from persistent storage by using the process instance ID. The runtime manager automatically re-creates the required session.
					</simpara>
					<formalpara>
						<title>Re-creating a KIE session from the persistence database using a process instance ID</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">RuntimeEngine runtime = manager.getRuntimeEngine(ProcessInstanceIdContext.get(processInstanceId));

KieSession session = runtime.getKieSession();</programlisting>
						</para>
					</formalpara>
				</section>
			</section>
			<section xml:id="process-variables-persist-proc_process-engine">
				<title>Persisting process variables in a separate database schema in Red Hat Process Automation Manager</title>
				<simpara>
					When you create process variables to use within the processes that you define, Red Hat Process Automation Manager stores those process variables as binary data in a default database schema. You can persist process variables in a separate database schema for greater flexibility in maintaining and implementing your process data.
				</simpara>
				<simpara>
					For example, persisting your process variables in a separate database schema can help you perform the following tasks:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Maintain process variables in human-readable format
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Make the variables available to services outside of Red Hat Process Automation Manager
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Clear the log of the default database tables in Red Hat Process Automation Manager without losing process variable data
						</simpara>
					</listitem>
				</itemizedlist>
				<note>
					<simpara>
						This procedure applies to process variables only. This procedure does not apply to case variables.
					</simpara>
				</note>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have defined processes in Red Hat Process Automation Manager for which you want to implement variables.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							If you want to persist variables in a database schema outside of Red Hat Process Automation Manager, you have created a data source and the separate database schema that you want to use. For information about creating data sources, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.10/html-single/managing_red_hat_process_automation_manager_and_kie_server_settings#managing-business-central-data-sources-con"><emphasis>Configuring Business Central settings and properties</emphasis></link>.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In the data object file that you use as a process variable, add the following elements to configure variable persistence:
						</simpara>
						<formalpara>
							<title>Example Person.java object configured for variable persistence</title>
							<para>
								
<programlisting language="java" linenumbering="unnumbered">@javax.persistence.Entity  <co xml:id="CO1-1"></co>
@javax.persistence.Table(name = "Person")  <co xml:id="CO1-2"></co>
public class Person extends org.drools.persistence.jpa.marshaller.VariableEntity  <co xml:id="CO1-3"></co>
implements java.io.Serializable {  <co xml:id="CO1-4"></co>

	static final long serialVersionUID = 1L;

	@javax.persistence.GeneratedValue(strategy = javax.persistence.GenerationType.AUTO, generator = "PERSON_ID_GENERATOR")
	@javax.persistence.Id  <co xml:id="CO1-5"></co>
	@javax.persistence.SequenceGenerator(name = "PERSON_ID_GENERATOR", sequenceName = "PERSON_ID_SEQ")
	private java.lang.Long id;

	private java.lang.String name;

	private java.lang.Integer age;

	public Person() {
	}

	public java.lang.Long getId() {
		return this.id;
	}

	public void setId(java.lang.Long id) {
		this.id = id;
	}

	public java.lang.String getName() {
		return this.name;
	}

	public void setName(java.lang.String name) {
		this.name = name;
	}

	public java.lang.Integer getAge() {
		return this.age;
	}

	public void setAge(java.lang.Integer age) {
		this.age = age;
	}

	public Person(java.lang.Long id, java.lang.String name,
			java.lang.Integer age) {
		this.id = id;
		this.name = name;
		this.age = age;
	}

}</programlisting>
							</para>
						</formalpara>
						<calloutlist>
							<callout arearefs="CO1-1">
								<para>
									Configures the data object as a persistence entity.
								</para>
							</callout>
							<callout arearefs="CO1-2">
								<para>
									Defines the database table name used for the data object.
								</para>
							</callout>
							<callout arearefs="CO1-3">
								<para>
									Creates a separate <literal>MappedVariable</literal> mapping table that maintains the relationship between this data object and the associated process instance. If you do not need this relationship maintained, you do not need to extend the <literal>VariableEntity</literal> class. Without this extension, the data object is still persisted, but contains no additional data.
								</para>
							</callout>
							<callout arearefs="CO1-4">
								<para>
									Configures the data object as a serializable object.
								</para>
							</callout>
							<callout arearefs="CO1-5">
								<para>
									Sets a persistence ID for the object.
								</para>
							</callout>
						</calloutlist>
						<simpara>
							To make the data object persistable using Business Central, navigate to the data object file in your project, click the <emphasis role="strong">Persistence</emphasis> icon in the upper-right corner of the window, and configure the persistence behavior:
						</simpara>
						<figure>
							<title>Persistence configuration in Business Central</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/Persistence/persistence-in-central.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>persistence in central</phrase>
								</textobject>
							</mediaobject>
						</figure>
					</listitem>
					<listitem>
						<simpara>
							In the <literal>pom.xml</literal> file of your project, add the following dependency for persistence support. This dependency contains the <literal>VariableEntity</literal> class that you configured in your data object.
						</simpara>
						<formalpara>
							<title>Project dependency for persistence</title>
							<para>
								
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
  &lt;groupId&gt;org.drools&lt;/groupId&gt;
  &lt;artifactId&gt;drools-persistence-jpa&lt;/artifactId&gt;
  &lt;version&gt;${rhpam.version}&lt;/version&gt;
  &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;</programlisting>
							</para>
						</formalpara>
					</listitem>
					<listitem>
						<simpara>
							In the <literal>~/META-INF/kie-deployment-descriptor.xml</literal> file of your project, configure the JPA marshalling strategy and a persistence unit to be used with the marshaller. The JPA marshalling strategy and persistence unit are required for objects defined as entities.
						</simpara>
						<formalpara>
							<title>JPA marshaller and persistence unit configured in the kie-deployment-descriptor.xml file</title>
							<para>
								
<programlisting language="xml" linenumbering="unnumbered">&lt;marshalling-strategy&gt;
  &lt;resolver&gt;mvel&lt;/resolver&gt;
  &lt;identifier&gt;new org.drools.persistence.jpa.marshaller.JPAPlaceholderResolverStrategy("myPersistenceUnit", classLoader)&lt;/identifier&gt;
  &lt;parameters/&gt;
&lt;/marshalling-strategy&gt;</programlisting>
							</para>
						</formalpara>
					</listitem>
					<listitem>
						<simpara>
							In the <literal>~/META-INF</literal> directory of your project, create a <literal>persistence.xml</literal> file that specifies in which data source you want to persist the process variable:
						</simpara>
						<formalpara>
							<title>Example persistence.xml file with data source configuration</title>
							<para>
								
<programlisting language="xml" linenumbering="unnumbered">&lt;persistence xmlns="http://java.sun.com/xml/ns/persistence" xmlns:orm="http://java.sun.com/xml/ns/persistence/orm" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="2.0" xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_2_0.xsd"&gt;
    &lt;persistence-unit name="myPersistenceUnit" transaction-type="JTA"&gt;
        &lt;provider&gt;org.hibernate.jpa.HibernatePersistenceProvider&lt;/provider&gt;
        &lt;jta-data-source&gt;java:jboss/datasources/ExampleDS&lt;/jta-data-source&gt;  <co xml:id="CO2-1"></co>
        &lt;class&gt;org.space.example.Person&lt;/class&gt;
        &lt;exclude-unlisted-classes&gt;true&lt;/exclude-unlisted-classes&gt;
        &lt;properties&gt;
            &lt;property name="hibernate.dialect" value="org.hibernate.dialect.PostgreSQLDialect"/&gt;
            &lt;property name="hibernate.max_fetch_depth" value="3"/&gt;
            &lt;property name="hibernate.hbm2ddl.auto" value="update"/&gt;
            &lt;property name="hibernate.show_sql" value="true"/&gt;
            &lt;property name="hibernate.id.new_generator_mappings" value="false"/&gt;
            &lt;property name="hibernate.transaction.jta.platform" value="org.hibernate.service.jta.platform.internal.JBossAppServerJtaPlatform"/&gt;
        &lt;/properties&gt;
    &lt;/persistence-unit&gt;
&lt;/persistence&gt;</programlisting>
							</para>
						</formalpara>
						<calloutlist>
							<callout arearefs="CO2-1">
								<para>
									Sets the data source in which the process variable is persisted
								</para>
							</callout>
						</calloutlist>
						<simpara>
							To configure the marshalling strategy, persistence unit, and data source using Business Central, navigate to project <emphasis role="strong">Settings</emphasis> → <emphasis role="strong">Deployments</emphasis> → <emphasis role="strong">Marshalling Strategies</emphasis> and to project <emphasis role="strong">Settings</emphasis> → <emphasis role="strong">Persistence</emphasis>:
						</simpara>
						<figure>
							<title>JPA marshaller configuration in Business Central</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/Persistence/jpa-marhsalling-strategy.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>jpa marhsalling strategy</phrase>
								</textobject>
							</mediaobject>
						</figure>
						<figure>
							<title>Persistence unit and data source configuration in Business Central</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/_images/Persistence/persistence-unit.png" format="PNG" />
								</imageobject>
								<textobject>
									<phrase>persistence unit</phrase>
								</textobject>
							</mediaobject>
						</figure>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
		<chapter xml:id="integration-java-con_process-engine">
			<title>Integration with Java frameworks</title>
			<simpara>
				You can integrate the process engine with several industry-standard Java frameworks, such as Apache Maven, CDI, Spring, and EJB..
			</simpara>
			<section xml:id="integration-maven-con_process-engine">
				<title>Integration with Apache Maven</title>
				<simpara>
					The process engine uses Maven for two main purposes:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							To create KJAR artifacts, which are deployment units that the process engine can install into a runtime environment for execution
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							To manage dependencies for building applications that embed the process engine
						</simpara>
					</listitem>
				</itemizedlist>
				<section xml:id="integration-maven-kjar-con_process-engine">
					<title>Maven artifacts as deployment units</title>
					<simpara>
						The process engine provides a mechanism to deploy processes from Apache Maven artifacts. These artifacts are in the JAR file format and are known as <emphasis>KJAR files</emphasis>, or informally <emphasis>KJARs</emphasis>. A KJAR file includes a descriptor that defines a KIE base and KIE session. It also contains the business assets, including process definitions, that the process engine can load into the KIE base.
					</simpara>
					<simpara>
						The descriptor of a KJAR file is represented by an XML file named <literal>kie-deployment-descriptor.xml</literal>. The descriptor can be empty, in which case the default configuration applies. It can also provide custom configuration for the KIE base and KIE session.
					</simpara>
					<formalpara>
						<title>An empty <literal>kie-deployment-descriptor.xml</literal> descriptor</title>
						<para>
							
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;deployment-descriptor xsi:schemaLocation="http://www.jboss.org/jbpm deployment-descriptor.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
    &lt;persistence-unit&gt;org.jbpm.domain&lt;/persistence-unit&gt;
    &lt;audit-persistence-unit&gt;org.jbpm.domain&lt;/audit-persistence-unit&gt;
    &lt;audit-mode&gt;JPA&lt;/audit-mode&gt;
    &lt;persistence-mode&gt;JPA&lt;/persistence-mode&gt;
    &lt;runtime-strategy&gt;SINGLETON&lt;/runtime-strategy&gt;
    &lt;marshalling-strategies/&gt;
    &lt;event-listeners/&gt;
    &lt;task-event-listeners/&gt;
    &lt;globals/&gt;
    &lt;work-item-handlers /&gt;
    &lt;environment-entries/&gt;
    &lt;configurations/&gt;
    &lt;required-roles/&gt;
    &lt;remoteable-classes/&gt;
&lt;/deployment-descriptor&gt;</programlisting>
						</para>
					</formalpara>
					<simpara>
						With an empty <literal>kie-deployment-descriptor.xml</literal> descriptor, the following default configuration applies:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								A single default KIE base is created with the following characteristics:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										It contains all assets from all packages in the KJAR file
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Its event processing mode is set to <literal>cloud</literal>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Its equality behaviour is set to <literal>identity</literal>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Its declarative agenda is disabled
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										For CDI applications, its scope is set to <literal>ApplicationScope</literal>
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								A single default stateless KIE session is created with the following characteristics:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										It is bound to the single KIE base
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Its clock type is set to <literal>real time</literal>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										For CDI applications, its scope is set to <literal>ApplicationScope</literal>
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								A single default stateful KIE session is created with the following characteristics:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										It is bound to the single KIE base
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Its clock type is set to <literal>real time</literal>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										For CDI applications, its scope is set to <literal>ApplicationScope</literal>
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
					</itemizedlist>
					<simpara>
						If you do not want to use the defaults, you can change all configuration settings using the <literal>kie-deployment-descriptor.xml</literal> file. You can find the complete specification of all elements for this file in the <link xlink:href="https://github.com/kiegroup/droolsjbpm-knowledge/blob/7.48.0.Final/kie-internal/src/main/resources/deployment-descriptor.xsd">XSD schema</link>.
					</simpara>
					<simpara>
						The following sample shows a custom <literal>kie-deployment-descriptor.xml</literal> file that configures the runtime engine. This example configures the most common options and includes a single work item handler. You can also use the <literal>kie-deployment-descriptor.xml</literal> file to configure other options.
					</simpara>
					<formalpara>
						<title>Sample custom <literal>kie-deployment-descriptor.xml</literal> file</title>
						<para>
							
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;deployment-descriptor xsi:schemaLocation="http://www.jboss.org/jbpm deployment-descriptor.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
    &lt;persistence-unit&gt;org.jbpm.domain&lt;/persistence-unit&gt;
    &lt;audit-persistence-unit&gt;org.jbpm.domain&lt;/audit-persistence-unit&gt;
    &lt;audit-mode&gt;JPA&lt;/audit-mode&gt;
    &lt;persistence-mode&gt;JPA&lt;/persistence-mode&gt;
    &lt;runtime-strategy&gt;SINGLETON&lt;/runtime-strategy&gt;
    &lt;marshalling-strategies/&gt;
    &lt;event-listeners/&gt;
    &lt;task-event-listeners/&gt;
    &lt;globals/&gt;
    &lt;work-item-handlers&gt;
        &lt;work-item-handler&gt;
            &lt;resolver&gt;mvel&lt;/resolver&gt;
            &lt;identifier&gt;new org.jbpm.process.workitem.bpmn2.ServiceTaskHandler(ksession, classLoader)&lt;/identifier&gt;
            &lt;parameters/&gt;
            &lt;name&gt;Service Task&lt;/name&gt;
        &lt;/work-item-handler&gt;
    &lt;/work-item-handlers&gt;
    &lt;environment-entries/&gt;
    &lt;configurations/&gt;
    &lt;required-roles/&gt;
    &lt;remoteable-classes/&gt;
&lt;/deployment-descriptor&gt;</programlisting>
						</para>
					</formalpara>
					<note>
						<simpara>
							If you use the <literal>RuntimeManager</literal> class, this class creates <literal>KieSession</literal> instances, not the <literal>KieContainer</literal> class. However, the <literal>kie-deployment-descriptor.xml</literal> model is always used as a base of the construction process. The <literal>KieContainer</literal> class always creates the <literal>KieBase</literal> instance.
						</simpara>
					</note>
					<simpara>
						You can reference KJAR artifacts, like any other Maven artifacts, using the GAV (group, artifact, version) value. When deploying units from KJAR files, the process engine uses the GAV value as the release ID in the KIE API. You can use the GAV value to deploy KJAR artifacts into a runtime environment, for example, a KIE Server.
					</simpara>
				</section>
				<section xml:id="integration-maven-dependency-con_process-engine">
					<title>Dependency management with Maven</title>
					<simpara>
						When you build projects that embed the process engine, use Apache Maven to configure all dependencies required by the process engine.
					</simpara>
					<simpara>
						The process engine provides a set of BOMs (Bills of Material) to simplify declaring artifact dependencies.
					</simpara>
					<simpara>
						Use the top-level <literal>pom.xml</literal> file of your project to define dependency management for embedding the process engine, as shown in the following example. The example includes the main runtime dependencies, which are applicable whether the application is deployed on an application server, in a servlet container, or as a standalone application.
					</simpara>
					<simpara>
						This example also includes version properties for components that applications using the process engine commonly need. Adjust the list of components and versions as necessary. You can view the third-party dependency versions that the product team tests in the <link xlink:href="https://github.com/kiegroup/droolsjbpm-build-bootstrap/blob/7.48.0.Final/pom.xml">parent <literal>pom.xml</literal> file in the Github repository</link>.
					</simpara>
					<formalpara>
						<title>Maven dependency management settings for embedding the process engine</title>
						<para>
							
<programlisting language="xml" linenumbering="unnumbered">  &lt;properties&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;version.org.drools&gt;7.48.0.Final-redhat-00002&lt;/version.org.drools&gt;
    &lt;version.org.jbpm&gt;7.48.0.Final-redhat-00002&lt;/version.org.jbpm&gt;
    &lt;hibernate.version&gt;5.3.17.Final&lt;/hibernate.version&gt;
    &lt;hibernate.core.version&gt;5.3.17.Final&lt;/hibernate.core.version&gt;
    &lt;slf4j.version&gt;1.7.26&lt;/slf4j.version&gt;
    &lt;jboss.javaee.version&gt;1.0.0.Final&lt;/jboss.javaee.version&gt;
    &lt;logback.version&gt;1.2.9&lt;/logback.version&gt;
    &lt;h2.version&gt;1.3.173&lt;/h2.version&gt;
    &lt;narayana.version&gt;5.9.0.Final&lt;/narayana.version&gt;
    &lt;jta.version&gt;1.0.1.Final&lt;/jta.version&gt;
    &lt;junit.version&gt;4.13.1&lt;/junit.version&gt;
  &lt;/properties&gt;
  &lt;dependencyManagement&gt;
    &lt;dependencies&gt;
      &lt;!-- define Drools BOM --&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.drools&lt;/groupId&gt;
        &lt;artifactId&gt;drools-bom&lt;/artifactId&gt;
        &lt;type&gt;pom&lt;/type&gt;
        &lt;version&gt;${version.org.drools}&lt;/version&gt;
        &lt;scope&gt;import&lt;/scope&gt;
      &lt;/dependency&gt;
      &lt;!-- define jBPM BOM --&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.jbpm&lt;/groupId&gt;
        &lt;artifactId&gt;jbpm-bom&lt;/artifactId&gt;
        &lt;type&gt;pom&lt;/type&gt;
        &lt;version&gt;${version.org.jbpm}&lt;/version&gt;
        &lt;scope&gt;import&lt;/scope&gt;
      &lt;/dependency&gt;
    &lt;/dependencies&gt;
  &lt;/dependencyManagement&gt;</programlisting>
						</para>
					</formalpara>
					<simpara>
						In modules that use the process engine Java API (KIE API), declare the necessary process engine dependencies and other components that the modules require, as in the following example:
					</simpara>
					<formalpara>
						<title>Dependencies for modules that use the KIE API</title>
						<para>
							
<programlisting language="xml" linenumbering="unnumbered">    &lt;dependency&gt;
      &lt;groupId&gt;org.jbpm&lt;/groupId&gt;
      &lt;artifactId&gt;jbpm-flow&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.jbpm&lt;/groupId&gt;
      &lt;artifactId&gt;jbpm-flow-builder&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.jbpm&lt;/groupId&gt;
      &lt;artifactId&gt;jbpm-bpmn2&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.jbpm&lt;/groupId&gt;
      &lt;artifactId&gt;jbpm-persistence-jpa&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.jbpm&lt;/groupId&gt;
      &lt;artifactId&gt;jbpm-human-task-core&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.jbpm&lt;/groupId&gt;
      &lt;artifactId&gt;jbpm-runtime-manager&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
      &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;
      &lt;version&gt;${slf4j.version}&lt;/version&gt;
    &lt;/dependency&gt;</programlisting>
						</para>
					</formalpara>
					<simpara>
						If your application uses persistence and transactions, you must add artifacts that implement the JTA and JPA frameworks. Additional dependencies are required for testing the workflow components before actual deployment.
					</simpara>
					<simpara>
						The following example defines the dependencies that include Hibernate for JPA, the H2 database for persistence, Narayana for JTA, and the components needed for testing. This example uses the <literal>test</literal> scope. Adjust this example as necessary for your application. For production use, remove the <literal>test</literal> scope.
					</simpara>
					<formalpara>
						<title>Example test module dependencies for the process engine</title>
						<para>
							
<programlisting language="xml" linenumbering="unnumbered">    &lt;!-- test dependencies --&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.jbpm&lt;/groupId&gt;
      &lt;artifactId&gt;jbpm-shared-services&lt;/artifactId&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;
      &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;
      &lt;version&gt;${logback.version}&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;junit&lt;/groupId&gt;
      &lt;artifactId&gt;junit&lt;/artifactId&gt;
      &lt;version&gt;${junit.version}&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-entitymanager&lt;/artifactId&gt;
      &lt;version&gt;${hibernate.version}&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;
      &lt;version&gt;${hibernate.core.version}&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;com.h2database&lt;/groupId&gt;
      &lt;artifactId&gt;h2&lt;/artifactId&gt;
      &lt;version&gt;${h2.version}&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;jboss-transaction-api_1.2_spec&lt;/groupId&gt;
      &lt;artifactId&gt;org.jboss.spec.javax.transaction&lt;/artifactId&gt;
      &lt;version&gt;${jta.version}&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.jboss.narayana.jta&lt;/groupId&gt;
      &lt;artifactId&gt;narayana-jta&lt;/artifactId&gt;
      &lt;version&gt;${narayana.version}&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;</programlisting>
						</para>
					</formalpara>
					<simpara>
						With this configuration you can embed the process engine in your application and use the KIE API to interact with processes, rules, and events.
					</simpara>
					<bridgehead remap="_maven_repositories" renderas="sect4" xml:id="maven_repositories">Maven repositories</bridgehead>
					<simpara>
						To use Red Hat product versions of Maven dependencies, you must configure the Red Hat JBoss Enterprise Maven repository in the top-level <literal>pom.xml</literal> file. For information about this repository, see <link xlink:href="https://access.redhat.com/maven-repository">JBoss Enterprise Maven Repository</link>.
					</simpara>
					<simpara>
						Alternatively, download the <literal>rhpam-7.10.0-maven-repository.zip</literal> product deliverable file from the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?downloadType=distributions&amp;product=rhpam&amp;productChanged=yes">Software Downloads</link> page of the Red Hat Customer Portal and make the contents of this file available as a local Maven repository.
					</simpara>
				</section>
			</section>
			<section xml:id="integration-cdi-con_process-engine">
				<title>Integration with CDI</title>
				<simpara>
					The process engine supports integration with CDI automatically. You can use most of its API in the CDI framework without any modification.
				</simpara>
				<simpara>
					The process engine also provides some dedicated modules that are designed specifically for CDI containers. The most important module is <literal>jbpm-services-cdi</literal>, which provides CDI wrappers for process engine services. You can use these wrappers to integrate the process engine in CDI applications. The module provides the following set of services:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<literal>DeploymentService</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>ProcessService</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>UserTaskService</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>RuntimeDataService</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>DefinitionService</literal>
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					These services are available for injection in any other CDI bean.
				</simpara>
				<section xml:id="cdi-deployment-service-con_process-engine">
					<title>Deployment service for CDI</title>
					<simpara>
						The <literal>DeploymentService</literal> service deploys and undeploys deployment units in the runtime environment. When you deploy a unit using this service, the deployment unit becomes ready for execution and a <literal>RuntimeManager</literal> instance is created for it. You can also use the <literal>DeploymentService</literal> to retrieve the following objects:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								The <literal>RuntimeManager</literal> instance for a given deployment ID
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								The <literal>DeployedUnit</literal> instance that represents the complete deployment unit for the given deployment ID
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								The list of all deployed units known to the deployment service
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						By default, the deployment service does not save information about deployed units to any persistent storage. In the CDI framework, the component that uses the service can save and restore deployment unit information, for example, using a database, file, system, or repository.
					</simpara>
					<simpara>
						The deployment service fires CDI events on deployment and undeployment. The component that uses the service can process these events to store deployments and remove them from the store when they are undeployed.
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								A <literal>DeploymentEvent</literal> with the <literal>@Deploy</literal> qualifier is fired on deployment of a unit
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								A <literal>DeploymentEvent</literal> with the <literal>@Undeploy</literal> qualifier is fired on undeployment of a unit
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						You can use the CDI observer mechanism to get notification on these events.
					</simpara>
					<simpara>
						The following example receives notification on deployment of a unit and can save the deployment:
					</simpara>
					<formalpara>
						<title>Example of processing of a deployment event</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">    public void saveDeployment(@Observes @Deploy DeploymentEvent event) {
        // Store deployed unit information
        DeployedUnit deployedUnit = event.getDeployedUnit();
    }</programlisting>
						</para>
					</formalpara>
					<simpara>
						The following example receives notification on deployment of a unit and can remove the deployment from storage:
					</simpara>
					<formalpara>
						<title>Example of processing of an undeployment event</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">    public void removeDeployment(@Observes @Undeploy DeploymentEvent event) {
        // Remove deployment with the ID event.getDeploymentId()
    }</programlisting>
						</para>
					</formalpara>
					<simpara>
						Several implementations of the <literal>DeploymentService</literal> service are possible, so you must use qualifiers to instruct the CDI container to inject a particular implementation. A matching implementation of <literal>DeploymentUnit</literal> must exist for every implementation of <literal>DeploymentService</literal>.
					</simpara>
					<simpara>
						The process engine provides the the <literal>KmoduleDeploymentService</literal> implementation. This implementation is designed to work with <literal>KmoduleDeploymentUnits</literal>, which are small descriptors that are included in a KJAR file. This implementation is the typical solution for most use cases. The qualifier for this implementation is <literal>@Kjar</literal>.
					</simpara>
				</section>
				<section xml:id="cdi-form-provider-service-con_process-engine">
					<title>Form provider service for CDI</title>
					<simpara>
						The <literal>FormProviderService</literal> service provides access to form representations, which are usually displayed on the user interface for both process forms and user task forms.
					</simpara>
					<simpara>
						The service relies on the concept of isolated form providers that can provide different capabilities and be backed by different technologies. The <literal>FormProvider</literal> interface describes the contract for implementations of form providers.
					</simpara>
					<formalpara>
						<title>Definition of the <literal>FormProvider</literal> interface</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">public interface FormProvider {

    int getPriority();

    String render(String name, ProcessDesc process, Map&lt;String, Object&gt; renderContext);

    String render(String name, Task task, ProcessDesc process, Map&lt;String, Object&gt; renderContext);
}</programlisting>
						</para>
					</formalpara>
					<simpara>
						Implementations of the <literal>FormProvider</literal> interface must define a priority value. When the <literal>FormProviderService</literal> service needs to render a form, it calls the available providers in their priority order.
					</simpara>
					<simpara>
						The lower the priority value, the higher priority the provider gets. For example, a provider with a priority of 5 is evaluated before a provider with a priority of 10. For each required form, the service iterates over the available providers in the order of their priority, until one of them delivers the content. In the worst-case scenario, a simple text-based form is returned.
					</simpara>
					<simpara>
						The process engine provides the following implementations of <literal>FormProvider</literal>:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								A provider that delivers forms created in the Form Modeller tool, with a priority of 2
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								A FreeMarker-based implementation that supports process and task forms, with a priority of 3
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								The default forms provider, returning a simple text-based form, used as a last resort if no other provider delivers any content, with a priority of 1000
							</simpara>
						</listitem>
					</itemizedlist>
				</section>
				<section xml:id="cdi-runtime-data-service-con_process-engine">
					<title>Runtime data service for CDI</title>
					<simpara>
						The <literal>RuntimeDataService</literal> service provides access to data that is available at runtime, including the following data:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								The available processes to be executed, with various filters
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								The active process instances, with various filters
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								The process instance history
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								The process instance variables
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								The active and completed nodes of process instance
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						The default implementation of <literal>RuntimeDataService</literal> observes deployment events and indexes all deployed processes to expose them to the calling components.
					</simpara>
				</section>
				<section xml:id="cdi-definition-service-con_process-engine">
					<title>Definition service for CDI</title>
					<simpara>
						The <literal>DefinitionService</literal> service provides access to process details that are stored as part of BPMN2 XML definitions.
					</simpara>
					<note>
						<simpara>
							Before using any method that provides information, invoke the <literal>buildProcessDefinition()</literal> method to populate the repository with process information that is retrieved from the BPMN2 content.
						</simpara>
					</note>
					<simpara>
						The <literal>BPMN2DataService</literal> implementation provides access to the following data:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								The overall description of the process for the given process definition
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								The collection of all user tasks found in the process definition
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								The information about the defined inputs for a user task node
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								The information about defined outputs for a user task node
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								The IDs of reusable processes (call activity) that are defined within a given process definition
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								The information about process variables that are defined within a given process definition
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								The information about all organizational entities (users and groups) that are included in the process definition. Depending on the particular process definition, the returned values for users and groups can contain the following information:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										The actual user or group name
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										The process variable that is used to get the actual user or group name on runtime, for example, <literal>#{manager}</literal>
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
					</itemizedlist>
				</section>
				<section xml:id="cdi-integration-configuration-con_process-engine">
					<title>CDI integration configuration</title>
					<simpara>
						To use the <literal>jbpm-services-cdi</literal> module in your CDI framework, you must provide some beans to satisfy the dependencies of the included service implementations.
					</simpara>
					<simpara>
						Several beans can be required, depending on the usage scenario:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								The entity manager and entity manager factory
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								The user group callback for human tasks
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								The identity provider to pass authenticated user information to the services
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						When running in a JEE environment, such as Red Hat JBoss EAP, the following producer bean satisfies all requirements of the <literal>jbpm-services-cdi</literal> module.
					</simpara>
					<formalpara>
						<title>The producer bean that satisfies all requirements of the <literal>jbpm-services-cdi</literal> module in a JEE environment</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">public class EnvironmentProducer {

    @PersistenceUnit(unitName = "org.jbpm.domain")
    private EntityManagerFactory emf;

    @Inject
    @Selectable
    private UserGroupInfoProducer userGroupInfoProducer;

    @Inject
    @Kjar
    private DeploymentService deploymentService;

    @Produces
    public EntityManagerFactory getEntityManagerFactory() {
        return this.emf;
    }

    @Produces
    public org.kie.api.task.UserGroupCallback produceSelectedUserGroupCalback() {
        return userGroupInfoProducer.produceCallback();
    }

    @Produces
    public UserInfo produceUserInfo() {
        return userGroupInfoProducer.produceUserInfo();
    }

    @Produces
    @Named("Logs")
    public TaskLifeCycleEventListener produceTaskAuditListener() {
        return new JPATaskLifeCycleEventListener(true);
    }

    @Produces
    public DeploymentService getDeploymentService() {
        return this.deploymentService;
    }

    @Produces
    public IdentityProvider produceIdentityProvider {
        return new IdentityProvider() {
             // implement IdentityProvider
        };
    }
}</programlisting>
						</para>
					</formalpara>
					<simpara>
						The <literal>beans.xml</literal> file for the application must enable a proper alternative for user group info callback. This alternative is taken based on the <literal>@Selectable</literal> qualifier.
					</simpara>
					<formalpara>
						<title>Definition of the alternative for user group info callback in the <literal>beans.xml</literal> file`</title>
						<para>
							
<programlisting language="xml" linenumbering="unnumbered">&lt;beans xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://docs.jboss.org/cdi/beans_1_0.xsd"&gt;

  &lt;alternatives&gt;
    &lt;class&gt;org.jbpm.kie.services.cdi.producer.JAASUserGroupInfoProducer&lt;/class&gt;
  &lt;/alternatives&gt;

&lt;/beans&gt;</programlisting>
						</para>
					</formalpara>
					<note>
						<simpara>
							<literal>org.jbpm.kie.services.cdi.producer.JAASUserGroupInfoProducer</literal> is an example value. This value is usually a good fit for Red Hat JBoss EAP, as it reuses security settings on the application server, regardless of which security method the server uses, for example, LDAP or database.
						</simpara>
					</note>
					<simpara>
						Optionally, you can provide several other producers to deliver <literal>WorkItemHandlers</literal> and <literal>Process</literal>, <literal>Agenda</literal>, <literal>WorkingMemory</literal> event listeners. You can provide these components by implementing the following interfaces:
					</simpara>
					<formalpara>
						<title>Work item handler producer interface for process engine integration with CDI</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">/**
 * Enables providing custom implementations to deliver WorkItem name and WorkItemHandler instance pairs
 * for the runtime.
 * &lt;br/&gt;
 * This interface is invoked by the RegisterableItemsFactory implementation (in particular InjectableRegisterableItemsFactory
 * in the CDI framework) for every KieSession. Always return new instances of objects to avoid unexpected
 * results.
 *
 */
public interface WorkItemHandlerProducer {

    /**
     * Returns map of work items(key = work item name, value = work item handler instance)
     * to be registered on KieSession
     * &lt;br/&gt;
     * The following parameters might be given:
     * &lt;ul&gt;
     *  &lt;li&gt;ksession&lt;/li&gt;
     *  &lt;li&gt;taskService&lt;/li&gt;
     *  &lt;li&gt;runtimeManager&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @param identifier - identifier of the owner - usually the RuntimeManager. This parameter allows the producer to filter out
     * and provide valid instances for a given owner
     * @param params - the owner might provide some parameters, usually KieSession, TaskService, RuntimeManager instances
     * @return map of work item handler instances (always return new instances when this method is invoked)
     */
    Map&lt;String, WorkItemHandler&gt; getWorkItemHandlers(String identifier, Map&lt;String, Object&gt; params);
}</programlisting>
						</para>
					</formalpara>
					<formalpara>
						<title>Event listener producer interface for process engine integration with CDI</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">/**
 * Enables defining custom producers for known EventListeners. There might be several
 * implementations that might provide a different listener instance based on the context in which they are executed.
 * &lt;br/&gt;
 * This interface is invoked by the RegisterableItemsFactory implementation (in particular, InjectableRegisterableItemsFactory
 * in the CDI framework) for every KieSession. Always return new instances of objects to avoid unexpected results.
 *
 * @param &lt;T&gt; type of the event listener - ProcessEventListener, AgendaEventListener, WorkingMemoryEventListener
 */
public interface EventListenerProducer&lt;T&gt; {

    /**
     * Returns list of instances for given (T) type of listeners
     * &lt;br/&gt;
     * Parameters that might be given are:
     * &lt;ul&gt;
     *  &lt;li&gt;ksession&lt;/li&gt;
     *  &lt;li&gt;taskService&lt;/li&gt;
     *  &lt;li&gt;runtimeManager&lt;/li&gt;
     * &lt;/ul&gt;
     * @param identifier - identifier of the owner - usually RuntimeManager. This parameter allows the producer to filter out
     * and provide valid instances for given owner
     * @param params - the owner might provide some parameters, usually KieSession, TaskService, RuntimeManager instances
     * @return list of listener instances (always return new instances when this method is invoked)
     */
    List&lt;T&gt; getEventListeners(String identifier, Map&lt;String, Object&gt;  params);
}</programlisting>
						</para>
					</formalpara>
					<simpara>
						The beans implementing these two interfaces are collected at runtime and invoked when the <literal>RuntimeManager</literal> class builds a <literal>KieSession</literal> instance.
					</simpara>
					<section xml:id="cdi-runtime-manager-con_process-engine">
						<title>Runtime manager as a CDI bean</title>
						<simpara>
							You can inject the <literal>RuntimeManager</literal> class as a CDI bean into any other CDI bean within your application. The <literal>RuntimeEnvironment</literal> class must be properly produced to enable correct initialization of the <literal>RuntimeManager</literal> instance.
						</simpara>
						<simpara>
							The following CDI qualifiers reference the existing runtime manager strategies:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>@Singleton</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>@PerRequest</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>@PerProcessInstance</literal>
								</simpara>
							</listitem>
						</itemizedlist>
						<simpara>
							For more information about the runtime manager, see <xref linkend="runtime-manager-con_process-engine" />.
						</simpara>
						<note>
							<simpara>
								Though you can inject the <literal>RuntimeManager</literal> class directly, the solution for most use cases for frameworks such as CDI, EJB, or Spring is using services. The process engine services implement many best practices for using the runtime manager.
							</simpara>
						</note>
						<simpara>
							To use the runtime manager, you must add the <literal>RuntimeEnvironment</literal> class to the producer that is defined in the <xref linkend="cdi-integration-configuration-con_process-engine" /> section.
						</simpara>
						<formalpara>
							<title>The producer bean that provides the <literal>RuntimeEnvironment</literal> class</title>
							<para>
								
<programlisting language="java" linenumbering="unnumbered">public class EnvironmentProducer {

    //Add the same producers as for services

    @Produces
    @Singleton
    @PerRequest
    @PerProcessInstance
    public RuntimeEnvironment produceEnvironment(EntityManagerFactory emf) {

        RuntimeEnvironment environment = RuntimeEnvironmentBuilder.Factory.get()
                .newDefaultBuilder()
                .entityManagerFactory(emf)
                .userGroupCallback(getUserGroupCallback())
                .registerableItemsFactory(InjectableRegisterableItemsFactory.getFactory(beanManager, null))
                .addAsset(ResourceFactory.newClassPathResource("BPMN2-ScriptTask.bpmn2"), ResourceType.BPMN2)
                .addAsset(ResourceFactory.newClassPathResource("BPMN2-UserTask.bpmn2"), ResourceType.BPMN2)
                .get();
        return environment;
    }
}</programlisting>
							</para>
						</formalpara>
						<simpara>
							In this example, a single producer method is capable of providing the <literal>RuntimeEnvironment</literal> class for all runtime manager strategies by specifying all qualifiers on the method level.
						</simpara>
						<simpara>
							When the complete producer is available, the <literal>RuntimeManager</literal> class can be injected into a CDI bean in the application:
						</simpara>
						<formalpara>
							<title>Injecting the <literal>RuntimeManager</literal> class</title>
							<para>
								
<programlisting language="java" linenumbering="unnumbered">public class ProcessEngine {

    @Inject
    @Singleton
    private RuntimeManager singletonManager;

    public void startProcess() {

        RuntimeEngine runtime = singletonManager.getRuntimeEngine(EmptyContext.get());
        KieSession ksession = runtime.getKieSession();

        ProcessInstance processInstance = ksession.startProcess("UserTask");

        singletonManager.disposeRuntimeEngine(runtime);
    }
}</programlisting>
							</para>
						</formalpara>
						<simpara>
							If you inject the <literal>RuntimeManager</literal> class, only one instance of <literal>RuntimeManager</literal> might exist in the application. In typical cases, use the <literal>DeploymentService</literal> service, which creates <literal>RuntimeManager</literal> instances as necessary.
						</simpara>
						<simpara>
							As an alternative to <literal>DeploymentService</literal>, you can inject the <literal>RuntimeManagerFactory</literal> class and then the application can use it to create <literal>RuntimeManager</literal> instances. In this case, the <literal>EnvironmentProducer</literal> definition is still required. The following example shows a simple ProcessEngine bean.
						</simpara>
						<formalpara>
							<title>Example ProcessEngine bean</title>
							<para>
								
<programlisting language="java" linenumbering="unnumbered">public class ProcessEngine {

    @Inject
    private RuntimeManagerFactory managerFactory;

    @Inject
    private EntityManagerFactory emf;

    @Inject
    private BeanManager beanManager;

    public void startProcess() {
        RuntimeEnvironment environment = RuntimeEnvironmentBuilder.Factory.get()
                .newDefaultBuilder()
                .entityManagerFactory(emf)
                .addAsset(ResourceFactory.newClassPathResource("BPMN2-ScriptTask.bpmn2"), ResourceType.BPMN2)
                .addAsset(ResourceFactory.newClassPathResource("BPMN2-UserTask.bpmn2"), ResourceType.BPMN2)
                .registerableItemsFactory(InjectableRegisterableItemsFactory.getFactory(beanManager, null))
                .get();

        RuntimeManager manager = managerFactory.newSingletonRuntimeManager(environment);
        RuntimeEngine runtime = manager.getRuntimeEngine(EmptyContext.get());
        KieSession ksession = runtime.getKieSession();

        ProcessInstance processInstance = ksession.startProcess("UserTask");

        manager.disposeRuntimeEngine(runtime);
        manager.close();
    }

}</programlisting>
							</para>
						</formalpara>
					</section>
				</section>
			</section>
			<section xml:id="integration-spring-con_process-engine">
				<title>Integration with Spring</title>
				<simpara>
					While there are several ways to use the process engine with the Spring framework, two approaches are most frequently used
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Direct use of the Runtime Manager API
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Use of process engine services
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Both approaches are tested and valid.
				</simpara>
				<simpara>
					If your application needs to use only one runtime manager, use the direct Runtime Manager API, because it is the simplest way to use the process engine within a Spring application.
				</simpara>
				<simpara>
					If your application needs to use multiple instances of the runtime manager, use process engine services, which encapsulate best practices by providing a dynamic runtime environment.
				</simpara>
				<section xml:id="spring-runtime-manager-con_process-engine">
					<title>Direct use of the runtime manager API in Spring</title>
					<simpara>
						The runtime manager manages the process engine and task service in sychronization. For more information about the runtime manager, see <xref linkend="runtime-manager-con_process-engine" />.
					</simpara>
					<simpara>
						To set up the runtime manager in the Spring framework, use the following factory beans:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<literal>org.kie.spring.factorybeans.RuntimeEnvironmentFactoryBean</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>org.kie.spring.factorybeans.RuntimeManagerFactoryBean</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>org.kie.spring.factorybeans.TaskServiceFactoryBean</literal>
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						These factory beans provide a standard way to configure the <literal>spring.xml</literal> file for your Spring application.
					</simpara>
					<section xml:id="runtimeenvironmentfactorybean-ref_process-engine">
						<title><literal>RuntimeEnvironmentFactoryBean</literal> bean</title>
						<simpara>
							The <literal>RuntimeEnvironmentFactoryBean</literal> factory bean produces instances of <literal>RuntimeEnvironment</literal>. These instances are required for creating <literal>RuntimeManager</literal> instances.
						</simpara>
						<simpara>
							The bean supports creating the following types of <literal>RuntimeEnvironment</literal> instances with different default configurations:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>DEFAULT</literal>: The default, or most common, configuration for the runtime manager
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>EMPTY</literal>: A completely empty environment that you can configure manually
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>DEFAULT_IN_MEMORY</literal>: The same configuration as DEFAULT, but without persistence of the runtime engine
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>DEFAULT_KJAR</literal>: The same configuration as DEFAULT, but assets are loaded from KJAR artifacts, which are identified by the release ID or the GAV value
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>DEFAULT_KJAR_CL</literal>: The configuration is built from the <literal>kmodule.xml</literal> descriptor in a KJAR artifact
								</simpara>
							</listitem>
						</itemizedlist>
						<simpara>
							Mandatory properties depends on the selected type, however, knowledge information must be present for all types. This requirement means that one of the following kinds of information must be provided:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>knowledgeBase</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>assets</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>releaseId</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>groupId, artifactId, version</literal>
								</simpara>
							</listitem>
						</itemizedlist>
						<simpara>
							For the <literal>DEFAULT</literal>, <literal>DEFAULT_KJAR</literal>, and <literal>DEFAULT_KJAR_CL</literal> types, you must also configure persistence by providing the following parameters:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									Entity manager factory
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Transaction manager
								</simpara>
							</listitem>
						</itemizedlist>
						<simpara>
							The transaction manager must be the Spring transaction manager, because persistence and transaction support is configured based on this transaction manager.
						</simpara>
						<simpara>
							Optionally, you can provide an <literal>EntityManager</literal> instance instead of creating a new instance from <literal>EntityManagerFactory</literal>, for example, you might use a shared entity manager from Spring.
						</simpara>
						<simpara>
							All other properties are optional. They can override defaults that are determined by the selected type of the runtime environment.
						</simpara>
					</section>
					<section xml:id="runtimemanagerfactorybean-ref_process-engine">
						<title><literal>RuntimeManagerFactoryBean</literal> bean</title>
						<simpara>
							The <literal>RuntimeManagerFactoryBean</literal> factory bean produces <literal>RuntimeManager</literal> instances of a given type, based on the provided <literal>RuntimeEnvironment</literal> instance.
						</simpara>
						<simpara>
							The supported types correspond to runtime manager stategies:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>SINGLETON</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>PER_REQUEST</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>PER_PROCESS_INSTANCE</literal>
								</simpara>
							</listitem>
						</itemizedlist>
						<simpara>
							The default type, when no type is specified, is <literal>SINGLETON</literal>.
						</simpara>
						<simpara>
							The identifier is a mandatory property, because every runtime manager must be uniquely identified. All instances created by this factory are cached, so they can be properly disposed using the destroy method (<literal>close()</literal>).
						</simpara>
					</section>
					<section xml:id="taskservicefactorybean-ref_process-engine">
						<title><literal>TaskServiceFactoryBean</literal> bean</title>
						<simpara>
							The <literal>TaskServiceFactoryBean</literal> factory bean produces an instance of <literal>TaskService</literal> based on given properties. You must provide the following mandatory properties:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									Entity manager factory
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Transaction manager
								</simpara>
							</listitem>
						</itemizedlist>
						<simpara>
							The transaction manager must be the Spring transaction manager, because persistence and transaction support is configured based on this transaction manager.
						</simpara>
						<simpara>
							Optionally, you can provide an <literal>EntityManager</literal> instance instead of creating a new instance from <literal>EntityManagerFactory</literal>, for example, you might use a shared entity manager from Spring.
						</simpara>
						<simpara>
							You can also set additional optional properties for the task service instance:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>userGroupCallback</literal>: The implementation of <literal>UserGroupCallback</literal> that the task service must use, the default value is <literal>MVELUserGroupCallbackImpl</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>userInfo</literal>: The implementation of <literal>UserInfo</literal> that the task service must use, the default value is <literal>DefaultUserInfo</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>listener</literal>: A list of <literal>TaskLifeCycleEventListener</literal> listeners which must be notified upon various operations on tasks
								</simpara>
							</listitem>
						</itemizedlist>
						<simpara>
							This factory bean creates a single instance of the task service. By design, this instance must be shared across all beans in the Spring environment.
						</simpara>
					</section>
					<section xml:id="spring-sample-runtimemanager-proc_process-engine">
						<title>Configuring a sample runtime manager with a Spring application</title>
						<simpara>
							The following procedure is an example of complete configuration for a single runtime manager within a Spring application.
						</simpara>
						<orderedlist numeration="arabic">
							<title>Procedure</title>
							<listitem>
								<simpara>
									Configure the entity manager factory and the transaction manager:
								</simpara>
								<formalpara>
									<title>Configuring the entity manager factory and the transaction manager in the <literal>spring.xml</literal> file</title>
									<para>
										
<programlisting language="xml" linenumbering="unnumbered">&lt;bean id="jbpmEMF" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"&gt;
  &lt;property name="persistenceUnitName" value="org.jbpm.persistence.spring.jta"/&gt;
&lt;/bean&gt;

&lt;bean id="jbpmEM" class="org.springframework.orm.jpa.support.SharedEntityManagerBean"&gt;
  &lt;property name="entityManagerFactory" ref="jbpmEMF"/&gt;
&lt;/bean&gt;

&lt;bean id="narayanaUserTransaction" factory-method="userTransaction" class="com.arjuna.ats.jta.UserTransaction" /&gt;

&lt;bean id="narayanaTransactionManager" factory-method="transactionManager" class="com.arjuna.ats.jta.TransactionManager" /&gt;

&lt;bean id="jbpmTxManager" class="org.springframework.transaction.jta.JtaTransactionManager"&gt;
  &lt;property name="transactionManager" ref="narayanaTransactionManager" /&gt;
  &lt;property name="userTransaction" ref="narayanaUserTransaction" /&gt;
&lt;/bean&gt;</programlisting>
									</para>
								</formalpara>
								<simpara>
									These settings define the following persistence configuration:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											JTA transaction manager (backed by Narayana JTA - for unit tests or servlet containers)
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											Entity manager factory for the <literal>org.jbpm.persistence.spring.jta</literal> persistence unit
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
							<listitem>
								<simpara>
									Configure the business process resource:
								</simpara>
								<formalpara>
									<title>Configuring the business process resource in the <literal>spring.xml</literal> file</title>
									<para>
										
<programlisting language="xml" linenumbering="unnumbered">&lt;bean id="process" factory-method="newClassPathResource" class="org.kie.internal.io.ResourceFactory"&gt;
  &lt;constructor-arg&gt;
    &lt;value&gt;jbpm/processes/sample.bpmn&lt;/value&gt;
  &lt;/constructor-arg&gt;
&lt;/bean&gt;</programlisting>
									</para>
								</formalpara>
								<simpara>
									These settings define a single process that is to be available for execution. The name of the resource is <literal>sample.bpmn</literal> and it must be available on the class path. You can use the class path as a simple way to include resources for trying out the process engine.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Configure the <literal>RuntimeEnvironment</literal> instance with the entity manager, transaction manager, and resources:
								</simpara>
								<formalpara>
									<title>Configuring the <literal>RuntimeEnvironment</literal> instance in the <literal>spring.xml</literal> file</title>
									<para>
										
<programlisting language="xml" linenumbering="unnumbered">&lt;bean id="runtimeEnvironment" class="org.kie.spring.factorybeans.RuntimeEnvironmentFactoryBean"&gt;
  &lt;property name="type" value="DEFAULT"/&gt;
  &lt;property name="entityManagerFactory" ref="jbpmEMF"/&gt;
  &lt;property name="transactionManager" ref="jbpmTxManager"/&gt;
  &lt;property name="assets"&gt;
    &lt;map&gt;
      &lt;entry key-ref="process"&gt;&lt;util:constant static-field="org.kie.api.io.ResourceType.BPMN2"/&gt;&lt;/entry&gt;
    &lt;/map&gt;
  &lt;/property&gt;
&lt;/bean&gt;</programlisting>
									</para>
								</formalpara>
								<simpara>
									These settings define a default runtime environment for the runtime manager.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Create a <literal>RuntimeManager</literal> instance based on the environment:
								</simpara>
								
<programlisting language="xml" linenumbering="unnumbered">&lt;bean id="runtimeManager" class="org.kie.spring.factorybeans.RuntimeManagerFactoryBean" destroy-method="close"&gt;
  &lt;property name="identifier" value="spring-rm"/&gt;
  &lt;property name="runtimeEnvironment" ref="runtimeEnvironment"/&gt;
&lt;/bean&gt;</programlisting>
							</listitem>
						</orderedlist>
						<formalpara>
							<title>Result</title>
							<para>
								After these steps you can use the runtime manager to execute processes in the Spring environment, using the <literal>EntityManagerFactory</literal> class and the JTA transaction manager.
							</para>
						</formalpara>
						<simpara>
							You can find complete Spring configuration files for different strategies in the <link xlink:href="https://github.com/kiegroup/droolsjbpm-integration/blob/7.48.0.Final/kie-spring/src/test/resources/jbpm/jta-emf/">repository</link>.
						</simpara>
					</section>
					<section xml:id="spring-runtimemanager-additionalconfig-con_process-engine">
						<title>Additional configuration options for the runtime manager in the Spring framework</title>
						<simpara>
							In addition to the configuration with the <literal>EntityManagerFactory</literal> class and the JTA transaction manager, as described in <xref linkend="spring-sample-runtimemanager-proc_process-engine" />, you can use other configuration options for the runtime manager in the Spring framework:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									JTA and the <literal>SharedEntityManager</literal> class
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Local Persistence Unit and the <literal>EntityManagerFactory</literal> class
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Local Persistence Unit and <literal>SharedEntityManager</literal> class
								</simpara>
							</listitem>
						</itemizedlist>
						<simpara>
							If your application is configured with a Local Persistence Unit and uses the <literal>AuditService</literal> service to query process engine history data, you must add the <literal>org.kie.api.runtime.EnvironmentName.USE_LOCAL_TRANSACTIONS</literal> environment entry to the <literal>RuntimeEnvironment</literal> instance configuration:
						</simpara>
						<formalpara>
							<title><literal>RuntimeEnvironment</literal> instance configuration for a Local Persistence Unit in the <literal>spring.xml</literal> file</title>
							<para>
								
<programlisting language="xml" linenumbering="unnumbered">&lt;bean id="runtimeEnvironment" class="org.kie.spring.factorybeans.RuntimeEnvironmentFactoryBean"&gt;
...
    &lt;property name="environmentEntries" ref="env" /&gt;
  &lt;/bean&gt;
  ...

  &lt;util:map id="env" key-type="java.lang.String" value-type="java.lang.Object"&gt;
		&lt;entry&gt;
			&lt;key&gt;
				&lt;util:constant
					static-field="org.kie.api.runtime.EnvironmentName.USE_LOCAL_TRANSACTIONS" /&gt;
			&lt;/key&gt;
			&lt;value&gt;true&lt;/value&gt;
		&lt;/entry&gt;
	&lt;/util:map&gt;</programlisting>
							</para>
						</formalpara>
						<simpara>
							You can find more examples of configuration options in the repository: <link xlink:href="https://github.com/kiegroup/droolsjbpm-integration/tree/7.48.0.Final/kie-spring/src/test/resources/jbpm">configuration files</link> and <link xlink:href="https://github.com/kiegroup/droolsjbpm-integration/tree/7.48.0.Final/kie-spring/src/test/java/org/kie/spring/jbpm">test cases</link>.
						</simpara>
					</section>
				</section>
				<section xml:id="spring-process-services-con_process-engine">
					<title>Process engine services with Spring</title>
					<simpara>
						You might want to create a dynamic Spring application, where you can add and remove business assets such as process definitions, data model, rules, and forms without restarting the application.
					</simpara>
					<simpara>
						In this case, use process engine services. Process engine services are designed as framework-agnostic, and separate modules bring in the required framework-specific addons.
					</simpara>
					<simpara>
						The <literal>jbpm-kie-services</literal> module contains the code logic of the services. A Spring application can consume these pure Java services.
					</simpara>
					<simpara>
						The only code you must add to your Spring application to configure process engine services is the implementation of the <literal>IdentityProvider</literal> interface. This implementation depends on your security configuration. The following example implementation uses Spring Security, though it might not cover all available security features for a Spring application.
					</simpara>
					<formalpara>
						<title>Implementation of the <literal>IdentityProvider</literal> interface using Spring Security</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.kie.internal.identity.IdentityProvider;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;

public class SpringSecurityIdentityProvider implements IdentityProvider {

	public String getName() {

		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		if (auth != null &amp;&amp; auth.isAuthenticated()) {
			return auth.getName();
		}
		return "system";
	}

	public List&lt;String&gt; getRoles() {
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		if (auth != null &amp;&amp; auth.isAuthenticated()) {
			List&lt;String&gt; roles = new ArrayList&lt;String&gt;();

			for (GrantedAuthority ga : auth.getAuthorities()) {
				roles.add(ga.getAuthority());
			}

			return roles;
		}

		return Collections.emptyList();
	}

	public boolean hasRole(String role) {
		return false;
	}

}</programlisting>
						</para>
					</formalpara>
					<section xml:id="spring-process-services-config-proc_process-engine">
						<title>Configuring process engine services with a Spring application</title>
						<simpara>
							The following procedure is an example of complete configuration for process engine services within a Spring application.
						</simpara>
						<orderedlist numeration="arabic">
							<title>Procedure</title>
							<listitem>
								<simpara>
									Configure transactons:
								</simpara>
								<formalpara>
									<title>Configuring transactions in the <literal>spring.xml</literal> file</title>
									<para>
										
<programlisting language="xml" linenumbering="unnumbered">&lt;context:annotation-config /&gt;
&lt;tx:annotation-driven /&gt;
&lt;tx:jta-transaction-manager /&gt;

&lt;bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager" /&gt;</programlisting>
									</para>
								</formalpara>
							</listitem>
							<listitem>
								<simpara>
									Configure JPA and persistence:
								</simpara>
								<formalpara>
									<title>Configuring JPA and persistence in the <literal>spring.xml</literal> file</title>
									<para>
										
<programlisting language="xml" linenumbering="unnumbered">&lt;bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" depends-on="transactionManager"&gt;
   &lt;property name="persistenceXmlLocation" value="classpath:/META-INF/jbpm-persistence.xml" /&gt;
&lt;/bean&gt;</programlisting>
									</para>
								</formalpara>
							</listitem>
							<listitem>
								<simpara>
									Configure security and user and group information providers:
								</simpara>
								<formalpara>
									<title>Configuring security and user and group information providers in the <literal>spring.xml</literal> file</title>
									<para>
										
<programlisting language="xml" linenumbering="unnumbered">&lt;util:properties id="roleProperties" location="classpath:/roles.properties" /&gt;

&lt;bean id="userGroupCallback" class="org.jbpm.services.task.identity.JBossUserGroupCallbackImpl"&gt;
  &lt;constructor-arg name="userGroups" ref="roleProperties"&gt;&lt;/constructor-arg&gt;
&lt;/bean&gt;

&lt;bean id="identityProvider" class="org.jbpm.spring.SpringSecurityIdentityProvider"/&gt;</programlisting>
									</para>
								</formalpara>
							</listitem>
							<listitem>
								<simpara>
									Configure the runtime manager factory. This factory is Spring context aware, so it can interact with the Spring container in correct way and support the necessary services, including the transactional command service and the task service:
								</simpara>
								<formalpara>
									<title>Configuring the runtime manager factory in the <literal>spring.xml</literal> file</title>
									<para>
										
<programlisting language="xml" linenumbering="unnumbered">&lt;bean id="runtimeManagerFactory" class="org.kie.spring.manager.SpringRuntimeManagerFactoryImpl"&gt;
  &lt;property name="transactionManager" ref="transactionManager"/&gt;
  &lt;property name="userGroupCallback" ref="userGroupCallback"/&gt;
&lt;/bean&gt;

&lt;bean id="transactionCmdService" class="org.jbpm.shared.services.impl.TransactionalCommandService"&gt;
  &lt;constructor-arg name="emf" ref="entityManagerFactory"&gt;&lt;/constructor-arg&gt;
&lt;/bean&gt;

&lt;bean id="taskService" class="org.kie.spring.factorybeans.TaskServiceFactoryBean" destroy-method="close"&gt;
  &lt;property name="entityManagerFactory" ref="entityManagerFactory"/&gt;
  &lt;property name="transactionManager" ref="transactionManager"/&gt;
  &lt;property name="userGroupCallback" ref="userGroupCallback"/&gt;
  &lt;property name="listeners"&gt;
    &lt;list&gt;
      &lt;bean class="org.jbpm.services.task.audit.JPATaskLifeCycleEventListener"&gt;
        &lt;constructor-arg value="true"/&gt;
      &lt;/bean&gt;
    &lt;/list&gt;
  &lt;/property&gt;
&lt;/bean&gt;</programlisting>
									</para>
								</formalpara>
							</listitem>
							<listitem>
								<simpara>
									Configure process engine services as Spring beans:
								</simpara>
								<formalpara>
									<title>Configuring process engine services as Spring beans in the <literal>spring.xml</literal> file</title>
									<para>
										
<programlisting language="xml" linenumbering="unnumbered">&lt;!-- Definition service --&gt;
&lt;bean id="definitionService" class="org.jbpm.kie.services.impl.bpmn2.BPMN2DataServiceImpl"/&gt;

&lt;!-- Runtime data service --&gt;
&lt;bean id="runtimeDataService" class="org.jbpm.kie.services.impl.RuntimeDataServiceImpl"&gt;
  &lt;property name="commandService" ref="transactionCmdService"/&gt;
  &lt;property name="identityProvider" ref="identityProvider"/&gt;
  &lt;property name="taskService" ref="taskService"/&gt;
&lt;/bean&gt;

&lt;!-- Deployment service --&gt;
&lt;bean id="deploymentService" class="org.jbpm.kie.services.impl.KModuleDeploymentService" depends-on="entityManagerFactory" init-method="onInit"&gt;
  &lt;property name="bpmn2Service" ref="definitionService"/&gt;
  &lt;property name="emf" ref="entityManagerFactory"/&gt;
  &lt;property name="managerFactory" ref="runtimeManagerFactory"/&gt;
  &lt;property name="identityProvider" ref="identityProvider"/&gt;
  &lt;property name="runtimeDataService" ref="runtimeDataService"/&gt;
&lt;/bean&gt;

&lt;!-- Process service --&gt;
&lt;bean id="processService" class="org.jbpm.kie.services.impl.ProcessServiceImpl" depends-on="deploymentService"&gt;
  &lt;property name="dataService" ref="runtimeDataService"/&gt;
  &lt;property name="deploymentService" ref="deploymentService"/&gt;
&lt;/bean&gt;

&lt;!-- User task service --&gt;
&lt;bean id="userTaskService" class="org.jbpm.kie.services.impl.UserTaskServiceImpl" depends-on="deploymentService"&gt;
  &lt;property name="dataService" ref="runtimeDataService"/&gt;
  &lt;property name="deploymentService" ref="deploymentService"/&gt;
&lt;/bean&gt;

&lt;!-- Register the runtime data service as a listener on the deployment service so it can receive notification about deployed and undeployed units --&gt;
&lt;bean id="data" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean" depends-on="deploymentService"&gt;
  &lt;property name="targetObject" ref="deploymentService"&gt;&lt;/property&gt;
  &lt;property name="targetMethod"&gt;&lt;value&gt;addListener&lt;/value&gt;&lt;/property&gt;
  &lt;property name="arguments"&gt;
  &lt;list&gt;
      &lt;ref bean="runtimeDataService"/&gt;
  &lt;/list&gt;
  &lt;/property&gt;
&lt;/bean&gt;</programlisting>
									</para>
								</formalpara>
							</listitem>
						</orderedlist>
						<formalpara>
							<title>Result</title>
							<para>
								Your Spring application can use process engine services.
							</para>
						</formalpara>
					</section>
				</section>
			</section>
			<section xml:id="integration-ejb-con_process-engine">
				<title>Integration with EJB</title>
				<simpara>
					The process engine provides a complete integration layer for Enterprise Java Beans (EJB). This layer supports both local and remote EJB interaction.
				</simpara>
				<simpara>
					The following modules provide EJB services:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<literal>jbpm-services-ejb-api</literal>: The API module that extends the <literal>jbpm-services-api</literal> module with EJB-specific interfaces and objects
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>jbpm-services-ejb-impl</literal>: An EJB extension for core services
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>jbpm-services-ejb-timer</literal>: A process engine Scheduler Service implementation based on the EJB Timer Service
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>jbpm-services-ejb-client</literal>: An EJB remote client implementation for remote interaction, which supports Red Hat JBoss EAP by default
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					The EJB layer is based on process engine services. It provides almost the same capabilities as the core module, though some limitations exist if you use the remote interface.
				</simpara>
				<simpara>
					The main limitation affects the deployment service, which, if it is used as a remote EJB service, supports only the following methods:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<literal>deploy()</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>undeploy()</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>activate()</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>deactivate()</literal>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>isDeployed()</literal>
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Other methods are excluded because they return instances of runtime objects, such as <literal>RuntimeManager</literal>, which can not be used over the remote interface.
				</simpara>
				<simpara>
					All other services provide the same functionality over EJB as the versions included in the core module.
				</simpara>
				<section xml:id="ejb-implementations-ref_process-engine">
					<title>Implementations for EJB services</title>
					<simpara>
						As an extension of process engine core services, EJB services provide EJB-based execution semantic and are based on various EJB-specific features.
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<literal>DeploymentServiceEJBImpl</literal> is implemented as an EJB singleton with container-managed concurrency. Its lock type is set to <literal>write</literal>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>DefinitionServiceEJBImpl</literal> is implemented as an EJB singleton with container-managed concurrency. Its overall lock type is set to <literal>read</literal> and for the <literal>buildProcessDefinition()</literal> method the lock type is set to <literal>write</literal>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>ProcessServiceEJBImpl</literal> is implemented as a stateless session bean.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>RuntimeDataServiceEJBImpl</literal> is implemented as an EJB singleton. For the majority of methods the lock type is set to <literal>read</literal>. For the following methods the lock type is set to <literal>write</literal>:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										<literal>onDeploy()</literal>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<literal>onUnDeploy()</literal>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<literal>onActivate()</literal>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<literal>onDeactivate()</literal>
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								<literal>UserTaskServiceEJBImpl</literal> is implemented as a stateless session bean.
							</simpara>
						</listitem>
					</itemizedlist>
					<bridgehead remap="_transactions" renderas="sect3" xml:id="transactions">Transactions</bridgehead>
					<simpara>
						The EJB container manages transactions in EJB services. For this reason, you do not need to set up any transaction manager or user transaction within your application code.
					</simpara>
					<bridgehead remap="_identity_provider" renderas="sect3" xml:id="identity_provider">Identity provider</bridgehead>
					<simpara>
						The default identity provider is based on the <literal>EJBContext</literal> interface and relies on caller principal information for both name and roles. The <literal>IdentityProvider</literal> interface provides two methods related to roles:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<literal>getRoles()</literal> returns an empty list, because the <literal>EJBContext</literal> interface does not provide an option to fetch all roles for a particular user
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>hasRole()</literal> delegates to the <literal>isCallerInRole()</literal> method of the context
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						To ensure that valid information is available to the EJB environment, you must follow standard JEE security practices to authenticate and authorize users. If no authentication or authorization is configured for EJB services, an anonymous user is always assumed.
					</simpara>
					<simpara>
						If you use a different security model, you can use CDI-style injection for the <literal>IdentityProvider</literal> object for EJB services. In this case, create a valid CDI bean that implements the <literal>org.kie.internal.identity.IdentityProvider</literal> interface and make this bean available for injection with your application. This implementation will take precedence over the <literal>EJBContext</literal>-based identity provider.
					</simpara>
					<bridgehead remap="_deployment_synchronization" renderas="sect3" xml:id="deployment_synchronization">Deployment synchronization</bridgehead>
					<simpara>
						Deployment synchronization is enabled by default and attempts to synchronize any deployments every 3 seconds. It is implemented as an EJB singleton with container-managed concurrency. Its lock type is set to <literal>write</literal>. It uses the EJB timer service to schedule synchronization jobs.
					</simpara>
					<bridgehead remap="_ejb_scheduler_service" renderas="sect3" xml:id="ejb_scheduler_service">EJB scheduler service</bridgehead>
					<simpara>
						The process engine uses the scheduler service to handle time-based activities such as timer events and deadlines. When running in an EJB environment, the process engine uses a scheduler based on the EJB timer service. It registers this scheduler for all <literal>RuntimeManager</literal> instances.
					</simpara>
					<simpara>
						You might need to use configuration specific to an application server to support cluster operation.
					</simpara>
					<bridgehead remap="_literal_usergroupcallback_literal_and_literal_userinfo_literal_implementation_selection" renderas="sect3" xml:id="literal_usergroupcallback_literal_and_literal_userinfo_literal_implementation_selection"><literal>UserGroupCallback</literal> and <literal>UserInfo</literal> implementation selection</bridgehead>
					<simpara>
						The required implementation of <literal>UserGroupCallback</literal> and <literal>UserInfo</literal> interfaces might differ for various applications. These interfaces can not be injected with EJB directly. You can use the following system properties to select existing implementations or use custom implementations of these interfaces for the process engine:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<literal>org.jbpm.ht.callback</literal>: This property selects the implementation for the <literal>UserGroupCallback</literal> interface:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										<literal>mvel</literal>: The default implementation, typically used for testing.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<literal>ldap</literal>: The LDAP-based implementation. This implementation requires additional configuration in the <literal>jbpm.usergroup.callback.properties</literal> file.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<literal>db</literal>: The database-based implementation. This implementation requires additional configuration in the <literal>jbpm.usergroup.callback.properties</literal> file.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<literal>jaas</literal>: An implementation that requests user information from the container.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<literal>props</literal>: A simple property-based callback. This implementation requires an additional properties file that contains all users and groups.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<literal>custom</literal>: A custom implementation. You must provide the fully-qualified class name of the implementation in the <literal>org.jbpm.ht.custom.callback</literal> system property.
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								<literal>org.jbpm.ht.userinfo</literal>: This property selects the implementation for the <literal>UserInfo</literal> interface:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										<literal>ldap</literal>: The LDAP-based implementation. This implementation requires additional configuration in the <literal>jbpm-user.info.properties</literal> file.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<literal>db</literal>: The database-based implementation. This implementation requires additional configuration in the <literal>jbpm-user.info.properties</literal> file.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<literal>props</literal>: A simple property-based implementation. This implementation requires an additional properties file that contains all user information.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<literal>custom</literal>: A custom implementation. You must provide the fully-qualified class name of the implementation in the <literal>org.jbpm.ht.custom.userinfo</literal> system property.
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
					</itemizedlist>
					<simpara>
						Typically, set the system properties in the startup configuration of the application server or JVM. You can also set the properties in the code before using the services. For example, you can provide a custom <literal>@Startup</literal> bean that configures these system properties.
					</simpara>
				</section>
				<section xml:id="ejb-interfaces-local-ref_process-engine">
					<title>Local EJB interfaces</title>
					<simpara>
						The following local EJB service interfaces extend core services:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<literal>org.jbpm.services.ejb.api.DefinitionServiceEJBLocal</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>org.jbpm.services.ejb.api.DeploymentServiceEJBLocal</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>org.jbpm.services.ejb.api.ProcessServiceEJBLocal</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>org.jbpm.services.ejb.api.RuntimeDataServiceEJBLocal</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>org.jbpm.services.ejb.api.UserTaskServiceEJBLocal</literal>
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						You must use these interfaces as injection points and annotate them with <literal>@EJB</literal>:
					</simpara>
					<formalpara>
						<title>Using local EJB service interfaces</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">@EJB
private DefinitionServiceEJBLocal bpmn2Service;

@EJB
private DeploymentServiceEJBLocal deploymentService;

@EJB
private ProcessServiceEJBLocal processService;

@EJB
private RuntimeDataServiceEJBLocal runtimeDataService;</programlisting>
						</para>
					</formalpara>
					<simpara>
						After injecting these interfaces, invoke operations on them in the same way as on core modules. No restrictions exist for using local interfaces.
					</simpara>
				</section>
				<section xml:id="ejb-interfaces-remote-ref_process-engine">
					<title>Remote EJB interfaces</title>
					<simpara>
						The following dedicated remote EJB interfaces extend core services:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<literal>org.jbpm.services.ejb.api.DefinitionServiceEJBRemote</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>org.jbpm.services.ejb.api.DeploymentServiceEJBRemote</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>org.jbpm.services.ejb.api.ProcessServiceEJBRemote</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>org.jbpm.services.ejb.api.RuntimeDataServiceEJBRemote</literal>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>org.jbpm.services.ejb.api.UserTaskServiceEJBRemote</literal>
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						You can use these interfaces in the same way as local interfaces, with the exception of handling custom types.
					</simpara>
					<simpara>
						You can define custom types in two ways. <emphasis>Globally</emphasis> defined types are available on application classpath and included in the enterprise application. If you define a type <emphasis>locally to the deployment unit</emphasis>, the type is declared in a project dependency (for example, in a KJAR file) and is resolved at deployment time.
					</simpara>
					<simpara>
						Globally-available types do not require any special handling. The EJB container automatically marshalls the data when handling remote requests. However, local custom types are not visible to the EJB container by default.
					</simpara>
					<simpara>
						The process engine EJB services provide a mechanism to work with custom types. They provide the following two additional types:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<literal>org.jbpm.services.ejb.remote.api.RemoteObject</literal>: A serializable wrapper class for single-value parameters
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>org.jbpm.services.ejb.remote.api.RemoteMap</literal>: A dedicated <literal>java.util.Map</literal> implementation to simplify remote invocation of service methods that accept custom object input. The internal implementation of the map holds content that is already serialized, in order to avoid additional serialization at sending time.
							</simpara>
							<simpara>
								This implementation does not include some of the methods of <literal>java.util.Map</literal> that are usually not used when sending data.
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						These special objects perform eager serialization to bytes using an <literal>ObjectInputStream</literal> object. They remove the need for serialization of data in the EJB client/container. Because no serialization is needed, it is not necessary to share the custom data model with the EJB container.
					</simpara>
					<simpara>
						The following example code works with local types and remote EJB services:
					</simpara>
					<formalpara>
						<title>Using local types with remote EJB services</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">// Start a process with custom types via remote EJB

Map&lt;String, Object&gt; parameters = new RemoteMap();
Person person = new org.jbpm.test.Person("john", 25, true);
parameters.put("person", person);

Long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), "custom-data-project.work-on-custom-data", parameters);

// Fetch task data and complete a task with custom types via remote EJB
Map&lt;String, Object&gt; data = userTaskService.getTaskInputContentByTaskId(taskId);

Person fromTaskPerson = data.get("_person");
fromTaskPerson.setName("John Doe");

RemoteMap outcome = new RemoteMap();
outcome.put("person_", fromTaskPerson);

userTaskService.complete(taskId, "john", outcome);</programlisting>
						</para>
					</formalpara>
					<simpara>
						In a similar way, you can use the <literal>RemoteObject</literal> class to send an event to a process instance:
					</simpara>
					
<programlisting language="java" linenumbering="unnumbered">// Send an event with a custom type via remote EJB
Person person = new org.jbpm.test.Person("john", 25, true);

RemoteObject myObject = new RemoteObject(person);

processService.signalProcessInstance(processInstanceId, "MySignal", myObject);</programlisting>
				</section>
				<section xml:id="ejb-remote-client-con_process-engine">
					<title>Remote EJB client</title>
					<simpara>
						Remote client support is provided by implementation of the <literal>ClientServiceFactory</literal> interface that is a facade for application server specific code:
					</simpara>
					<formalpara>
						<title>Definition of the <literal>ClientServiceFactory</literal> interface</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">/**
 * Generic service factory used for remote lookups that are usually container specific.
 *
 */
public interface ClientServiceFactory {

	/**
	 * Returns unique name of given factory implementation
	 * @return
	 */
	String getName();

	/**
	 * Returns remote view of given service interface from selected application
	 * @param application application identifier on the container
	 * @param serviceInterface remote service interface to be found
	 * @return
	 * @throws NamingException
	 */
	&lt;T&gt; T getService(String application, Class&lt;T&gt; serviceInterface) throws NamingException;
}</programlisting>
						</para>
					</formalpara>
					<simpara>
						You can dynamically register implementations using the <literal>ServiceLoader</literal> mechanism. By default, only one implementation is available in Red Hat JBoss EAP.
					</simpara>
					<simpara>
						Each <literal>ClientServiceFactory</literal> implementation must provide a name. This name is used to register it within the client registry. You can look up implementations by name.
					</simpara>
					<simpara>
						The following code gets the default Red Hat JBoss EAP remote client:
					</simpara>
					<formalpara>
						<title>Getting the default Red Hat JBoss EAP remote client</title>
						<para>
							
<programlisting language="java" linenumbering="unnumbered">// Retrieve a valid client service factory
ClientServiceFactory factory = ServiceFactoryProvider.getProvider("JBoss");

// Set the application variable to the module name
String application = "sample-war-ejb-app";

// Retrieve the required service from the factory
DeploymentServiceEJBRemote deploymentService = factory.getService(application, DeploymentServiceEJBRemote.class);</programlisting>
						</para>
					</formalpara>
					<simpara>
						After retrieving a service you can use its methods.
					</simpara>
					<simpara>
						When working with Red Hat JBoss EAP and the remote client you can add the following Maven dependency to bring in all EJB client libraries:
					</simpara>
					
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
  &lt;groupId&gt;org.jboss.as&lt;/groupId&gt;
  &lt;artifactId&gt;jboss-as-ejb-client-bom&lt;/artifactId&gt;
  &lt;version&gt;7.3.4.Final&lt;/version&gt; &lt;!-- use the valid version for the server you run on --&gt;
  &lt;optional&gt;true&lt;/optional&gt;
  &lt;type&gt;pom&lt;/type&gt;
&lt;/dependency&gt;</programlisting>
				</section>
			</section>
			<section xml:id="integration-osgi-con_process-engine">
				<title>Integration with OSGi</title>
				<simpara>
					All core process engine JAR files and core dependencies are OSGi-enabled. The following additional process engine JAR files are also OSGI-enabled:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							jbpm-flow
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							jbpm-flow-builder
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							jbpm-bpmn2
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					OSGi-enabled JAR files contain <literal>MANIFEST.MF</literal> files in the <literal>META-INF</literal> directory. These files contain data such as the required dependencies. You can add such JAR files to an OSGi environment.
				</simpara>
				<simpara>
					For additional information about the OSGi infrastructure, see the <link xlink:href="https://www.osgi.org/developer/where-to-start/">OSGi documentation</link>.
				</simpara>
				<note>
					<simpara>
						Support for integration with the OSGi framework is deprecated. It does not receive any new enhancements or features and will be removed in a future release.
					</simpara>
				</note>
			</section>
		</chapter>
	</part>
	<appendix xml:id="versioning-information">
		<title>Versioning information</title>
		<simpara>
			Documentation last updated on Monday, January 18, 2021.
		</simpara>
	</appendix>
	<appendix xml:id="author-group">
		<title>Contact information</title>
		<simpara>
			Red Hat Process Automation Manager documentation team: <link xlink:href="mailto:brms-docs@redhat.com">brms-docs@redhat.com</link>
		</simpara>
	</appendix>
</book>

